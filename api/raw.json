{"majorversion": 3, "filemap": {"autocomplete-highlighters.js": {"classlist": ["AutoCompleteHighlighters"], "name": "autocomplete-highlighters.js", "module": "autocomplete"}, "io-queue.js": {"classlist": [], "name": "io-queue.js", "module": "io"}, "querystring-stringify.js": {"classlist": [], "name": "querystring-stringify.js", "module": "querystring"}, "PluginHost.js": {"classlist": ["Plugin.Host"], "name": "PluginHost.js", "module": "pluginhost"}, "paginator-plugin.js": {"classlist": ["Plugin.ScrollViewPaginator"], "name": "paginator-plugin.js", "module": "scrollview-paginator"}, "stringify.js": {"classlist": [], "name": "stringify.js", "module": "json"}, "node.js": {"classlist": ["Node"], "name": "node.js", "module": "node"}, "dom-region.js": {"classlist": [], "name": "dom-region.js", "module": "dom"}, "constrain.js": {"classlist": ["Plugin.DDConstrained"], "name": "constrain.js", "module": "dd"}, "dd-plugin.js": {"classlist": ["Plugin.Drag"], "name": "dd-plugin.js", "module": "dd"}, "value-range.js": {"classlist": ["SliderValueRange"], "name": "value-range.js", "module": "slider"}, "lists.js": {"classlist": ["Plugin.EditorLists"], "name": "lists.js", "module": "editor"}, "selector-native.js": {"classlist": ["Selector"], "name": "selector-native.js", "module": "dom"}, "BaseBuild.js": {"classlist": [], "name": "BaseBuild.js", "module": "base"}, "invoke.js": {"classlist": ["YUI~array~invoke"], "name": "invoke.js", "module": "collection"}, "event-facade-dom-ie.js": {"classlist": [], "name": "event-facade-dom-ie.js", "module": "event"}, "yui-object.js": {"classlist": ["Object"], "name": "yui-object.js", "module": "yui"}, "text-data-accentfold.js": {"classlist": ["Text.Data.AccentFold"], "name": "text-data-accentfold.js", "module": "text"}, "yui-init.js": {"classlist": [], "name": "yui-init.js", "module": "yui"}, "datatype-xml-format.js": {"classlist": ["DataType.XML"], "name": "datatype-xml-format.js", "module": "datatype"}, "Widget-PositionAlign.js": {"classlist": ["WidgetPositionAlign"], "name": "Widget-PositionAlign.js", "module": "widget-position-align"}, "dom.js": {"classlist": ["DOM"], "name": "dom.js", "module": "dom"}, "text-accentfold.js": {"classlist": ["Text.AccentFold"], "name": "text-accentfold.js", "module": "text"}, "dom-style.js": {"classlist": [], "name": "dom-style.js", "module": "dom"}, "rollup.js": {"classlist": [], "name": "rollup.js", "module": "loader"}, "mouseentermouseleave.js": {"classlist": [], "name": "mouseentermouseleave.js", "module": "event"}, "datatype-date-format.js": {"classlist": ["DataType.Date"], "name": "datatype-date-format.js", "module": "datatype"}, "scrollbars-plugin.js": {"classlist": ["Plugin.ScrollViewScrollbars"], "name": "scrollbars-plugin.js", "module": "scrollview-paginator"}, "cache-offline.js": {"classlist": ["CacheOffline"], "name": "cache-offline.js", "module": "cache"}, "drag.js": {"classlist": ["DD.Drag"], "name": "drag.js", "module": "dd"}, "imageloader.js": {"classlist": ["ImgLoadGroup", "ImgLoadImgObj"], "name": "imageloader.js", "module": "imageloader"}, "swfdetect.js": {"classlist": [], "name": "swfdetect.js", "module": "swfdetect"}, "autocomplete-base.js": {"classlist": ["AutoCompleteBase"], "name": "autocomplete-base.js", "module": "autocomplete"}, "event-ready.js": {"classlist": [], "name": "event-ready.js", "module": "event"}, "yui-core.js": {"classlist": [], "name": "yui-core.js", "module": "yui"}, "selector-css3.js": {"classlist": [], "name": "selector-css3.js", "module": "dom"}, "anim-node-plugin.js": {"classlist": ["Plugin.NodeFX"], "name": "anim-node-plugin.js", "module": "anim"}, "node-style.js": {"classlist": [], "name": "node-style.js", "module": "node"}, "event-simulate.js": {"classlist": [], "name": "event-simulate.js", "module": "event-simulate"}, "dataschema-text.js": {"classlist": ["DataSchema.Text"], "name": "dataschema-text.js", "module": "dataschema"}, "Base.js": {"classlist": ["Base"], "name": "Base.js", "module": "base"}, "cache-base.js": {"classlist": ["Cache"], "name": "cache-base.js", "module": "cache"}, "ddm-drop.js": {"classlist": [], "name": "ddm-drop.js", "module": "dd"}, "io-xdr.js": {"classlist": [], "name": "io-xdr.js", "module": "io"}, "PluginHostConfig.js": {"classlist": [], "name": "PluginHostConfig.js", "module": "pluginhost-base"}, "loader.js": {"classlist": ["Loader"], "name": "loader.js", "module": "loader"}, "tabview-plugin.js": {"classlist": [], "name": "tabview-plugin.js", "module": "tabview"}, "datasource-polling.js": {"classlist": ["Pollable"], "name": "datasource-polling.js", "module": "datasource"}, "clickable-rail.js": {"classlist": ["ClickableRail"], "name": "clickable-rail.js", "module": "slider"}, "highlight-accentfold.js": {"classlist": ["Highlight"], "name": "highlight-accentfold.js", "module": "highlight"}, "datasource-io.js": {"classlist": ["DataSource.IO"], "name": "datasource-io.js", "module": "datasource"}, "Profiler.js": {"classlist": ["Profiler"], "name": "Profiler.js", "module": "profiler"}, "load-tests.js": {"classlist": [], "name": "load-tests.js", "module": "yui"}, "editor-br.js": {"classlist": ["Plugin.EditorBR"], "name": "editor-br.js", "module": "editor"}, "Widget-Parent.js": {"classlist": ["WidgetParent"], "name": "Widget-Parent.js", "module": "widget-parent"}, "event-facade.js": {"classlist": ["EventFacade"], "name": "event-facade.js", "module": "event-custom"}, "dataschema-xml.js": {"classlist": ["DataSchema.XML"], "name": "dataschema-xml.js", "module": "dataschema"}, "event.js": {"classlist": [], "name": "event.js", "module": "event-custom"}, "tab.js": {"name": "tab.js", "classlist": [], "module": "tabview", "guessedname": "Lang", "guessedtype": "property", "property": "Lang"}, "io-base.js": {"classlist": ["io"], "name": "io-base.js", "module": "io"}, "intl-base.js": {"classlist": ["Intl"], "name": "intl-base.js", "module": "yui"}, "align-plugin.js": {"classlist": ["Plugin.Align"], "name": "align-plugin.js", "module": "align-plugin"}, "substitute.js": {"classlist": ["YUI~substitute"], "name": "substitute.js", "module": "substitute"}, "key.js": {"classlist": [], "name": "key.js", "module": "event"}, "scrollview-base.js": {"classlist": ["ScrollView"], "name": "scrollview-base.js", "module": "scrollview-scrollbars"}, "selector-css2.js": {"classlist": [], "name": "selector-css2.js", "module": "dom"}, "datasource-textschema.js": {"classlist": ["DataSourceTextSchema"], "name": "datasource-textschema.js", "module": "datasource"}, "dom-deprecated.js": {"classlist": [], "name": "dom-deprecated.js", "module": "dom"}, "ddm-base.js": {"classlist": ["DD.DDM"], "name": "ddm-base.js", "module": "dd"}, "YUITest.js": {"classlist": [], "name": "YUITest.js", "module": "test"}, "WidgetBaseIE.js": {"name": "WidgetBaseIE.js", "classlist": [], "module": "widget", "guessedname": "BOUNDING_BOX", "guessedtype": "property", "property": "BOUNDING_BOX"}, "mousewheel.js": {"classlist": [], "name": "mousewheel.js", "module": "event"}, "arraylist.js": {"classlist": ["ArrayList"], "name": "arraylist.js", "module": "collection"}, "node-class.js": {"classlist": [], "name": "node-class.js", "module": "align-plugin"}, "datatype-date-locale.js": {"classlist": ["DataType.Date.Locale"], "name": "datatype-date-locale.js", "module": "datatype"}, "dom-screen.js": {"classlist": [], "name": "dom-screen.js", "module": "dom"}, "event-ready-base-ie.js": {"classlist": [], "name": "event-ready-base-ie.js", "module": "event"}, "node-menunav.js": {"classlist": ["plugin.NodeMenuNav"], "name": "node-menunav.js", "module": "node-menunav"}, "event-valuechange.js": {"classlist": ["ValueChange"], "name": "event-valuechange.js", "module": "event-valuechange"}, "BasePluginHost.js": {"classlist": [], "name": "BasePluginHost.js", "module": "base"}, "available.js": {"classlist": [], "name": "available.js", "module": "event"}, "node-pluginhost.js": {"classlist": [], "name": "node-pluginhost.js", "module": "node"}, "nodelist.js": {"classlist": ["NodeList"], "name": "nodelist.js", "module": "node"}, "transition-native.js": {"classlist": ["Transition"], "name": "transition-native.js", "module": "transition"}, "resize-base.js": {"classlist": ["Resize"], "name": "resize-base.js", "module": "resize"}, "proxy.js": {"classlist": ["Plugin.DDProxy"], "name": "proxy.js", "module": "dd"}, "dom-class.js": {"classlist": [], "name": "dom-class.js", "module": "dom"}, "arraylist-add.js": {"classlist": ["ArrayList~add"], "name": "arraylist-add.js", "module": "collection"}, "queue-promote.js": {"classlist": [], "name": "queue-promote.js", "module": "queue-promote"}, "WidgetSkin.js": {"name": "WidgetSkin.js", "classlist": [], "module": "widget-locale", "guessedname": "BOUNDING_BOX", "guessedtype": "property", "property": "BOUNDING_BOX"}, "Cookie.js": {"classlist": ["Cookie"], "name": "Cookie.js", "module": "cookie"}, "oop.js": {"classlist": ["YUI~oop"], "name": "oop.js", "module": "oop"}, "queue-base.js": {"classlist": ["Queue"], "name": "queue-base.js", "module": "yui"}, "dump.js": {"classlist": ["YUI~dump"], "name": "dump.js", "module": "dump"}, "autocomplete-filters-accentfold.js": {"classlist": ["AutoCompleteFilters"], "name": "autocomplete-filters-accentfold.js", "module": "autocomplete"}, "history-base.js": {"classlist": ["HistoryBase"], "name": "history-base.js", "module": "history"}, "NodeFlick.js": {"classlist": ["Plugin.Flick"], "name": "NodeFlick.js", "module": "node-flick"}, "ArrayAssert.js": {"classlist": ["ArrayAssert"], "name": "ArrayAssert.js", "module": "test"}, "autocomplete-filters.js": {"classlist": ["AutoCompleteFilters"], "name": "autocomplete-filters.js", "module": "autocomplete"}, "TestFormat.js": {"classlist": ["Test.Format"], "name": "TestFormat.js", "module": "test"}, "history.js": {"classlist": ["History", "History.Module"], "name": "history.js", "module": "history-deprecated"}, "Widget-Child.js": {"classlist": ["WidgetChild"], "name": "Widget-Child.js", "module": "widget-child"}, "datasource-arrayschema.js": {"classlist": ["DataSourceArraySchema"], "name": "datasource-arrayschema.js", "module": "datasource"}, "datasource-xmlschema.js": {"classlist": ["DataSourceXMLSchema"], "name": "datasource-xmlschema.js", "module": "datasource"}, "jsonp.js": {"name": "jsonp.js", "classlist": [], "module": "jsonp", "guessedname": "isFunction", "guessedtype": "property", "property": "isFunction"}, "async-queue.js": {"classlist": ["AsyncQueue"], "name": "async-queue.js", "module": "async-queue"}, "dataschema-base.js": {"classlist": ["DataSchema.Base"], "name": "dataschema-base.js", "module": "dataschema"}, "WidgetAnim.js": {"classlist": ["Plugin.WidgetAnim"], "name": "WidgetAnim.js", "module": "widget-anim"}, "anim.js": {"classlist": ["Anim"], "name": "anim.js", "module": "anim"}, "history-hash.js": {"classlist": ["HistoryHash"], "name": "history-hash.js", "module": "history"}, "color.js": {"classlist": [], "name": "color.js", "module": "dom"}, "dom-style-ie.js": {"classlist": [], "name": "dom-style-ie.js", "module": "dom"}, "features.js": {"name": "features.js", "classlist": [], "module": "yui", "guessedname": "feature_tests", "guessedtype": "property", "property": "feature_tests"}, "Widget-Stack.js": {"classlist": ["WidgetStack"], "name": "Widget-Stack.js", "module": "widget-stack"}, "console-filters.js": {"classlist": ["Plugin.ConsoleFilters"], "name": "console-filters.js", "module": "console-filters"}, "node-screen.js": {"classlist": [], "name": "node-screen.js", "module": "node"}, "Flick.js": {"classlist": [], "name": "Flick.js", "module": "event-gestures"}, "synthetic.js": {"classlist": ["SyntheticEvent.Notifier", "SyntheticEvent"], "name": "synthetic.js", "module": "event"}, "nodelist-array.js": {"name": "nodelist-array.js", "classlist": [], "module": "node", "guessedname": "Y_NodeList", "guessedtype": "property", "property": "Y_NodeList"}, "slider-base.js": {"classlist": ["SliderBase"], "name": "slider-base.js", "module": "slider"}, "sortable.js": {"classlist": ["Plugin.Sortable"], "name": "sortable.js", "module": "sortable"}, "array-extras.js": {"classlist": ["YUI~array~extras"], "name": "array-extras.js", "module": "collection"}, "_module.js": {"classlist": [], "name": "_module.js", "module": "yui"}, "io-form.js": {"classlist": [], "name": "io-form.js", "module": "io"}, "escape.js": {"classlist": ["Escape"], "name": "escape.js", "module": "escape"}, "event-facade-dom-touch.js": {"classlist": [], "name": "event-facade-dom-touch.js", "module": "event"}, "querystring-stringify-simple.js": {"classlist": [], "name": "querystring-stringify-simple.js", "module": "querystring"}, "frame.js": {"classlist": ["Frame"], "name": "frame.js", "module": "editor"}, "datatype-number-parse.js": {"classlist": [], "name": "datatype-number-parse.js", "module": "datatype"}, "tabview-base.js": {"name": "tabview-base.js", "classlist": [], "module": "tabview", "guessedname": "getClassName", "guessedtype": "property", "property": "getClassName"}, "jsonp-url.js": {"name": "jsonp-url.js", "classlist": [], "module": "jsonp", "guessedname": "JSONPRequest", "guessedtype": "property", "property": "JSONPRequest"}, "stylesheet.js": {"classlist": ["StyleSheet"], "name": "stylesheet.js", "module": "stylesheet"}, "Overlay.js": {"classlist": ["Overlay"], "name": "Overlay.js", "module": "overlay"}, "yui.js": {"classlist": ["YUI", "config"], "name": "yui.js", "module": "yui"}, "delegate.js": {"classlist": [], "name": "delegate.js", "module": "event"}, "anim-easing.js": {"classlist": ["Easing"], "name": "anim-easing.js", "module": "anim"}, "scrollview.js": {"classlist": [], "name": "scrollview.js", "module": "scrollview-base"}, "Widget-PositionConstrain.js": {"classlist": ["WidgetPositionConstrain"], "name": "Widget-PositionConstrain.js", "module": "widget-position-constrain"}, "Widget-Position.js": {"classlist": ["WidgetPosition"], "name": "Widget-Position.js", "module": "widget-position"}, "classnamemanager.js": {"classlist": ["ClassNameManager"], "name": "classnamemanager.js", "module": "classnamemanager"}, "yui-base.js": {"classlist": [], "name": "yui-base.js", "module": "yui"}, "shim-plugin.js": {"classlist": ["Plugin.Shim"], "name": "shim-plugin.js", "module": "node"}, "io-upload-iframe.js": {"classlist": [], "name": "io-upload-iframe.js", "module": "io"}, "tabview.js": {"classlist": ["TabView"], "name": "tabview.js", "module": "tabview"}, "autocomplete-list-keys.js": {"classlist": [], "name": "autocomplete-list-keys.js", "module": "autocomplete"}, "history-html5.js": {"classlist": ["HistoryHTML5"], "name": "history-html5.js", "module": "history"}, "node-load.js": {"name": "node-load.js", "classlist": [], "module": "node", "guessedname": "_ioComplete", "guessedtype": "function", "method": "_ioComplete"}, "plugin.js": {"classlist": ["Plugin.Base"], "name": "plugin.js", "module": "plugin"}, "dom-size.js": {"classlist": [], "name": "dom-size.js", "module": "dom"}, "node-imports.js": {"classlist": [], "name": "node-imports.js", "module": "node"}, "yui3.js": {"classlist": [], "name": "yui3.js", "module": "loader"}, "datasource-local.js": {"classlist": ["DataSource.Local"], "name": "datasource-local.js", "module": "datasource"}, "event-facade-dom.js": {"classlist": ["DOMEventFacade"], "name": "event-facade-dom.js", "module": "event-touch"}, "Attribute.js": {"classlist": ["Attribute"], "name": "Attribute.js", "module": "attribute"}, "TestSuite.js": {"classlist": ["Test.Suite"], "name": "TestSuite.js", "module": "test"}, "resize-constrain.js": {"name": "resize-constrain.js", "classlist": [], "module": "resize", "guessedname": "Lang", "guessedtype": "property", "property": "Lang"}, "yui-later.js": {"classlist": [], "name": "yui-later.js", "module": "yui"}, "focusblur.js": {"classlist": [], "name": "focusblur.js", "module": "event"}, "sortable-scroll.js": {"classlist": ["Plugin.SortScroll"], "name": "sortable-scroll.js", "module": "sortable"}, "exec-command.js": {"classlist": ["Plugin.ExecCommand"], "name": "exec-command.js", "module": "editor"}, "meta.js": {"classlist": [], "name": "meta.js", "module": "loader"}, "CoverageFormat.js": {"classlist": ["Coverage.Format"], "name": "CoverageFormat.js", "module": "test"}, "ddm.js": {"classlist": [], "name": "ddm.js", "module": "dd"}, "WidgetUIEvents.js": {"name": "WidgetUIEvents.js", "classlist": [], "module": "widget-locale", "guessedname": "UI_EVENT_REGEX", "guessedtype": "property", "property": "UI_EVENT_REGEX"}, "anim-scroll.js": {"classlist": [], "name": "anim-scroll.js", "module": "anim"}, "TestCase.js": {"classlist": ["Test.Case", "Test.Wait"], "name": "TestCase.js", "module": "test"}, "node-event-delegate.js": {"classlist": [], "name": "node-event-delegate.js", "module": "align-plugin"}, "anim-color.js": {"classlist": [], "name": "anim-color.js", "module": "anim"}, "event-target.js": {"classlist": ["EventTarget"], "name": "event-target.js", "module": "event-custom"}, "selection.js": {"classlist": ["Selection"], "name": "selection.js", "module": "editor"}, "yui-lang.js": {"classlist": ["Lang"], "name": "yui-lang.js", "module": "yui"}, "anim-curve.js": {"classlist": [], "name": "anim-curve.js", "module": "anim"}, "event-ready-base.js": {"name": "event-ready-base.js", "classlist": [], "module": "event", "guessedname": "GLOBAL_ENV", "guessedtype": "property", "property": "GLOBAL_ENV"}, "datasource-function.js": {"classlist": ["DataSource.Function"], "name": "datasource-function.js", "module": "datasource"}, "editor-base.js": {"classlist": ["EditorBase"], "name": "editor-base.js", "module": "editor"}, "rls.js": {"classlist": [], "name": "rls.js", "module": "yui"}, "node-deprecated.js": {"name": "node-deprecated.js", "classlist": [], "module": "align-plugin", "guessedname": "Y_Node", "guessedtype": "property", "property": "Y_Node"}, "TestRunner.js": {"classlist": ["Test.Runner"], "name": "TestRunner.js", "module": "test"}, "dataschema-array.js": {"classlist": ["DataSchema.Array"], "name": "dataschema-array.js", "module": "dataschema"}, "editor-bidi.js": {"classlist": ["Plugin.EditorBidi"], "name": "editor-bidi.js", "module": "editor"}, "resize-proxy.js": {"name": "resize-proxy.js", "classlist": [], "module": "resize", "guessedname": "ACTIVE_HANDLE_NODE", "guessedtype": "property", "property": "ACTIVE_HANDLE_NODE"}, "ScrollViewBaseIE.js": {"classlist": [], "name": "ScrollViewBaseIE.js", "module": "scrollview-paginator"}, "console.js": {"classlist": ["Console"], "name": "console.js", "module": "console"}, "range-slider.js": {"classlist": ["Slider"], "name": "range-slider.js", "module": "slider"}, "createlink-base.js": {"classlist": ["Plugin.CreateLinkBase"], "name": "createlink-base.js", "module": "editor"}, "TestReporter.js": {"classlist": ["Test.Reporter"], "name": "TestReporter.js", "module": "test"}, "WidgetLocale.js": {"classlist": [], "name": "WidgetLocale.js", "module": "widget"}, "Assert.js": {"classlist": ["Assert", "Assert.Error", "Assert.ComparisonFailure", "Assert.UnexpectedValue", "Assert.ShouldFail", "Assert.ShouldError", "Assert.UnexpectedError"], "name": "Assert.js", "module": "test"}, "get.js": {"classlist": ["Get"], "name": "get.js", "module": "yui"}, "datatype-number-format.js": {"classlist": ["DataType.Number"], "name": "datatype-number-format.js", "module": "datatype"}, "Widget-StdMod.js": {"classlist": ["WidgetStdMod"], "name": "Widget-StdMod.js", "module": "widget-stdmod"}, "datatype-xml-parse.js": {"classlist": [], "name": "datatype-xml-parse.js", "module": "datatype"}, "editor-tab.js": {"classlist": ["Plugin.EditorTab"], "name": "editor-tab.js", "module": "editor"}, "uploader.js": {"classlist": ["Uploader"], "name": "uploader.js", "module": "uploader"}, "text-data-wordbreak.js": {"classlist": ["Text.Data.WordBreak"], "name": "text-data-wordbreak.js", "module": "text"}, "datasource-jsonschema.js": {"classlist": ["DataSourceJSONSchema"], "name": "datasource-jsonschema.js", "module": "datasource"}, "node-focusmanager.js": {"classlist": ["plugin.NodeFocusManager"], "name": "node-focusmanager.js", "module": "node-focusmanager"}, "yui-ua.js": {"classlist": ["UA"], "name": "yui-ua.js", "module": "yui"}, "WidgetHTMLParser.js": {"classlist": [], "name": "WidgetHTMLParser.js", "module": "widget"}, "yui-log.js": {"classlist": [], "name": "yui-log.js", "module": "yui"}, "node-event-simulate.js": {"classlist": [], "name": "node-event-simulate.js", "module": "node"}, "Mock.js": {"classlist": ["Mock"], "name": "Mock.js", "module": "test"}, "Intl.js": {"name": "Intl.js", "classlist": [], "module": "intl", "guessedname": "_mods", "guessedtype": "property", "property": "_mods"}, "datatype-date-parse.js": {"classlist": [], "name": "datatype-date-parse.js", "module": "datatype"}, "node-region.js": {"classlist": [], "name": "node-region.js", "module": "node"}, "parse.js": {"classlist": ["JSON"], "name": "parse.js", "module": "json"}, "text-wordbreak.js": {"classlist": ["Text.WordBreak"], "name": "text-wordbreak.js", "module": "text"}, "autocomplete-highlighters-accentfold.js": {"classlist": ["AutoCompleteHighlighters"], "name": "autocomplete-highlighters-accentfold.js", "module": "autocomplete"}, "autocomplete-plugin.js": {"classlist": ["Plugin.AutoComplete"], "name": "autocomplete-plugin.js", "module": "autocomplete"}, "swf.js": {"classlist": ["SWF"], "name": "swf.js", "module": "swf"}, "resize-window.js": {"classlist": [], "name": "resize-window.js", "module": "event"}, "history-hash-ie.js": {"classlist": [], "name": "history-hash-ie.js", "module": "history"}, "State.js": {"classlist": ["State"], "name": "State.js", "module": "attribute"}, "event-do.js": {"classlist": ["Do", "Do.Method", "Do.AlterArgs", "Do.AlterReturn", "Do.Halt", "Do.Prevent", "Do.Error"], "name": "event-do.js", "module": "event-custom"}, "cache-plugin.js": {"classlist": ["Plugin.Cache"], "name": "cache-plugin.js", "module": "cache"}, "highlight-base.js": {"classlist": ["Highlight"], "name": "highlight-base.js", "module": "highlight"}, "datasource-cache.js": {"classlist": ["DataSourceCacheExtension", "DataSourceCache"], "name": "datasource-cache.js", "module": "datasource"}, "dd-drop-plugin.js": {"classlist": ["Plugin.Drop"], "name": "dd-drop-plugin.js", "module": "dd"}, "event-custom.js": {"classlist": ["EventHandle", "CustomEvent", "Subscriber"], "name": "event-custom.js", "module": "event-custom"}, "drag-gestures.js": {"classlist": [], "name": "drag-gestures.js", "module": "dd"}, "dataschema-json.js": {"classlist": ["DataSchema.JSON"], "name": "dataschema-json.js", "module": "dataschema"}, "transition-timer.js": {"classlist": [], "name": "transition-timer.js", "module": "transition"}, "node-size.js": {"classlist": [], "name": "node-size.js", "module": "node"}, "yql.js": {"classlist": ["YQLRequest", "YQL"], "name": "yql.js", "module": "yql"}, "editor-para.js": {"classlist": ["Plugin.EditorPara"], "name": "editor-para.js", "module": "editor"}, "node-event-html5.js": {"classlist": [], "name": "node-event-html5.js", "module": "node"}, "yui-array.js": {"classlist": ["Array"], "name": "yui-array.js", "module": "yui"}, "node-ie.js": {"classlist": [], "name": "node-ie.js", "module": "node"}, "scroll.js": {"classlist": ["DD.Scroll", "Plugin.DDWindowScroll", "Plugin.DDNodeScroll"], "name": "scroll.js", "module": "dd"}, "autocomplete-list.js": {"classlist": ["AutoCompleteList", "AutoComplete"], "name": "autocomplete-list.js", "module": "autocomplete"}, "anim-xy.js": {"classlist": [], "name": "anim-xy.js", "module": "anim"}, "DateAssert.js": {"classlist": ["DateAssert"], "name": "DateAssert.js", "module": "test"}, "querystring-parse.js": {"classlist": ["QueryString"], "name": "querystring-parse.js", "module": "querystring"}, "querystring-parse-simple.js": {"classlist": [], "name": "querystring-parse-simple.js", "module": "querystring"}, "yui-throttle.js": {"classlist": [], "name": "yui-throttle.js", "module": "yui"}, "arraylist-filter.js": {"classlist": ["ArrayList~filter"], "name": "arraylist-filter.js", "module": "collection"}, "Move.js": {"classlist": [], "name": "Move.js", "module": "event-gestures"}, "ObjectAssert.js": {"classlist": ["Mock.Value.ObjectAssert"], "name": "ObjectAssert.js", "module": "test"}, "ComplexAttribute.js": {"classlist": [], "name": "ComplexAttribute.js", "module": "attribute"}, "event-dom.js": {"classlist": ["Event"], "name": "event-dom.js", "module": "event"}, "datasource-get.js": {"classlist": ["DataSource.Get"], "name": "datasource-get.js", "module": "datasource"}, "TestManager.js": {"classlist": ["Test.Manager"], "name": "TestManager.js", "module": "test"}, "drop.js": {"classlist": ["DD.Drop"], "name": "drop.js", "module": "dd"}, "Widget.js": {"classlist": ["Widget"], "name": "Widget.js", "module": "widget"}}, "modules": {"console-filters": {"description": "<p>Provides Plugin.ConsoleFilters plugin class.</p>\n<p>This plugin adds the ability to control which Console entries display by filtering on category and source. Two groups of checkboxes are added to the Console footer, one for categories and the other for sources.  Only those messages that match a checked category or source are displayed.</p>", "submodules": [], "classlist": ["Plugin.ConsoleFilters"], "filelist": ["console-filters.js"], "subdata": {}, "name": "console-filters"}, "transition": {"description": "Provides the transition method for Node.\nTransition has no API of its own, but adds the transition method to Node.", "submodules": [], "classlist": ["Transition"], "filelist": ["transition-native.js", "transition-timer.js"], "subdata": {}, "guessedname": "TRANSITION", "guessedtype": "property", "requires": "node", "name": "transition"}, "widget-position-constrain": {"description": "Provides constrained xy positioning support for Widgets, through an extension.\nIt builds on top of the widget-position module, to provide constrained positioning support.", "submodules": [], "classlist": ["WidgetPositionConstrain"], "filelist": ["Widget-PositionConstrain.js"], "subdata": {}, "guessedname": "CONSTRAIN", "guessedtype": "property", "name": "widget-position-constrain"}, "dump": {"description": "Returns a simple string representation of the object or array.\nOther types of objects will be returned unprocessed.  Arrays\nare expected to be indexed.  Use object notation for\nassociative arrays.\nIf included, the dump method is added to the YUI instance.", "submodules": [], "classlist": ["YUI~dump"], "filelist": ["dump.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "dump"}, "attribute": {"description": "The attribute module provides an augmentable Attribute implementation, which \nadds configurable attributes and attribute change events to the class being \naugmented. It also provides a State class, which is used internally by Attribute,\nbut can also be used independently to provide a name/property/value data structure to\nstore state.", "submodules": ["attribute-base", "attribute-complex"], "classlist": ["Attribute", "State"], "filelist": ["Attribute.js", "ComplexAttribute.js", "State.js"], "subdata": {"attribute-base": {"name": "Attribute", "description": "The attribute-base submodule provides core attribute handling support, with everything\naside from complex attribute handling in the provider's constructor."}, "attribute-complex": {"name": "State", "description": "Adds support for attribute providers to handle complex attributes in the constructor"}}, "guessedname": "O", "guessedtype": "property", "name": "attribute"}, "widget-stack": {"description": "Provides stackable (z-index) support for Widgets through an extension.", "submodules": [], "classlist": ["WidgetStack"], "filelist": ["Widget-Stack.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "widget-stack"}, "align-plugin": {"description": "Provides advanced positioning support for Node via a Plugin\nfor centering and alignment.", "submodules": [], "classlist": ["Plugin.Align"], "filelist": ["align-plugin.js", "node-class.js", "node-deprecated.js", "node-event-delegate.js"], "subdata": {}, "guessedname": "OFFSET_WIDTH", "guessedtype": "property", "name": "align-plugin"}, "shim-plugin": {"description": "Provides shimming support for Node via a Plugin.\nThis fixes SELECT bleedthrough for IE6 & Mac scrollbars", "submodules": [], "classlist": ["Plugin.Shim"], "filelist": [], "subdata": {}, "name": "shim-plugin"}, "loader": {"name": "loader", "submodules": ["loader-base", "rollup", "yui3"], "classlist": ["Loader"], "filelist": ["loader.js", "meta.js", "rollup.js", "yui3.js"], "subdata": {"rollup": {"name": "Loader", "description": "Optional automatic rollup logic for reducing http connections\nwhen not using a combo service."}, "yui3": {"name": "Loader", "description": "YUI 3 module metadata"}, "loader-base": {"name": "Loader", "description": "The YUI loader core"}}, "guessedname": "NOT_FOUND", "guessedtype": "property", "description": "Loader dynamically loads script and css files.  It includes the dependency\ninfo for the version of the library in use, and will automatically pull in\ndependencies for the modules requested.  It supports rollup files and will\nautomatically use these when appropriate in order to minimize the number of\nhttp connections required to load all of the dependencies.  It can load the\nfiles from the Yahoo! CDN, and it can utilize the combo service provided on\nthis network to reduce the number of http connections required to download\nYUI files."}, "widget-child": {"description": "Extension enabling a Widget to be a child of another Widget.", "submodules": [], "classlist": ["WidgetChild"], "filelist": ["Widget-Child.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "widget-child"}, "widget-stdmod": {"description": "Provides standard module support for Widgets through an extension.", "submodules": [], "classlist": ["WidgetStdMod"], "filelist": ["Widget-StdMod.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "widget-stdmod"}, "async-queue": {"description": "<p>AsyncQueue allows you create a chain of function callbacks executed\nvia setTimeout (or synchronously) that are guaranteed to run in order.\nItems in the queue can be promoted or removed.  Start or resume the\nexecution chain with run().  pause() to temporarily delay execution, or\nstop() to halt and clear the queue.</p>", "submodules": [], "classlist": ["AsyncQueue"], "filelist": ["async-queue.js"], "subdata": {}, "name": "async-queue"}, "io": {"description": "Base IO functionality. Provides basic XHR transport support.", "submodules": ["io-base", "io-form", "io-queue", "io-upload-iframe", "io-xdr"], "classlist": ["io"], "filelist": ["io-base.js", "io-form.js", "io-queue.js", "io-upload-iframe.js", "io-xdr.js"], "subdata": {"io-xdr": {"name": "io", "description": "Extends the IO base class to provide an alternate, Flash transport, for making\ncross-domain requests."}, "io-form": {"name": "io", "description": "Extends the IO base class to enable HTML form data serialization, when specified\nin the transaction's configuration object."}, "io-base": {"name": "io", "description": "Base IO functionality. Provides basic XHR transport support."}, "io-queue": {"name": "io", "description": "Extends the IO base class to implement Queue for synchronous\ntransaction processing."}, "io-upload-iframe": {"name": "io", "description": "Extends the IO base class to enable file uploads, with HTML forms,\nusing an iframe as the transport medium."}}, "guessedname": "eUC", "guessedtype": "property", "name": "io"}, "escape": {"description": "Provides utility methods for escaping strings.", "submodules": [], "classlist": ["Escape"], "filelist": ["escape.js"], "subdata": {}, "name": "escape"}, "profiler": {"description": "The YUI JavaScript profiler.", "submodules": [], "classlist": ["Profiler"], "filelist": ["Profiler.js"], "subdata": {}, "requires": "yui", "name": "profiler"}, "event": {"description": "DOM event listener abstraction layer", "submodules": ["event-base", "event-delegate", "event-focus", "event-key", "event-mouseenter", "event-mousewheel", "event-resize", "event-synthetic"], "classlist": ["Event", "DOMEventFacade", "SyntheticEvent.Notifier", "SyntheticEvent"], "filelist": ["available.js", "delegate.js", "event-dom.js", "event-facade-dom-ie.js", "event-facade-dom-touch.js", "event-ready-base-ie.js", "event-ready-base.js", "event-ready.js", "focusblur.js", "key.js", "mouseentermouseleave.js", "mousewheel.js", "resize-window.js", "synthetic.js"], "subdata": {"event-focus": {"name": "YUI", "description": "Adds bubbling and delegation support to DOM events focus and blur."}, "event-synthetic": {"name": "SyntheticEvent", "description": "Define new DOM events that can be subscribed to from Nodes."}, "event-key": {"name": "YUI", "description": "Functionality to listen for one or more specific key combinations."}, "event-base": {"name": "DOMEventFacade", "description": "Custom event engine, DOM event listener abstraction layer, synthetic DOM\nevents."}, "event-resize": {"name": "YUI", "description": "Adds a window resize event that has its behavior normalized to fire at the\nend of the resize rather than constantly during the resize."}, "event-mouseenter": {"name": "YUI", "description": "<p>Adds subscription and delegation support for mouseenter and mouseleave\nevents.  Unlike mouseover and mouseout, these events aren't fired from child\nelements of a subscribed node.</p>\n<p>This avoids receiving three mouseover notifications from a setup like</p>\n<pre><code>div#container > p > a[href]</code></pre>\n<p>where</p>\n<pre><code>Y.one('#container').on('mouseover', callback)</code></pre>\n<p>When the mouse moves over the link, one mouseover event is fired from\n#container, then when the mouse moves over the p, another mouseover event is\nfired and bubbles to #container, causing a second notification, and finally\nwhen the mouse moves over the link, a third mouseover event is fired and\nbubbles to #container for a third notification.</p>\n<p>By contrast, using mouseenter instead of mouseover, the callback would be\nexecuted only once when the mouse moves over #container.</p>"}, "event-delegate": {"name": "YUI", "description": "Adds event delegation support to the library."}, "event-mousewheel": {"name": "YUI", "description": "Adds mousewheel event support"}}, "guessedname": "toArray", "guessedtype": "property", "name": "event"}, "scrollview-base": {"description": "The scrollview-base module provides a basic ScrollView Widget, without scrollbar indicators", "submodules": [], "classlist": ["ScrollView"], "filelist": ["scrollview.js"], "subdata": {}, "guessedname": "getClassName", "guessedtype": "property", "name": "scrollview-base"}, "yui": {"description": "The YUI module contains the components required for building the\nYUI seed file.  This includes the script loading mechanism, a\nsimple queue, and the core utilities for the library.", "submodules": ["yui-base", "get", "yui-later", "yui-log", "yui-throttle"], "classlist": ["Get", "Intl", "Queue", "Array", "Lang", "Object", "UA", "YUI", "config"], "filelist": ["_module.js", "features.js", "get.js", "intl-base.js", "load-tests.js", "queue-base.js", "rls.js", "yui-array.js", "yui-base.js", "yui-core.js", "yui-init.js", "yui-lang.js", "yui-later.js", "yui-log.js", "yui-object.js", "yui-throttle.js", "yui-ua.js", "yui.js"], "subdata": {"yui-later": {"name": "Lang", "description": "Provides a setTimeout/setInterval wrapper"}, "yui-base": {"name": "config", "description": "The YUI module contains the components required for building the YUI seed\nfile.  This includes the script loading mechanism, a simple queue, and\nthe core utilities for the library."}, "yui-throttle": {"name": "Object", "description": "Provides a throttle/limiter for function calls"}, "yui-log": {"name": "YUI", "description": "Provides console log capability and exposes a custom event for\nconsole implementations."}, "get": {"name": "Intl", "description": "Provides a mechanism to fetch remote resources and\ninsert them into a document."}}, "guessedname": "ua", "guessedtype": "property", "name": "yui"}, "scrollview-paginator": {"description": "Provides a plugin, which adds pagination support to ScrollView instances", "submodules": [], "classlist": ["Plugin.ScrollViewPaginator"], "filelist": ["ScrollViewBaseIE.js", "paginator-plugin.js", "scrollbars-plugin.js"], "subdata": {}, "guessedname": "UI", "guessedtype": "property", "name": "scrollview-paginator"}, "event-gestures": {"description": "The gestures module provides gesture events such as \"flick\", which normalize user interactions\nacross touch and mouse or pointer based input devices. This layer can be used by application developers\nto build input device agnostic components which behave the same in response to either touch or mouse based  \ninteraction.\n<p>Documentation for events added by this module can be found in the event document for the <a href=\"YUI.html#events\">YUI</a> global.</p>", "submodules": ["event-flick", "event-move"], "classlist": [], "filelist": ["Flick.js", "Move.js"], "subdata": {"event-move": {"name": "YUI", "description": "Adds lower level support for \"gesturemovestart\", \"gesturemove\" and \"gesturemoveend\" events, which can be used to create drag/drop\ninteractions which work across touch and mouse input devices. They correspond to \"touchstart\", \"touchmove\" and \"touchend\" on a touch input\ndevice, and \"mousedown\", \"mousemove\", \"mouseup\" on a mouse based input device."}, "event-flick": {"name": "", "description": "Adds support for a \"flick\" event, which is fired at the end of a touch or mouse based flick gesture, and provides \nvelocity of the flick, along with distance and time information."}}, "guessedname": "EVENT", "guessedtype": "property", "name": "event-gestures"}, "console": {"description": "Console creates a visualization for messages logged through calls to a YUI\ninstance's <code>Y.log( message, category, source )</code> method.  The\ndebug versions of YUI modules will include logging statements to offer some\ninsight into the steps executed during that module's operation.  Including\nlog statements in your code will cause those messages to also appear in the\nConsole.  Use Console to aid in developing your page or application.\nEntry categories &quot;info&quot;, &quot;warn&quot;, and &quot;error&quot;\nare also referred to as the log level, and entries are filtered against the\nconfigured logLevel.", "submodules": [], "classlist": ["Console"], "filelist": ["console.js"], "subdata": {}, "name": "console"}, "overlay": {"description": "Provides a basic Overlay widget, with Standard Module content support. The Overlay widget\nprovides Page XY positioning support, alignment and centering support along with basic \nstackable support (z-index and shimming).", "submodules": [], "classlist": ["Overlay"], "filelist": ["Overlay.js"], "subdata": {}, "name": "overlay"}, "event-simulate": {"description": "Synthetic DOM events", "submodules": [], "classlist": [], "filelist": ["event-simulate.js"], "subdata": {}, "requires": "event", "name": "event-simulate"}, "cache": {"description": "The Cache utility provides a common configurable interface for components to\ncache and retrieve data from a local JavaScript struct.", "submodules": [], "classlist": ["Cache", "CacheOffline", "Plugin.Cache"], "filelist": ["cache-base.js", "cache-offline.js", "cache-plugin.js"], "subdata": {}, "guessedname": "LANG", "guessedtype": "property", "name": "cache"}, "stylesheet": {"description": "The StyleSheet component is a module for creating and modifying CSS\nstylesheets.", "submodules": [], "classlist": ["StyleSheet"], "filelist": ["stylesheet.js"], "subdata": {}, "guessedname": "d", "guessedtype": "property", "name": "stylesheet"}, "swf": {"description": "The SWF utility is a tool for embedding Flash applications in HTML pages.", "submodules": [], "classlist": ["SWF"], "title": "SWF Utility", "filelist": ["swf.js"], "subdata": {}, "guessedname": "Event", "guessedtype": "property", "requires": "event-custom, node, swfdetect", "name": "swf"}, "pluginhost-base": {"description": "Provides the augmentable PluginHost interface, which can be added to any class.", "submodules": [], "classlist": ["Plugin.Host"], "filelist": ["PluginHostConfig.js"], "subdata": {}, "name": "pluginhost-base"}, "json": {"description": "<p>The JSON module adds support for serializing JavaScript objects into\nJSON strings and parsing JavaScript objects from strings in JSON format.</p>\n<p>The JSON namespace is added to your YUI instance including static methods\nY.JSON.parse(..) and Y.JSON.stringify(..).</p>\n<p>The functionality and method signatures follow the ECMAScript 5\nspecification.  In browsers with native JSON support, the native\nimplementation is used.</p>\n<p>The <code>json</code> module is a rollup of <code>json-parse</code> and\n<code>json-stringify</code>.</p>\n<p>As their names suggest, <code>json-parse</code> adds support for parsing\nJSON data (Y.JSON.parse) and <code>json-stringify</code> for serializing\nJavaScript data into JSON strings (Y.JSON.stringify).  You may choose to\ninclude either of the submodules individually if you don't need the\ncomplementary functionality, or include the rollup for both.</p>", "submodules": ["json-parse", "json-stringify"], "classlist": ["JSON"], "filelist": ["parse.js", "stringify.js"], "subdata": {"json-stringify": {"name": "JSON", "description": "Provides Y.JSON.stringify method for converting objects to JSON strings."}, "json-parse": {"name": "JSON", "description": "Provides Y.JSON.parse method to accept JSON strings and return native\nJavaScript objects."}}, "static": "", "guessedname": "_JSON", "guessedtype": "property", "name": "json"}, "widget-anim": {"description": "Provides a plugin which can be used to animate widget visibility changes.", "submodules": [], "classlist": ["Plugin.WidgetAnim"], "filelist": ["WidgetAnim.js"], "subdata": {}, "guessedname": "BOUNDING_BOX", "guessedtype": "property", "name": "widget-anim"}, "editor": {"description": "Base class for Editor. Handles the business logic of Editor, no GUI involved only utility methods and events.", "submodules": ["createlink-base", "editor-base", "editor-bidi", "editor-br", "editor-para", "editor-tab", "exec-command", "frame", "editor-lists", "selection"], "classlist": ["Plugin.CreateLinkBase", "EditorBase", "Plugin.EditorBidi", "Plugin.EditorBR", "Plugin.EditorPara", "Plugin.EditorTab", "Plugin.ExecCommand", "Frame", "Plugin.EditorLists", "Selection"], "filelist": ["createlink-base.js", "editor-base.js", "editor-bidi.js", "editor-br.js", "editor-para.js", "editor-tab.js", "exec-command.js", "frame.js", "lists.js", "selection.js"], "subdata": {"editor-lists": {"name": "Plugin.EditorLists", "description": "Handles list manipulation inside the Editor. Adds keyboard manipulation and execCommand support. Adds overrides for the <a href=\"Plugin.ExecCommand.html#method_COMMANDS.insertorderedlist\">insertorderedlist</a> and <a href=\"Plugin.ExecCommand.html#method_COMMANDS.insertunorderedlist\">insertunorderedlist</a> execCommands."}, "editor-br": {"name": "Plugin.EditorBR", "description": "Plugin for Editor to normalize BR's."}, "editor-tab": {"name": "Plugin.EditorTab", "description": "Handles tab and shift-tab indent/outdent support."}, "editor-base": {"name": "EditorBase", "description": "Base class for Editor. Handles the business logic of Editor, no GUI involved only utility methods and events."}, "frame": {"name": "Frame", "description": "Creates a wrapper around an iframe. It loads the content either from a local\nfile or from script and creates a local YUI instance bound to that new window and document."}, "exec-command": {"name": "Plugin.ExecCommand", "description": "Plugin for the frame module to handle execCommands for Editor"}, "createlink-base": {"name": "Plugin.CreateLinkBase", "description": "Base class for Editor. Handles the business logic of Editor, no GUI involved only utility methods and events."}, "selection": {"name": "Selection", "description": "Wraps some common Selection/Range functionality into a simple object"}, "editor-bidi": {"name": "Plugin.EditorBidi", "description": "Plugin for Editor to support BiDirectional (bidi) text operations."}, "editor-para": {"name": "Plugin.EditorPara", "description": "Plugin for Editor to paragraph auto wrapping and correction."}}, "name": "editor"}, "intl": {"description": "Provides utilities to support the management of localized resources (strings and formatting patterns).", "submodules": [], "classlist": ["Intl"], "filelist": ["Intl.js"], "subdata": {}, "name": "intl"}, "test": {"description": "YUI JavaScript Testing Framework", "submodules": [], "classlist": ["ArrayAssert", "Assert", "Assert.Error", "Assert.ComparisonFailure", "Assert.UnexpectedValue", "Assert.ShouldFail", "Assert.ShouldError", "Assert.UnexpectedError", "Coverage.Format", "DateAssert", "Mock", "Mock.Value.ObjectAssert", "Test.Case", "Test.Wait", "Test.Format", "Test.Manager", "Test.Reporter", "Test.Runner", "Test.Suite"], "filelist": ["ArrayAssert.js", "Assert.js", "CoverageFormat.js", "DateAssert.js", "Mock.js", "ObjectAssert.js", "TestCase.js", "TestFormat.js", "TestManager.js", "TestReporter.js", "TestRunner.js", "TestSuite.js", "YUITest.js"], "subdata": {}, "name": "test"}, "widget-locale": {"description": "Provides string support for widget with BCP 47 language tag lookup. This module has been deprecated. It's replaced by the \"intl\" module which provides generic internationalization and BCP 47 language tag support with externalization.", "submodules": [], "classlist": [], "guessedtype": "property", "filelist": ["WidgetSkin.js", "WidgetUIEvents.js"], "subdata": {}, "guessedname": "TRUE", "deprecated": "This module has been deprecated. It's replaced by the \"intl\" module which provides generic internationalization and BCP 47 language tag support with externalization.", "name": "widget-locale"}, "scrollview-scrollbars": {"description": "Provides a plugin, which adds support for a scroll indicator to ScrollView instances", "submodules": [], "classlist": ["Plugin.ScrollViewScrollbars"], "filelist": ["scrollview-base.js"], "subdata": {}, "guessedname": "getClassName", "guessedtype": "property", "name": "scrollview-scrollbars"}, "imageloader": {"description": "The ImageLoader Utility is a framework to dynamically load images according to certain triggers,\nenabling faster load times and a more responsive UI.", "submodules": [], "classlist": ["ImgLoadGroup", "ImgLoadImgObj"], "filelist": ["imageloader.js"], "subdata": {}, "requires": "base-base, node-style, node-screen", "name": "imageloader"}, "node": {"description": "Functionality to make the node a delegated event container", "submodules": ["node-event-delegate", "node-event-simulate", "node-screen", "node-style", "node-base", "nodelist"], "classlist": ["Node", "NodeList"], "filelist": ["node-event-html5.js", "node-event-simulate.js", "node-ie.js", "node-imports.js", "node-load.js", "node-pluginhost.js", "node-region.js", "node-screen.js", "node-size.js", "node-style.js", "node.js", "nodelist-array.js", "nodelist.js", "shim-plugin.js"], "subdata": {"nodelist": {"name": "NodeList", "description": "The NodeList module provides support for managing collections of Nodes."}, "node-event-simulate": {"name": "Node", "description": "Adds functionality to simulate events."}, "node-event-delegate": {"name": "NodeList", "description": "Functionality to make the node a delegated event container"}, "node-base": {"name": "Node", "description": "The Node Utility provides a DOM-like interface for interacting with DOM nodes."}, "node-style": {"name": "Node", "description": "Extended Node interface for managing node styles."}, "node-screen": {"name": "Node", "description": "Extended Node interface for managing regions and screen positioning.\nAdds support for positioning elements and normalizes window size and scroll detection."}}, "guessedname": "methods", "guessedtype": "property", "name": "node"}, "substitute": {"description": "String variable substitution and string formatting.\nIf included, the substitute method is added to the YUI instance.", "submodules": [], "classlist": ["YUI~substitute"], "filelist": ["substitute.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "substitute"}, "widget": {"description": "Provides the base Widget class, with HTML Parser support", "submodules": ["widget-base", "widget-htmlparser"], "classlist": ["Widget"], "filelist": ["Widget.js", "WidgetBaseIE.js", "WidgetHTMLParser.js", "WidgetLocale.js"], "subdata": {"widget-base": {"name": "Widget", "description": "Provides the base Widget class"}, "widget-htmlparser": {"name": "Widget", "description": "Adds HTML Parser support to the base Widget class"}}, "guessedname": "L", "guessedtype": "property", "name": "widget"}, "anim": {"name": "anim", "submodules": ["anim-color", "anim-curve", "anim-easing", "anim-node-plugin", "anim-scroll", "anim-xy", "anim-base"], "classlist": ["Easing", "Plugin.NodeFX", "Anim"], "filelist": ["anim-color.js", "anim-curve.js", "anim-easing.js", "anim-node-plugin.js", "anim-scroll.js", "anim-xy.js", "anim.js"], "subdata": {"anim-node-plugin": {"name": "Plugin.NodeFX", "description": "Binds an Anim instance to a Node instance"}, "anim-base": {"name": "Anim", "description": "Provides the base Anim class, for animating numeric properties."}, "anim-scroll": {"name": "Plugin.NodeFX", "description": "Adds support for the <code>scroll</code> property in <code>to</code>\nand <code>from</code> attributes."}, "anim-xy": {"name": "Plugin.NodeFX", "description": "Adds support for the <code>xy</code> property in <code>from</code> and \n<code>to</code> attributes."}, "anim-color": {"name": "", "description": "Adds support for color properties in <code>to</code>\nand <code>from</code> attributes."}, "anim-curve": {"name": "", "description": "Adds support for the <code>curve</code> property for the <code>to</code> \nattribute.  A curve is zero or more control points and an end point."}, "anim-easing": {"name": "Easing", "description": "The easing module provides methods for customizing\nhow an animation behaves during each run."}}, "guessedname": "NUM", "guessedtype": "property", "description": "The Animation Utility provides an API for creating advanced transitions."}, "swfdetect": {"description": "Utility for Flash version detection", "submodules": [], "classlist": [], "filelist": ["swfdetect.js"], "subdata": {}, "name": "swfdetect"}, "node-flick": {"description": "Provide a simple Flick plugin, which can be used along with the \"flick\" gesture event, to \nanimate the motion of the host node in response to a (mouse or touch) flick gesture. \n<p>The current implementation is designed to move the node, relative to the bounds of a parent node and is suitable\nfor scroll/carousel type implementations. Future versions will remove that constraint, to allow open ended movement within\nthe document.</p>", "submodules": [], "classlist": ["Plugin.Flick"], "filelist": ["NodeFlick.js"], "subdata": {}, "guessedname": "HOST", "guessedtype": "property", "name": "node-flick"}, "event-touch": {"description": "Adds touch event facade normalization properties (touches, changedTouches, targetTouches etc.) to the DOM event facade", "submodules": [], "classlist": [], "filelist": ["event-facade-dom.js"], "subdata": {}, "guessedname": "SCALE", "guessedtype": "property", "name": "event-touch"}, "dd": {"description": "The Drag & Drop Utility allows you to create a draggable interface efficiently, buffering you from browser-level abnormalities and enabling you to focus on the interesting logic surrounding your particular implementation. This component enables you to create a variety of standard draggable objects with just a few lines of code and then, using its extensive API, add your own specific implementation logic.", "submodules": ["dd-constrain", "dd-drop-plugin", "dd-plugin", "dd-ddm-base", "dd-ddm-drop", "dd-ddm", "dd-delegate", "dd-drag", "dd-drop", "dd-proxy", "dd-scroll"], "classlist": ["Plugin.DDConstrained", "Plugin.Drop", "Plugin.Drag", "DD.DDM", "DD.Delegate", "DD.Drag", "DD.Drop", "Plugin.DDProxy", "DD.Scroll", "Plugin.DDWindowScroll", "Plugin.DDNodeScroll"], "filelist": ["constrain.js", "dd-drop-plugin.js", "dd-plugin.js", "ddm-base.js", "ddm-drop.js", "ddm.js", "delegate.js", "drag-gestures.js", "drag.js", "drop.js", "proxy.js", "scroll.js"], "subdata": {"dd-ddm-drop": {"name": "DD.DDM", "description": "Extends the dd-ddm Class to add support for the placement of Drop Target shims inside the viewport shim. It also handles all Drop Target related events and interactions."}, "dd-constrain": {"name": "Plugin.DDConstrained", "description": "The Drag & Drop Utility allows you to create a draggable interface efficiently, buffering you from browser-level abnormalities and enabling you to focus on the interesting logic surrounding your particular implementation. This component enables you to create a variety of standard draggable objects with just a few lines of code and then, using its extensive API, add your own specific implementation logic."}, "dd-drop": {"name": "DD.Drop", "description": "Provides the ability to create a Drop Target."}, "dd-delegate": {"name": "DD.Delegate", "description": "Provides the ability to drag multiple nodes under a container element using only one Y.DD.Drag instance as a delegate."}, "dd-ddm": {"name": "DD.DDM", "description": "Extends the dd-ddm-base Class to add support for the viewport shim to allow a draggable node to drag to be dragged over an iframe or any other node that traps mousemove events.\nIt is also required to have Drop Targets enabled, as the viewport shim will contain the shims for the Drop Targets."}, "dd-plugin": {"name": "Plugin.Drag", "description": "Simple Drag plugin that can be attached to a Node via the plug method."}, "dd-drag": {"name": "DD.Drag", "description": "Provides the ability to drag a Node."}, "dd-scroll": {"name": "Plugin.DDNodeScroll", "description": "Base scroller class used to create the Plugin.DDNodeScroll and Plugin.DDWinScroll.\nThis class should not be called on it's own, it's designed to be a plugin."}, "dd-proxy": {"name": "Plugin.DDProxy", "description": "Plugin for dd-drag for creating a proxy drag node, instead of dragging the original node."}, "dd-drop-plugin": {"name": "Plugin.Drop", "description": "Simple Drop plugin that can be attached to a Node via the plug method."}, "dd-ddm-base": {"name": "DD.DDM", "description": "Provides the base Drag Drop Manger required for making a Node draggable."}}, "name": "dd"}, "node-menunav": {"description": "<p>The MenuNav Node Plugin makes it easy to transform existing list-based \nmarkup into traditional, drop down navigational menus that are both accessible \nand easy to customize, and only require a small set of dependencies.</p>\n<p>To use the MenuNav Node Plugin, simply pass a reference to the plugin to a \nNode instance's <code>plug</code> method.</p>\n<p>\n<code>\n&#60;script type=\"text/javascript\"&#62; <br>\n<br>\n//\tCall the \"use\" method, passing in \"node-menunav\".  This will <br>\n//\tload the script and CSS for the MenuNav Node Plugin and all of <br>\n//\tthe required dependencies. <br>\n<br>\nYUI().use(\"node-menunav\", function(Y) { <br>\n<br>\n//\tUse the \"contentready\" event to initialize the menu when <br>\n//\tthe subtree of element representing the root menu <br>\n//\t(&#60;div id=\"menu-1\"&#62;) is ready to be scripted. <br>\n<br>\nY.on(\"contentready\", function () { <br>\n<br>\n//\tThe scope of the callback will be a Node instance <br>\n//\trepresenting the root menu (&#60;div id=\"menu-1\"&#62;). <br>\n//\tTherefore, since \"this\" represents a Node instance, it <br>\n//\tis possible to just call \"this.plug\" passing in a <br>\n//\treference to the MenuNav Node Plugin. <br>\n<br>\nthis.plug(Y.Plugin.NodeMenuNav); <br>\n<br>\n}, \"#menu-1\"); <br>\n<br>\t\t\n}); <br>\n<br>\t\n&#60;/script&#62; <br>\n</code>\n</p>\n<p>The MenuNav Node Plugin has several configuration properties that can be \nset via an object literal that is passed as a second argument to a Node \ninstance's <code>plug</code> method.\n</p>\n<p>\n<code>\n&#60;script type=\"text/javascript\"&#62; <br>\n<br>\n//\tCall the \"use\" method, passing in \"node-menunav\".  This will <br>\n//\tload the script and CSS for the MenuNav Node Plugin and all of <br>\n//\tthe required dependencies. <br>\n<br>\nYUI().use(\"node-menunav\", function(Y) { <br>\n<br>\n//\tUse the \"contentready\" event to initialize the menu when <br>\n//\tthe subtree of element representing the root menu <br>\n//\t(&#60;div id=\"menu-1\"&#62;) is ready to be scripted. <br>\n<br>\nY.on(\"contentready\", function () { <br>\n<br>\n//\tThe scope of the callback will be a Node instance <br>\n//\trepresenting the root menu (&#60;div id=\"menu-1\"&#62;). <br>\n//\tTherefore, since \"this\" represents a Node instance, it <br>\n//\tis possible to just call \"this.plug\" passing in a <br>\n//\treference to the MenuNav Node Plugin. <br>\n<br>\nthis.plug(Y.Plugin.NodeMenuNav, { mouseOutHideDelay: 1000 });\n<br><br>\n}, \"#menu-1\"); <br>\n<br>\t\t\n}); <br>\n<br>\t\n&#60;/script&#62; <br>\n</code>\n</p>", "submodules": [], "classlist": ["plugin.NodeMenuNav"], "filelist": ["node-menunav.js"], "subdata": {}, "name": "node-menunav"}, "history-deprecated": {"description": "<strong>Deprecated since 3.2.0.</strong> The Browser History Utility provides\nthe ability to use the back/forward navigation buttons in a DHTML\napplication. It also allows a DHTML application to be bookmarked in a\nspecific state.\nThis utility requires the following static markup:\n&lt;iframe id=\"yui-history-iframe\" src=\"path-to-real-asset-in-same-domain\"&gt;&lt;/iframe&gt;\n&lt;input id=\"yui-history-field\" type=\"hidden\"&gt;", "submodules": [], "classlist": ["History", "History.Module"], "filelist": ["history.js"], "subdata": {}, "deprecated": "Please use the new \"history\" module instead.", "name": "history-deprecated"}, "collection": {"name": "collection", "submodules": ["array-extras", "arraylist-add", "arraylist-filter", "arraylist", "array-invoke"], "classlist": ["YUI~array~extras", "ArrayList~add", "ArrayList~filter", "ArrayList", "YUI~array~invoke"], "filelist": ["array-extras.js", "arraylist-add.js", "arraylist-filter.js", "arraylist.js", "invoke.js"], "subdata": {"arraylist-add": {"name": "ArrayList~add", "description": "Collection utilities beyond what is provided in the YUI core"}, "array-extras": {"name": "YUI~array~extras", "description": "Collection utilities beyond what is provided in the YUI core"}, "arraylist-filter": {"name": "ArrayList~filter", "description": "Collection utilities beyond what is provided in the YUI core"}, "array-invoke": {"name": "YUI~array~invoke", "description": "Collection utilities beyond what is provided in the YUI core"}, "arraylist": {"name": "ArrayList", "description": "Collection utilities beyond what is provided in the YUI core"}}, "guessedname": "L", "guessedtype": "property", "description": "Collection utilities beyond what is provided in the YUI core"}, "slider": {"description": "Adds support for mouse interaction with the Slider rail triggering thumb\nmovement.", "submodules": ["clickable-rail", "range-slider", "slider-base", "slider-value-range"], "classlist": ["ClickableRail", "Slider", "SliderBase", "SliderValueRange"], "filelist": ["clickable-rail.js", "range-slider.js", "slider-base.js", "value-range.js"], "subdata": {"slider-value-range": {"name": "SliderValueRange", "description": "Adds value support for Slider as a range of integers between a configured\nminimum and maximum value.  For use with <code>Y.Base.build(..)</code> to\nadd the plumbing to <code>Y.SliderBase</code>."}, "clickable-rail": {"name": "ClickableRail", "description": "Adds support for mouse interaction with the Slider rail triggering thumb\nmovement."}, "slider-base": {"name": "SliderBase", "description": "Create a sliding value range input visualized as a draggable thumb on a\nbackground element."}, "range-slider": {"name": "Slider", "description": "Create a sliding value range input visualized as a draggable thumb on a\nbackground rail element."}}, "guessedname": "INVALID_VALUE", "guessedtype": "property", "name": "slider"}, "base": {"description": "The base module provides the Base class, which objects requiring attribute and custom event support can extend. \nThe module also provides two ways to reuse code - It augments Base with the Plugin.Host interface which provides \nplugin support and also provides the Base.build method which provides a way to build custom classes using extensions.", "submodules": ["base-base", "base-build", "base-pluginhost"], "classlist": ["Base"], "filelist": ["Base.js", "BaseBuild.js", "BasePluginHost.js"], "subdata": {"base-pluginhost": {"name": "Base", "description": "The base-pluginhost submodule adds Plugin support to Base, by augmenting Base with \nPlugin.Host and setting up static (class level) Base.plug and Base.unplug methods."}, "base-build": {"name": "Base", "description": "The base-build submodule provides Base.build functionality, which\ncan be used to create custom classes, by aggregating extensions onto \na main class."}, "base-base": {"name": "Base", "description": "The base-base submodule provides the Base class without the Plugin support, provided by Plugin.Host, \nand without the extension support provided by Base.build."}}, "guessedname": "O", "guessedtype": "property", "name": "base"}, "cookie": {"description": "Utilities for cookie management", "submodules": [], "classlist": ["Cookie"], "filelist": ["Cookie.js"], "subdata": {}, "name": "cookie"}, "oop": {"description": "Supplies object inheritance and manipulation utilities.  This adds\nadditional functionaity to what is provided in yui-base, and the\nmethods are applied directly to the YUI instance.  This module\nis required for most YUI components.", "submodules": [], "classlist": ["YUI~oop"], "filelist": ["oop.js"], "subdata": {}, "name": "oop"}, "uploader": {"description": "The Uploader widget is a tool for uploading files to the server.", "submodules": [], "classlist": ["Uploader"], "title": "Uploader", "filelist": ["uploader.js"], "subdata": {}, "guessedname": "Event", "guessedtype": "property", "requires": "base, node, event, swf", "name": "uploader"}, "jsonp": {"description": "<p>Provides a JSONPRequest class for repeated JSONP calls, and a convenience\nmethod Y.jsonp(url, callback) to instantiate and send a JSONP request.</p>\n<p>Both the constructor as well as the convenience function take two\nparameters: a url string and a callback.</p>\n<p>The url provided must include the placeholder string\n&quot;{callback}&quot; which will be replaced by a dynamically\ngenerated routing function to pass the data to your callback function.\nAn example url might look like\n&quot;http://example.com/service?callback={callback}&quot;.</p>\n<p>The second parameter can be a callback function that accepts the JSON\npayload as its argument, or a configuration object supporting the keys:</p>\n<ul>\n<li>on - map of callback subscribers\n<ul>\n<li>success - function handler for successful transmission</li>\n<li>failure - function handler for failed transmission</li>\n<li>timeout - function handler for transactions that timeout</li>\n</ul>\n</li>\n<li>format  - override function for inserting the proxy name in the url</li>\n<li>timeout - the number of milliseconds to wait before giving up</li>\n<li>context - becomes <code>this</code> in the callbacks</li>\n<li>args    - array of subsequent parameters to pass to the callbacks</li>\n</ul>", "submodules": ["jsonp-url"], "classlist": ["JSONPRequest"], "filelist": ["jsonp-url.js", "jsonp.js"], "subdata": {"jsonp-url": {"name": "JSONPRequest", "description": "Adds support for parsing complex callback identifiers from the jsonp url.\nThis includes callback=foo[1]bar.baz[\"goo\"] as well as referencing methods\nin the YUI instance."}}, "name": "jsonp"}, "widget-position": {"description": "Provides basic XY positioning support for Widgets, though an extension", "submodules": [], "classlist": ["WidgetPosition"], "filelist": ["Widget-Position.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "widget-position"}, "dataschema": {"description": "The DataSchema utility provides a common configurable interface for widgets to\napply a given schema to a variety of data.", "submodules": ["dataschema-array", "dataschema-base", "dataschema-json", "dataschema-text", "dataschema-xml"], "classlist": ["DataSchema.Array", "DataSchema.Base", "DataSchema.JSON", "DataSchema.Text", "DataSchema.XML"], "filelist": ["dataschema-array.js", "dataschema-base.js", "dataschema-json.js", "dataschema-text.js", "dataschema-xml.js"], "subdata": {"dataschema-xml": {"name": "DataSchema.XML", "description": "Provides a DataSchema implementation which can be used to work with XML data."}, "dataschema-array": {"name": "DataSchema.Array", "description": "Provides a DataSchema implementation which can be used to work with data stored in arrays."}, "dataschema-base": {"name": "DataSchema.Base", "description": "Provides the base DataSchema implementation, which can be extended to \ncreate DataSchemas for specific data formats, such XML, JSON, text and\narrays."}, "dataschema-json": {"name": "DataSchema.JSON", "description": "Provides a DataSchema implementation which can be used to work with JSON data."}, "dataschema-text": {"name": "DataSchema.Text", "description": "Provides a DataSchema implementation which can be used to work with delimited text data."}}, "guessedname": "LANG", "guessedtype": "property", "name": "dataschema"}, "resize": {"description": "The Resize Utility allows you to make an HTML element resizable.", "submodules": [], "classlist": ["Resize"], "filelist": ["resize-base.js", "resize-constrain.js", "resize-proxy.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "resize"}, "scrollview": {"description": "<p>\nThe scrollview module does not add any new classes. It simply plugs the ScrollViewScrollbars plugin into the \nbase ScrollView class implementation provided by the scrollview-base module, so that all scrollview instances \nhave scrollbars enabled.\n</p>\n<ul>\n<li><a href=\"ScrollView.html\">ScrollView API documentation</a></li>\n<li><a href=\"module_scrollview-base.html\">scrollview-base Module documentation</a></li>\n</ul>", "submodules": [], "classlist": [], "filelist": [], "subdata": {}, "name": "scrollview"}, "widget-position-align": {"description": "Provides extended/advanced XY positioning support for Widgets, through an extension.\nIt builds on top of the widget-position module, to provide alignmentment and centering support.\nFuture releases aim to add constrained and fixed positioning support.", "submodules": [], "classlist": ["WidgetPositionAlign"], "filelist": ["Widget-PositionAlign.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "widget-position-align"}, "queue-promote": {"description": "Adds methods promote, remove, and indexOf to Queue instances.", "submodules": [], "classlist": [], "filelist": ["queue-promote.js"], "subdata": {}, "name": "queue-promote"}, "sortable": {"description": "The class allows you to create a Drag & Drop reordered list.", "submodules": ["sortable-scroll"], "classlist": ["Plugin.SortScroll", "Plugin.Sortable"], "filelist": ["sortable-scroll.js", "sortable.js"], "subdata": {"sortable-scroll": {"name": "Plugin.SortScroll", "description": "Plugin for sortable to handle scrolling lists."}}, "name": "sortable"}, "widget-parent": {"description": "Extension enabling a Widget to be a parent of another Widget.", "submodules": [], "classlist": ["WidgetParent"], "filelist": ["Widget-Parent.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "widget-parent"}, "dom": {"description": "Adds position and region management functionality to DOM.", "submodules": ["dom-screen", "dom-style", "dom-base", "selector-css2", "selector-css3", "selector-native"], "classlist": ["DOM", "Selector"], "filelist": ["color.js", "dom-class.js", "dom-deprecated.js", "dom-region.js", "dom-screen.js", "dom-size.js", "dom-style-ie.js", "dom-style.js", "dom.js", "selector-css2.js", "selector-css3.js", "selector-native.js"], "subdata": {"selector-css2": {"name": "Selector", "description": "The selector module provides helper methods allowing CSS2 Selectors to be used with DOM elements."}, "selector-css3": {"name": "Selector", "description": "The selector css3 module provides support for css3 selectors."}, "dom-base": {"name": "DOM", "description": "The DOM utility provides a cross-browser abtraction layer\nnormalizing DOM tasks, and adds extra helper functionality\nfor other common tasks."}, "dom-style": {"name": "DOM", "description": "Add style management functionality to DOM."}, "selector-native": {"name": "Selector", "description": "The selector-native module provides support for native querySelector"}, "dom-screen": {"name": "DOM", "description": "Adds position and region management functionality to DOM."}}, "guessedname": "DOCUMENT_ELEMENT", "guessedtype": "property", "name": "dom"}, "datatype": {"description": "The DataType Utility provides type-conversion and string-formatting\nconvenience methods for various JavaScript object types.", "submodules": ["datatype-date", "datatype-date-format", "datatype-date-parse", "datatype-number", "datatype-number-format", "datatype-number-parse", "datatype-xml-format", "datatype-xml", "datatype-xml-parse"], "classlist": ["DataType.Date", "DataType.Date.Locale", "DataType.Number", "DataType.XML"], "filelist": ["datatype-date-format.js", "datatype-date-locale.js", "datatype-date-parse.js", "datatype-number-format.js", "datatype-number-parse.js", "datatype-xml-format.js", "datatype-xml-parse.js"], "subdata": {"datatype-xml-parse": {"name": "DataType.XML", "description": "Parse XML submodule."}, "datatype-number-format": {"name": "DataType.Number", "description": "Format number submodule."}, "datatype-date": {"name": "", "description": "Date submodule."}, "datatype-number": {"name": "DataType.Date", "description": "Number submodule."}, "datatype-xml": {"name": "DataType.XML", "description": "XML submodule."}, "datatype-date-format": {"name": "DataType.Date", "description": "Format date submodule implements strftime formatters for javascript based on the\nOpen Group specification defined at\nhttp://www.opengroup.org/onlinepubs/007908799/xsh/strftime.html\nThis implementation does not include modified conversion specifiers (i.e., Ex and Ox)"}, "datatype-xml-format": {"name": "DataType.Number", "description": "Format XML submodule."}, "datatype-date-parse": {"name": "DataType.Date", "description": "Parse number submodule."}, "datatype-number-parse": {"name": "DataType.Number", "description": "Parse number submodule."}}, "guessedname": "LANG", "guessedtype": "property", "name": "datatype"}, "tabview": {"description": "The TabView module", "submodules": [], "classlist": ["Tab", "TabView"], "filelist": ["tab.js", "tabview-base.js", "tabview-plugin.js", "tabview.js"], "subdata": {}, "guessedname": "_queries", "guessedtype": "property", "name": "tabview"}, "plugin": {"description": "Provides the base Plugin class, which plugin developers should extend, when creating custom plugins", "submodules": [], "classlist": ["Plugin.Base"], "filelist": ["plugin.js"], "subdata": {}, "name": "plugin"}, "querystring": {"description": "<p>The QueryString module adds support for serializing JavaScript objects into\nquery strings and parsing JavaScript objects from query strings format.</p>\n<p>The QueryString namespace is added to your YUI instance including static methods\nY.QueryString.parse(..) and Y.QueryString.stringify(..).</p>\n<p>The <code>querystring</code> module is a rollup of <code>querystring-parse</code> and\n<code>querystring-stringify</code>.</p>\n<p>As their names suggest, <code>querystring-parse</code> adds support for parsing\nQuery String data (Y.QueryString.parse) and <code>querystring-stringify</code> for serializing\nJavaScript data into Query Strings (Y.QueryString.stringify).  You may choose to\ninclude either of the submodules individually if you don't need the\ncomplementary functionality, or include the rollup for both.</p>", "submodules": ["querystring-parse-simple", "querystring-parse", "querystring-stringify-simple", "querystring-stringify"], "classlist": ["QueryString"], "filelist": ["querystring-parse-simple.js", "querystring-parse.js", "querystring-stringify-simple.js", "querystring-stringify.js"], "subdata": {"querystring-parse": {"name": "QueryString", "description": "Provides Y.QueryString.unescape method to be able to override default decoding\nmethod.  This is important in cases where non-standard delimiters are used, if\nthe delimiters would not normally be handled properly by the builtin\n(en|de)codeURIComponent functions.\nDefault: replace \"+\" with \" \", and then decodeURIComponent behavior."}, "querystring-parse-simple": {"name": "QueryString", "description": "<p>Provides Y.QueryString.stringify method for converting objects to Query Strings.\nThis is a simpler implementation than the full querystring-stringify.</p>\n<p>Because some things may require basic query string escaping functionality,\nthis module provides the bare minimum functionality (decoding a hash of simple values),\nwithout the additional support for arrays, objects, and so on.</p>\n<p>This provides a friendly way to deserialize basic query strings, without necessitating\na lot of code for simple use-cases.</p>"}, "querystring-stringify": {"name": "QueryString", "description": "Provides Y.QueryString.escape method to be able to override default encoding\nmethod.  This is important in cases where non-standard delimiters are used, if\nthe delimiters would not normally be handled properly by the builtin\n(en|de)codeURIComponent functions.\nDefault: encodeURIComponent"}, "querystring-stringify-simple": {"name": "QueryString", "description": "<p>Provides Y.QueryString.stringify method for converting objects to Query Strings.\nThis is a subset implementation of the full querystring-stringify.</p>\n<p>This module provides the bare minimum functionality (encoding a hash of simple values),\nwithout the additional support for nested data structures.  Every key-value pair is\nencoded by encodeURIComponent.</p>\n<p>This module provides a minimalistic way for io to handle  single-level objects\nas transaction data.</p>"}}, "static": "", "guessedname": "QueryString", "guessedtype": "property", "name": "querystring"}, "classnamemanager": {"description": "Contains a singleton (ClassNameManager) that enables easy creation and caching of \nprefixed class names.", "submodules": [], "classlist": ["ClassNameManager"], "filelist": ["classnamemanager.js"], "subdata": {}, "name": "classnamemanager"}, "pluginhost": {"description": "Provides the augmentable PluginHost interface, which can be added to any class.", "submodules": [], "classlist": [], "filelist": ["PluginHost.js"], "subdata": {}, "name": "pluginhost"}, "autocomplete": {"description": "Provides automatic input completion or suggestions for text input fields and\ntextareas.", "submodules": ["autocomplete-base", "autocomplete-filters-accentfold", "autocomplete-filters", "autocomplete-highlighters-accentfold", "autocomplete-highlighters", "autocomplete-list-keys", "autocomplete-list", "autocomplete-list-plugin"], "classlist": ["AutoCompleteBase", "AutoCompleteFilters", "AutoCompleteHighlighters", "AutoCompleteList", "AutoComplete", "Plugin.AutoComplete"], "since": "3.3.0", "filelist": ["autocomplete-base.js", "autocomplete-filters-accentfold.js", "autocomplete-filters.js", "autocomplete-highlighters-accentfold.js", "autocomplete-highlighters.js", "autocomplete-list-keys.js", "autocomplete-list.js", "autocomplete-plugin.js"], "subdata": {"autocomplete-highlighters": {"name": "AutoCompleteHighlighters", "description": "Provides pre-built result highlighters for AutoComplete."}, "autocomplete-filters": {"name": "AutoCompleteFilters", "description": "Provides pre-built result matching filters for AutoComplete."}, "autocomplete-base": {"name": "AutoCompleteBase", "description": "<code>Y.Base</code> extension that provides core autocomplete logic (but no\nUI implementation) for a text input field or textarea. Must be mixed into a\n<code>Y.Base</code>-derived class to be useful."}, "autocomplete-list-keys": {"name": "AutoCompleteHighlighters", "description": "Mixes keyboard support into AutoCompleteList. By default, this module is not\nloaded for iOS and Android devices."}, "autocomplete-highlighters-accentfold": {"name": "AutoCompleteHighlighters", "description": "<p>\nProvides pre-built accent-folding result highlighters for AutoComplete.\n</p>\n<p>\nThese highlighters are similar to the ones provided by the\n<code>autocomplete-highlighters</code> module, but use accent-aware\ncomparisons. For example, \"resume\" and \"résumé\" will be considered equal when\nusing the accent-folding highlighters.\n</p>"}, "autocomplete-filters-accentfold": {"name": "AutoCompleteFilters", "description": "<p>\nProvides pre-built accent-folding result matching filters for AutoComplete.\n</p>\n<p>\nThese filters are similar to the ones provided by the\n<code>autocomplete-filters</code> module, but use accent-aware comparisons.\nFor example, \"resume\" and \"résumé\" will be considered equal when using the\naccent-folding filters.\n</p>"}, "autocomplete-list-plugin": {"name": "Plugin.AutoComplete", "description": "Binds an AutoCompleteList instance to a Node instance."}, "autocomplete-list": {"name": "AutoComplete", "description": "Traditional autocomplete dropdown list widget, just like Mom used to make."}}, "name": "autocomplete"}, "yql": {"description": "This class adds a sugar class to allow access to YQL (http://developer.yahoo.com/yql/).", "submodules": [], "classlist": ["YQLRequest", "YQL"], "filelist": ["yql.js"], "subdata": {}, "name": "yql"}, "text": {"description": "Text utilities.", "submodules": ["text-accentfold", "text-data-accentfold", "text-data-wordbreak", "text-wordbreak"], "classlist": ["Text.AccentFold", "Text.Data.AccentFold", "Text.Data.WordBreak", "Text.WordBreak"], "since": "3.3.0", "filelist": ["text-accentfold.js", "text-data-accentfold.js", "text-data-wordbreak.js", "text-wordbreak.js"], "subdata": {"text-accentfold": {"name": "Text.AccentFold", "description": "Provides a basic Unicode accent folding implementation that converts common\naccented letters (like \"á\") to their non-accented forms (like \"a\")."}, "text-data-accentfold": {"name": "Text.Data.AccentFold", "description": "An imperfect, incomplete reverse mapping of ASCII characters to\ncase-insensitive regexes that match their most common accented forms."}, "text-wordbreak": {"name": "Text.WordBreak", "description": "Provides utility methods for splitting strings on word breaks and determining\nwhether a character index represents a word boundary."}, "text-data-wordbreak": {"name": "Text.Data.WordBreak", "description": "Unicode character data used by the word breaking algorithm."}}, "name": "text"}, "datasource": {"description": "The DataSource utility provides a common configurable interface for widgets to\naccess a variety of data, from JavaScript arrays to online database servers.", "submodules": ["datasource-arrayschema", "datasource-cache", "datasource-function", "datasource-get", "datasource-io", "datasource-jsonschema", "datasource-local", "datasource-polling", "datasource-textschema", "datasource-xmlschema"], "classlist": ["DataSourceArraySchema", "DataSourceCacheExtension", "DataSourceCache", "DataSource.Function", "DataSource.Get", "DataSource.IO", "DataSourceJSONSchema", "DataSource.Local", "Pollable", "DataSourceTextSchema", "DataSourceXMLSchema"], "filelist": ["datasource-arrayschema.js", "datasource-cache.js", "datasource-function.js", "datasource-get.js", "datasource-io.js", "datasource-jsonschema.js", "datasource-local.js", "datasource-polling.js", "datasource-textschema.js", "datasource-xmlschema.js"], "subdata": {"datasource-xmlschema": {"name": "DataSourceXMLSchema", "description": "Extends DataSource with schema-parsing on XML data."}, "datasource-io": {"name": "DataSource.IO", "description": "Provides a DataSource implementation which can be used to retrieve data via the IO Utility."}, "datasource-function": {"name": "DataSource.Function", "description": "Provides a DataSource implementation which can be used to retrieve data from a custom function."}, "datasource-arrayschema": {"name": "DataSourceArraySchema", "description": "Extends DataSource with schema-parsing on array data."}, "datasource-textschema": {"name": "DataSourceTextSchema", "description": "Extends DataSource with schema-parsing on text data."}, "datasource-cache": {"name": "DataSourceCache", "description": "Plugs DataSource with caching functionality."}, "datasource-polling": {"name": "Pollable", "description": "Extends DataSource with polling functionality."}, "datasource-local": {"name": "DataSource.Local", "description": "Provides the base DataSource implementation, which can be extended to\ncreate DataSources for specific data protocols, such as the IO Utility, the\nGet Utility, or custom functions."}, "datasource-get": {"name": "DataSource.Get", "description": "Provides a DataSource implementation which can be used to retrieve data via the Get Utility."}, "datasource-jsonschema": {"name": "DataSourceJSONSchema", "description": "Extends DataSource with schema-parsing on JSON data."}}, "name": "datasource"}, "event-custom": {"description": "Custom event engine, DOM event listener abstraction layer, synthetic DOM\nevents.", "submodules": ["event-custom-base", "event-custom-complex"], "classlist": ["EventHandle", "CustomEvent", "Subscriber", "Do", "Do.Method", "Do.AlterArgs", "Do.AlterReturn", "Do.Halt", "Do.Prevent", "Do.Error", "EventFacade", "EventTarget"], "filelist": ["event-custom.js", "event-do.js", "event-facade.js", "event-target.js", "event.js"], "subdata": {"event-custom-base": {"name": "EventTarget", "description": "Custom event engine, DOM event listener abstraction layer, synthetic DOM\nevents."}, "event-custom-complex": {"name": "EventFacade", "description": "Adds event facades, preventable default behavior, and bubbling.\nevents."}}, "guessedname": "evt", "guessedtype": "property", "name": "event-custom"}, "highlight": {"description": "Provides methods for highlighting strings within other strings by wrapping\nthem in HTML.", "submodules": ["highlight-accentfold", "highlight-base"], "classlist": ["Highlight"], "since": "3.3.0", "filelist": ["highlight-accentfold.js", "highlight-base.js"], "subdata": {"highlight-base": {"name": "Highlight", "description": "<p>\nProvides methods for highlighting strings within other strings by wrapping\nthem in HTML.\n</p>\n<p>\nThe highlight methods first escape any special HTML characters in the input\nstrings and then highlight the appropriate substrings by wrapping them in a\n<code>&lt;b class=\"yui3-highlight\"&gt;&lt;/b&gt;</code> element. The\n<code>&lt;b&gt;</code> element is used rather than\n<code>&lt;strong&gt;</code> in accordance with HTML5's definition of\n<code>&lt;b&gt;</code> as being purely presentational, which is exactly what\nhighlighting is.\n</p>"}, "highlight-accentfold": {"name": "Highlight", "description": "Adds accent-folding highlighters to <code>Y.Highlight</code>."}}, "name": "highlight"}, "node-focusmanager": {"description": "<p>The Focus Manager Node Plugin makes it easy to manage focus among\na Node's descendants.  Primarily intended to help with widget development,\nthe Focus Manager Node Plugin can be used to improve the keyboard\naccessibility of widgets.</p>\n<p>\nWhen designing widgets that manage a set of descendant controls (i.e. buttons\nin a toolbar, tabs in a tablist, menuitems in a menu, etc.) it is important to\nlimit the number of descendants in the browser's default tab flow.  The fewer\nnumber of descendants in the default tab flow, the easier it is for keyboard\nusers to navigate between widgets by pressing the tab key.  When a widget has\nfocus it should provide a set of shortcut keys (typically the arrow keys)\nto move focus among its descendants.\n</p>\n<p>\nTo this end, the Focus Manager Node Plugin makes it easy to define a Node's\nfocusable descendants, define which descendant should be in the default tab\nflow, and define the keys that move focus among each descendant.\nAdditionally, as the CSS\n<a href=\"http://www.w3.org/TR/CSS21/selector.html#x38\"><code>:focus</code></a>\npseudo class is not supported on all elements in all\n<a href=\"http://developer.yahoo.com/yui/articles/gbs/\">A-Grade browsers</a>,\nthe Focus Manager Node Plugin provides an easy, cross-browser means of\nstyling focus.\n</p>", "submodules": [], "classlist": ["plugin.NodeFocusManager"], "filelist": ["node-focusmanager.js"], "subdata": {}, "name": "node-focusmanager"}, "event-valuechange": {"description": "Adds a synthetic <code>valueChange</code> event that fires when the\n<code>value</code> property of an input field or textarea changes as a result\nof a keystroke, mouse operation, or input method editor (IME) input event.", "submodules": [], "classlist": ["ValueChange"], "filelist": ["event-valuechange.js"], "subdata": {}, "name": "event-valuechange"}, "history": {"description": "Provides browser history management functionality using a simple\nadd/replace/get paradigm. This can be used to ensure that the browser's back\nand forward buttons work as the user expects and to provide bookmarkable URLs\nthat return the user to the current application state, even in an Ajax\napplication that doesn't perform full-page refreshes.", "submodules": ["history-base", "history-hash-ie", "history-hash", "history-html5"], "classlist": ["HistoryBase", "HistoryHash", "HistoryHTML5"], "since": "3.2.0", "filelist": ["history-base.js", "history-hash-ie.js", "history-hash.js", "history-html5.js"], "subdata": {"history-hash": {"name": "HistoryHash", "description": "Provides browser history management backed by\n<code>window.location.hash</code>, as well as convenience methods for working\nwith the location hash and a synthetic <code>hashchange</code> event that\nnormalizes differences across browsers."}, "history-base": {"name": "HistoryBase", "description": "Provides global state management backed by an object, but with no browser\nhistory integration. For actual browser history integration and back/forward\nsupport, use the history-html5 or history-hash modules."}, "history-html5": {"name": "HistoryHTML5", "description": "Provides browser history management using the HTML5 history API."}, "history-hash-ie": {"name": "HistoryBase", "description": "Improves IE6/7 support in history-hash by using a hidden iframe to create\nentries in IE's browser history. This module is only needed if IE6/7 support\nis necessary; it's not needed for any other browser."}}, "name": "history"}}, "classmap": {"Console": {"name": "Console", "configs": {"height": {"default": "\"300px\"", "type": "{String | Number}", "description": "String with units, or number, representing the height of the Console,\ninclusive of header and footer. If a number is provided, the default\nunit, defined by Widget's DEF_UNIT, property is used.", "guessedname": "height", "guessedtype": "property"}, "consoleLimit": {"default": "300", "type": "Number", "description": "Maximum number of Console entries allowed in the Console body at one\ntime.  This is used to keep acquired messages from exploding the\nDOM tree and impacting page performance.", "guessedname": "consoleLimit", "guessedtype": "property"}, "width": {"default": "\"300px\"", "type": "{String | Number}", "description": "String with units, or number, representing the width of the Console.\nIf a number is provided, the default unit, defined by Widget's\nDEF_UNIT, property is used.", "guessedname": "width", "guessedtype": "property"}, "logLevel": {"default": "Y.config.logLevel or Console.LOG_LEVEL_INFO", "type": "String", "description": "Minimum entry log level to render into the Console.  The initial\nlogLevel value for all Console instances defaults from the\nY.config.logLevel YUI configuration, or Console.LOG_LEVEL_INFO if\nthat configuration is not set.\nPossible values are &quot;info&quot;, &quot;warn&quot;,\n&quot;error&quot; (case insensitive), or their corresponding statics\nConsole.LOG_LEVEL_INFO and so on.", "guessedname": "logLevel", "guessedtype": "property"}, "printLimit": {"default": "50", "type": "Number", "description": "Maximum number of entries printed in each iteration of the print\nloop. This is used to prevent excessive logging locking the page UI.", "guessedname": "printLimit", "guessedtype": "property"}, "collapsed": {"default": "false", "type": "Boolean", "description": "Controls the collapsed state of the Console", "guessedname": "collapsed", "guessedtype": "property"}, "useBrowserConsole": {"default": "false", "type": "{Boolean}", "description": "Pass through to the YUI instance useBrowserConsole configuration.\nBy default this is set to false, which will disable logging to the\nbrowser console when a Console instance is created.  If the\nlogSource is not a YUI instance, this has no effect.", "guessedname": "useBrowserConsole", "guessedtype": "property"}, "logSource": {"default": "Y", "type": "EventTarget", "description": "Object that will emit the log events.  By default the YUI instance.\nTo have a single Console capture events from all YUI instances, set\nthis to the Y.Global object.", "guessedname": "logSource", "guessedtype": "property"}, "printTimeout": {"default": "100", "type": "Number", "description": "Millisecond timeout between iterations of the print loop, moving\nentries from the buffer to the UI.", "guessedname": "printTimeout", "guessedtype": "property"}, "defaultSource": {"default": "\"global\"", "type": "String", "description": "If a source is not specified in the Y.log(..) statement, this\nsource will be used.", "guessedname": "defaultSource", "guessedtype": "property"}, "paused": {"default": "false", "type": "boolean", "description": "Boolean to pause the outputting of new messages to the console.\nWhen paused, messages will accumulate in the buffer.", "guessedname": "paused", "guessedtype": "property"}, "newestOnTop": {"default": "true", "type": "Boolean", "description": "New entries should display at the top of the Console or the bottom?", "guessedname": "newestOnTop", "guessedtype": "property"}, "logEvent": {"default": "\"yui:log\"", "type": "String", "description": "Name of the custom event that will communicate log messages.", "guessedname": "logEvent", "guessedtype": "property"}, "style": {"default": "'separate'", "type": "{String}", "description": "Allows the Console to flow in the document.  Available values are\n'inline', 'block', and 'separate' (the default).", "guessedname": "style", "guessedtype": "property"}, "startTime": {"default": "The moment the console module is <code>use</code>d", "type": "Date", "description": "The baseline time for this Console instance, used to measure elapsed\ntime from the moment the console module is <code>use</code>d to the\nmoment each new entry is logged (not rendered).\nThis value is reset by the instance method myConsole.reset().", "guessedname": "startTime", "guessedtype": "property"}, "entryTemplate": {"default": "Console.ENTRY_TEMPLATE", "type": "String", "description": "Markup template used to create the DOM structure for Console entries.", "guessedname": "entryTemplate", "guessedtype": "property"}, "scrollIntoView": {"default": "true", "type": "Boolean", "description": "When new entries are added to the Console UI, should they be\nscrolled into view?", "guessedname": "scrollIntoView", "guessedtype": "property"}, "lastTime": {"default": "The moment the console module is <code>use</code>d", "type": "Date", "description": "The precise time the last entry was logged.  Used to measure elapsed\ntime between log messages.", "guessedname": "lastTime", "guessedtype": "property"}, "defaultCategory": {"default": "\"info\"", "type": "String", "description": "If a category is not specified in the Y.log(..) statement, this\ncategory will be used. Categories &quot;info&quot;,\n&quot;warn&quot;, and &quot;error&quot; are also called log level.", "guessedname": "defaultCategory", "guessedtype": "property"}, "strings": {"type": "Object", "description": "Collection of strings used to label elements in the Console UI.\nDefault collection contains the following name:value pairs:\n<ul>\n<li>title : &quot;Log Console&quot;</li>\n<li>pause : &quot;Pause&quot;</li>\n<li>clear : &quot;Clear&quot;</li>\n<li>collapse : &quot;Collapse&quot;</li>\n<li>expand : &quot;Expand&quot;</li>\n</ul>", "guessedname": "strings", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "conf", "description": "  Configuration object (see Configuration attributes)"}], "description": "Console creates a visualization for messages logged through calls to a YUI\ninstance's <code>Y.log( message, category, source )</code> method.  The\ndebug versions of YUI modules will include logging statements to offer some\ninsight into the steps executed during that module's operation.  Including\nlog statements in your code will cause those messages to also appear in the\nConsole.  Use Console to aid in developing your page or application.\nEntry categories &quot;info&quot;, &quot;warn&quot;, and &quot;error&quot;\nare also referred to as the log level, and entries are filtered against the\nconfigured logLevel."}], "namespace": "", "module": "console", "events": {"scrollIntoViewChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "scrollIntoViewChange", "description": "Fires when the value for the configuration attribute 'scrollIntoView' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "heightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "heightChange", "description": "Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "lastTimeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lastTimeChange", "description": "Fires when the value for the configuration attribute 'lastTime' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "consoleLimitChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "consoleLimitChange", "description": "Fires when the value for the configuration attribute 'consoleLimit' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "newestOnTopChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "newestOnTopChange", "description": "Fires when the value for the configuration attribute 'newestOnTop' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stringsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stringsChange", "description": "Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "logSourceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "logSourceChange", "description": "Fires when the value for the configuration attribute 'logSource' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "logLevelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "logLevelChange", "description": "Fires when the value for the configuration attribute 'logLevel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "startTimeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "startTimeChange", "description": "Fires when the value for the configuration attribute 'startTime' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "defaultSourceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultSourceChange", "description": "Fires when the value for the configuration attribute 'defaultSource' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "entryTemplateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "entryTemplateChange", "description": "Fires when the value for the configuration attribute 'entryTemplate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "logEventChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "logEventChange", "description": "Fires when the value for the configuration attribute 'logEvent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "printLimitChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "printLimitChange", "description": "Fires when the value for the configuration attribute 'printLimit' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "defaultCategoryChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultCategoryChange", "description": "Fires when the value for the configuration attribute 'defaultCategory' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pausedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pausedChange", "description": "Fires when the value for the configuration attribute 'paused' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "printTimeoutChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "printTimeoutChange", "description": "Fires when the value for the configuration attribute 'printTimeout' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "useBrowserConsoleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "useBrowserConsoleChange", "description": "Fires when the value for the configuration attribute 'useBrowserConsole' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "collapsedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "collapsedChange", "description": "Fires when the value for the configuration attribute 'collapsed' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "reset": {"preventable": "_defResetFn", "params": [{"type": "Event.Facade", "name": "event", "description": "  Event Facade object"}], "description": "Triggers the reset behavior via the default logic in _defResetFn.", "guessedname": "defaultFn", "guessedtype": "property"}, "styleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "styleChange", "description": "Fires when the value for the configuration attribute 'style' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "entry": {"preventable": "_defEntryFn", "params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>message</dt>\n<dd>The message data normalized into an object literal (see _normalizeMessage)</dd>\n</dl>"}], "description": "Transfers a received message to the print loop buffer.  Default\nbehavior defined in _defEntryFn.", "guessedname": "defaultFn", "guessedtype": "property"}, "widthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "widthChange", "description": "Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "getCN", "methods": {"_normalizeMessage": {"return": {"type": "", "description": "Object the message object"}, "description": "Create a log entry message from the inputs including the following keys:\n<ul>\n<li>time - this moment</li>\n<li>message - leg message</li>\n<li>category - logLevel or custom category for the message</li>\n<li>source - when provided, the widget or util calling Y.log</li>\n<li>sourceAndDetail - same as source but can include instance info</li>\n<li>localTime - readable version of time</li>\n<li>elapsedTime - ms since last entry</li>\n<li>totalTime - ms since Console was instantiated or reset</li>\n</ul>", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  custom event containing the log message"}], "guessedname": "_normalizeMessage", "guessedtype": "function"}, "_uiUpdateCollapsed": {"protected": "", "params": [{"type": "Boolean", "name": "v", "description": "  true for collapsed, false for expanded"}], "description": "Updates the UI to reflect the new Collapsed state", "guessedname": "_uiUpdateCollapsed", "guessedtype": "function"}, "_afterStringsChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  Custom event for the attribute change"}], "description": "Updates the UI if changes are made to any of the strings in the strings\nattribute.", "guessedname": "_afterStringsChange", "guessedtype": "function"}, "_setUseBrowserConsole": {"return": {"type": "Boolean", "description": "true|false if logSource is a YUI instance"}, "description": "Setter method for useBrowserConsole attributes.  Only functional if the\nlogSource attribute points to a YUI instance.  Passes the value down to\nthe YUI instance.  NOTE: multiple Console instances cannot maintain\nindependent useBrowserConsole values, since it is just a pass through to\nthe YUI instance configuration.", "protected": "", "params": [{"type": "Boolean", "name": "v", "description": "  false to disable browser console printing (default)"}], "guessedname": "_setUseBrowserConsole", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Constructor code.  Set up the buffer and entry template, publish\ninternal events, and subscribe to the configured logEvent.", "guessedname": "initializer", "guessedtype": "function"}, "_cancelPrintLoop": {"protected": "", "description": "Clears the timeout for printing buffered messages.", "guessedname": "_cancelPrintLoop", "guessedtype": "function"}, "_trimOldEntries": {"protected": "", "description": "Removes the oldest message entries from the UI to maintain the limit\nspecified in the consoleLimit configuration.", "guessedname": "_trimOldEntries", "guessedtype": "function"}, "_getUseBrowserConsole": {"protected": "", "return": {"type": "Boolean", "description": "or null if logSource is not a YUI instance"}, "description": "Getter method for useBrowserConsole attribute.  Just a pass through to\nthe YUI instance configuration setting.", "guessedname": "_getUseBrowserConsole", "guessedtype": "function"}, "_defResetFn": {"protected": "", "description": "Clears the console, resets the startTime attribute, enables and\nunpauses the widget.", "guessedname": "_defResetFn", "guessedtype": "function"}, "_encodeHTML": {"return": {"type": "", "description": "String the encoded string"}, "description": "Returns the input string with ampersands (&amp;), &lt, and &gt; encoded\nas HTML entities.", "protected": "", "params": [{"type": "String", "name": "s", "description": "  the raw string"}], "guessedname": "_encodeHTML", "guessedtype": "function"}, "_uiSetHeight": {"protected": "", "params": [{"type": "String|Number", "name": "v", "description": "  the new height"}], "description": "Set the height of the Console container.  Set the body height to the difference between the configured height and the calculated heights of the header and footer.\nOverrides Widget.prototype._uiSetHeight.", "guessedname": "_uiSetHeight", "guessedtype": "function"}, "_onCollapseClick": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  DOM event facade for the click event"}], "description": "Event handler for clicking on the Collapse/Expand button. Sets the\n&quot;collapsed&quot; attribute accordingly.", "guessedname": "_onCollapseClick", "guessedtype": "function"}, "log": {"chainable": "", "params": [{"type": "MIXED", "name": "arg*", "description": "  (all arguments passed through to <code>Y.log</code>)"}], "description": "Wrapper for <code>Y.log</code>.", "guessedname": "log", "guessedtype": "function"}, "_initBody": {"protected": "", "description": "Create the DOM structure for the console body&#8212;where messages are\nrendered.", "guessedname": "_initBody", "guessedtype": "function"}, "_onLogEvent": {"protected": "", "params": [{"type": "String", "name": "msg", "description": "  the log message"}, {"type": "String", "name": "cat", "description": "  OPTIONAL the category or logLevel of the message"}, {"type": "String", "name": "src", "description": "  OPTIONAL the source of the message (e.g. widget name)"}], "description": "Responds to log events by normalizing qualifying messages and passing\nthem along through the entry event for buffering etc.", "guessedname": "_onLogEvent", "guessedtype": "function"}, "_afterPausedChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  Custom event for the attribute change"}], "description": "Updates the UI and schedules or cancels the print loop.", "guessedname": "_afterPausedChange", "guessedtype": "function"}, "_validateStyle": {"return": {"type": "Boolean", "description": "pass/fail"}, "description": "Validates input value for style attribute.  Accepts only values 'inline',\n'block', and 'separate'.", "protected": "", "params": [{"type": "String", "name": "style", "description": "  the proposed value"}], "guessedname": "_validateStyle", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Tears down the instance, flushing event subscriptions and purging the UI.", "guessedname": "destructor", "guessedtype": "function"}, "_initHead": {"protected": "", "description": "Create the DOM structure for the header elements.", "guessedname": "_initHead", "guessedtype": "function"}, "_afterConsoleLimitChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  Custom event for the attribute change"}], "description": "Calls this._trimOldEntries() in response to changes in the configured\nconsoleLimit attribute.", "guessedname": "_afterConsoleLimitChange", "guessedtype": "function"}, "_uiSizeCB": {"protected": "", "description": "Over-ride default content box sizing to do nothing, since we're sizing\nthe body section to fill out height ourselves.", "guessedname": "_uiSizeCB", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Set up event listeners to wire up the UI to the internal state.", "guessedname": "bindUI", "guessedtype": "function"}, "_defEntryFn": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  The Custom event carrying the message in its payload"}], "description": "Buffers incoming message objects and schedules the printing.", "guessedname": "_defEntryFn", "guessedtype": "function"}, "_validateLogSource": {"return": {"type": "Boolean", "description": "true if the input is an object with an <code>on</code>\nmethod"}, "description": "Validator for logSource attribute.", "protected": "", "params": [{"type": "Object", "name": "v", "description": "  the desired logSource"}], "guessedname": "_validateLogSource", "guessedtype": "function"}, "_htmlEscapeMessage": {"return": {"type": "", "description": "Object the message object with proper escapement"}, "description": "Performs HTML escaping on strings in the message object.", "protected": "", "params": [{"type": "Object", "name": "m", "description": "  the normalized message object"}], "guessedname": "_htmlEscapeMessage", "guessedtype": "function"}, "collapse": {"chainable": "", "description": "Collapses the body and footer.", "guessedname": "collapse", "guessedtype": "function"}, "_onPauseClick": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  DOM event facade for the click event"}], "description": "Event handler for clicking on the Pause checkbox to update the paused\nattribute.", "guessedname": "_onPauseClick", "guessedtype": "function"}, "_afterVisibleChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the visibleChange event"}], "description": "Makes adjustments to the UI if needed when the Console is hidden or shown", "guessedname": "_afterVisibleChange", "guessedtype": "function"}, "scrollToLatest": {"chainable": "", "description": "Scrolls to the most recent entry", "guessedname": "scrollToLatest", "guessedtype": "function"}, "_onClearClick": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  DOM event facade for the click event"}], "description": "Event handler for clicking on the Clear button.  Pass-through to\n<code>this.clearConsole()</code>.", "guessedname": "_onClearClick", "guessedtype": "function"}, "_schedulePrint": {"protected": "", "description": "Sets an interval for buffered messages to be output to the console.", "guessedname": "_schedulePrint", "guessedtype": "function"}, "_uiUpdateFromHideShow": {"protected": "", "params": [{"type": "Boolean", "name": "v", "description": "  true for visible, false for hidden"}], "description": "Recalculates dimensions and updates appropriately when shown", "guessedname": "_uiUpdateFromHideShow", "guessedtype": "function"}, "_createEntryHTML": {"return": {"type": "", "description": "String"}, "description": "Translates message meta into the markup for a console entry.", "protected": "", "params": [{"type": "Object", "name": "m", "description": "  object literal containing normalized message metadata"}], "guessedname": "_createEntryHTML", "guessedtype": "function"}, "expand": {"chainable": "", "description": "Expands the body and footer if collapsed.", "guessedname": "expand", "guessedtype": "function"}, "_uiUpdatePaused": {"protected": "", "params": [{"type": "Boolean", "name": "on", "description": "  the new checked state"}], "description": "Checks or unchecks the paused checkbox", "guessedname": "_uiUpdatePaused", "guessedtype": "function"}, "reset": {"chainable": "", "description": "Clears the console and resets internal timers.", "guessedname": "reset", "guessedtype": "function"}, "syncUI": {"description": "Sync the UI state to the current attribute state.", "guessedname": "syncUI", "guessedtype": "function"}, "_afterCollapsedChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  Custom event for the attribute change"}], "description": "Updates the className of the contentBox, which should trigger CSS to\nhide or show the body and footer sections depending on the new value.", "guessedname": "_afterCollapsedChange", "guessedtype": "function"}, "_initFoot": {"protected": "", "description": "Create the DOM structure for the footer elements.", "guessedname": "_initFoot", "guessedtype": "function"}, "printBuffer": {"chainable": "", "params": [{"type": "Number", "name": "limit", "description": "  (optional) max number of buffered entries to write"}], "description": "Outputs buffered messages to the console UI.  This is typically called\nfrom a scheduled interval until the buffer is empty (referred to as the\nprint loop).  The number of buffered messages output to the Console is\nlimited to the number provided as an argument.  If no limit is passed,\nall buffered messages are rendered.", "guessedname": "printBuffer", "guessedtype": "function"}, "_setLogLevel": {"return": {"type": "", "description": "String One of Console.LOG_LEVEL_INFO, _WARN, or _ERROR"}, "description": "Setter method for logLevel attribute.  Acceptable values are\n&quot;error&quot, &quot;warn&quot, and &quot;info&quot (case\ninsensitive).  Other values are treated as &quot;info&quot;.", "protected": "", "params": [{"type": "String", "name": "v", "description": "  the desired log level"}], "guessedname": "_setLogLevel", "guessedtype": "function"}, "clearConsole": {"chainable": "", "description": "Clear the console of messages and flush the buffer of pending messages.", "guessedname": "clearConsole", "guessedtype": "function"}, "_isInLogLevel": {"protected": "", "description": "Determine if incoming log messages are within the configured logLevel\nto be buffered for printing.", "guessedname": "_isInLogLevel", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Generate the Console UI.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "console.js", "guessedtype": "property", "shortname": "Console", "properties": {"_printLoop": {"description": "Holds the object API returned from <code>Y.later</code> for the print\nloop interval.", "default": "null", "protected": "", "guessedname": "_printLoop", "guessedtype": "property", "type": "Object"}, "Console.LOG_LEVEL_INFO": {"type": "String", "static": "", "description": "Static identifier for logLevel configuration setting to allow all\nincoming messages to generate Console entries.", "guessedname": "LOG_LEVEL_INFO", "guessedtype": "property"}, "Console.BODY_TEMPLATE": {"type": "String", "static": "", "description": "Markup template used to generate the DOM structure for the Console body\n(where the messages are inserted) when it is rendered.  The template\nincludes only the {placeholder} &quot;console_bd_class&quot;, which is\nconstributed by Console.CHROME_CLASSES.", "guessedname": "BODY_TEMPLATE", "guessedtype": "property"}, "Console.HEADER_TEMPLATE": {"type": "String", "static": "", "description": "Markup template used to generate the DOM structure for the header\nsection of the Console when it is rendered.  The template includes\nthese {placeholder}s:\n<ul>\n<li>console_button_class - contributed by Console.CHROME_CLASSES</li>\n<li>console_collapse_class - contributed by Console.CHROME_CLASSES</li>\n<li>console_hd_class - contributed by Console.CHROME_CLASSES</li>\n<li>console_title_class - contributed by Console.CHROME_CLASSES</li>\n<li>str_collapse - pulled from attribute strings.collapse</li>\n<li>str_title - pulled from attribute strings.title</li>\n</ul>", "guessedname": "HEADER_TEMPLATE", "guessedtype": "property"}, "buffer": {"description": "Array of normalized message objects awaiting printing.", "default": "null", "protected": "", "guessedname": "buffer", "guessedtype": "property", "type": "Array"}, "Console.ENTRY_TEMPLATE": {"type": "String", "static": "", "description": "Default markup template used to create the DOM structure for Console\nentries. The markup contains {placeholder}s for content and classes\nthat are replaced via Y.substitute.  The default template contains\nthe {placeholder}s identified in Console.ENTRY_CLASSES as well as the\nfollowing placeholders that will be populated by the log entry data:\n<ul>\n<li>cat_class</li>\n<li>src_class</li>\n<li>totalTime</li>\n<li>elapsedTime</li>\n<li>localTime</li>\n<li>sourceAndDetail</li>\n<li>message</li>\n</ul>", "guessedname": "ENTRY_TEMPLATE", "guessedtype": "property"}, "_body": {"description": "Reference to the Node instance that will house the console messages.", "default": "null", "protected": "", "guessedname": "_body", "guessedtype": "property", "type": "Node"}, "_head": {"description": "Reference to the Node instance containing the header contents.", "default": "null", "protected": "", "guessedname": "_head", "guessedtype": "property", "type": "Node"}, "Console.LOG_LEVEL_WARN": {"type": "String", "static": "", "description": "Static identifier for logLevel configuration setting to allow only\nincoming messages of logLevel &quot;warn&quot; or &quot;error&quot;\nto generate Console entries.", "guessedname": "LOG_LEVEL_WARN", "guessedtype": "property"}, "_foot": {"description": "Reference to the Node instance containing the footer contents.", "default": "null", "protected": "", "guessedname": "_foot", "guessedtype": "property", "type": "Node"}, "Console.ENTRY_CLASSES": {"type": "Object", "static": "", "description": "Map (object) of classNames used to populate the placeholders in the\nConsole.ENTRY_TEMPLATE markup when rendering a new Console entry.\n<p>By default, the keys contained in the object are:</p>\n<ul>\n<li>entry_class</li>\n<li>entry_meta_class</li>\n<li>entry_cat_class</li>\n<li>entry_src_class</li>\n<li>entry_time_class</li>\n<li>entry_content_class</li>\n</ul>", "guessedname": "ENTRY_CLASSES", "guessedtype": "property"}, "Console.FOOTER_TEMPLATE": {"type": "String", "static": "", "description": "Markup template used to generate the DOM structure for the footer\nsection of the Console when it is rendered.  The template includes\nmany of the {placeholder}s from Console.CHROME_CLASSES as well as:\n<ul>\n<li>id_guid - generated unique id, relates the label and checkbox</li>\n<li>str_pause - pulled from attribute strings.pause</li>\n<li>str_clear - pulled from attribute strings.clear</li>\n</ul>", "guessedname": "FOOTER_TEMPLATE", "guessedtype": "property"}, "Console.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute configuration of\nthe Widget.", "guessedname": "ATTRS", "guessedtype": "property"}, "Console.CHROME_CLASSES": {"type": "Object", "static": "", "description": "Map (object) of classNames used to populate the placeholders in the\nConsole.HEADER_TEMPLATE, Console.BODY_TEMPLATE, and\nConsole.FOOTER_TEMPLATE markup when rendering the Console UI.\n<p>By default, the keys contained in the object are:</p>\n<ul>\n<li>console_hd_class</li>\n<li>console_bd_class</li>\n<li>console_ft_class</li>\n<li>console_controls_class</li>\n<li>console_checkbox_class</li>\n<li>console_pause_class</li>\n<li>console_pause_label_class</li>\n<li>console_button_class</li>\n<li>console_clear_class</li>\n<li>console_collapse_class</li>\n<li>console_title_class</li>\n</ul>", "guessedname": "CHROME_CLASSES", "guessedtype": "property"}, "Console.LOG_LEVEL_ERROR": {"type": "String", "static": "", "description": "Static identifier for logLevel configuration setting to allow only\nincoming messages of logLevel &quot;error&quot; to generate\nConsole entries.", "guessedname": "LOG_LEVEL_ERROR", "guessedtype": "property"}, "_evtCat": {"protected": "", "type": "string", "description": "Category to prefix all event subscriptions to allow for ease of detach\nduring destroy.", "guessedname": "_evtCat", "guessedtype": "property"}, "Console.NAME": {"type": "String", "static": "", "description": "The identity of the widget.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "Console creates a visualization for messages logged through calls to a YUI\ninstance's <code>Y.log( message, category, source )</code> method.  The\ndebug versions of YUI modules will include logging statements to offer some\ninsight into the steps executed during that module's operation.  Including\nlog statements in your code will cause those messages to also appear in the\nConsole.  Use Console to aid in developing your page or application.\nEntry categories &quot;info&quot;, &quot;warn&quot;, and &quot;error&quot;\nare also referred to as the log level, and entries are filtered against the\nconfigured logLevel."}, "YQL": {"name": "YQL", "constructors": [{"params": [{"type": "String", "name": "sql", "description": " The SQL statement to execute"}, {"type": "Function", "name": "callback", "description": " The callback to execute after the query (optional)."}, {"type": "Object", "name": "params", "description": " An object literal of extra parameters to pass along (optional)."}], "description": "This class adds a sugar class to allow access to YQL (http://developer.yahoo.com/yql/)."}], "namespace": "", "module": "yql", "guessedname": "YQL", "file": "yql.js", "guessedtype": "function", "shortname": "YQL", "description": "This class adds a sugar class to allow access to YQL (http://developer.yahoo.com/yql/)."}, "ExecCommand": {"shortname": "ExecCommand", "namespace": "", "name": "ExecCommand", "methods": {"COMMANDS.insertorderedlist": {"return": {"type": "Node", "description": "Node instance of the item touched by this command."}, "description": "Override for the insertorderedlist method from the <a href=\"Plugin.EditorLists.html\">EditorLists</a> plugin.", "static": "", "guessedname": "insertorderedlist", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: insertorderedlist"}]}, "COMMANDS.insertunorderedlist": {"return": {"type": "Node", "description": "Node instance of the item touched by this command."}, "description": "Override for the insertunorderedlist method from the <a href=\"Plugin.EditorLists.html\">EditorLists</a> plugin.", "static": "", "guessedname": "insertunorderedlist", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: insertunorderedlist"}]}, "COMMANDS.createlink": {"return": {"type": "Node", "description": "Node instance of the item touched by this command."}, "description": "Override for the createlink method from the <a href=\"Plugin.CreateLinkBase.html\">CreateLinkBase</a> plugin.", "static": "", "guessedname": "createlink", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: createlink"}]}}}, "DOMEventFacade": {"name": "DOMEventFacade", "description": "Wraps a DOM event, properties requiring browser abstraction are\nfixed here.  Provids a security layer when required.", "namespace": "", "module": "event", "guessedname": "ua", "param": "ev {Event} the DOM event", "file": "event-facade-dom.js", "guessedtype": "property", "shortname": "DOMEventFacade", "properties": {"webkitKeymap": {"private": "", "description": "webkit key remapping required for Safari < 3.1", "guessedname": "webkitKeymap", "guessedtype": "property"}, "which": {"type": "int", "description": "The button that was pushed.  Same as button."}, "button": {"type": "int", "description": "The button that was pushed."}, "_event": {"description": "The native event"}, "wheelDelta": {"type": "int", "description": "Number representing the direction and velocity of the movement of the mousewheel.\nNegative is down, the higher the number, the faster.  Applies to the mousewheel event."}, "pageX": {"type": "int", "description": "The X location of the event on the page (including scroll)"}, "pageY": {"type": "int", "description": "The Y location of the event on the page (including scroll)"}, "charCode": {"type": "int", "description": "The charCode for key events.  Same as keyCode"}, "keyCode": {"type": "int", "description": "The keyCode for key events.  Uses charCode if keyCode is not available"}}, "methods": {"resolve": {"private": "", "description": "Returns a wrapped node.  Intended to be used on event targets,\nso it will return the node's parent if the target is a text\nnode.\nIf accessing a property of the node throws an error, this is\nprobably the anonymous div wrapper Gecko adds inside text\nnodes.  This likely will only occur when attempting to access\nthe relatedTarget.  In this case, we now return null because\nthe anonymous div is completely useless and we do not know\nwhat the related target was because we can't even get to\nthe element's parent node.", "guessedname": "resolve", "guessedtype": "function"}, "halt": {"params": [{"type": "boolean", "name": "immediate", "description": "  if true additional listeners\non the current target will not be executed"}], "description": "Stops the event propagation and prevents the default\nevent behavior."}, "_touch": {"guessedname": "_touch", "params": [{"type": "Event", "name": "ev", "description": "  the DOM event"}, {"type": "HTMLElement", "name": "currentTarget", "description": "  the element the listener was attached to"}, {"type": "Event.Custom", "name": "wrapper", "description": "  the custom event wrapper for this DOM event"}], "description": "Adds touch event facade normalization properties to the DOM event facade", "private": "", "guessedtype": "function"}, "stopImmediatePropagation": {"description": "Stops the propagation to the next bubble target and\nprevents any additional listeners from being exectued\non the current target."}, "preventDefault": {"params": [{"type": "string", "name": "returnValue", "description": "  sets the returnValue of the event to this value\n(rather than the default false value).  This can be used to add a customized\nconfirmation query to the beforeunload event)."}], "description": "Prevents the event's default behavior"}, "stopPropagation": {"description": "Stops the propagation to the next bubble target"}}}, "plugin.NodeFocusManager": {"name": "plugin.NodeFocusManager", "namespace": "plugin", "module": "node-focusmanager", "events": {"circularChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "circularChange", "description": "Fires when the value for the configuration attribute 'circular' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "keysChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "keysChange", "description": "Fires when the value for the configuration attribute 'keys' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "focusClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "focusClassChange", "description": "Fires when the value for the configuration attribute 'focusClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "activeDescendantChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeDescendantChange", "description": "Fires when the value for the configuration attribute 'activeDescendant' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "focusedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "focusedChange", "description": "Fires when the value for the configuration attribute 'focused' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "descendantsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "descendantsChange", "description": "Fires when the value for the configuration attribute 'descendants' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "NodeFocusManager", "methods": {"_onDocMouseDown": {"protected": "", "params": [{"type": "Object", "name": "event", "description": "  Object representing the DOM event."}], "description": "\"mousedown\" event handler for the owner document of the\nFocus Manager's Node.", "guessedname": "_onDocMouseDown", "guessedtype": "function"}, "_detachEventHandlers": {"protected": "", "description": "Detaches all event handlers used by the Focus Manager.", "guessedname": "_detachEventHandlers", "guessedtype": "function"}, "_preventScroll": {"protected": "", "description": "Prevents the viewport from scolling when the user presses\nthe up, down, left, or right key.", "guessedname": "_preventScroll", "guessedtype": "function"}, "_focusPrevious": {"protected": "", "params": [{"type": "Object", "name": "event", "description": "  Object representing the DOM event."}, {"type": "Number", "name": "activeDescendant", "description": "  Number representing the index of the\nnext descendant to be focused."}], "description": "Keydown event handler that moves focus to the previous\nenabled descendant.", "guessedname": "_focusPrevious", "guessedtype": "function"}, "_onDocFocus": {"protected": "", "params": [{"type": "Object", "name": "event", "description": "  Object representing the DOM event."}], "description": "\"focus\" event handler for the owner document of the\nFocus Manager's Node.", "guessedname": "_onDocFocus", "guessedtype": "function"}, "_initDescendants": {"protected": "", "description": "Sets the <code>tabIndex</code> attribute of all of the\ndescendants to -1, except the active descendant, whose\n<code>tabIndex</code> attribute is set to 0.", "guessedname": "_initDescendants", "guessedtype": "function"}, "_afterActiveDescendantChange": {"protected": "", "params": [{"type": "Object", "name": "event", "description": "  Object representing the change event."}], "description": "afterChange event handler for the\n\"activeDescendant\" attribute.", "guessedname": "_afterActiveDescendantChange", "guessedtype": "function"}, "_focusNext": {"protected": "", "params": [{"type": "Object", "name": "event", "description": "  Object representing the DOM event."}, {"type": "Number", "name": "activeDescendant", "description": "  Number representing the index of the\nnext descendant to be focused"}], "description": "Keydown event handler that moves focus to the next\nenabled descendant.", "guessedname": "_focusNext", "guessedtype": "function"}, "blur": {"description": "Blurs the current active descendant and sets the\n<code>focused</code> attribute to false.", "guessedname": "blur", "guessedtype": "function"}, "stop": {"description": "Disables the Focus Manager by detaching all event handlers.", "guessedname": "stop", "guessedtype": "function"}, "focus": {"params": [{"type": "Number", "name": "index", "description": "  Optional. Number representing the index of the\ndescendant to be set as the active descendant."}, {"type": "Node", "name": "index", "description": "  Optional. Node instance representing the\ndescendant to be set as the active descendant."}], "description": "Focuses the active descendant and sets the\n<code>focused</code> attribute to true.", "guessedname": "focus", "guessedtype": "function"}, "refresh": {"description": "Refreshes the Focus Manager's descendants by re-executing the\nCSS selector query specified by the <code>descendants</code> attribute.", "guessedname": "refresh", "guessedtype": "function"}, "start": {"description": "Enables the Focus Manager.", "guessedname": "start", "guessedtype": "function"}, "_fireClick": {"protected": "", "description": "Fires the click event if the enter key is pressed while\nfocused on an HTML element that is not natively clickable.", "guessedname": "_fireClick", "guessedtype": "function"}, "_removeFocusClass": {"protected": "", "description": "Removes the class name representing focus (as specified by\nthe \"focusClass\" attribute) from the Node instance to which it is\ncurrently applied.", "guessedname": "_removeFocusClass", "guessedtype": "function"}, "_isDescendant": {"return": {"type": "Boolean", "description": "Boolean indicating if the specified Node instance is a\ndescendant managed by the Focus Manager."}, "description": "Determines if the specified Node instance is a descendant\nmanaged by the Focus Manager.", "protected": "", "params": [{"type": "Node", "name": "node", "description": "  Node instance to be checked."}], "guessedname": "_isDescendant", "guessedtype": "function"}, "_detachKeyHandler": {"protected": "", "description": "Detaches the \"key\" event handlers used to support the \"keys\"\nattribute.", "guessedname": "_detachKeyHandler", "guessedtype": "function"}, "_attachKeyHandler": {"protected": "", "description": "Attaches the \"key\" event handlers used to support the \"keys\"\nattribute.", "guessedname": "_attachKeyHandler", "guessedtype": "function"}}, "file": "node-focusmanager.js", "guessedtype": "function", "shortname": "NodeFocusManager", "configs": {"descendants": {"type": "Y.NodeList", "description": "String representing the CSS selector used to define the descendant Nodes\nwhose focus should be managed.", "guessedname": "descendants", "guessedtype": "property"}, "keys": {"type": "Object", "description": "Object literal representing the keys to be used to navigate between the\nnext/previous descendant.  The format for the attribute's value is\n<code>{ next: \"down:40\", previous: \"down:38\" }</code>.  The value for the\n\"next\" and \"previous\" properties are used to attach\n<a href=\"event/#keylistener\"><code>key</code></a> event listeners. See\nthe <a href=\"event/#keylistener\">Using the key Event</a> section of\nthe Event documentation for more information on \"key\" event listeners.", "guessedname": "keys", "guessedtype": "property"}, "focusClass": {"type": "String|Object", "description": "String representing the name of class applied to the focused active\ndescendant Node.  Can also be an object literal used to define both the\nclass name, and the Node to which the class should be applied.  If using\nan object literal, the format is:\n<code>{ className: \"focus\", fn: myFunction }</code>.  The function\nreferenced by the <code>fn</code> property in the object literal will be\npassed a reference to the currently focused active descendant Node.", "guessedname": "focusClass", "guessedtype": "property"}, "focused": {"description": "Boolean indicating that one of the descendants is focused.", "default": "false", "readonly": "", "guessedname": "focused", "guessedtype": "property", "type": "boolean"}, "activeDescendant": {"type": "Number", "description": "<p>Node, or index of the Node, representing the descendant that is either\nfocused or is focusable (<code>tabIndex</code> attribute is set to 0).\nThe value cannot represent a disabled descendant Node.  Use a value of -1\nto remove all descendant Nodes from the default tab flow.\nIf no value is specified, the active descendant will be inferred using\nthe following criteria:</p>\n<ol>\n<li>Examining the <code>tabIndex</code> attribute of each descendant and\nusing the first descendant whose <code>tabIndex</code> attribute is set\nto 0</li>\n<li>If no default can be inferred then the value is set to either 0 or\nthe index of the first enabled descendant.</li>\n</ol>", "guessedname": "activeDescendant", "guessedtype": "property"}, "circular": {"type": "Boolean", "description": "Boolean indicating if focus should be set to the first/last descendant\nwhen the end or beginning of the descendants has been reached.", "guessedname": "circular", "guessedtype": "property"}}, "description": "The NodeFocusManager class is a plugin for a Node instance.  The class is used\nvia the <a href=\"Node.html#method_plug\"><code>plug</code></a> method of Node\nand should not be instantiated directly."}, "YUI": {"global": "", "name": "YUI", "description": "The YUI global namespace object.  If YUI is already defined, the\nexisting YUI object will not be overwritten so that defined\nnamespaces are preserved.  It is the constructor for the object\nthe end user interacts with.  As indicated below, each instance\nhas full custom event support, but only if the event system\nis available.  This is a self-instantiable factory function.  You\ncan invoke it directly like this:\nYUI().use('*', function(Y) {\n// ready\n});\nBut it also works like this:\nvar Y = YUI();", "constructors": [{"params": [{"type": "object", "name": "o*", "description": "  0..n optional configuration objects.  these values\nare store in Y.config.  See config for the list of supported\nproperties."}], "description": "The YUI global namespace object.  If YUI is already defined, the\nexisting YUI object will not be overwritten so that defined\nnamespaces are preserved.  It is the constructor for the object\nthe end user interacts with.  As indicated below, each instance\nhas full custom event support, but only if the event system\nis available.  This is a self-instantiable factory function.  You\ncan invoke it directly like this:\nYUI().use('*', function(Y) {\n// ready\n});\nBut it also works like this:\nvar Y = YUI();"}], "namespace": "", "module": "yui", "events": {"available": {"return": "{EventHandle} the detach handle", "params": [{"type": "string", "name": "type", "description": "  'available'"}, {"type": "function", "name": "fn", "description": "  the callback function to execute."}, {"type": "string", "name": "el", "description": "  an selector for the element(s) to attach"}, {"type": "", "name": "context", "description": " optional argument that specifies what 'this' refers to."}, {"type": "", "name": "args*", "description": " 0..n additional arguments to pass on to the callback function.\nThese arguments will be added after the event object."}], "description": "Executes the callback as soon as the specified element\nis detected in the DOM.  This function expects a selector\nstring for the element(s) to detect.  If you already have\nan element reference, you don't need this event.", "guessedname": "available", "guessedtype": "property"}, "contentready": {"return": "{EventHandle} the detach handle", "params": [{"type": "string", "name": "type", "description": "  'contentready'"}, {"type": "function", "name": "fn", "description": "  the callback function to execute."}, {"type": "string", "name": "el", "description": "  an selector for the element(s) to attach."}, {"type": "", "name": "context", "description": " optional argument that specifies what 'this' refers to."}, {"type": "", "name": "args*", "description": " 0..n additional arguments to pass on to the callback function.\nThese arguments will be added after the event object."}], "description": "Executes the callback as soon as the specified element\nis detected in the DOM with a nextSibling property\n(indicating that the element's children are available).\nThis function expects a selector\nstring for the element(s) to detect.  If you already have\nan element reference, you don't need this event.", "guessedname": "contentready", "guessedtype": "property"}, "mousewheel": {"return": "{EventHandle} the detach handle", "params": [{"type": "string", "name": "type", "description": "  'mousewheel'"}, {"type": "function", "name": "fn", "description": "  the callback to execute"}, {"type": "", "name": "context", "description": " optional context object"}, {"type": "", "name": "args", "description": " 0..n additional arguments to provide to the listener."}], "description": "Mousewheel event.  This listener is automatically attached to the\ncorrect target, so one should not be supplied.  Mouse wheel \ndirection and velocity is stored in the 'mouseDelta' field.", "guessedname": "mousewheel", "guessedtype": "property"}, "domready": {"description": "The domready event fires at the moment the browser's DOM is\nusable. In most cases, this is before images are fully\ndownloaded, allowing you to provide a more responsive user\ninterface.\nIn YUI 3, domready subscribers will be notified immediately if\nthat moment has already passed when the subscription is created.\nOne exception is if the yui.js file is dynamically injected into\nthe page.  If this is done, you must tell the YUI instance that\nyou did this in order for DOMReady (and window load events) to\nfire normally.  That configuration option is 'injected' -- set\nit to true if the yui.js script is not included inline.\nThis method is part of the 'event-ready' module, which is a\nsubmodule of 'event'."}, "flick": {"return": "{EventHandle} the detach handle", "params": [{"type": "string", "name": "type", "description": "  \"flick\""}, {"type": "function", "name": "fn", "description": "  The method the event invokes. It receives an event facade with an e.flick object containing the flick related properties: e.flick.time, e.flick.distance, e.flick.velocity and e.flick.axis, e.flick.start."}, {"type": "Object", "name": "cfg", "description": "  Optional. An object which specifies any of the following:\n<dl>\n<dt>minDistance (in pixels, defaults to 10)</dt>\n<dd>The minimum distance between start and end points, which would qualify the gesture as a flick.</dd>\n<dt>minVelocity (in pixels/ms, defaults to 0)</dt>\n<dd>The minimum velocity which would qualify the gesture as a flick.</dd>\n<dt>preventDefault (defaults to false)</dt>\n<dd>Can be set to true/false to prevent default behavior as soon as the touchstart/touchend or mousedown/mouseup is received so that things like scrolling or text selection can be \nprevented. This property can also be set to a function, which returns true or false, based on the event facade passed to it.</dd>\n<dt>axis (no default)</dt>\n<dd>Can be set to \"x\" or \"y\" if you want to constrain the flick velocity and distance to a single axis. If not\ndefined, the axis along which the maximum distance was covered is used.</dd>\n</dl>"}], "description": "Sets up a \"flick\" event, that is fired whenever the user initiates a flick gesture on the node\nwhere the listener is attached. The subscriber can specify a minimum distance or velocity for\nwhich the event is to be fired. The subscriber can also specify if there is a particular axis which\nthey are interested in - \"x\" or \"y\". If no axis is specified, the axis along which there was most distance\ncovered is used.\n<p>It is recommended that you use Y.bind to set up context and additional arguments for your event handler,\nhowever if you want to pass the context and arguments as additional signature arguments to \"on\", \nyou need to provide a null value for the configuration object, e.g: <code>node.on(\"flick\", fn, null, context, arg1, arg2, arg3)</code></p>"}, "gesturemoveend": {"return": "{EventHandle} the detach handle", "params": [{"type": "string", "name": "type", "description": "  \"gesturemoveend\""}, {"type": "function", "name": "fn", "description": "  The method the event invokes. It receives the event facade of the underlying DOM event (mouseup or touchend.changedTouches[0])."}, {"type": "Object", "name": "cfg", "description": "  Optional. An object which specifies:\n<dl>\n<dt>standAlone (defaults to false)</dt>\n<dd>true, if the subscriber should be notified even if a \"gesturemovestart\" or \"gesturemove\" has not occured on the same node.</dd>\n<dt>root (defaults to document)</dt>\n<dd>The node to which the internal DOM listeners should be attached.</dd>\n<dt>preventDefault (defaults to false)</dt>\n<dd>Can be set to true/false to prevent default behavior as soon as the touchend or mouseup is received. As with gesturemovestart, can also be set to function which returns true/false based on the event facade passed to it.</dd>\n</dl>"}], "description": "Sets up a \"gesturemoveend\" event, that is fired on touch devices in response to a single finger \"touchend\",\nand on mouse based devices in response to a \"mouseup\".\n<p>By default this event is only fired when the same node\nhas received a \"gesturemove\" or \"gesturemovestart\" event. The subscriber can set standAlone to true, in the configuration properties,\nif they want to listen for this event without a preceding \"gesturemovestart\" or \"gesturemove\".</p>\n<p>By default this event sets up it's internal \"touchend\" and \"mouseup\" DOM listeners on the document element. The subscriber\ncan set the root configuration property, to specify which node to attach DOM listeners to, if different from the document.</p> \n<p>This event can also be listened for using node.delegate().</p>\n<p>It is recommended that you use Y.bind to set up context and additional arguments for your event handler,\nhowever if you want to pass the context and arguments as additional signature arguments to on/delegate, \nyou need to provide a null value for the configuration object, e.g: <code>node.on(\"gesturemoveend\", fn, null, context, arg1, arg2, arg3)</code></p>"}, "gesturemove": {"return": "{EventHandle} the detach handle", "params": [{"type": "string", "name": "type", "description": "  \"gesturemove\""}, {"type": "function", "name": "fn", "description": "  The method the event invokes. It receives the event facade of the underlying DOM event (mousemove or touchmove.touches[0]) which contains position co-ordinates."}, {"type": "Object", "name": "cfg", "description": "  Optional. An object which specifies:\n<dl>\n<dt>standAlone (defaults to false)</dt>\n<dd>true, if the subscriber should be notified even if a \"gesturemovestart\" has not occured on the same node.</dd>\n<dt>root (defaults to document)</dt>\n<dd>The node to which the internal DOM listeners should be attached.</dd>\n<dt>preventDefault (defaults to false)</dt>\n<dd>Can be set to true/false to prevent default behavior as soon as the touchmove or mousemove is received. As with gesturemovestart, can also be set to function which returns true/false based on the event facade passed to it.</dd>\n</dl>"}], "description": "Sets up a \"gesturemove\" event, that is fired on touch devices in response to a single finger \"touchmove\",\nand on mouse based devices in response to a \"mousemove\".\n<p>By default this event is only fired when the same node\nhas received a \"gesturemovestart\" event. The subscriber can set standAlone to true, in the configuration properties,\nif they want to listen for this event without an initial \"gesturemovestart\".</p>\n<p>By default this event sets up it's internal \"touchmove\" and \"mousemove\" DOM listeners on the document element. The subscriber\ncan set the root configuration property, to specify which node to attach DOM listeners to, if different from the document.</p> \n<p>This event can also be listened for using node.delegate().</p>\n<p>It is recommended that you use Y.bind to set up context and additional arguments for your event handler,\nhowever if you want to pass the context and arguments as additional signature arguments to on/delegate, \nyou need to provide a null value for the configuration object, e.g: <code>node.on(\"gesturemove\", fn, null, context, arg1, arg2, arg3)</code></p>"}, "windowresize": {"description": "Firefox fires the window resize event once when the resize action\nfinishes, other browsers fire the event periodically during the\nresize.  This code uses timeout logic to simulate the Firefox \nbehavior in other browsers.", "guessedname": "windowresize", "guessedtype": "property"}, "valueChange": {"params": [{"type": "EventFacade", "name": "e", "description": " Event facade with the following additional\nproperties:\n<dl>\n<dt>prevVal (String)</dt>\n<dd>\nPrevious value before the latest change.\n</dd>\n<dt>newVal (String)</dt>\n<dd>\nNew value after the latest change.\n</dd>\n</dl>"}], "description": "<p>\nSynthetic event that fires when the <code>value</code> property of an input\nfield or textarea changes as a result of a keystroke, mouse operation, or\ninput method editor (IME) input event.\n</p>\n<p>\nUnlike the <code>onchange</code> event, this event fires when the value\nactually changes and not when the element loses focus. This event also\nreports IME and multi-stroke input more reliably than <code>oninput</code> or\nthe various key events across browsers.\n</p>\n<p>\nThis event is provided by the <code>event-valuechange</code> module.\n</p>\n<p>\n<strong>Usage example:</strong>\n</p>\n<code><pre>\nYUI().use('event-valuechange', function (Y) {\n&nbsp;&nbsp;Y.one('input').on('valueChange', function (e) {\n&nbsp;&nbsp;&nbsp;&nbsp;// Handle valueChange events on the first input element on the page.\n&nbsp;&nbsp;});\n});\n</pre></code>"}, "hashchange": {"since": "3.2.0", "params": [{"type": "EventFacade", "name": "e", "description": " Event facade with the following additional\nproperties:\n<dl>\n<dt>oldHash</dt>\n<dd>\nPrevious hash fragment value before the change.\n</dd>\n<dt>oldUrl</dt>\n<dd>\nPrevious URL (including the hash fragment) before the change.\n</dd>\n<dt>newHash</dt>\n<dd>\nNew hash fragment value after the change.\n</dd>\n<dt>newUrl</dt>\n<dd>\nNew URL (including the hash fragment) after the change.\n</dd>\n</dl>"}], "description": "<p>\nSynthetic <code>window.onhashchange</code> event that normalizes differences\nacross browsers and provides support for browsers that don't natively support\n<code>onhashchange</code>.\n</p>\n<p>\nThis event is provided by the <code>history-hash</code> module.\n</p>\n<p>\n<strong>Usage example:</strong>\n</p>\n<code><pre>\nYUI().use('history-hash', function (Y) {\n&nbsp;&nbsp;Y.on('hashchange', function (e) {\n&nbsp;&nbsp;&nbsp;&nbsp;// Handle hashchange events on the current window.\n&nbsp;&nbsp;}, Y.config.win);\n});\n</pre></code>", "guessedname": "hashNotifiers", "guessedtype": "property"}, "key": {"return": "{Event.Handle} the detach handle", "params": [{"type": "string", "name": "type", "description": "  'key'"}, {"type": "function", "name": "fn", "description": "  the function to execute"}, {"type": "string|HTMLElement|collection", "name": "id", "description": "  the element(s) to bind"}, {"type": "string", "name": "spec", "description": "  the keyCode and modifier specification"}, {"type": "", "name": "o", "description": " optional context object"}, {"type": "", "name": "args", "description": " 0..n additional arguments to provide to the listener."}], "description": "Add a key listener.  The listener will only be notified if the\nkeystroke detected meets the supplied specification.  The\nspec consists of the key event type, followed by a colon,\nfollowed by zero or more comma separated key codes, followed\nby zero or more modifiers delimited by a plus sign.  Ex:\npress:12,65+shift+ctrl", "guessedname": "key", "guessedtype": "property"}, "gesturemovestart": {"return": "{EventHandle} the detach handle", "params": [{"type": "string", "name": "type", "description": "  \"gesturemovestart\""}, {"type": "function", "name": "fn", "description": "  The method the event invokes. It receives the event facade of the underlying DOM event (mousedown or touchstart.touches[0]) which contains position co-ordinates."}, {"type": "Object", "name": "cfg", "description": "  Optional. An object which specifies:\n<dl>\n<dt>minDistance (defaults to 0)</dt>\n<dd>The minimum distance threshold which should be crossed before the gesturemovestart is fired</dd>\n<dt>minTime (defaults to 0)</dt>\n<dd>The minimum time threshold for which the finger/mouse should be help down before the gesturemovestart is fired</dd>\n<dt>button (no default)</dt>\n<dd>In the case of a mouse input device, if the event should only be fired for a specific mouse button.</dd>\n<dt>preventDefault (defaults to false)</dt>\n<dd>Can be set to true/false to prevent default behavior as soon as the touchstart or mousedown is received (that is before minTime or minDistance thresholds are crossed, and so before the gesturemovestart listener is notified) so that things like text selection and context popups (on touch devices) can be \nprevented. This property can also be set to a function, which returns true or false, based on the event facade passed to it (for example, DragDrop can determine if the target is a valid handle or not before preventing default).</dd>\n</dl>"}], "description": "Sets up a \"gesturemovestart\" event, that is fired on touch devices in response to a single finger \"touchstart\",\nand on mouse based devices in response to a \"mousedown\". The subscriber can specify the minimum time\nand distance thresholds which should be crossed before the \"gesturemovestart\" is fired and for the mouse,\nwhich button should initiate a \"gesturemovestart\". This event can also be listened for using node.delegate().\n<p>It is recommended that you use Y.bind to set up context and additional arguments for your event handler,\nhowever if you want to pass the context and arguments as additional signature arguments to on/delegate, \nyou need to provide a null value for the configuration object, e.g: <code>node.on(\"gesturemovestart\", fn, null, context, arg1, arg2, arg3)</code></p>"}}, "uses": ["EventTarget"], "file": "yui.js", "shortname": "YUI", "properties": {"Global": {"type": "EventTarget", "description": "Hosts YUI page level events.  This is where events bubble to\nwhen the broadcast config is set to 2.  This property is\nonly available if the custom event module is loaded.", "guessedname": "Global", "guessedtype": "property"}, "version": {"type": "string", "description": "The version number of the YUI instance.", "guessedname": "version", "guessedtype": "property"}, "Env.meta": {"description": "The component metadata is stored in Y.Env.meta.\nPart of the loader module.", "guessedname": "meta", "guessedtype": "property"}}, "methods": {"instanceOf": {"since": "3.3.0", "description": "instanceof check for objects that works around\nmemory leak in IE when the item tested is\nwindow/document"}, "_init": {"private": "", "description": "Initialize this YUI instance", "guessedname": "_init", "guessedtype": "function"}, "_attach": {"private": "", "description": "Executes the function associated with each required\nmodule, binding the module to the YUI instance.", "guessedname": "_attach", "guessedtype": "function"}, "message": {"return": {"type": "YUI", "description": "YUI instance."}, "params": [{"type": "String", "name": "msg", "description": "  The message to log."}, {"type": "String", "name": "cat", "description": "  The log category for the message.  Default\ncategories are \"info\", \"warn\", \"error\", time\".\nCustom categories can be used as well. (opt)."}, {"type": "String", "name": "src", "description": "  The source of the the message (opt)."}, {"type": "boolean", "name": "silent", "description": " If true, the log event won't fire."}], "description": "Write a system message.  This message will be preserved in the\nminified and raw versions of the YUI files, unlike log statements.", "guessedname": "message", "guessedtype": "function"}, "guid": {"return": {"type": "string", "description": "the guid."}, "params": [{"type": "string", "name": "pre", "description": "  optional guid prefix."}], "description": "Generate an id that is unique among all YUI instances", "guessedname": "guid", "guessedtype": "function"}, "use": {"return": {"type": "YUI", "description": "the YUI instance."}, "params": [{"type": "string", "name": "modules*", "description": "  1-n modules to bind (uses arguments array)."}, {"type": "function", "name": "*callback", "description": "  callback function executed when\nthe instance has the required functionality.  If included, it\nmust be the last parameter.\n<code>\n// loads and attaches drag and drop and its dependencies\nYUI().use('dd', function(Y) &#123;&#125);\n// attaches all modules that are available on the page\nYUI().use('*', function(Y) &#123;&#125);\n// intrinsic YUI gallery support (since 3.1.0)\nYUI().use('gallery-yql', function(Y) &#123;&#125);\n// intrinsic YUI 2in3 support (since 3.1.0)\nYUI().use('yui2-datatable', function(Y) &#123;&#125);.\n</code>"}], "description": "Attaches one or more modules to the YUI instance.  When this\nis executed, the requirements are analyzed, and one of\nseveral things can happen:\n- All requirements are available on the page --  The modules\nare attached to the instance.  If supplied, the use callback\nis executed synchronously.\n- Modules are missing, the Get utility is not available OR\nthe 'bootstrap' config is false -- A warning is issued about\nthe missing modules and all available modules are attached.\n- Modules are missing, the Loader is not available but the Get\nutility is and boostrap is not false -- The loader is bootstrapped\nbefore doing the following....\n- Modules are missing and the Loader is available -- The loader\nexpands the dependency tree and fetches missing modules.  When\nthe loader is finshed the callback supplied to use is executed\nasynchronously.", "guessedname": "use", "guessedtype": "function"}, "log": {"return": {"type": "YUI", "description": "YUI instance."}, "params": [{"type": "String", "name": "msg", "description": "  The message to log."}, {"type": "String", "name": "cat", "description": "  The log category for the message.  Default\ncategories are \"info\", \"warn\", \"error\", time\".\nCustom categories can be used as well. (opt)."}, {"type": "String", "name": "src", "description": "  The source of the the message (opt)."}, {"type": "boolean", "name": "silent", "description": " If true, the log event won't fire."}], "description": "If the 'debug' config is true, a 'yui:log' event will be\ndispatched, which the Console widget and anything else\ncan consume.  If the 'useBrowserConsole' config is true, it will\nwrite to the browser console if available.  YUI-specific log\nmessages will only be present in the -debug versions of the\nJS files.  The build system is supposed to remove log statements\nfrom the raw and minified versions of the files.", "guessedname": "log", "guessedtype": "function"}, "_iePreventSelect": {"private": "", "description": "Native onselectstart handle to prevent selection in IE", "guessedname": "_iePreventSelect", "guessedtype": "function"}, "stamp": {"return": {"type": "string", "description": "The object's guid or null."}, "params": [{"type": "", "name": "o", "description": " The object to stamp."}, {"type": "boolean", "name": "readOnly", "description": "  if true, a valid guid will only\nbe returned if the object has one assigned to it."}], "description": "Returns a guid associated with an object.  If the object\ndoes not have one, a new one is created unless readOnly\nis specified.", "guessedname": "stamp", "guessedtype": "function"}, "applyTo": {"return": {"type": "object", "description": "the return value from the applied method or null."}, "params": [{"type": "string", "name": "id", "description": "  the YUI instance id."}, {"type": "string", "name": "method", "description": "  the name of the method to exectute.\nEx: 'Object.keys'."}, {"type": "Array", "name": "args", "description": "  the arguments to apply to the method."}], "description": "Executes a method on a YUI instance with\nthe specified id if the specified method is whitelisted.", "guessedname": "applyTo", "guessedtype": "function"}, "_fixIESelect": {"guessedname": "_fixIESelect", "params": [{"type": "Node", "name": "bb", "description": " The bounding box"}, {"type": "Node", "name": "cb", "description": " The content box"}], "description": "Internal method to fix text selection in IE", "private": "", "guessedtype": "function"}, "namespace": {"return": {"type": "object", "description": "A reference to the last namespace object created."}, "params": [{"type": "string*", "name": "arguments", "description": " 1-n namespaces to create."}], "description": "Returns the namespace specified and creates it if it doesn't exist\n<pre>\nYUI.namespace(\"property.package\");\nYUI.namespace(\"YAHOO.property.package\");\n</pre>\nEither of the above would create YUI.property, then\nYUI.property.package (YAHOO is scrubbed out, this is\nto remain compatible with YUI2)\nBe careful when naming packages. Reserved words may work in some browsers\nand not others. For instance, the following will fail in Safari:\n<pre>\nYUI.namespace(\"really.long.nested.namespace\");\n</pre>\nThis fails because \"long\" is a future reserved word in ECMAScript", "guessedname": "namespace", "guessedtype": "function"}, "applyConfig": {"since": "3.2.0", "params": [{"type": "object", "name": "the", "description": " configuration object."}], "description": "Applies a new configuration object to the YUI instance config.\nThis will merge new group/module definitions, and will also\nupdate the loader cache if necessary.  Updating Y.config directly\nwill not update the cache.", "guessedname": "applyConfig", "guessedtype": "function"}, "mix": {"return": {"type": "object", "description": "the augmented object."}, "description": "Applies the supplier's properties to the receiver.  By default\nall prototype and static propertes on the supplier are applied\nto the corresponding spot on the receiver.  By default all\nproperties are applied, and a property that is already on the\nreciever will not be overwritten.  The default behavior can\nbe modified by supplying the appropriate parameters.", "params": [{"type": "Function", "name": "r", "description": "  the object to receive the augmentation."}, {"type": "Function", "name": "s", "description": "  the object that supplies the properties to augment."}, {"type": "boolean", "name": "ov", "description": "  if true, properties already on the receiver\nwill be overwritten if found on the supplier."}, {"type": "string[]", "name": "wl", "description": "  a whitelist.  If supplied, only properties in\nthis list will be applied to the receiver."}, {"type": "int", "name": "mode", "description": " what should be copies, and to where\ndefault(0): object to object\n1: prototype to prototype (old augment)\n2: prototype to prototype and object props (new augment)\n3: prototype to object\n4: object to prototype."}, {"type": "boolean/int", "name": "merge", "description": "  merge objects instead of overwriting/ignoring.\nA value of 2 will skip array merge\nUsed by Y.aggregate."}], "guessedname": "mix", "guessedtype": "function", "todo": "add constants for the modes"}, "add": {"return": {"type": "YUI", "description": "the YUI instance."}, "params": [{"type": "string", "name": "name", "description": "  module name."}, {"type": "Function", "name": "fn", "description": "  entry point into the module that\nis used to bind module to the YUI instance."}, {"type": "string", "name": "version", "description": "  version string."}, {"type": "object", "name": "details", "description": "  optional config data:\nrequires: features that must be present before this module can be\nattached.\noptional: optional features that should be present if loadOptional\nis defined.  Note: modules are not often loaded this way in YUI 3,\nbut this field is still useful to inform the user that certain\nfeatures in the component will require additional dependencies.\nuse: features that are included within this module which need to\nbe attached automatically when this module is attached.  This\nsupports the YUI 3 rollup system -- a module with submodules\ndefined will need to have the submodules listed in the 'use'\nconfig.  The YUI component build tool does this for you."}], "description": "Registers a module with the YUI global.  The easiest way to create a\nfirst-class YUI module is to use the YUI component build tool.\nhttp://yuilibrary.com/projects/builder\nThe build system will produce the YUI.add wrapper for you module, along\nwith any configuration info required for the module.", "guessedname": "add", "guessedtype": "function"}, "destroy": {"since": "3.3.0", "description": "Destroys the YUI instance", "guessedname": "destroy", "guessedtype": "function"}, "delegate.notifySub": {"return": {"type": "Boolean", "description": "false if the event was stopped"}, "description": "Overrides the <code>_notify</code> method on the normal DOM subscription to\ninject the filtering logic and only proceed in the case of a match.", "since": "3.2.0", "private": "", "static": "", "guessedname": "notifySub", "guessedtype": "function", "params": [{"type": "Object", "name": "thisObj", "description": "  default 'this' object for the callback"}, {"type": "Array", "name": "args", "description": "  arguments passed to the event's <code>fire()</code>"}, {"type": "CustomEvent", "name": "ce", "description": "  the custom event managing the DOM subscriptions for\nthe subscribed event on the subscribing node."}]}, "after": {"return": {"type": "", "description": "the event target or a detach handle per 'chain' config"}, "params": [{"type": "", "name": "type", "description": " event type (this parameter does not apply for function events)"}, {"type": "", "name": "fn", "description": " the callback"}, {"type": "", "name": "context", "description": " optionally change the value of 'this' in the callback"}, {"type": "", "name": "args*", "description": " 0..n additional arguments to pass to the callback."}], "description": "after() is a unified interface for subscribing to\nmost events exposed by YUI.  This includes custom events,\nDOM events, and AOP events.  This works the same way as\nthe on() function, only it operates after any default\nbehavior for the event has executed. @see <code>on</code> for more\ninformation."}, "on": {"return": {"type": "", "description": "the event target or a detach handle per 'chain' config"}, "params": [{"type": "", "name": "type", "description": " event type (this parameter does not apply for function events)"}, {"type": "", "name": "fn", "description": " the callback"}, {"type": "", "name": "context", "description": " optionally change the value of 'this' in the callback"}, {"type": "", "name": "args*", "description": " 0..n additional arguments to pass to the callback."}], "description": "<code>YUI</code>'s <code>on</code> method is a unified interface for subscribing to\nmost events exposed by YUI.  This includes custom events, DOM events, and\nfunction events.  <code>detach</code> is also provided to remove listeners\nserviced by this function.\nThe signature that <code>on</code> accepts varies depending on the type\nof event being consumed.  Refer to the specific methods that will\nservice a specific request for additional information about subscribing\nto that type of event.\n<ul>\n<li>Custom events.  These events are defined by various\nmodules in the library.  This type of event is delegated to\n<code>EventTarget</code>'s <code>on</code> method.\n<ul>\n<li>The type of the event</li>\n<li>The callback to execute</li>\n<li>An optional context object</li>\n<li>0..n additional arguments to supply the callback.</li>\n</ul>\nExample:\n<code>Y.on('drag:drophit', function() { // start work });</code>\n</li>\n<li>DOM events.  These are moments reported by the browser related\nto browser functionality and user interaction.\nThis type of event is delegated to <code>Event</code>'s\n<code>attach</code> method.\n<ul>\n<li>The type of the event</li>\n<li>The callback to execute</li>\n<li>The specification for the Node(s) to attach the listener\nto.  This can be a selector, collections, or Node/Element\nrefereces.</li>\n<li>An optional context object</li>\n<li>0..n additional arguments to supply the callback.</li>\n</ul>\nExample:\n<code>Y.on('click', function(e) { // something was clicked }, '#someelement');</code>\n</li>\n<li>Function events.  These events can be used to react before or after a\nfunction is executed.  This type of event is delegated to <code>Event.Do</code>'s\n<code>before</code> method.\n<ul>\n<li>The callback to execute</li>\n<li>The object that has the function that will be listened for.</li>\n<li>The name of the function to listen for.</li>\n<li>An optional context object</li>\n<li>0..n additional arguments to supply the callback.</li>\n</ul>\nExample <code>Y.on(function(arg1, arg2, etc) { // obj.methodname was executed }, obj 'methodname');</code>\n</li>\n</ul>\n<code>on</code> corresponds to the moment before any default behavior of\nthe event.  <code>after</code> works the same way, but these listeners\nexecute after the event's default behavior.  <code>before</code> is an\nalias for <code>on</code>."}, "throttle": {"return": {"type": "function", "description": "Returns a wrapped function that calls fn throttled."}, "description": "Throttles a call to a method based on the time between calls.", "since": "3.1.0", "params": [{"type": "function", "name": "fn", "description": "  The function call to throttle."}, {"type": "int", "name": "ms", "description": "  The number of milliseconds to throttle the method call.\nCan set globally with Y.config.throttleTime or by call. Passing a -1 will\ndisable the throttle. Defaults to 150."}], "guessedname": "throttle", "guessedtype": "function"}, "cached": {"return": {"type": "Function", "description": "the wrapped function."}, "params": [{"type": "function", "name": "source", "description": "  the function to memoize."}, {"type": "", "name": "cache", "description": " an optional cache seed."}, {"type": "", "name": "refetch", "description": " if supplied, this value is tested against the cached\nvalue.  If the values are equal, the wrapped function is executed again."}], "description": "Returns a wrapper for a function which caches the\nreturn value of that function, keyed off of the combined\nargument values.", "guessedname": "cached", "guessedtype": "function"}, "later": {"return": {"type": "object", "description": "a timer object. Call the cancel() method on this\nobject to stop the timer."}, "params": [{"type": "int", "name": "when", "description": "  the number of milliseconds to wait until the fn\nis executed."}, {"type": "", "name": "o", "description": " the context object."}, {"type": "Function|String", "name": "fn", "description": "  the function to execute or the name of\nthe method in the 'o' object to execute."}, {"type": "", "name": "data", "description": " [Array] data that is provided to the function.  This\naccepts either a single item or an array.  If an array is provided,\nthe function is executed with one parameter for each array item.\nIf you need to pass a single array parameter, it needs to be wrapped\nin an array [myarray]."}, {"type": "boolean", "name": "periodic", "description": "  if true, executes continuously at supplied\ninterval until canceled."}], "description": "Executes the supplied function in the context of the supplied\nobject 'when' milliseconds later.  Executes the function a\nsingle time unless periodic is set to true.", "guessedname": "later", "guessedtype": "function"}, "_setup": {"private": "", "description": "Finishes the instance setup. Attaches whatever modules were defined\nwhen the yui modules was registered.", "guessedname": "_setup", "guessedtype": "function"}, "merge": {"return": {"type": "object", "description": "the new merged object."}, "params": [{"type": "Object*", "name": "arguments", "description": "  the objects to merge."}], "description": "Returns a new object containing all of the properties of\nall the supplied objects.  The properties from later objects\nwill overwrite those in earlier objects.  Passing in a\nsingle object will create a shallow copy of it.  For a deep\ncopy, use clone.", "guessedname": "merge", "guessedtype": "function"}, "delegate._applyFilter": {"return": {"type": "Node|Node[]|undefined", "description": "The Node or Nodes that satisfy the filter"}, "description": "Walks up the parent axis of an event's target, and tests each element\nagainst a supplied filter function.  If any Nodes, including the container,\nsatisfy the filter, the delegated callback will be triggered for each.", "protected": "", "params": [{"type": "Function", "name": "filter", "description": "  boolean function to test for inclusion in event\nnotification"}, {"type": "Array", "name": "args", "description": "  the arguments that would be passed to subscribers"}, {"type": "CustomEvent", "name": "ce", "description": "    the DOM event wrapper"}], "guessedname": "_applyFilter", "guessedtype": "function"}, "delegate": {"return": {"type": "EventHandle", "description": "the detach handle"}, "description": "<p>Sets up event delegation on a container element.  The delegated event\nwill use a supplied selector or filtering function to test if the event\nreferences at least one node that should trigger the subscription\ncallback.</p>\n<p>Selector string filters will trigger the callback if the event originated\nfrom a node that matches it or is contained in a node that matches it.\nFunction filters are called for each Node up the parent axis to the\nsubscribing container node, and receive at each level the Node and the event\nobject.  The function should return true (or a truthy value) if that Node\nshould trigger the subscription callback.  Note, it is possible for filters\nto match multiple Nodes for a single event.  In this case, the delegate\ncallback will be executed for each matching Node.</p>\n<p>For each matching Node, the callback will be executed with its 'this'\nobject set to the Node matched by the filter (unless a specific context was\nprovided during subscription), and the provided event's\n<code>currentTarget</code> will also be set to the matching Node.  The\ncontaining Node from which the subscription was originally made can be\nreferenced as <code>e.container</code>.", "param": "type {string} the event type to delegate", "params": [{"type": "String", "name": "type", "description": "  the event type to delegate"}, {"type": "Function", "name": "fn", "description": "  the callback function to execute.  This function\nwill be provided the event object for the delegated event."}, {"type": "String|node", "name": "el", "description": "  the element that is the delegation container"}, {"type": "string|Function", "name": "spec", "description": "  a selector that must match the target of the\nevent or a function to test target and its parents for a match"}, {"type": "", "name": "context", "description": " optional argument that specifies what 'this' refers to."}, {"type": "", "name": "args*", "description": " 0..n additional arguments to pass on to the callback function.\nThese arguments will be added after the event object."}], "guessedname": "delegate", "guessedtype": "property"}, "error": {"return": {"type": "YUI", "description": "this YUI instance."}, "params": [{"type": "string", "name": "msg", "description": "  the error message."}, {"type": "Error", "name": "e", "description": "  Optional JS error that was caught.  If supplied\nand throwFail is specified, this error will be re-thrown."}], "description": "Report an error.  The reporting mechanism is controled by\nthe 'throwFail' configuration attribute.  If throwFail is\nnot specified, the message is written to the Logger, otherwise\na JS error is thrown", "guessedname": "error", "guessedtype": "function"}, "delegate.compileFilter": {"return": {"type": "Function", "description": ""}, "description": "<p>Compiles a selector string into a filter function to identify whether\nNodes along the parent axis of an event's target should trigger event\nnotification.</p>\n<p>This function is memoized, so previously compiled filter functions are\nreturned if the same selector string is provided.</p>\n<p>This function may be useful when defining synthetic events for delegate\nhandling.</p>", "since": "3.2.0", "static": "", "guessedname": "compileFilter", "guessedtype": "function", "params": [{"type": "String", "name": "selector", "description": "  the selector string to base the filtration on"}]}, "_ieRestoreSelect": {"private": "", "description": "Restores native onselectstart handle, backed up to prevent selection in IE", "guessedname": "_ieRestoreSelect", "guessedtype": "function"}, "once": {"return": {"type": "", "description": "the event target or a detach handle per 'chain' config"}, "see": "on", "params": [{"type": "", "name": "type", "description": " event type (this parameter does not apply for function events)"}, {"type": "", "name": "fn", "description": " the callback"}, {"type": "", "name": "context", "description": " optionally change the value of 'this' in the callback"}, {"type": "", "name": "args*", "description": " 0..n additional arguments to pass to the callback."}], "description": "Listen for an event one time.  Equivalent to <code>on</code>, except that\nthe listener is immediately detached when executed."}}}, "DataSource.Local": {"name": "DataSource.Local", "configs": {"source": {"default": "null", "type": "MIXED", "description": "Pointer to live data.", "guessedname": "source", "guessedtype": "property"}}, "constructors": [{"description": "Base class for the DataSource Utility."}], "namespace": "", "module": "datasource", "events": {"data": {"preventable": "_defDataFn", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n</dl>"}], "description": "Fired when raw data is received.", "guessedname": "defaultFn", "guessedtype": "property"}, "sourceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "sourceChange", "description": "Fires when the value for the configuration attribute 'source' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "request": {"preventable": "_defRequestFn", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>                          \n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object.</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>"}], "description": "Fired when a data request is received.", "guessedname": "defaultFn", "guessedtype": "property"}, "response": {"preventable": "_defResponseFn", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n<dt>response (Object)</dt> <dd>Normalized response object with the following properties:\n<dl>\n<dt>results (Object)</dt> <dd>Parsed results.</dd>\n<dt>meta (Object)</dt> <dd>Parsed meta data.</dd>\n<dt>error (Boolean)</dt> <dd>Error flag.</dd>\n</dl>\n</dd>\n</dl>"}], "description": "Fired when response is returned.", "guessedname": "defaultFn", "guessedtype": "property"}, "error": {"params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n<dt>response (Object)</dt> <dd>Normalized response object with the following properties:\n<dl>\n<dt>results (Object)</dt> <dd>Parsed results.</dd>\n<dt>meta (Object)</dt> <dd>Parsed meta data.</dd>\n<dt>error (Object)</dt> <dd>Error object.</dd>\n</dl>\n</dd>\n</dl>"}], "description": "Fired when an error is encountered."}}, "guessedname": "LANG", "methods": {"_initEvents": {"private": "", "description": "This method creates all the events for this module.", "guessedname": "_initEvents", "guessedtype": "function"}, "_defResponseFn": {"protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n<dt>response (Object)</dt> <dd>Normalized response object with the following properties:\n<dl>\n<dt>results (Object)</dt> <dd>Parsed results.</dd>\n<dt>meta (Object)</dt> <dd>Parsed meta data.</dd>\n<dt>error (Boolean)</dt> <dd>Error flag.</dd>\n</dl>\n</dd>\n</dl>"}], "description": "Sends data as a normalized response to callback.", "guessedname": "_defResponseFn", "guessedtype": "function"}, "_defRequestFn": {"protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facadewith the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>"}], "description": "Manages request/response transaction. Must fire <code>response</code>\nevent when response is received. This method should be implemented by\nsubclasses to achieve more complex behavior such as accessing remote data.", "guessedname": "_defRequestFn", "guessedtype": "function"}, "DataSource.issueCallback": {"static": "", "params": [{"type": "EventFacade", "name": "e", "description": "  Event Facade."}, {"type": "DataSource", "name": "caller", "description": "  Calling DataSource instance."}], "description": "Returns data to callback.", "guessedname": "issueCallback", "guessedtype": "function"}, "_defDataFn": {"protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n</dl>"}], "description": "Normalizes raw data into a response that includes results and meta properties.", "guessedname": "_defDataFn", "guessedtype": "function"}, "initializer": {"guessedname": "initializer", "params": [{"type": "Object", "name": "config", "description": "  Config object."}], "description": "Internal init() handler.", "private": "", "guessedtype": "function"}, "sendRequest": {"return": {"type": "Number", "description": "Transaction ID."}, "params": [{"type": "Object", "name": "request", "description": "  An object literal with the following properties:\n<dl>\n<dt><code>request</code></dt>\n<dd>The request to send to the live data source, if any.</dd>\n<dt><code>callback</code></dt>\n<dd>An object literal with the following properties:\n<dl>\n<dt><code>success</code></dt>\n<dd>The function to call when the data is ready.</dd>\n<dt><code>failure</code></dt>\n<dd>The function to call upon a response failure condition.</dd>\n<dt><code>argument</code></dt>\n<dd>Arbitrary data payload that will be passed back to the success and failure handlers.</dd>\n</dl>\n</dd>\n<dt><code>cfg</code></dt>\n<dd>Configuration object, if any.</dd>\n</dl>"}], "description": "Generates a unique transaction ID and fires <code>request</code> event.", "guessedname": "sendRequest", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "datasource-local.js", "guessedtype": "property", "shortname": "DataSource.Local", "properties": {"DataSource._tId": {"description": "Global transaction counter.", "default": "0", "private": "", "static": "", "guessedname": "_tId", "guessedtype": "property", "type": "Number"}, "DataSource.transactions": {"type": "Object", "static": "", "description": "Global in-progress transaction objects.", "guessedname": "transactions", "guessedtype": "property"}, "NAME": {"description": "Class name.", "value": "\"dataSourceLocal\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Base class for the DataSource Utility."}, "Highlight": {"name": "Highlight", "description": "<p>\nProvides methods for highlighting strings within other strings by wrapping\nthem in HTML.\n</p>\n<p>\nThe highlight methods first escape any special HTML characters in the input\nstrings and then highlight the appropriate substrings by wrapping them in a\n<code>&lt;b class=\"yui3-highlight\"&gt;&lt;/b&gt;</code> element. The\n<code>&lt;b&gt;</code> element is used rather than\n<code>&lt;strong&gt;</code> in accordance with HTML5's definition of\n<code>&lt;b&gt;</code> as being purely presentational, which is exactly what\nhighlighting is.\n</p>", "namespace": "", "module": "highlight", "guessedname": "AccentFold", "static": "", "file": "highlight-base.js", "guessedtype": "property", "shortname": "Highlight", "properties": {"_REPLACER": {"description": "Regex replacer function or string for normal matches.", "protected": "", "static": "", "guessedname": "_REPLACER", "guessedtype": "function", "type": "{Function|String}", "final": ""}, "_START_REGEX": {"description": "<p>\nRegular expression template for highlighting start-of-string matches\n(i.e., only matches that occur at the beginning of a string). The\nplaceholder <code>%needles</code> will be replaced with a list of needles\nto match, joined by <code>|</code> characters.\n</p>\n<p>\nSee <code>_REGEX</code> for a description of the capturing subpatterns\nthis regex should contain.\n</p>", "protected": "", "static": "", "guessedname": "_START_REGEX", "guessedtype": "property", "type": "{String}", "final": ""}, "_TEMPLATE": {"description": "Highlight template which will be used as a replacement for matched\nsubstrings. The placeholder <code>{s}</code> will be replaced with the\nmatched substring.", "default": "'<b class=\"yui3-highlight\">{s}</b>'", "protected": "", "static": "", "guessedname": "_TEMPLATE", "guessedtype": "property", "type": "{String}", "final": ""}, "_REGEX": {"description": "<p>\nRegular expression template for highlighting a match that occurs anywhere\nin a string. The placeholder <code>%needles</code> will be replaced with\na list of needles to match, joined by <code>|</code> characters.\n</p>\n<p>\nThis regex should have two capturing subpatterns: the first should match\nan unclosed HTML entity (e.g. \"&amp\" without a \";\" at the end) 0 or 1\ntimes; the second should contain the <code>%needles</code> placeholder.\nThe first subpattern match is used to emulate a negative lookbehind\nassertion, in order to prevent highlighting inside HTML entities.\n</p>", "protected": "", "static": "", "guessedname": "_REGEX", "guessedtype": "property", "type": "{String}", "final": ""}}, "methods": {"startFold": {"return": {"type": "String", "description": "Escaped and highlighted copy of <em>haystack</em>."}, "description": "Accent-folding version of <code>start()</code>.", "static": "", "guessedname": "startFold", "guessedtype": "function", "params": [{"type": "String", "name": "haystack", "description": " String to apply highlighting to."}, {"type": "String|Array", "name": "needles", "description": " String or array of strings that should be\nhighlighted."}]}, "all": {"return": {"type": "String", "description": "Escaped and highlighted copy of <em>haystack</em>."}, "description": "Highlights all occurrences in the <em>haystack</em> string of the items\nin the <em>needles</em> array, regardless of where they occur. The\nreturned string will have all HTML characters escaped except for the\nhighlighting markup.", "static": "", "guessedname": "all", "guessedtype": "function", "params": [{"type": "String", "name": "haystack", "description": " String to apply highlighting to."}, {"type": "String|Array", "name": "needles", "description": " String or array of strings that should be\nhighlighted."}, {"type": "Object", "name": "options", "description": " (optional) Options object, which may contain\nzero or more of the following properties:\n<dl>\n<dt>caseSensitive (Boolean)</dt>\n<dd>\nIf <code>true</code>, matching will be case-sensitive. Default is\n<code>false</code>.\n</dd>\n<dt>startsWith (Boolean)<dt>\n<dd>\nBy default, needles are highlighted wherever they appear in the\nhaystack. If <code>startsWith</code> is <code>true</code>, matches\nmust be anchored to the beginning of the string.\n</dd>\n</dl>"}]}, "wordsFold": {"return": {"type": "String", "description": "Escaped and highlighted copy of <em>haystack</em>."}, "description": "Accent-folding version of <code>words()</code>.", "static": "", "guessedname": "wordsFold", "guessedtype": "function", "params": [{"type": "String", "name": "haystack", "description": " String to apply highlighting to."}, {"type": "String|Array", "name": "needles", "description": " String or array of strings containing words\nthat should be highlighted. If a string is passed, it will be split\ninto words; if an array is passed, it is assumed to have already been\nsplit."}]}, "wordsCase": {"return": {"type": "String", "description": "Escaped and highlighted copy of <em>haystack</em>."}, "description": "Same as <code>words()</code>, but case-sensitive by default.", "static": "", "guessedname": "wordsCase", "guessedtype": "function", "params": [{"type": "String", "name": "haystack", "description": " String to apply highlighting to."}, {"type": "String|Array", "name": "needles", "description": " String or array of strings containing words\nthat should be highlighted. If a string is passed, it will be split\ninto words; if an array is passed, it is assumed to have already been\nsplit."}]}, "allFold": {"return": {"type": "String", "description": "Escaped and highlighted copy of <em>haystack</em>."}, "description": "Accent-folding version of <code>all()</code>.", "static": "", "guessedname": "allFold", "guessedtype": "function", "params": [{"type": "String", "name": "haystack", "description": " String to apply highlighting to."}, {"type": "String|Array", "name": "needles", "description": " String or array of strings that should be\nhighlighted."}, {"type": "Object", "name": "options", "description": " (optional) Options object, which may contain\nzero or more of the following properties:\n<dl>\n<dt>startsWith (Boolean)<dt>\n<dd>\nBy default, needles are highlighted wherever they appear in the\nhaystack. If <code>startsWith</code> is <code>true</code>, matches\nmust be anchored to the beginning of the string.\n</dd>\n</dl>"}]}, "start": {"return": {"type": "String", "description": "Escaped and highlighted copy of <em>haystack</em>."}, "description": "Highlights <em>needles</em> that occur at the start of <em>haystack</em>.\nThe returned string will have all HTML characters escaped except for the\nhighlighting markup.", "static": "", "guessedname": "start", "guessedtype": "function", "params": [{"type": "String", "name": "haystack", "description": " String to apply highlighting to."}, {"type": "String|Array", "name": "needles", "description": " String or array of strings that should be\nhighlighted."}, {"type": "Object", "name": "options", "description": " (optional) Options object, which may contain\nzero or more of the following properties:\n<dl>\n<dt>caseSensitive (Boolean)</dt>\n<dd>\nIf <code>true</code>, matching will be case-sensitive. Default is\n<code>false</code>.\n</dd>\n</dl>"}]}, "allCase": {"return": {"type": "String", "description": "Escaped and highlighted copy of <em>haystack</em>."}, "description": "Same as <code>all()</code>, but case-sensitive by default.", "static": "", "guessedname": "allCase", "guessedtype": "function", "params": [{"type": "String", "name": "haystack", "description": " String to apply highlighting to."}, {"type": "String|Array", "name": "needles", "description": " String or array of strings that should be\nhighlighted."}, {"type": "Object", "name": "options", "description": " (optional) Options object. See <code>all()</code>\nfor details."}]}, "words": {"return": {"type": "String", "description": "Escaped and highlighted copy of <em>haystack</em>."}, "description": "Highlights complete words in the <em>haystack</em> string that are also\nin the <em>needles</em> array. The returned string will have all HTML\ncharacters escaped except for the highlighting markup.", "static": "", "guessedname": "words", "guessedtype": "function", "params": [{"type": "String", "name": "haystack", "description": " String to apply highlighting to."}, {"type": "String|Array", "name": "needles", "description": " String or array of strings containing words\nthat should be highlighted. If a string is passed, it will be split\ninto words; if an array is passed, it is assumed to have already been\nsplit."}, {"type": "Object", "name": "options", "description": " (optional) Options object, which may contain\nzero or more of the following properties:\n<dl>\n<dt>caseSensitive (Boolean)</dt>\n<dd>\nIf <code>true</code>, matching will be case-sensitive. Default is\n<code>false</code>.\n</dd>\n</dl>"}]}, "startCase": {"return": {"type": "String", "description": "Escaped and highlighted copy of <em>haystack</em>."}, "description": "Same as <code>start()</code>, but case-sensitive by default.", "static": "", "guessedname": "startCase", "guessedtype": "function", "params": [{"type": "String", "name": "haystack", "description": " String to apply highlighting to."}, {"type": "String|Array", "name": "needles", "description": " String or array of strings that should be\nhighlighted."}]}}}, "NodeList": {"name": "NodeList", "description": "The NodeList class provides a wrapper for manipulating DOM NodeLists.\nNodeList properties can be accessed via the set/get methods.\nUse Y.all() to retrieve NodeList instances.", "constructors": [{"description": "The NodeList class provides a wrapper for manipulating DOM NodeLists.\nNodeList properties can be accessed via the set/get methods.\nUse Y.all() to retrieve NodeList instances."}], "namespace": "", "module": "node", "guessedname": "NodeList", "file": "nodelist.js", "guessedtype": "function", "shortname": "NodeList", "properties": {"_nodes": {"private": "", "description": "The underlying array of DOM nodes bound to the Y.NodeList instance", "guessedname": "_nodes", "guessedtype": "property"}}, "methods": {"set": {"see": "Node.set", "description": "Called on each Node instance"}, "removeAttribute": {"see": "Node", "params": [{"type": "string", "name": "name", "description": " The attribute to remove"}], "description": "Allows for removing attributes on DOM nodes.\nThis passes through to the DOM node, allowing for custom attributes."}, "getAttribute": {"return": {"type": "string", "description": "The attribute value"}, "see": "Node", "params": [{"type": "string", "name": "name", "description": " The attribute name"}], "description": "Allows getting attributes on DOM nodes, normalizing in some cases.\nThis passes through to the DOM node, allowing for custom attributes."}, "replaceClass": {"see": "Node.replaceClass", "params": [{"type": "String", "name": "oldClassName", "description": " the class name to be replaced"}, {"type": "String", "name": "newClassName", "description": " the class name that will be replacing the old class name"}], "chainable": "", "description": "Replace a class with another class for each node.\nIf no oldClassName is present, the newClassName is simply added."}, "some": {"return": {"type": "Boolean", "description": "Whether or not the function returned true for any node."}, "params": [{"type": "Function", "name": "fn", "description": " The function to apply. It receives 3 arguments:\nthe current node instance, the node's index, and the NodeList instance"}, {"type": "Object", "name": "context", "description": " optional An optional context to execute the function from.\nDefault context is the current Node instance"}], "description": "Executes the function once for each node until a true value is returned.", "guessedname": "some", "guessedtype": "function"}, "pop": {"return": {"type": "Node", "description": "The last item in the NodeList."}, "description": "Removes the first last from the NodeList and returns it."}, "setStyle": {"see": "Node.setStyle", "params": [{"type": "String", "name": "attr", "description": " The style attribute to set."}, {"type": "String|Number", "name": "val", "description": " The value."}], "chainable": "", "description": "Sets a style property on each node."}, "remove": {"see": "Node.remove", "description": "Called on each Node instance"}, "wrap": {"chainable": "", "params": [{"type": "String", "name": "html", "description": " The markup to wrap around the node."}], "description": "Wraps the given HTML around each node."}, "query": {"return": {"type": "Node", "description": "A Node instance for the matching HTMLElement."}, "description": "Retrieves a Node instance of nodes based on the given CSS selector.", "deprecated": "Use one()", "params": [{"type": "string", "name": "selector", "description": " The CSS selector to test against."}], "guessedname": "query", "guessedtype": "function"}, "prepend": {"see": "Node.prepend", "description": "Called on each Node instance"}, "odd": {"return": {"type": "NodeList", "description": "NodeList containing the updated collection"}, "description": "Creates a new NodeList containing all nodes at odd indices\n(zero-based index).", "guessedname": "odd", "guessedtype": "function"}, "queryAll": {"return": {"type": "NodeList", "description": "A NodeList instance for the matching HTMLCollection/Array."}, "description": "Retrieves a nodeList based on the given CSS selector.", "deprecated": "Use all()", "params": [{"type": "string", "name": "selector", "description": " The CSS selector to test against."}], "guessedname": "queryAll", "guessedtype": "function"}, "append": {"see": "Node.append", "description": "Called on each Node instance"}, "size": {"deprecated": "Use NodeList", "return": {"type": "Int", "description": "The number of items in the Node."}, "description": "Returns the current number of items in the Node.", "guessedname": "size", "guessedtype": "function"}, "even": {"return": {"type": "NodeList", "description": "NodeList containing the updated collection"}, "description": "Creates a new NodeList containing all nodes at even indices\n(zero-based index), including zero.", "guessedname": "even", "guessedtype": "function"}, "slice": {"return": {"type": "NodeList", "description": "A new NodeList comprised of this NodeList joined with the input."}, "params": [{"type": "Number", "name": "begin", "description": " Zero-based index at which to begin extraction.\nAs a negative index, start indicates an offset from the end of the sequence. slice(-2) extracts the second-to-last element and the last element in the sequence."}, {"type": "Number", "name": "end", "description": " Zero-based index at which to end extraction. slice extracts up to but not including end.\nslice(1,4) extracts the second element through the fourth element (elements indexed 1, 2, and 3).\nAs a negative index, end indicates an offset from the end of the sequence. slice(2,-1) extracts the third element through the second-to-last element in the sequence.\nIf end is omitted, slice extracts to the end of the sequence."}], "description": "Returns a new NodeList comprising the Nodes in the given range."}, "NodeList.getDOMNodes": {"return": {"type": "Array", "description": "The array of DOM nodes bound to the NodeList"}, "description": "Retrieves the DOM nodes bound to a NodeList instance", "static": "", "guessedname": "getDOMNodes", "guessedtype": "function", "params": [{"type": "Y.NodeList", "name": "nodelist", "description": " The NodeList instance"}]}, "get": {"see": "Node", "description": "Called on each Node instance", "guessedname": "get", "guessedtype": "function"}, "getComputedStyle": {"return": {"type": "Array", "description": "The computed values for each node."}, "see": "Node.getComputedStyle", "params": [{"type": "String", "name": "attr", "description": " The style attribute to retrieve."}], "description": "Returns an array of the computed value for each node."}, "setStyles": {"see": "Node.setStyles", "params": [{"type": "Object", "name": "hash", "description": " An object literal of property:value pairs."}], "chainable": "", "description": "Sets multiple style properties on each node."}, "indexOf": {"return": {"type": "Int", "description": "the index of the node value or -1 if not found"}, "params": [{"type": "Y.Node || DOMNode", "name": "node", "description": " the node to search for"}], "description": "Returns the index of the node in the NodeList instance\nor -1 if the node isn't found.", "guessedname": "indexOf", "guessedtype": "function"}, "isEmpty": {"return": {"type": "Boolean", "description": "Whether or not the NodeList is bound to any nodes"}, "description": "Determines if the instance is bound to any nodes", "guessedname": "isEmpty", "guessedtype": "function"}, "toggleClass": {"see": "Node.toggleClass", "params": [{"type": "String", "name": "className", "description": " the class name to be toggled"}], "chainable": "", "description": "If the className exists on the node it is removed, if it doesn't exist it is added."}, "destroy": {"see": "Node.destroy", "description": "Called on each Node instance"}, "modulus": {"return": {"type": "NodeList", "description": "NodeList containing the updated collection"}, "params": [{"type": "Int", "name": "n", "description": " The offset to use (return every nth node)"}, {"type": "Int", "name": "r", "description": " An optional remainder to use with the modulus operation (defaults to zero)"}], "description": "Creates a new NodeList containing all nodes at every n indices, where\nremainder n % index equals r.\n(zero-based index).", "guessedname": "modulus", "guessedtype": "function"}, "empty": {"see": "Node.empty", "description": "Called on each Node instance"}, "addClass": {"see": "Node.addClass", "params": [{"type": "String", "name": "className", "description": " the class name to add to the node's class attribute"}], "chainable": "", "description": "Adds a class name to each node."}, "after": {"return": {"type": "Object", "description": "Returns an event handle that can later be use to detach()."}, "description": "Applies an event listener to each Node bound to the NodeList.\nThe handler is called only after all on() handlers are called\nand the event is not prevented.", "see": "Event.on", "params": [{"type": "String", "name": "type", "description": " The event being listened for"}, {"type": "Function", "name": "fn", "description": " The handler to call when the event fires"}, {"type": "Object", "name": "context", "description": " The context to call the handler with.\nDefault is the NodeList instance."}], "guessedname": "after", "guessedtype": "function"}, "Y.get": {"description": "Returns a single Node instance bound to the node or the\nfirst element matching the given selector.", "deprecated": "Use Y.one", "static": "", "guessedname": "get", "guessedtype": "function", "params": [{"type": "String | HTMLElement", "name": "node", "description": " a node or Selector"}, {"type": "Y.Node || HTMLElement", "name": "doc", "description": " an optional document to scan. Defaults to Y.config.doc."}]}, "unwrap": {"chainable": "", "description": "Removes the parent node from node in the list."}, "Node.unplug": {"static": "", "params": [{"type": "Function | Array", "name": "plugin", "description": " The plugin class, or an array of plugin classes"}], "description": "Unregisters any class level plugins which have been registered by the Node", "guessedname": "unplug", "guessedtype": "function"}, "removeClass": {"see": "Node.removeClass", "params": [{"type": "String", "name": "className", "description": " the class name to remove from the node's class attribute"}], "chainable": "", "description": "Removes a class name from each node."}, "push": {"params": [{"type": "Node | DOMNode", "name": "nodeN", "description": " One or more nodes to add to the end of the NodeList."}], "description": "Adds the given Node(s) to the end of the NodeList.", "param": "{Node | DOMNode} nodeN One or more nodes to add to the NodeList."}, "getStyle": {"return": {"type": "Array", "description": "The current values of the style property for the element."}, "see": "Node.getStyle", "params": [{"type": "String", "name": "attr", "description": " The style attribute to retrieve."}], "description": "Returns an array of values for each node."}, "splice": {"return": {"type": "NodeList", "description": "The element(s) removed."}, "params": [{"type": "Number", "name": "index", "description": " Index at which to start changing the array. If negative, will begin that many elements from the end."}, {"type": "Number", "name": "howMany", "description": " An integer indicating the number of old array elements to remove. If howMany is 0, no elements are removed. In this case, you should specify at least one new element. If no howMany parameter is specified (second syntax above, which is a SpiderMonkey extension), all elements after index are removed.\n{Node | DOMNode| element1, ..., elementN \nThe elements to add to the array. If you don't specify any elements, splice simply removes elements from the array."}], "description": "Changes the content of the NodeList, adding new elements while removing old elements."}, "insert": {"see": "Node.insert", "description": "Called on each Node instance"}, "detach": {"see": "Node.detach", "description": "Called on each Node instance"}, "concat": {"return": {"type": "NodeList", "description": "A new NodeList comprised of this NodeList joined with the input."}, "params": [{"type": "NodeList | Array", "name": "valueN", "description": " Arrays/NodeLists and/or values to\nconcatenate to the resulting NodeList"}], "description": "Returns a new NodeList combining the given NodeList(s)"}, "toFrag": {"return": {"type": "", "description": "Node a Node instance bound to the documentFragment"}, "description": "Creates a documenFragment from the nodes bound to the NodeList instance", "guessedname": "toFrag", "guessedtype": "function"}, "setContent": {"see": "Node.setContent", "description": "Called on each Node instance"}, "on": {"return": {"type": "Object", "description": "Returns an event handle that can later be use to detach()."}, "description": "Applies an event listener to each Node bound to the NodeList.", "see": "Event.on", "params": [{"type": "String", "name": "type", "description": " The event being listened for"}, {"type": "Function", "name": "fn", "description": " The handler to call when the event fires"}, {"type": "Object", "name": "context", "description": " The context to call the handler with.\nDefault is the NodeList instance."}], "guessedname": "on", "guessedtype": "function"}, "shift": {"return": {"type": "Node", "description": "The first item in the NodeList."}, "description": "Removes the first item from the NodeList and returns it."}, "transition": {"chainable": "", "params": [{"type": "Object", "name": "config", "description": " An object containing one or more style properties, a duration and an easing."}, {"type": "Function", "name": "callback", "description": " A function to run after the transition has completed. The callback fires\nonce per item in the NodeList."}], "description": "Animate one or more css properties to a given value. Requires the \"transition\" module.\n<pre>example usage:\nY.all('.demo').transition({\nduration: 1, // in seconds, default is 0.5\neasing: 'ease-out', // default is 'ease'\ndelay: '1', // delay start for 1 second, default is 0\nheight: '10px',\nwidth: '10px',\nopacity: { // per property\nvalue: 0,\nduration: 2,\ndelay: 2,\neasing: 'ease-in'\n}\n});\n</pre>", "guessedname": "transition", "guessedtype": "function"}, "setAttribute": {"chainable": "", "params": [{"type": "string", "name": "name", "description": " The attribute name"}, {"type": "string", "name": "value", "description": " The value to set"}], "description": "Allows setting attributes on DOM nodes, normalizing in some cases.\nThis passes through to the DOM node, allowing for custom attributes.", "see": "Node"}, "refresh": {"chainable": "", "description": "Reruns the initial query, when created using a selector query", "guessedname": "refresh", "guessedtype": "function"}, "detachAll": {"see": "Node.detachAll", "description": "Called on each Node instance"}, "filter": {"return": {"type": "NodeList", "description": "NodeList containing the updated collection"}, "description": "Filters the NodeList instance down to only nodes matching the given selector.", "see": "Selector", "params": [{"type": "String", "name": "selector", "description": " The selector to filter against"}], "guessedname": "filter", "guessedtype": "function"}, "item": {"return": {"type": "Node", "description": "The Node instance at the given index."}, "description": "Retrieves the Node instance at the given index.", "deprecated": "Use NodeList", "param": "{Number} index The index of the target Node.", "params": [{"type": "Number", "name": "index", "description": " The index of the target Node."}], "guessedname": "item", "guessedtype": "function"}, "Node.plug": {"static": "", "params": [{"type": "Function | Array", "name": "plugin", "description": " Either the plugin class, an array of plugin classes or an array of objects (with fn and cfg properties defined)"}, {"type": "Object", "name": "config", "description": " (Optional) If plugin is the plugin class, the configuration for the plugin"}], "description": "Registers plugins to be instantiated at the class level (plugins \nwhich should be plugged into every instance of Node by default).", "guessedname": "plug", "guessedtype": "function"}, "each": {"description": "Applies the given function to each Node in the NodeList.", "deprecated": "Use NodeList", "chainable": "", "param": "{Function} fn The function to apply. It receives 3 arguments:\nthe current node instance, the node's index, and the NodeList instance", "params": [{"type": "Function", "name": "fn", "description": " The function to apply"}, {"type": "Object", "name": "context", "description": " optional An optional context to apply the function with\nDefault context is the NodeList instance"}], "guessedname": "each", "guessedtype": "function"}, "hasClass": {"return": {"type": "Array", "description": "An array of booleans for each node bound to the NodeList."}, "see": "Node.hasClass", "params": [{"type": "String", "name": "className", "description": " the class name to search for"}], "description": "Determines whether each node has the given className."}, "once": {"return": {"type": "Object", "description": "Returns an event handle that can later be use to detach()."}, "description": "Applies an one-time event listener to each Node bound to the NodeList.", "see": "Event.on", "params": [{"type": "String", "name": "type", "description": " The event being listened for"}, {"type": "Function", "name": "fn", "description": " The handler to call when the event fires"}, {"type": "Object", "name": "context", "description": " The context to call the handler with.\nDefault is the NodeList instance."}], "guessedname": "once", "guessedtype": "function"}}}, "Plugin.CreateLinkBase": {"name": "Plugin.CreateLinkBase", "namespace": "", "module": "editor", "guessedname": "CreateLinkBase", "static": "", "file": "createlink-base.js", "guessedtype": "property", "shortname": "Plugin.CreateLinkBase", "properties": {"DEFAULT": {"static": "", "description": "String used as the default value of the Prompt", "guessedname": "DEFAULT", "guessedtype": "property"}, "PROMPT": {"static": "", "description": "String used for the Prompt", "guessedname": "PROMPT", "guessedtype": "property"}, "STRINGS": {"static": "", "description": "Strings used by the plugin", "guessedname": "STRINGS", "guessedtype": "property"}}, "description": "Adds prompt style link creation. Adds an override for the <a href=\"Plugin.ExecCommand.html#method_COMMANDS.createlink\">createlink execCommand</a>."}, "Text.WordBreak": {"name": "Text.WordBreak", "namespace": "", "module": "text", "guessedname": "Text", "methods": {"_classify": {"return": {"type": "Array", "description": "Classification map."}, "description": "Returns a character classification map for the specified string.", "protected": "", "static": "", "guessedname": "_classify", "guessedtype": "function", "params": [{"type": "String", "name": "string", "description": " String to classify."}]}, "getUniqueWords": {"return": {"type": "Array", "description": "Array of unique words."}, "description": "Returns an array containing only unique words from the specified string.\nFor example, the string <code>'foo bar baz foo'</code> would result in\nthe array <code>['foo', 'bar', 'baz']</code>.", "static": "", "guessedname": "getUniqueWords", "guessedtype": "function", "params": [{"type": "String", "name": "string", "description": " String to split."}, {"type": "Object", "name": "options", "description": " (optional) Options (see <code>getWords()</code>\nfor details)."}]}, "isWordBoundary": {"return": {"type": "Boolean", "description": "<code>true</code> for a word boundary,\n<code>false</code> otherwise."}, "description": "<p>\nReturns <code>true</code> if there is a word boundary between the\nspecified character index and the next character index (or the end of the\nstring).\n</p>\n<p>\nNote that there are always word breaks at the beginning and end of a\nstring, so <code>isWordBoundary('', 0)</code> and\n<code>isWordBoundary('a', 0)</code> will both return <code>true</code>.\n</p>", "static": "", "guessedname": "isWordBoundary", "guessedtype": "function", "params": [{"type": "String", "name": "string", "description": " String to test."}, {"type": "Number", "name": "index", "description": " Character index to test within the string."}]}, "_isWordBoundary": {"return": {"type": "Boolean", "description": ""}, "description": "<p>\nReturns <code>true</code> if there is a word boundary between the\nspecified character index and the next character index (or the end of the\nstring).\n</p>\n<p>\nNote that there are always word breaks at the beginning and end of a\nstring, so <code>_isWordBoundary('', 0)</code> and\n<code>_isWordBoundary('a', 0)</code> will both return <code>true</code>.\n</p>", "protected": "", "static": "", "guessedname": "_isWordBoundary", "guessedtype": "function", "params": [{"type": "Array", "name": "map", "description": " Character classification map generated by\n<code>_classify</code>."}, {"type": "Number", "name": "index", "description": " Character index to test."}]}, "getWords": {"return": {"type": "Array", "description": "Array of words."}, "description": "Splits the specified string into an array of individual words.", "static": "", "guessedname": "getWords", "guessedtype": "function", "params": [{"type": "String", "name": "string", "description": " String to split."}, {"type": "Object", "name": "options", "description": " (optional) Options object containing zero or more\nof the following properties:\n<dl>\n<dt>ignoreCase (Boolean)</dt>\n<dd>\nIf <code>true</code>, the string will be converted to lowercase\nbefore being split. Default is <code>false</code>.\n</dd>\n<dt>includePunctuation (Boolean)</dt>\n<dd>\nIf <code>true</code>, the returned array will include punctuation\ncharacters. Default is <code>false</code>.\n</dd>\n<dt>includeWhitespace (Boolean)</dt>\n<dd>\nIf <code>true</code>, the returned array will include whitespace\ncharacters. Default is <code>false</code>.\n</dd>\n</dl>"}]}}, "static": "", "file": "text-wordbreak.js", "guessedtype": "property", "shortname": "Text.WordBreak", "description": "<p>\nProvides utility methods for splitting strings on word breaks and determining\nwhether a character index represents a word boundary, using the generic word\nbreaking algorithm defined in the Unicode Text Segmentation guidelines\n(<a href=\"http://unicode.org/reports/tr29/#Word_Boundaries\">Unicode Standard\nAnnex #29</a>).\n</p>\n<p>\nThis algorithm provides a reasonable default for many languages. However, it\ndoes not cover language or context specific requirements, and it does not\nprovide meaningful results at all for languages that don't use spaces between\nwords, such as Chinese, Japanese, Thai, Lao, Khmer, and others. Server-based\nword breaking services usually provide significantly better results with\nbetter performance.\n</p>"}, "Widget": {"name": "Widget", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for widgets, providing:\n<ul>\n<li>The render lifecycle method, in addition to the init and destroy \nlifecycle methods provide by Base</li>\n<li>Abstract methods to support consistent MVC structure across \nwidgets: renderer, renderUI, bindUI, syncUI</li>\n<li>Support for common widget attributes, such as boundingBox, contentBox, visible, \ndisabled, focused, strings</li>\n</ul>"}], "namespace": "", "module": "widget", "events": {"widget:render": {"preventable": "_defRenderFn", "params": [{"type": "EventFacade", "name": "e", "description": " The Event Facade"}], "description": "Lifecycle event for the render phase, fired prior to rendering the UI \nfor the widget (prior to invoking the widget's renderer method).\n<p>\nSubscribers to the \"on\" moment of this event, will be notified \nbefore the widget is rendered.\n</p>\n<p>\nSubscribers to the \"after\" moment of this event, will be notified\nafter rendering is complete.\n</p>"}, "tabIndexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tabIndexChange", "description": "Fires when the value for the configuration attribute 'tabIndex' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stringsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stringsChange", "description": "Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "heightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "heightChange", "description": "Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "widget:contentUpdate": {"preventable": "false", "params": [{"type": "EventFacade", "name": "e", "description": " The Event Facade"}], "description": "Notification event, which widget implementations can fire, when\nthey change the content of the widget. This event has no default\nbehavior and cannot be prevented, so the \"on\" or \"after\"\nmoments are effectively equivalent (with on listeners being invoked before \nafter listeners)."}, "boundingBoxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "boundingBoxChange", "description": "Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "focusedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "focusedChange", "description": "Fires when the value for the configuration attribute 'focused' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "visibleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "visibleChange", "description": "Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "contentBoxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "contentBoxChange", "description": "Fires when the value for the configuration attribute 'contentBox' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "renderChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "renderChange", "description": "Fires when the value for the configuration attribute 'render' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "renderedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "renderedChange", "description": "Fires when the value for the configuration attribute 'rendered' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "localeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "localeChange", "description": "Fires when the value for the configuration attribute 'locale' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "srcNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "srcNodeChange", "description": "Fires when the value for the configuration attribute 'srcNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "widthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "widthChange", "description": "Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "disabledChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "disabledChange", "description": "Fires when the value for the configuration attribute 'disabled' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "idChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "idChange", "description": "Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"srcNode": {"type": "String | Node", "description": "The DOM node to parse for configuration values, passed to the Widget's HTML_PARSER definition", "writeonce": ""}, "rendered": {"default": "false", "readonly": "", "type": "boolean", "description": "Flag indicating whether or not this Widget\nhas been through the render lifecycle phase."}, "render": {"type": "boolean | Node", "description": "Whether or not to render the widget automatically after init, and optionally, to which parent node.", "writeonce": ""}, "width": {"default": "EMPTY_STR", "type": "{String | Number}", "description": "String with units, or number, representing the width of the Widget. If a number is provided,\nthe default unit, defined by the Widgets DEF_UNIT, property is used."}, "locale": {"default": "\"en\"", "deprecated": "Use Y.config.lang and Y.Intl externalization support", "type": "String", "description": "The default locale for the widget. NOTE: Using get/set on the \"strings\" attribute will\nreturn/set strings for this locale."}, "strings": {"default": "null", "type": "Object", "description": "Collection of strings used to label elements of the Widget's UI."}, "height": {"default": "EMPTY_STR", "type": "{String | Number}", "description": "String with units, or number, representing the height of the Widget. If a number is provided,\nthe default unit, defined by the Widgets DEF_UNIT, property is used."}, "disabled": {"default": "false", "type": "boolean", "description": "Boolean indicating if the Widget should be disabled. The disabled implementation\nis left to the specific classes extending widget."}, "visible": {"default": "TRUE", "type": "boolean", "description": "Boolean indicating weather or not the Widget is visible."}, "focused": {"default": "false", "readonly": "", "type": "boolean", "description": "Boolean indicating if the Widget, or one of its descendants, \nhas focus."}, "boundingBox": {"type": "String | Node", "description": "The outermost DOM node for the Widget, used for sizing and positioning \nof a Widget as well as a containing element for any decorator elements used \nfor skinning.", "writeonce": ""}, "contentBox": {"type": "String | Node", "description": "A DOM node that is a direct descendent of a Widget's bounding box that \nhouses its content.", "writeonce": ""}, "id": {"default": "Generated using guid()", "type": "String", "writeonce": ""}, "tabIndex": {"default": "0", "type": "Number", "description": "Number (between -32767 to 32767) indicating the widget's \nposition in the default tab flow.  The value is used to set the \n\"tabIndex\" attribute on the widget's bounding box.  Negative values allow\nthe widget to receive DOM focus programmatically (by calling the focus\nmethod), while being removed from the default tab flow.  A value of \nnull removes the \"tabIndex\" attribute from the widget's bounding box."}}, "methods": {"_uiSetVisible": {"protected": "", "params": [{"type": "boolean", "name": "val", "description": ""}], "description": "Sets the visible state for the UI", "guessedname": "_uiSetVisible", "guessedtype": "function"}, "render": {"description": "Establishes the initial DOM for the widget. Invoking this\nmethod will lead to the creating of all DOM elements for\nthe widget (or the manipulation of existing DOM elements \nfor the progressive enhancement use case).\n<p>\nThis method should only be invoked once for an initialized\nwidget.\n</p>\n<p>\nIt delegates to the widget specific renderer method to do\nthe actual work.\n</p>", "chainable": "", "params": [{"type": "Object | String", "name": "parentNode", "description": "  Optional. The Node under which the \nWidget is to be rendered. This can be a Node instance or a CSS selector string. \n<p>\nIf the selector string returns more than one Node, the first node will be used \nas the parentNode. NOTE: This argument is required if both the boundingBox and contentBox\nare not currently in the document. If it's not provided, the Widget will be rendered\nto the body of the current document in this case.\n</p>"}], "guessedname": "render", "guessedtype": "function", "final": ""}, "show": {"chainable": "", "description": "Shows the Widget by setting the \"visible\" attribute to \"true\".", "guessedname": "show", "guessedtype": "function"}, "focus": {"chainable": "", "description": "Causes the Widget to receive the focus by setting the \"focused\" \nattribute to \"true\".", "guessedname": "focus", "guessedtype": "function"}, "initializer": {"protected": "", "params": [{"type": "Object", "name": "config", "description": "  Configuration object literal for the widget"}], "description": "Initializer lifecycle implementation for the Widget class. Registers the \nwidget instance, and runs through the Widget's HTML_PARSER definition.", "guessedname": "initializer", "guessedtype": "function"}, "_renderUI": {"protected": "", "description": "Initializes the UI state for the Widget's bounding/content boxes.", "guessedname": "_renderUI", "guessedtype": "function"}, "_setBox": {"return": {"type": "Node", "description": "The node"}, "description": "Helper method to set the bounding/content box, or create it from\nthe provided template if not found.", "private": "", "params": [{"type": "String", "name": "id", "description": " The node's id attribute"}, {"type": "Node|String", "name": "node", "description": " The node reference"}, {"type": "String", "name": "template", "description": " HTML string template for the node"}], "guessedname": "_setBox", "guessedtype": "function"}, "getStrings": {"params": [{"type": "String", "name": "locale", "description": " (optional) The locale for which the string value is required. Defaults to the current locale, if not provided."}], "description": "Gets the entire strings hash for a particular locale, performing locale lookup.\n<p>\nIf no values of the key are defined for a particular locale the value for the \ndefault locale (in initial locale set for the class) is returned.\n</p>"}, "renderer": {"protected": "", "description": "Creates DOM (or manipulates DOM for progressive enhancement)\nThis method is invoked by render() and is not chained \nautomatically for the class hierarchy (unlike initializer, destructor) \nso it should be chained manually for subclasses if required.", "guessedname": "renderer", "guessedtype": "function"}, "_applyParser": {"protected": "", "params": [{"type": "Object", "name": "config", "description": "  User configuration object (will be populated with values from Node)"}], "description": "Utilitity method used to apply the <code>HTML_PARSER</code> configuration for the \ninstance, to retrieve config data values.", "guessedname": "_applyParser", "guessedtype": "function"}, "_removeLoadingClassNames": {"protected": "", "description": "Removes class names representative of the widget's loading state from \nthe boundingBox.", "guessedname": "_removeLoadingClassNames", "guessedtype": "function"}, "_syncUI": {"protected": "", "description": "Updates the widget UI to reflect the attribute state.", "guessedname": "_syncUI", "guessedtype": "function"}, "_createUIEvent": {"guessedname": "_createUIEvent", "params": [{"type": "String", "name": "type", "description": "  String representing the name of the event"}], "description": "Binds a delegated DOM event listener of the specified type to the \nWidget's outtermost DOM element to facilitate the firing of a Custom\nEvent of the same type for the Widget instance.", "private": "", "guessedtype": "function"}, "_uiSetHeight": {"protected": "", "params": [{"type": "String | Number", "name": "val", "description": ""}], "description": "Sets the height on the widget's bounding box element", "guessedname": "_uiSetHeight", "guessedtype": "function"}, "_isUIEvent": {"return": {"type": "String", "description": "Event Returns the name of the UI Event, otherwise \nundefined."}, "description": "Determines if the specified event is a UI event.", "private": "", "params": [{"type": "String", "name": "type", "description": "  String representing the name of the event"}], "guessedname": "_getUIEvent", "guessedtype": "function"}, "_bindAttrUI": {"guessedname": "_bindAttrUI", "params": [{"type": "Array", "name": "attrs", "description": ""}], "description": "Binds after listeners for the list of attributes provided", "private": "", "guessedtype": "function"}, "hide": {"chainable": "", "description": "Hides the Widget by setting the \"visible\" attribute to \"false\".", "guessedname": "hide", "guessedtype": "function"}, "getString": {"return": {"type": "String", "description": "The string"}, "description": "Helper method to get a specific string value", "deprecated": "Used by deprecated WidgetLocale implementations.", "param": "{String} key", "params": [{"type": "String", "name": "key", "description": ""}], "guessedname": "getString", "guessedtype": "function"}, "_bindUI": {"protected": "", "description": "Sets up DOM and CustomEvent listeners for the widget.", "guessedname": "_bindUI", "guessedtype": "function"}, "Widget.getByNode": {"return": {"type": "Widget", "description": "Widget instance, or null if not found."}, "description": "Returns the widget instance whose bounding box contains, or is, the given node. \n<p>\nIn the case of nested widgets, the nearest bounding box ancestor is used to\nreturn the widget instance.\n</p>", "static": "", "guessedname": "getByNode", "guessedtype": "function", "params": [{"type": "Node | String", "name": "node", "description": "  The node for which to return a Widget instance. If a selector\nstring is passed in, which selects more than one node, the first node found is used."}]}, "_unbindUI": {"protected": "", "guessedname": "_unbindUI", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Destructor lifecycle implementation for the Widget class. Purges events attached\nto the bounding box (and all child nodes) and removes the Widget from the \nlist of registered widgets.", "guessedname": "destructor", "guessedtype": "function"}, "getDefaultLocale": {"return": {"type": "String", "description": "The default locale for the widget"}, "description": "Returns the default locale for the widget (the locale value defined by the\nwidget class, or provided by the user during construction).", "guessedname": "getDefaultLocale", "guessedtype": "function"}, "_getStrings": {"protected": "", "params": [{"type": "Object", "name": "locale", "description": ""}], "description": "Returns the strings key/value hash for a paricular locale, without locale lookup applied.", "guessedname": "_getStrings", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The default string value for the widget [ displays the NAME of the instance, and the unique id ]"}, "description": "Generic toString implementation for all widgets.", "guessedname": "toString", "guessedtype": "function"}, "blur": {"chainable": "", "description": "Causes the Widget to lose focus by setting the \"focused\" attribute \nto \"false\"", "guessedname": "blur", "guessedtype": "function"}, "_uiSizeCB": {"protected": "", "params": [{"type": "boolean", "name": "expand", "description": ""}], "guessedname": "_uiSizeCB", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Configures/Sets up listeners to bind Widget State to UI/DOM\nThis method is not called by framework and is not chained \nautomatically for the class hierarchy.", "guessedname": "bindUI", "guessedtype": "property"}, "_renderBox": {"guessedname": "_renderBox", "params": [{"type": "Node", "name": "parentNode", "description": " The parentNode to render the widget to. If not provided, and both the boundingBox and\nthe contentBox are not currently in the document, the widget will be rendered to the current document's body."}], "description": "Helper method to collect the boundingBox and contentBox, set styles and append to the provided parentNode, if not\nalready a child. The owner document of the boundingBox, or the owner document of the contentBox will be used \nas the document into which the Widget is rendered if a parentNode is node is not provided. If both the boundingBox and\nthe contentBox are not currently in the document, and no parentNode is provided, the widget will be rendered \nto the current document's body.", "private": "", "guessedtype": "function"}, "_setBB": {"return": {"type": "", "description": "Node"}, "description": "Setter for the boundingBox attribute", "private": "", "params": [{"type": "", "name": "Node/String", "description": ""}], "guessedname": "_setBB", "guessedtype": "function"}, "_onDocMouseDown": {"protected": "", "params": [{"type": "EventFacade", "name": "evt", "description": " The event facade for the DOM focus event"}], "description": "\"mousedown\" event handler for the owner document of the \nwidget's bounding box.", "guessedname": "_onDocMouseDown", "guessedtype": "function"}, "_uiSetTabIndex": {"protected": "", "params": [{"type": "", "name": "Number", "description": ""}], "description": "Set the tabIndex on the widget's rendered UI", "guessedname": "_uiSetTabIndex", "guessedtype": "function"}, "enable": {"chainable": "", "description": "Set the Widget's \"disabled\" attribute to \"false\".", "guessedname": "enable", "guessedtype": "function"}, "_uiSetDim": {"params": [{"type": "String", "name": "dim", "description": " The dimension - \"width\" or \"height\""}, {"type": "Number | String", "name": "val", "description": " The value to set"}], "private": "", "guessedname": "_uiSetDim", "guessedtype": "function"}, "_uiSetFocused": {"protected": "", "params": [{"type": "boolean", "name": "val", "description": ""}, {"type": "string", "name": "src", "description": " String representing the source that triggered an update to \nthe UI."}], "description": "Sets the focused state for the UI", "guessedname": "_uiSetFocused", "guessedtype": "function"}, "_guid": {"protected": "", "guessedname": "_guid", "guessedtype": "function"}, "_validTabIndex": {"protected": "", "params": [{"type": "Number", "name": "tabIndex", "description": ""}], "guessedname": "_validTabIndex", "guessedtype": "function"}, "_unbindDOM": {"protected": "", "guessedname": "_unbindDOM", "guessedtype": "function"}, "getSkinName": {"return": {"type": "String", "description": "the name of the skin, or null (yui3-skin-sam => sam)"}, "description": "Returns the name of the skin that's currently applied to the widget.\nThis is only really useful after the widget's DOM structure is in the\ndocument, either by render or by progressive enhancement.  Searches up\nthe Widget's ancestor axis for a class yui3-skin-(name), and returns the\n(name) portion.  Otherwise, returns null.", "guessedname": "getSkinName", "guessedtype": "function"}, "_renderBoxClassNames": {"protected": "", "description": "Applies standard class names to the boundingBox and contentBox", "guessedname": "_renderBoxClassNames", "guessedtype": "function"}, "_setAttrUI": {"params": [{"type": "EventFacade", "name": "e", "description": ""}], "private": "", "guessedname": "_setAttrUI", "guessedtype": "function"}, "_applyParsedConfig": {"protected": "", "return": {"type": "Object", "description": "The merged configuration literal"}, "guessedname": "_applyParsedConfig", "guessedtype": "function"}, "disable": {"chainable": "", "description": "Set the Widget's \"disabled\" attribute to \"true\".", "guessedname": "disable", "guessedtype": "function"}, "_bindDOM": {"protected": "", "description": "Sets up DOM listeners, on elements rendered by the widget.", "guessedname": "_bindDOM", "guessedtype": "function"}, "_getSrcNode": {"protected": "", "return": {"type": "Node", "description": "The Node to apply HTML_PARSER to"}, "guessedname": "_getSrcNode", "guessedtype": "function"}, "_syncAttrUI": {"guessedname": "_syncAttrUI", "params": [{"type": "Array", "name": "attrs", "description": ""}], "description": "Invokes the _uiSet&#61;ATTR NAME&#62; method for the list of attributes provided", "private": "", "guessedtype": "function"}, "_onDocFocus": {"protected": "", "params": [{"type": "EventFacade", "name": "evt", "description": " The event facade for the DOM focus event"}], "description": "DOM focus event handler, used to sync the state of the Widget with the DOM", "guessedname": "_onDocFocus", "guessedtype": "function"}, "_uiSetWidth": {"protected": "", "params": [{"type": "String | Number", "name": "val", "description": ""}], "description": "Sets the width on the widget's bounding box element", "guessedname": "_uiSetWidth", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Refreshes the rendered UI, based on Widget State\nThis method is not called by framework and is not chained\nautomatically for the class hierarchy.", "guessedname": "syncUI", "guessedtype": "property"}, "_getHtmlParser": {"guessedname": "_getHtmlParser", "return": {"type": "Object", "description": "HTML_PARSER definition for this instance"}, "description": "Gets the HTML_PARSER definition for this instance, by merging HTML_PARSER\ndefinitions across the class hierarchy.", "private": "", "guessedtype": "function"}, "_getUIEventNode": {"protected": "", "description": "Returns the node on which to bind delegate listeners.", "guessedname": "_getUIEventNode", "guessedtype": "function"}, "_strSetter": {"return": {"type": "String", "description": "The full set of strings to set"}, "description": "The default setter for the strings attribute. Merges partial sets\ninto the full string set, to allow users to partial sets of strings", "protected": "", "params": [{"type": "Object", "name": "strings", "description": ""}], "guessedname": "_strSetter", "guessedtype": "function"}, "_initUIEvent": {"return": {"type": "String", "description": ""}, "description": "Sets up infastructure required to fire a UI event.", "private": "", "params": [{"type": "String", "name": "type", "description": "  String representing the name of the event"}], "guessedname": "_initUIEvent", "guessedtype": "function"}, "_defRenderFn": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The Event object"}, {"type": "Node", "name": "parentNode", "description": " The parent node to render to, if passed in to the <code>render</code> method"}], "description": "Default render handler", "guessedname": "_defRenderFn", "guessedtype": "function"}, "_setStrings": {"protected": "", "params": [{"type": "Object", "name": "strings", "description": " The hash of string key/values to set"}, {"type": "Object", "name": "locale", "description": " The locale for the string values being set"}], "description": "Sets strings for a particular locale, merging with any existing\nstrings which may already be defined for the locale.", "guessedname": "_setStrings", "guessedtype": "function"}, "_defaultCB": {"protected": "", "description": "Returns the default value for the contentBox attribute. \nFor the Widget class, this will be the srcNode if provided, otherwise null (resulting in\na new contentBox node instance being created)", "guessedname": "_defaultCB", "guessedtype": "function"}, "getClassName": {"param": "{String}+ One or more classname bits to be joined and prefixed", "params": [{"type": "String*", "name": "args*", "description": " 0..n strings which should be concatenated, using the default separator defined by ClassNameManager, to create the class name"}], "description": "Generate a standard prefixed classname for the Widget, prefixed by the default prefix defined\nby the <code>Y.config.classNamePrefix</code> attribute used by <code>ClassNameManager</code> and \n<code>Widget.NAME.toLowerCase()</code> (e.g. \"yui-widget-xxxxx-yyyyy\", based on default values for \nthe prefix and widget class name).\n<p>\nThe instance based version of this method can be used to generate standard prefixed classnames,\nbased on the instances NAME, as opposed to Widget.NAME. This method should be used when you\nneed to use a constant class name across different types instances.\n</p>", "guessedname": "getClassName", "guessedtype": "function"}, "_setCB": {"return": {"type": "", "description": "Node"}, "description": "Setter for the contentBox attribute", "private": "", "params": [{"type": "Node|String", "name": "node", "description": ""}], "guessedname": "_setCB", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "å\nAdds nodes to the DOM \nThis method is not called by framework and is not chained \nautomatically for the class hierarchy.", "guessedname": "renderUI", "guessedtype": "property"}, "_uiSetDisabled": {"protected": "", "params": [{"type": "boolean", "name": "val", "description": ""}], "description": "Sets the disabled state for the UI", "guessedname": "_uiSetDisabled", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "Widget.js", "shortname": "Widget", "properties": {"DEF_PARENT_NODE": {"type": "String | Node", "description": "Default node to render the bounding box to. If not set,\nwill default to the current document body.", "guessedname": "DEF_PARENT_NODE", "guessedtype": "property"}, "CONTENT_TEMPLATE": {"type": "String", "description": "Property defining the markup template for content box. If your Widget doesn't\nneed the dual boundingBox/contentBox structure, set CONTENT_TEMPLATE to null,\nand contentBox and boundingBox will both point to the same Node.", "guessedname": "CONTENT_TEMPLATE", "guessedtype": "property"}, "DEF_UNIT": {"type": "String", "description": "Default unit to use for dimension values", "guessedname": "DEF_UNIT", "guessedtype": "property"}, "Widget.HTML_PARSER": {"type": "Object", "static": "", "description": "Object hash, defining how attribute values are to be parsed from\nmarkup contained in the widget's content box. e.g.:\n<pre>\n{\n// Set single Node references using selector syntax \n// (selector is run through node.one)\ntitleNode: \"span.yui-title\",\n// Set NodeList references using selector syntax \n// (array indicates selector is to be run through node.all)\nlistNodes: [\"li.yui-item\"],\n// Set other attribute types, using a parse function. \n// Context is set to the widget instance.\nlabel: function(contentBox) {\nreturn contentBox.one(\"span.title\").get(\"innerHTML\");\n}\n}\n</pre>", "guessedname": "HTML_PARSER", "guessedtype": "property"}, "_UI_ATTRS": {"guessedname": "_UI_ATTRS", "type": "Object", "description": "The lists of UI attributes to bind and sync for widget's _bindUI and _syncUI implementations", "private": "", "guessedtype": "property"}, "BOUNDING_TEMPLATE": {"type": "String", "description": "Property defining the markup template for bounding box.", "guessedname": "BOUNDING_TEMPLATE", "guessedtype": "property"}, "_buildCfg": {"description": "The build configuration for the Widget class.\n<p>\nDefines the static fields which need to be aggregated,\nwhen this class is used as the main class passed to \nthe <a href=\"Base.html#method_build\">Base.build</a> method.\n</p>", "private": "", "static": "", "guessedname": "_buildCfg", "guessedtype": "property", "type": "Object", "final": ""}, "Widget.UI_SRC": {"description": "Constant used to identify state changes originating from\nthe DOM (as opposed to the JavaScript model).", "static": "", "guessedname": "UI", "guessedtype": "property", "type": "String", "final": ""}, "Widget.CSS_PREFIX": {"description": "The css prefix which the static Widget.getClassName method should use when constructing class names", "default": "Widget.NAME.toLowerCase()", "private": "", "static": "", "guessedname": "CSS_PREFIX", "guessedtype": "property", "type": "String"}, "Widget.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration for the Widget.", "guessedname": "ATTRS", "guessedtype": "property"}, "Widget.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.\n<p>\nCurrently used to apply class identifiers to the bounding box \nand to classify events fired by the widget.\n</p>", "guessedname": "NAME", "guessedtype": "property"}, "UI_EVENTS": {"type": "Object", "description": "Map of DOM events that should be fired as Custom Events by the  \nWidget instance.", "guessedname": "UI_EVENTS", "guessedtype": "property"}}, "description": "A base class for widgets, providing:\n<ul>\n<li>The render lifecycle method, in addition to the init and destroy \nlifecycle methods provide by Base</li>\n<li>Abstract methods to support consistent MVC structure across \nwidgets: renderer, renderUI, bindUI, syncUI</li>\n<li>Support for common widget attributes, such as boundingBox, contentBox, visible, \ndisabled, focused, strings</li>\n</ul>"}, "Slider": {"name": "Slider", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Configuration object"}], "description": "Create a slider to represent an integer value between a given minimum and\nmaximum.  Sliders may be aligned vertically or horizontally, based on the\n<code>axis</code> configuration."}], "namespace": "", "module": "slider", "guessedname": "Slider", "uses": ["SliderValueRange", "ClickableRail"], "superclass": "SliderBase", "file": "range-slider.js", "guessedtype": "property", "extends": "SliderBase", "shortname": "Slider", "description": "Create a slider to represent an integer value between a given minimum and\nmaximum.  Sliders may be aligned vertically or horizontally, based on the\n<code>axis</code> configuration."}, "DataSource.Function": {"name": "DataSource.Function", "configs": {"source": {"default": "null", "type": "MIXED", "description": "Pointer to live data.", "guessedname": "source", "guessedtype": "property"}}, "constructors": [{"description": "Function subclass for the DataSource Utility."}], "namespace": "", "module": "datasource", "events": {"sourceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "sourceChange", "description": "Fires when the value for the configuration attribute 'source' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "LANG", "methods": {"_defRequestFn": {"protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>"}], "description": "Passes query string to IO. Fires <code>response</code> event when\nresponse is received asynchronously.", "guessedname": "_defRequestFn", "guessedtype": "function"}}, "extends": "DataSource.Local", "superclass": "DataSource.Local", "file": "datasource-function.js", "guessedtype": "property", "shortname": "DataSource.Function", "properties": {"NAME": {"description": "Class name.", "value": "\"dataSourceFunction\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Function subclass for the DataSource Utility."}, "Object": {"name": "Object", "namespace": "", "module": "yui", "methods": {"setValue": {"return": {"type": "Object", "description": "The modified object, with the new sub value set, or\nundefined, if the path was invalid."}, "description": "Sets the sub-attribute value at the provided path on the\nvalue object.  Returns the modified value object, or\nundefined if the path is invalid.", "static": "", "guessedname": "setValue", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": "             The object on which to set the sub value."}, {"type": "Array", "name": "path", "description": "   A path array, specifying the object traversal path\nat which to set the sub value."}, {"type": "Any", "name": "val", "description": "      The new value for the sub-attribute."}]}, "keys": {"return": {"type": "string[]", "description": "the keys."}, "description": "Returns an array containing the object's keys", "static": "", "guessedname": "keys", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " an object."}]}, "_extract": {"return": {"type": "boolean|Array", "description": "the extracted info."}, "description": "Extracts the keys, values, or size from an object", "private": "", "static": "", "guessedname": "_extract", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " the object."}, {"type": "", "name": "what", "description": " what to extract (0: keys, 1: values, 2: size)."}]}, "hasValue": {"return": {"type": "boolean", "description": "true if the object contains the value."}, "description": "Returns true if the object contains a given value", "static": "", "guessedname": "hasValue", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " an object."}, {"type": "", "name": "v", "description": " the value to query."}]}, "some": {"return": {"type": "boolean", "description": "true if any execution of the function returns true,\nfalse otherwise."}, "description": "Executes a function on each item, but halts if the\nfunction returns true.  The function\nreceives the value, the key, and the object\nas paramters (in that order).", "static": "", "guessedname": "some", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " the object to iterate."}, {"type": "Function", "name": "f", "description": "  the function to execute on each item. The function\nreceives three arguments: the value, the the key, the full object."}, {"type": "", "name": "c", "description": " the execution context."}, {"type": "boolean", "name": "proto", "description": "  include proto."}]}, "getValue": {"return": {"type": "Any", "description": "The value stored in the path, undefined if not found,\nundefined if the source is not an object.  Returns the source object\nif an empty path is provided."}, "description": "Retrieves the sub value at the provided path,\nfrom the value object provided.", "static": "", "guessedname": "getValue", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object from which to extract the property value."}, {"type": "Array", "name": "path", "description": "  A path array, specifying the object traversal path\nfrom which to obtain the sub value."}]}, "each": {"return": {"type": "YUI", "description": "the YUI instance."}, "description": "Executes a function on each item. The function\nreceives the value, the key, and the object\nas parameters (in that order).", "static": "", "guessedname": "each", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " the object to iterate."}, {"type": "Function", "name": "f", "description": "  the function to execute on each item. The function\nreceives three arguments: the value, the the key, the full object."}, {"type": "", "name": "c", "description": " the execution context."}, {"type": "boolean", "name": "proto", "description": "  include proto."}]}, "()": {"return": {"type": "Object", "description": "the new object."}, "description": "Y.Object(o) returns a new object based upon the supplied object.", "static": "", "guessedname": "F", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " the supplier object."}]}, "values": {"return": {"type": "Array", "description": "the values."}, "description": "Returns an array containing the object's values", "static": "", "guessedname": "values", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " an object."}]}, "owns": {"return": {"type": "boolean", "description": "true if the object has the property on the instance."}, "description": "Determines whether or not the property was added\nto the object instance.  Returns false if the property is not present\nin the object, or was inherited from the prototype.", "static": "", "guessedname": "owns", "guessedtype": "property", "params": [{"type": "any", "name": "o", "description": "  The object being testing."}, {"type": "string", "name": "p", "description": "  the property to look for."}]}, "isEmpty": {"return": {"type": "boolean", "description": "true if the object is empty."}, "description": "Returns true if the object has no properties of its own", "since": "3.2.0", "static": "", "guessedname": "isEmpty", "guessedtype": "function"}, "hasKey": {"return": {"type": "boolean", "description": "true if the object contains the key."}, "description": "Returns true if the object contains a given key", "static": "", "guessedname": "hasKey", "guessedtype": "property", "params": [{"type": "", "name": "o", "description": " an object."}, {"type": "", "name": "k", "description": " the key to query."}]}, "size": {"return": {"type": "int", "description": "the size."}, "description": "Returns the size of an object", "static": "", "guessedname": "size", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " an object."}]}}, "file": "yui-object.js", "shortname": "Object", "description": "Adds the following Object utilities to the YUI instance"}, "YUI~array~extras": {"name": "YUI~array~extras", "namespace": "", "module": "collection", "methods": {"Array.forEach": {"description": "forEach is an alias of Array.each.  This is part of the\ncollection module.", "guessedname": "forEach", "guessedtype": "property"}, "Array.every": {"return": {"type": "boolean", "description": "true if every item in the array returns true\nfrom the supplied function."}, "description": "Executes the supplied function on each item in the array.\nIteration stops if the supplied function does not return\na truthy value.", "static": "", "guessedname": "every", "guessedtype": "property", "params": [{"type": "Array", "name": "a", "description": " the array to iterate."}, {"type": "Function", "name": "f", "description": " the function to execute on each item."}, {"type": "object", "name": "o", "description": " Optional context object."}]}, "Array.filter": {"return": {"type": "Array", "description": "Array of items for which the supplied function returned a\ntruthy value (empty if it never returned a truthy value)."}, "description": "Executes the supplied function on each item in the array. Returns a new array\ncontaining the items for which the supplied function returned a truthy value.", "static": "", "guessedname": "filter", "guessedtype": "property", "params": [{"type": "Array", "name": "a", "description": " Array to filter."}, {"type": "Function", "name": "f", "description": " Function to execute on each item."}, {"type": "Object", "name": "o", "description": " Optional context object."}]}, "Array.partition": {"return": {"type": "object", "description": "An object with two members, 'matches' and 'rejects',\nthat are arrays containing the items that were selected or\nrejected by the test function (or an empty array)."}, "description": "Partitions an array into two new arrays, one with the items\nthat match the supplied function, and one with the items that\ndo not.", "static": "", "guessedname": "partition", "guessedtype": "function", "params": [{"type": "Array", "name": "a", "description": " a collection to iterate over."}, {"type": "Function", "name": "f", "description": " a function that will receive each item\nin the collection and its index."}, {"type": "object", "name": "o", "description": " Optional execution context of f."}]}, "Array.reject": {"return": {"type": "Array", "description": "The items on which the supplied function\nreturned false."}, "description": "The inverse of filter. Executes the supplied function on each item.\nReturns a new array containing the items that the supplied\nfunction returned *false* for.", "static": "", "guessedname": "reject", "guessedtype": "function", "params": [{"type": "Array", "name": "a", "description": " the array to iterate."}, {"type": "Function", "name": "f", "description": " the function to execute on each item."}, {"type": "object", "name": "o", "description": " Optional context object."}]}, "Array.grep": {"return": {"type": "Array", "description": "All the items in the collection that\nproduce a match against the supplied regular expression.\nIf no items match, an empty array is returned."}, "description": "Iterates over an array, returning a new array of all the elements\nthat match the supplied regular expression", "static": "", "guessedname": "grep", "guessedtype": "function", "params": [{"type": "Array", "name": "a", "description": " a collection to iterate over."}, {"type": "RegExp", "name": "pattern", "description": " The regular expression to test against\neach item."}]}, "Array.map": {"return": {"type": "Array", "description": "A new array containing the return value\nof the supplied function for each item in the original\narray."}, "description": "Executes the supplied function on each item in the array.", "static": "", "guessedname": "map", "guessedtype": "property", "params": [{"type": "Array", "name": "a", "description": " the array to iterate."}, {"type": "Function", "name": "f", "description": " the function to execute on each item."}, {"type": "object", "name": "o", "description": " Optional context object."}]}, "Array.unique": {"return": {"type": "Array", "description": "Copy of the array with duplicate items removed."}, "description": "Returns a copy of the specified array with duplicate items removed.", "static": "", "guessedname": "unique", "guessedtype": "function", "params": [{"type": "Array", "name": "a", "description": " Array to dedupe."}]}, "Array.lastIndexOf": {"return": {"type": "Number", "description": "Index of the item that contains the value, or -1 if not\nfound."}, "description": "Returns the index of the last item in the array that contains the specified\nvalue, or -1 if the value isn't found.", "static": "", "guessedname": "lastIndexOf", "guessedtype": "property", "params": [{"type": "Array", "name": "a", "description": " Array to search in."}, {"type": "any", "name": "val", "description": " Value to search for."}, {"type": "Number", "name": "fromIndex", "description": " (optional) Index at which to start searching\nbackwards. Defaults to the array's length - 1. If negative, it will be\ntaken as an offset from the end of the array. If the calculated index is\nless than 0, the array will not be searched and -1 will be returned."}]}, "Array.find": {"return": {"type": "object", "description": "the first item that the supplied function\nreturns true for, or null if it never returns true."}, "description": "Executes the supplied function on each item in the array,\nsearching for the first item that matches the supplied\nfunction.", "static": "", "guessedname": "find", "guessedtype": "function", "params": [{"type": "Array", "name": "a", "description": " the array to search."}, {"type": "Function", "name": "f", "description": " the function to execute on each item.\nIteration is stopped as soon as this function returns true\non an item."}, {"type": "object", "name": "o", "description": " Optional context object."}]}, "Array.zip": {"return": {"type": "array", "description": "An array of arrays formed by pairing each element\nof the first collection with an item in the second collection\nhaving the corresponding index."}, "description": "Creates an array of arrays by pairing the corresponding\nelements of two arrays together into a new array.", "static": "", "guessedname": "zip", "guessedtype": "function", "params": [{"type": "Array", "name": "a", "description": " a collection to iterate over."}, {"type": "Array", "name": "a2", "description": " another collection whose members will be\npaired with members of the first parameter."}]}, "Array.reduce": {"return": {"type": "any", "description": "A value that results from iteratively applying the\nsupplied function to each element in the array."}, "description": "Executes the supplied function on each item in the array.\nReduce \"folds\" the array into a single value.  The callback\nfunction receives four arguments:\nthe value from the previous callback call (or the initial value),\nthe value of the current element, the current index, and\nthe array over which iteration is occurring.", "static": "", "guessedname": "reduce", "guessedtype": "property", "params": [{"type": "Array", "name": "a", "description": " the array to iterate."}, {"type": "any", "name": "init", "description": " The initial value to start from."}, {"type": "Function", "name": "f", "description": " the function to execute on each item. It\nis responsible for returning the updated value of the\ncomputation."}, {"type": "object", "name": "o", "description": " Optional context object."}]}}, "file": "array-extras.js", "shortname": "YUI~array~extras", "description": "Adds the following array utilities to the YUI instance\n(Y.Array).  This is in addition to the methods provided\nin the core."}, "Base": {"name": "Base", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object with configuration property name/value pairs. The object can be \nused to provide default values for the objects published attributes.\n<p>\nThe config object can also contain the following non-attribute properties, providing a convenient \nway to configure events listeners and plugins for the instance, as part of the constructor call:\n</p>\n<dl>\n<dt>on</dt>\n<dd>An event name to listener function map, to register event listeners for the \"on\" moment of the event. A constructor convenience property for the <a href=\"Base.html#method_on\">on</a> method.</dd>\n<dt>after</dt>\n<dd>An event name to listener function map, to register event listeners for the \"after\" moment of the event. A constructor convenience property for the <a href=\"Base.html#method_after\">after</a> method.</dd>\n<dt>bubbleTargets</dt>\n<dd>An object, or array of objects, to register as bubble targets for bubbled events fired by this instance. A constructor convenience property for the <a href=\"EventTarget.html#method_addTarget\">addTarget</a> method.</dd>\n<dt>plugins</dt>\n<dd>A plugin, or array of plugins to be plugged into the instance (see PluginHost's plug method for signature details). A constructor convenience property for the <a href=\"Plugin.Host.html#method_plug\">plug</a> method.</dd>\n</dl>"}], "description": "<p>\nA base class which objects requiring attributes and custom event support can \nextend. Base also handles the chaining of initializer and destructor methods across \nthe hierarchy as part of object construction and destruction. Additionally, attributes configured \nthrough the static <a href=\"#property_Base.ATTRS\">ATTRS</a> property for each class \nin the hierarchy will be initialized by Base.\n</p>\n<p>\nThe static <a href=\"#property_Base.NAME\">NAME</a> property of each class extending \nfrom Base will be used as the identifier for the class, and is used by Base to prefix \nall events fired by instances of that class.\n</p>"}], "namespace": "", "module": "base", "events": {"destroy": {"preventable": "_defDestroyFn", "params": [{"type": "EventFacade", "name": "e", "description": " Event object"}], "description": "<p>\nLifecycle event for the destroy phase, \nfired prior to destruction. Invoking the preventDefault \nmethod on the event object provided to subscribers will \nprevent destruction from proceeding.\n</p>\n<p>\nSubscribers to the \"after\" moment of this event, will be notified\nafter destruction is complete (and as a result cannot prevent\ndestruction).\n</p>"}, "destroyedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "destroyedChange", "description": "Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "init": {"preventable": "_defInitFn", "params": [{"type": "EventFacade", "name": "e", "description": " Event object, with a cfg property which \nrefers to the configuration object passed to the constructor."}], "description": "<p>\nLifecycle event for the init phase, fired prior to initialization. \nInvoking the preventDefault() method on the event object provided \nto subscribers will prevent initialization from occuring.\n</p>\n<p>\nSubscribers to the \"after\" momemt of this event, will be notified\nafter initialization of the object is complete (and therefore\ncannot prevent initialization).\n</p>"}, "initializedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "initializedChange", "description": "Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"destroyed": {"description": "Flag indicating whether or not this object\nhas been through the destroy lifecycle phase.", "default": "false", "readonly": "", "guessedname": "destroyed", "guessedtype": "property", "type": "boolean"}, "initialized": {"description": "Flag indicating whether or not this object\nhas been through the init lifecycle phase.", "default": "false", "readonly": "", "guessedname": "initialized", "guessedtype": "property", "type": "boolean"}}, "methods": {"Base.unplug": {"static": "", "description": "Alias for <a href=\"Plugin.Host.html#method_Plugin.Host.unplug\">Plugin.Host.unplug</a>. See the \naliased method for argument and return value details.", "guessedname": "unplug", "guessedtype": "property"}, "toString": {"return": {"type": "String", "description": "String representation for this object"}, "description": "Default toString implementation. Provides the constructor NAME\nand the instance guid, if set.", "guessedname": "toString", "guessedtype": "function"}, "_defInitFn": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " Event object, with a cfg property which \nrefers to the configuration object passed to the constructor."}], "description": "Default init event handler", "guessedname": "_defInitFn", "guessedtype": "function"}, "Base.plug": {"static": "", "description": "Alias for <a href=\"Plugin.Host.html#method_Plugin.Host.plug\">Plugin.Host.plug</a>. See aliased \nmethod for argument and return value details.", "guessedname": "plug", "guessedtype": "property"}, "_initHierarchyData": {"private": "", "description": "A helper method used by _getClasses and _getAttrCfgs, which determines both\nthe array of classes and aggregate set of attribute configurations\nacross the class hierarchy for the instance.", "guessedname": "_initHierarchyData", "guessedtype": "function"}, "Base.mix": {"return": {"type": "Function", "description": "The modified main class, with extensions mixed in."}, "description": "<p>Mixes in a list of extensions to an existing class.</p>", "static": "", "guessedname": "mix", "guessedtype": "function", "params": [{"type": "Function", "name": "main", "description": " The existing class into which the extensions should be mixed.  The class needs to be Base or class derived from base (e.g. Widget)"}, {"type": "Function[]", "name": "extensions", "description": " The set of extension classes which will mixed into the existing main class."}]}, "_aggregateAttrs": {"return": {"type": "Object", "description": "The aggregate set of ATTRS definitions for the instance"}, "description": "A helper method, used by _initHierarchyData to aggregate \nattribute configuration across the instances class hierarchy.\nThe method will potect the attribute configuration value to protect the statically defined \ndefault value in ATTRS if required (if the value is an object literal, array or the \nattribute configuration has cloneDefaultValue set to shallow or deep).", "private": "", "params": [{"type": "Array", "name": "allAttrs", "description": " An array of ATTRS definitions across classes in the hierarchy \n(subclass first, Base last)"}], "guessedname": "_aggregateAttrs", "guessedtype": "function"}, "Base.create": {"return": {"type": "Function", "description": "The newly created class."}, "description": "<p>Creates a new class (constructor function) which extends the base class passed in as the second argument, \nand mixes in the array of extensions provided.</p>\n<p>Prototype properties or methods can be added to the new class, using the px argument (similar to Y.extend).</p>\n<p>Static properties or methods can be added to the new class, using the sx argument (similar to Y.extend).</p>\n<p>\n</p>", "static": "", "guessedname": "create", "guessedtype": "function", "params": [{"type": "Function", "name": "name", "description": " The name of the newly created class. Used to defined the NAME property for the new class."}, {"type": "Function", "name": "main", "description": " The base class which the new class should extend. This class needs to be Base or a class derived from base (e.g. Widget)."}, {"type": "Function[]", "name": "extensions", "description": " The list of extensions which will be mixed into the built class."}, {"type": "Object", "name": "px", "description": " The set of prototype properties/methods to add to the built class."}, {"type": "Object", "name": "sx", "description": " The set of static properties/methods to add to the built class."}]}, "_destroyHierarchy": {"private": "", "description": "Destroys the class hierarchy for this instance by invoking\nthe descructor method on the prototype of each class in the hierarchy.", "guessedname": "_destroyHierarchy", "guessedtype": "function"}, "init": {"return": {"type": "Base", "description": "A reference to this object"}, "description": "Init lifecycle method, invoked during construction.\nFires the init event prior to setting up attributes and \ninvoking initializers for the class hierarchy.", "chainable": "", "params": [{"type": "Object", "name": "config", "description": " Object with configuration property name/value pairs"}], "guessedname": "init", "guessedtype": "function", "final": ""}, "_defDestroyFn": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " Event object"}], "description": "Default destroy event handler", "guessedname": "_defDestroyFn", "guessedtype": "function"}, "_getClasses": {"protected": "", "return": {"type": "Function[]", "description": "An array of classes (constructor functions), making up the class hierarchy for this object.\nThis value is cached the first time the method, or _getAttrCfgs, is invoked. Subsequent invocations return the \ncached value."}, "description": "Returns the class hierarchy for this object, with Base being the last class in the array.", "guessedname": "_getClasses", "guessedtype": "function"}, "_preInitEventCfg": {"guessedname": "_preInitEventCfg", "params": [{"type": "Object", "name": "config", "description": " The user configuration object"}], "description": "Handles the special on, after and target properties which allow the user to\neasily configure on and after listeners as well as bubble targets during \nconstruction, prior to init.", "private": "", "guessedtype": "function"}, "_getAttrCfgs": {"protected": "", "return": {"type": "Object", "description": "The hash of attribute configurations, aggregated across classes in the hierarchy\nThis value is cached the first time the method, or _getClasses, is invoked. Subsequent invocations return\nthe cached value."}, "description": "Returns an aggregated set of attribute configurations, by traversing the class hierarchy.", "guessedname": "_getAttrCfgs", "guessedtype": "function"}, "_filterAttrCfs": {"return": {"type": "Object", "description": "The set of attributes belonging to the class passed in, in the form\nof an object with attribute name/configuration pairs."}, "description": "A helper method used when processing ATTRS across the class hierarchy during \ninitialization. Returns a disposable object with the attributes defined for \nthe provided class, extracted from the set of all attributes passed in .", "private": "", "params": [{"type": "Function", "name": "clazz", "description": " The class for which the desired attributes are required."}, {"type": "Object", "name": "allCfgs", "description": " The set of all attribute configurations for this instance. \nAttributes will be removed from this set, if they belong to the filtered class, so\nthat by the time all classes are processed, allCfgs will be empty."}], "guessedname": "_filterAttrCfgs", "guessedtype": "function"}, "destroy": {"return": {"type": "Base", "description": "A reference to this object"}, "description": "<p>\nDestroy lifecycle method. Fires the destroy\nevent, prior to invoking destructors for the\nclass hierarchy.\n</p>\n<p>\nSubscribers to the destroy\nevent can invoke preventDefault on the event object, to prevent destruction\nfrom proceeding.\n</p>", "chainable": "", "guessedname": "destroy", "guessedtype": "function", "final": ""}, "_initHierarchy": {"guessedname": "_initHierarchy", "params": [{"type": "Object", "name": "userVals", "description": " Object with configuration property name/value pairs"}], "description": "Initializes the class hierarchy for the instance, which includes \ninitializing attributes for each class defined in the class's \nstatic <a href=\"#property_Base.ATTRS\">ATTRS</a> property and \ninvoking the initializer method on the prototype of each class in the hierarchy.", "private": "", "guessedtype": "function"}, "Base.build": {"return": {"type": "Function", "description": "A custom class, created from the provided main and extension classes"}, "description": "<p>\nBuilds a custom constructor function (class) from the\nmain function, and array of extension functions (classes)\nprovided. The NAME field for the constructor function is \ndefined by the first argument passed in.\n</p>\n<p>\nThe cfg object supports the following properties\n</p>\n<dl>\n<dt>dynamic &#60;boolean&#62;</dt>\n<dd>\n<p>If true (default), a completely new class\nis created which extends the main class, and acts as the \nhost on which the extension classes are augmented.</p>\n<p>If false, the extensions classes are augmented directly to\nthe main class, modifying the main class' prototype.</p>\n</dd>\n<dt>aggregates &#60;String[]&#62;</dt>\n<dd>An array of static property names, which will get aggregated\non to the built class, in addition to the default properties build \nwill always aggregate as defined by the main class' static _buildCfg\nproperty.\n</dd>\n</dl>", "deprecated": "Use the more convenient Base.create and Base.mix methods instead", "static": "", "guessedname": "build", "guessedtype": "function", "params": [{"type": "Function", "name": "name", "description": " The name of the new class. Used to defined the NAME property for the new class."}, {"type": "Function", "name": "main", "description": " The main class on which to base the built class"}, {"type": "Function[]", "name": "extensions", "description": " The set of extension classes which will be\naugmented/aggregated to the built class."}, {"type": "Object", "name": "cfg", "description": " Optional. Build configuration for the class (see description)."}]}}, "uses": ["Attribute", "Plugin.Host"], "file": "Base.js", "shortname": "Base", "properties": {"Base._buildCfg": {"description": "The build configuration for the Base class.\nDefines the static fields which need to be aggregated\nwhen the Base class is used as the main class passed to\nthe <a href=\"#method_Base.build\">Base.build</a> method.", "private": "", "static": "", "guessedname": "_buildCfg", "guessedtype": "property", "type": "Object", "final": ""}, "Base.ATTRS": {"type": "Object", "static": "", "description": "The default set of attributes which will be available for instances of this class, and \ntheir configuration. In addition to the configuration properties listed by \nAttribute's <a href=\"Attribute.html#method_addAttr\">addAttr</a> method, the attribute \ncan also be configured with a \"cloneDefaultValue\" property, which defines how the statically\ndefined value field should be protected (\"shallow\", \"deep\" and false are supported values). \nBy default if the value is an object literal or an array it will be \"shallow\" cloned, to \nprotect the default value.", "guessedname": "ATTRS", "guessedtype": "property"}, "name": {"deprecated": "Use this.constructor.NAME", "type": "String", "description": "The string used to identify the class of this object.", "guessedname": "name", "guessedtype": "property"}, "Base._ATTR_CFG": {"description": "The list of properties which can be configured for \neach attribute (e.g. setter, getter, writeOnce, readOnly etc.)", "private": "", "static": "", "guessedname": "_ATTR_CFG", "guessedtype": "property", "type": "Array"}, "Base.NAME": {"type": "String", "static": "", "description": "<p>\nThe string to be used to identify instances of \nthis class, for example in prefixing events.\n</p>\n<p>\nClasses extending Base, should define their own\nstatic NAME property, which should be camelCase by\nconvention (e.g. MyClass.NAME = \"myClass\";).\n</p>", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p>\nA base class which objects requiring attributes and custom event support can \nextend. Base also handles the chaining of initializer and destructor methods across \nthe hierarchy as part of object construction and destruction. Additionally, attributes configured \nthrough the static <a href=\"#property_Base.ATTRS\">ATTRS</a> property for each class \nin the hierarchy will be initialized by Base.\n</p>\n<p>\nThe static <a href=\"#property_Base.NAME\">NAME</a> property of each class extending \nfrom Base will be used as the identifier for the class, and is used by Base to prefix \nall events fired by instances of that class.\n</p>"}, "History.Module": {"name": "History.Module", "deprecated": "Please use the new \"history\" module instead.", "constructors": [{"params": [{"type": "String", "name": "id", "description": "  the module identifier"}, {"type": "String", "name": "initialState", "description": "  the module's initial state"}], "description": "This class represents a browser history module."}], "namespace": "", "module": "history-deprecated", "guessedname": "Module", "file": "history.js", "guessedtype": "function", "shortname": "History.Module", "properties": {"upcomingState": {"description": "The module's upcoming state. There can be a slight delay between the\ntime a state is changed, and the time a state change is detected.\nThis property allows us to not fire the module state changed event\nmultiple times, making client code simpler.", "private": "", "guessedname": "upcomingState", "guessedtype": "property", "type": "String", "final": ""}, "id": {"final": "", "type": "String", "description": "The module identifier", "guessedname": "id", "guessedtype": "property"}, "currentState": {"final": "", "type": "String", "description": "The module's current state", "guessedname": "currentState", "guessedtype": "property"}, "initialState": {"final": "", "type": "String", "description": "The module's initial state", "guessedname": "initialState", "guessedtype": "property"}}, "description": "This class represents a browser history module."}, "Plugin.Base": {"name": "Plugin.Base", "namespace": "", "module": "plugin", "events": {"hostChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hostChange", "description": "Fires when the value for the configuration attribute 'host' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"host": {"guessedtype": "property", "type": "Plugin.Host", "description": "The plugin's host object.", "guessedname": "host", "writeonce": ""}}, "methods": {"beforeHostMethod": {"return": {"type": "EventHandle", "description": "handle  The detach handle for the injected function."}, "params": [{"type": "String", "name": "The", "description": " name of the method to inject the function before."}, {"type": "Function", "name": "fn", "description": " The function to inject."}, {"type": "Object", "name": "context", "description": " The execution context. Defaults to the plugin instance."}], "description": "Injects a function to be executed before a given method on host object.\nThe function will be detached when the plugin is unplugged.", "guessedname": "beforeHostMethod", "guessedtype": "function"}, "doBefore": {"return": {"type": "EventHandle", "description": "handle  The detach handle for the handler."}, "params": [{"type": "String", "name": "strMethod", "description": "  The event to listen for, or method to inject logic before."}, {"type": "Function", "name": "fn", "description": "  The handler function. For events, the \"on\" moment listener. For methods, the function to execute before the given method is executed."}, {"type": "Object", "name": "context", "description": "  An optional context to call the handler with. The default context is the plugin instance."}], "description": "Listens for the \"on\" moment of events fired by the host, \nor injects code \"before\" a given method on the host.", "guessedname": "doBefore", "guessedtype": "function"}, "destructor": {"description": "Destructor lifecycle implementation.\nRemoves any event listeners or injected methods applied by the Plugin", "guessedname": "destructor", "guessedtype": "function"}, "onHostEvent": {"return": {"type": "EventHandle", "description": "handle  The detach handle for the listener."}, "params": [{"type": "String | Object", "name": "type", "description": " The event type."}, {"type": "Function", "name": "fn", "description": " The listener."}, {"type": "Object", "name": "context", "description": " The execution context. Defaults to the plugin instance."}], "description": "Listens for the \"on\" moment of events fired by the host object.\nListeners attached through this method will be detached when the plugin is unplugged.", "guessedname": "onHostEvent", "guessedtype": "function"}, "doAfter": {"return": {"type": "EventHandle", "description": "handle  The detach handle for the listener."}, "params": [{"type": "String", "name": "strMethod", "description": "  The event to listen for, or method to inject logic after."}, {"type": "Function", "name": "fn", "description": "  The handler function. For events, the \"after\" moment listener. For methods, the function to execute after the given method is executed."}, {"type": "Object", "name": "context", "description": "  An optional context to call the handler with. The default context is the plugin instance."}], "description": "Listens for the \"after\" moment of events fired by the host, \nor injects code \"after\" a given method on the host.", "guessedname": "doAfter", "guessedtype": "function"}, "afterHostMethod": {"return": {"type": "EventHandle", "description": "handle  The detach handle for the injected function."}, "params": [{"type": "String", "name": "The", "description": " name of the method to inject the function after."}, {"type": "Function", "name": "fn", "description": " The function to inject."}, {"type": "Object", "name": "context", "description": " The execution context. Defaults to the plugin instance."}], "description": "Injects a function to be executed after a given method on host object.\nThe function will be detached when the plugin is unplugged.", "guessedname": "afterHostMethod", "guessedtype": "function"}, "afterHostEvent": {"return": {"type": "EventHandle", "description": "handle  The detach handle for the listener."}, "params": [{"type": "String | Object", "name": "type", "description": " The event type."}, {"type": "Function", "name": "fn", "description": " The listener."}, {"type": "Object", "name": "context", "description": " The execution context. Defaults to the plugin instance."}], "description": "Listens for the \"after\" moment of events fired by the host object.\nListeners attached through this method will be detached when the plugin is unplugged.", "guessedname": "afterHostEvent", "guessedtype": "function"}, "initializer": {"params": [{"type": "Object", "name": "config", "description": " Configuration object with property name/value pairs."}], "description": "Initializer lifecycle implementation.", "guessedname": "initializer", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "plugin.js", "shortname": "Plugin.Base", "param": "{Object} config Configuration object with property name/value pairs.", "properties": {"_handles": {"description": "The list of event handles for event listeners or AOP injected methods\napplied by the plugin to the host object.", "private": "", "value": "null", "guessedname": "_handles", "guessedtype": "property", "type": "Array"}, "Plugin.NS": {"type": "String", "static": "", "description": "The name of the property the the plugin will be attached to\nwhen plugged into a Plugin Host. Plugins extending Plugin.Base,\nshould set their own NS value.", "guessedname": "NS", "guessedtype": "property"}, "Plugin.Base.ATTRS": {"type": "Object", "static": "", "description": "Object defining the set of attributes supported by the Plugin.Base class", "guessedname": "ATTRS", "guessedtype": "property"}, "Plugin.Base.NAME": {"type": "String", "static": "", "description": "The string identifying the Plugin.Base class. Plugins extending\nPlugin.Base should set their own NAME value.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "The base class for all Plugin instances."}, "Do.AlterArgs": {"name": "Do.AlterArgs", "namespace": "", "module": "event-custom", "guessedname": "AlterArgs", "file": "event-do.js", "guessedtype": "function", "shortname": "Do.AlterArgs", "description": "Return an AlterArgs object when you want to change the arguments that\nwere passed into the function.  An example would be a service that scrubs\nout illegal characters prior to executing the core business logic."}, "Pollable": {"name": "Pollable", "namespace": "", "module": "datasource", "methods": {"setInterval": {"return": {"type": "Number", "description": "Interval ID."}, "params": [{"type": "Number", "name": "msec", "description": "  Length of interval in milliseconds."}, {"type": "Object", "name": "request", "description": "  An object literal with the following properties:\n<dl>\n<dt><code>request</code></dt>\n<dd>The request to send to the live data source, if any.</dd>\n<dt><code>callback</code></dt>\n<dd>An object literal with the following properties:\n<dl>\n<dt><code>success</code></dt>\n<dd>The function to call when the data is ready.</dd>\n<dt><code>failure</code></dt>\n<dd>The function to call upon a response failure condition.</dd>\n<dt><code>argument</code></dt>\n<dd>Arbitrary data payload that will be passed back to the success and failure handlers.</dd>\n</dl>\n</dd>\n<dt><code>cfg</code></dt>\n<dd>Configuration object, if any.</dd>\n</dl>"}], "description": "Sets up a polling mechanism to send requests at set intervals and\nforward responses to given callback.", "guessedname": "setInterval", "guessedtype": "function"}, "clearInterval": {"params": [{"type": "Number", "name": "id", "description": "  Interval ID."}], "description": "Disables polling mechanism associated with the given interval ID.", "guessedname": "clearInterval", "guessedtype": "function"}, "clearAllIntervals": {"description": "Clears all intervals.", "guessedname": "clearAllIntervals", "guessedtype": "function"}}, "extends": "DataSource.Local", "superclass": "DataSource.Local", "file": "datasource-polling.js", "shortname": "Pollable", "properties": {"_intervals": {"private": "", "description": "Hash of polling interval IDs that have been enabled,\nstored here to be able to clear all intervals.", "guessedname": "_intervals", "guessedtype": "property"}}, "description": "Adds polling to the DataSource Utility."}, "ImgLoadImgObj": {"properties": {"_imgEl": {"guessedname": "_imgEl", "type": "Object", "description": "The Node object returned from <code>Y.one</code>, to avoid repeat calls to access the DOM.", "private": "", "guessedtype": "property"}, "_fetched": {"guessedname": "_fetched", "type": "Boolean", "description": "Whether this image has already been fetched.\nIn the case of fold-conditional groups, images won't be fetched twice.", "private": "", "guessedtype": "property"}, "_yPos": {"guessedname": "_yPos", "type": "Int", "description": "The vertical position returned from <code>getY</code>, to avoid repeat calls to access the DOM.\nThe Y position is checked only for images registered with fold-conditional groups. The position is checked first at page load (domready)\nand this caching enhancement assumes that the image's vertical position won't change after that first check.", "private": "", "guessedtype": "property"}}, "name": "ImgLoadImgObj", "constructors": [{"description": "Image objects to be registered with the groups"}], "namespace": "", "module": "imageloader", "events": {"isPngChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "isPngChange", "description": "Fires when the value for the configuration attribute 'isPng' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "heightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "heightChange", "description": "Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "sizingMethodChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "sizingMethodChange", "description": "Fires when the value for the configuration attribute 'sizingMethod' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "domIdChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "domIdChange", "description": "Fires when the value for the configuration attribute 'domId' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "setVisibleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "setVisibleChange", "description": "Fires when the value for the configuration attribute 'setVisible' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "enabledChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "enabledChange", "description": "Fires when the value for the configuration attribute 'enabled' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "bgUrlChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "bgUrlChange", "description": "Fires when the value for the configuration attribute 'bgUrl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "srcUrlChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "srcUrlChange", "description": "Fires when the value for the configuration attribute 'srcUrl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "widthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "widthChange", "description": "Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "ImgLoadImgObj", "methods": {"_getYPos": {"guessedname": "_getYPos", "returns": "{Object} The Y position of the image", "description": "Gets the Y position of the node in page coordinates.\nExpects that the page-coordinate position of the image won't change.", "private": "", "guessedtype": "function"}, "_getImgEl": {"guessedname": "_getImgEl", "returns": "{Object} DOM element of the image as a <code>Y.Node</code> object", "description": "Gets the object (as a <code>Y.Node</code>) of the DOM element indicated by \"<code>domId</code>\".", "private": "", "guessedtype": "function"}, "_init": {"private": "", "description": "Initialize all private members needed for the group.", "guessedname": "_init", "guessedtype": "function"}, "fetch": {"return": {"type": "Boolean", "description": "Whether the image has been fetched (either during this execution or previously)"}, "params": [{"type": "Int", "name": "withinY", "description": "  The pixel distance from the top of the page, for which if the image lies within, it will be fetched. Undefined indicates that no check should be made, and the image should always be fetched"}], "description": "Displays the image; puts the URL into the DOM.\nThis method shouldn't be called externally, but is not private in the rare event that it needs to be called immediately.", "guessedname": "fetch", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "imageloader.js", "guessedtype": "function", "shortname": "ImgLoadImgObj", "configs": {"isPng": {"type": "Boolean", "description": "Whether the image is a PNG.\nPNG images get special treatment in that the URL is specified through AlphaImageLoader for IE, versions 6 and earlier.\nOnly used with background images.", "guessedname": "isPng", "guessedtype": "property"}, "srcUrl": {"type": "String", "description": "Source URL for the image.\nFor an image whose URL is specified by a \"<code>src</code>\" attribute in the DOM element.", "guessedname": "srcUrl", "guessedtype": "property"}, "enabled": {"type": "String", "description": "AlphaImageLoader <code>enabled</code> property to be set for the image.\nOnly set if <code>isPng</code> value for this image is set to <code>true</code>.\nDefaults to <code>true</code>.", "guessedname": "enabled", "guessedtype": "property"}, "domId": {"type": "String", "description": "HTML DOM id of the image element.", "guessedname": "domId", "guessedtype": "property"}, "height": {"type": "Int", "description": "Pixel height of the image. Will be set as a <code>height</code> attribute on the DOM element after the image is fetched.\nDefaults to the natural height of the image (no <code>height</code> attribute will be set).\nUsually only used with src images.", "guessedname": "height", "guessedtype": "property"}, "width": {"type": "Int", "description": "Pixel width of the image. Will be set as a <code>width</code> attribute on the DOM element after the image is fetched.\nDefaults to the natural width of the image (no <code>width</code> attribute will be set).\nUsually only used with src images.", "guessedname": "width", "guessedtype": "property"}, "sizingMethod": {"type": "String", "description": "AlphaImageLoader <code>sizingMethod</code> property to be set for the image.\nOnly set if <code>isPng</code> value for this image is set to <code>true</code>.\nDefaults to <code>scale</code>.", "guessedname": "sizingMethod", "guessedtype": "property"}, "bgUrl": {"type": "String", "description": "Background URL for the image.\nFor an image whose URL is specified by \"<code>background-image</code>\" in the element's style.", "guessedname": "bgUrl", "guessedtype": "property"}, "setVisible": {"type": "Boolean", "description": "Whether the image's <code>style.visibility</code> should be set to <code>visible</code> after the image is fetched.\nUsed when setting images as <code>visibility:hidden</code> prior to image fetching.", "guessedname": "setVisible", "guessedtype": "property"}}, "description": "Image objects to be registered with the groups"}, "Text.AccentFold": {"name": "Text.AccentFold", "namespace": "", "module": "text", "guessedname": "YArray", "methods": {"filter": {"return": {"type": "Array", "description": "Filtered copy of <em>haystack</em>."}, "description": "<p>\nReturns a copy of <em>haystack</em> containing only the strings for which\nthe supplied function returns <code>true</code>.\n</p>\n<p>\nWhile comparisons will be made using accent-folded strings, the returned\narray of matches will contain the original strings that were passed in.\n</p>", "static": "", "guessedname": "filter", "guessedtype": "function", "params": [{"type": "Array", "name": "haystack", "description": " Array of strings to filter."}, {"type": "Function", "name": "func", "description": " Comparison function. Will receive an accent-folded\nhaystack string as an argument, and should return a truthy or falsy\nvalue."}]}, "fold": {"return": {"type": "String|Array", "description": "Folded string or array of strings."}, "description": "Accent-folds the specified string or array of strings and returns a copy\nin which common accented letters have been converted to their closest\nnon-accented, lowercase forms.", "static": "", "guessedname": "fold", "guessedtype": "function", "params": [{"type": "String|Array", "name": "input", "description": " String or array of strings to be folded."}]}, "compare": {"return": {"type": "Boolean", "description": "Results of the comparison."}, "description": "Compares the accent-folded versions of two strings and returns\n<code>true</code> if they're the same, <code>false</code> otherwise. If\na custom comparison function is supplied, the accent-folded strings will\nbe passed to that function for comparison.", "static": "", "guessedname": "compare", "guessedtype": "function", "params": [{"type": "String", "name": "a", "description": " First string to compare."}, {"type": "String", "name": "b", "description": " Second string to compare."}, {"type": "Function", "name": "func", "description": " (optional) Custom comparison function. Should\nreturn a truthy or falsy value."}]}, "canFold": {"return": {"type": "Boolean", "description": ""}, "description": "Returns <code>true</code> if the specified string contains one or more\ncharacters that can be folded, <code>false</code> otherwise.", "static": "", "guessedname": "canFold", "guessedtype": "function", "params": [{"type": "String", "name": "string", "description": " String to test."}]}}, "static": "", "file": "text-accentfold.js", "guessedtype": "property", "shortname": "Text.AccentFold", "description": "<p>\nProvides a basic Unicode accent folding implementation that converts common\naccented letters (like \"á\") to their non-accented forms (like \"a\").\n</p>\n<p>\nThis implementation is not comprehensive, and should only be used as a last\nresort when accent folding can't be done on the server. A comprehensive\naccent folding implementation would require much more character data to be\nsent to the browser, resulting in a significant performance penalty. This\nimplementation strives for a compromise between usefulness and performance.\n</p>\n<p>\nAccent folding is a destructive operation that can't be reversed, and may\nchange or destroy the actual meaning of the text depending on the language.\nIt should not be used on strings that will later be displayed to a user,\nunless this is done with the understanding that linguistic meaning may be\nlost and that you may in fact confuse or insult the user by doing so.\n</p>"}, "ClassNameManager": {"name": "ClassNameManager", "namespace": "", "module": "classnamemanager", "methods": {"getClassName": {"params": [{"type": "String", "name": "+", "description": " classnameSection one or more classname sections to be joined"}, {"type": "Boolean", "name": "skipPrefix", "description": " If set to true, the classname will not be prefixed with the default Y.config.classNameDelimiter value."}], "description": "Returns a class name prefixed with the the value of the \n<code>Y.config.classNamePrefix</code> attribute + the provided strings.\nUses the <code>Y.config.classNameDelimiter</code> attribute to delimit the \nprovided strings. E.g. Y.ClassNameManager.getClassName('foo','bar'); // yui-foo-bar", "guessedname": "getClassName", "guessedtype": "function"}}, "static": "", "file": "classnamemanager.js", "shortname": "ClassNameManager", "properties": {"Y.config.classNameDelimiter": {"default": "\"-\"", "type": "{String}", "static": "", "description": "Configuration property indicating the delimiter used to compose all CSS class names in\nthis YUI instance."}, "Y.config.classNamePrefix": {"default": "\"yui\"", "type": "{String}", "static": "", "description": "Configuration property indicating the prefix for all CSS class names in this YUI instance."}}, "description": "A singleton class providing: \n<ul>\n<li>Easy creation of prefixed class names</li>\n<li>Caching of previously created class names for improved performance.</li>\n</ul>"}, "Plugin.DDWindowScroll": {"properties": {"NS": {"description": "The Scroll instance will be placed on the Drag instance under the winscroll namespace.", "default": "winscroll", "readonly": "", "protected": "", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "{String}"}}, "name": "Plugin.DDWindowScroll", "constructors": [{"description": "Extends the Scroll class to make the window scroll while dragging."}], "namespace": "Plugin", "module": "dd", "events": {"windowScrollChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "windowScrollChange", "description": "Fires when the value for the configuration attribute 'windowScroll' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "WS", "extends": "DD.Scroll", "superclass": "DD.Scroll", "file": "scroll.js", "guessedtype": "function", "shortname": "DDWindowScroll", "configs": {"windowScroll": {"type": "Boolean", "description": "Turn on window scroll support, default: true", "guessedname": "windowScroll", "guessedtype": "property"}}, "description": "Extends the Scroll class to make the window scroll while dragging."}, "Assert.ComparisonFailure": {"name": "Assert.ComparisonFailure", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}, {"type": "Object", "name": "expected", "description": " The expected value."}, {"type": "Object", "name": "actual", "description": " The actual value that caused the assertion to fail."}], "description": "ComparisonFailure is subclass of Error that is thrown whenever\na comparison between two values fails. It provides mechanisms to retrieve\nboth the expected and actual value."}], "namespace": "Assert", "module": "test", "guessedname": "ComparisonFailure", "methods": {"toString": {"return": {"type": "String", "description": "A string describing the error."}, "description": "Returns a fully formatted error for an assertion failure. This message\nprovides information about the expected and actual values.", "guessedname": "getMessage", "guessedtype": "function"}}, "extends": "Assert.Error", "superclass": "Assert.Error", "file": "Assert.js", "guessedtype": "function", "shortname": "ComparisonFailure", "properties": {"expected": {"type": "Object", "description": "The expected value.", "guessedname": "expected", "guessedtype": "property"}, "actual": {"type": "Object", "description": "The actual value.", "guessedname": "actual", "guessedtype": "property"}, "name": {"type": "String", "description": "The name of the error that occurred.", "guessedname": "name", "guessedtype": "property"}}, "description": "ComparisonFailure is subclass of Error that is thrown whenever\na comparison between two values fails. It provides mechanisms to retrieve\nboth the expected and actual value."}, "DataSchema.XML": {"name": "DataSchema.XML", "namespace": "", "module": "dataschema", "guessedname": "SchemaXML", "methods": {"_parseResult": {"return": {"type": "Object", "description": "Schema-parsed data."}, "description": "Schema-parsed result to add to results list.", "protected": "", "static": "", "guessedname": "_parseResult", "guessedtype": "function", "params": [{"type": "Array", "name": "fields", "description": "  Required. A collection of field definition."}, {"type": "Object", "name": "context", "description": "  Required. XML node or document to search within."}]}, "_parseResults": {"return": {"type": "Object", "description": "Schema-parsed data."}, "description": "Schema-parsed list of results from full data", "protected": "", "static": "", "guessedname": "_parseResults", "guessedtype": "function", "params": [{"type": "Object", "name": "schema", "description": "  Schema to parse against."}, {"type": "Object", "name": "context", "description": "  XML node or document to parse."}, {"type": "Object", "name": "data_out", "description": "  In-progress schema-parsed data to update."}]}, "_parseMeta": {"return": {"type": "Object", "description": "Schema-parsed data."}, "description": "Parses results data according to schema", "protected": "", "static": "", "guessedname": "_parseMeta", "guessedtype": "function", "params": [{"type": "Object", "name": "xmldoc_in", "description": "  XML document parse."}, {"type": "Object", "name": "data_out", "description": "  In-progress schema-parsed data to update."}]}, "_getLocationValue": {"return": {"type": "Object", "description": "Data value or null."}, "description": "Get an XPath-specified value for a given field from an XML node or document.", "protected": "", "static": "", "guessedname": "_getLocationValue", "guessedtype": "function", "params": [{"type": "String | Object", "name": "field", "description": "  Field definition."}, {"type": "Object", "name": "context", "description": "  XML node or document to search within."}]}, "_parseField": {"description": "Schema-parsed result field.", "protected": "", "static": "", "guessedname": "_parseField", "guessedtype": "function", "params": [{"type": "String | Object", "name": "field", "description": "  Required. Field definition."}, {"type": "Object", "name": "result", "description": "  Required. Schema parsed data object."}, {"type": "Object", "name": "context", "description": "  Required. XML node or document to search within."}]}, "apply": {"return": {"type": "Object", "description": "Schema-parsed data."}, "description": "Applies a given schema to given XML data.", "static": "", "guessedname": "apply", "guessedtype": "function", "params": [{"type": "Object", "name": "schema", "description": "  Schema to apply."}, {"type": "XMLDoc", "name": "data", "description": "  XML document."}]}, "_getXPathResult": {"return": {"type": "Object", "description": "Data collection or null."}, "description": "Fetches the XPath-specified result for a given location in an XML node or document.", "protected": "", "static": "", "guessedname": "_getXPathResult", "guessedtype": "function", "params": [{"type": "String", "name": "locator", "description": "  The XPath location."}, {"type": "Object", "name": "context", "description": "  XML node or document to search within."}, {"type": "Object", "name": "xmldoc", "description": "  XML document to resolve namespace."}]}}, "static": "", "superclass": "DataSchema.Base", "file": "dataschema-xml.js", "guessedtype": "property", "extends": "DataSchema.Base", "shortname": "DataSchema.XML", "description": "XML subclass for the DataSchema Utility."}, "YUI~dump": {"name": "YUI~dump", "namespace": "", "module": "dump", "methods": {"dump": {"return": {"type": "string", "description": "the dump result."}, "params": [{"type": "object", "name": "o", "description": " The object to dump."}, {"type": "int", "name": "d", "description": " How deep to recurse child objects, default 3."}], "description": "Returns a simple string representation of the object or array.\nOther types of objects will be returned unprocessed.  Arrays\nare expected to be indexed.  Use object notation for\nassociative arrays.\nThis method is in the 'dump' module, which is not bundled with\nthe core YUI object", "guessedname": "dump", "guessedtype": "function"}}, "file": "dump.js", "shortname": "YUI~dump", "description": "The following methods are added to the YUI instance"}, "ArrayList": {"name": "ArrayList", "constructors": [{"params": [{"type": " Array ", "name": "items", "description": "  array of items this list will be responsible for"}], "description": "Generic ArrayList class for managing lists of items and iterating operations\nover them.  The targeted use for this class is for augmentation onto a\nclass that is responsible for managing multiple instances of another class\n(e.g. NodeList for Nodes).  The recommended use is to augment your class with\nArrayList, then use ArrayList.addMethod to mirror the API of the constituent\nitems on the list's API.\nThe default implementation creates immutable lists, but mutability can be\nprovided via the arraylist-add submodule or by implementing mutation methods\ndirectly on the augmented class's prototype."}], "namespace": "", "module": "collection", "methods": {"indexOf": {"return": {"type": " Integer ", "description": "Array index if found.  Otherwise -1"}, "params": [{"type": " mixed ", "name": "needle", "description": "  The item to search for"}], "description": "Finds the first index of the needle in the managed array of items.", "guessedname": "indexOf", "guessedtype": "function"}, "some": {"return": {"type": " Boolean ", "description": "True if the function returned true on an item"}, "params": [{"type": " Function ", "name": "fn", "description": "  the function to execute"}, {"type": " mixed ", "name": "context", "description": "  optional override 'this' in the function"}], "description": "<p>Execute a function on each item of the list, optionally providing a\ncustom execution context.  Default context is the item.</p>\n<p>The callback signature is <code>callback( item, index )</code>.</p>\n<p>Unlike <code>each</code>, if the callback returns true, the\niteratation will stop.</p>", "guessedname": "some", "guessedtype": "function"}, "addMethod": {"static": "", "params": [{"type": " Object ", "name": "dest", "description": "  Object or prototype to receive the iterator method"}, {"type": " String | Array ", "name": "name", "description": "  Name of method of methods to create"}], "description": "<p>Adds a pass through method to dest (typically the prototype of a list\nclass) that calls the named method on each item in the list with\nwhatever parameters are passed in.  Allows for API indirection via list\ninstances.</p>\n<p>Accepts a single string name or an array of string names.</p>\n<pre><code>list.each( function ( item ) {\nitem.methodName( 1, 2, 3 );\n} );\n// becomes\nlist.methodName( 1, 2, 3 );</code></pre>\n<p>Additionally, the pass through methods use the item retrieved by the\n<code>_item</code> method in case there is any special behavior that is\nappropriate for API mirroring.</p>", "guessedname": "addMethod", "guessedtype": "function"}, "item": {"return": {"type": " mixed ", "description": "the item at the requested index"}, "params": [{"type": " Integer ", "name": "i", "description": "  index to fetch"}], "description": "Get an item by index from the list.  Override this method if managing a\nlist of objects that have a different public representation (e.g. Node\ninstances vs DOM nodes).  The iteration methods that accept a user\nfunction will use this method for access list items for operation.", "guessedname": "item", "guessedtype": "function"}, "isEmpty": {"return": {"type": " Boolean ", "description": "true if 1 or more items are being managed"}, "description": "Is this instance managing any items?", "guessedname": "isEmpty", "guessedtype": "function"}, "each": {"return": {"type": " ArrayList ", "description": "this instance"}, "description": "<p>Execute a function on each item of the list, optionally providing a\ncustom execution context.  Default context is the item.</p>\n<p>The callback signature is <code>callback( item, index )</code>.</p>", "chainable": "", "params": [{"type": " Function ", "name": "fn", "description": "  the function to execute"}, {"type": " mixed ", "name": "context", "description": "  optional override 'this' in the function"}], "guessedname": "each", "guessedtype": "function"}, "toJSON": {"return": {"type": " Array ", "description": "an array representation of the ArrayList"}, "description": "Provides an array-like representation for JSON.stringify.", "guessedname": "toJSON", "guessedtype": "function"}, "_item": {"return": {"type": " mixed ", "description": "The item appropriate for pass through API methods"}, "description": "Protected method for optimizations that may be appropriate for API\nmirroring. Similar in functionality to <code>item</code>, but is used by\nmethods added with <code>ArrayList.addMethod()</code>.", "protected": "", "params": [{"type": " Integer ", "name": "i", "description": "  Index of item to fetch"}], "guessedname": "_item", "guessedtype": "property"}, "size": {"return": {"type": " Integer ", "description": "Number of items in the list"}, "description": "How many items are in this list?", "guessedname": "size", "guessedtype": "function"}}, "file": "arraylist.js", "shortname": "ArrayList", "description": "Generic ArrayList class for managing lists of items and iterating operations\nover them.  The targeted use for this class is for augmentation onto a\nclass that is responsible for managing multiple instances of another class\n(e.g. NodeList for Nodes).  The recommended use is to augment your class with\nArrayList, then use ArrayList.addMethod to mirror the API of the constituent\nitems on the list's API.\nThe default implementation creates immutable lists, but mutability can be\nprovided via the arraylist-add submodule or by implementing mutation methods\ndirectly on the augmented class's prototype."}, "Loader": {"name": "Loader", "constructors": [{"params": [{"type": "object", "name": "o", "description": " an optional set of configuration options.  Valid options:\n<ul>\n<li>base:\nThe base dir</li>\n<li>comboBase:\nThe YUI combo service base dir. Ex: http://yui.yahooapis.com/combo?</li>\n<li>root:\nThe root path to prepend to module names for the combo service.\nEx: 2.5.2/build/</li>\n<li>filter:.\nA filter to apply to result urls.  This filter will modify the default\npath for all modules.  The default path for the YUI library is the\nminified version of the files (e.g., event-min.js).  The filter property\ncan be a predefined filter or a custom filter.  The valid predefined\nfilters are:\n<dl>\n<dt>DEBUG</dt>\n<dd>Selects the debug versions of the library (e.g., event-debug.js).\nThis option will automatically include the Logger widget</dd>\n<dt>RAW</dt>\n<dd>Selects the non-minified version of the library (e.g., event.js).\n</dd>\n</dl>\nYou can also define a custom filter, which must be an object literal\ncontaining a search expression and a replace string:\n<pre>\nmyFilter: &#123;\n'searchExp': \"-min\\\\.js\",\n'replaceStr': \"-debug.js\"\n&#125;\n</pre>\n</li>\n<li>filters: per-component filter specification.  If specified\nfor a given component, this overrides the filter config</li>\n<li>combine:\nUse the YUI combo service to reduce the number of http connections\nrequired to load your dependencies</li>\n<li>ignore:\nA list of modules that should never be dynamically loaded</li>\n<li>force:\nA list of modules that should always be loaded when required, even if\nalready present on the page</li>\n<li>insertBefore:\nNode or id for a node that should be used as the insertion point for\nnew nodes</li>\n<li>charset:\ncharset for dynamic nodes (deprecated, use jsAttributes or cssAttributes)\n</li>\n<li>jsAttributes: object literal containing attributes to add to script\nnodes</li>\n<li>cssAttributes: object literal containing attributes to add to link\nnodes</li>\n<li>timeout:\nThe number of milliseconds before a timeout occurs when dynamically\nloading nodes.  If not set, there is no timeout</li>\n<li>context:\nexecution context for all callbacks</li>\n<li>onSuccess:\ncallback for the 'success' event</li>\n<li>onFailure: callback for the 'failure' event</li>\n<li>onCSS: callback for the 'CSSComplete' event.  When loading YUI\ncomponents with CSS the CSS is loaded first, then the script.  This\nprovides a moment you can tie into to improve\nthe presentation of the page while the script is loading.</li>\n<li>onTimeout:\ncallback for the 'timeout' event</li>\n<li>onProgress:\ncallback executed each time a script or css file is loaded</li>\n<li>modules:\nA list of module definitions.  See Loader.addModule for the supported\nmodule metadata</li>\n<li>groups:\nA list of group definitions.  Each group can contain specific definitions\nfor base, comboBase, combine, and accepts a list of modules.  See above\nfor the description of these properties.</li>\n<li>2in3: the version of the YUI 2 in 3 wrapper to use.  The intrinsic\nsupport for YUI 2 modules in YUI 3 relies on versions of the YUI 2\ncomponents inside YUI 3 module wrappers.  These wrappers\nchange over time to accomodate the issues that arise from running YUI 2\nin a YUI 3 sandbox.</li>\n<li>yui2: when using the 2in3 project, you can select the version of\nYUI 2 to use.  Valid values *  are 2.2.2, 2.3.1, 2.4.1, 2.5.2, 2.6.0,\n2.7.0, 2.8.0, and 2.8.1 [default] -- plus all versions of YUI 2\ngoing forward.</li>\n</ul>"}], "description": "Loader dynamically loads script and css files.  It includes the dependency\ninfo for the version of the library in use, and will automatically pull in\ndependencies for the modules requested.  It supports rollup files and will\nautomatically use these when appropriate in order to minimize the number of\nhttp connections required to load all of the dependencies.  It can load the\nfiles from the Yahoo! CDN, and it can utilize the combo service provided on\nthis network to reduce the number of http connections required to download\nYUI files.\nWhile the loader can be instantiated by the end user, it normally is not."}], "namespace": "", "module": "loader", "guessedname": "Loader", "see": "YUI.use for the normal use case.  The use function automatically will\npull in missing dependencies.", "methods": {"getRequires": {"return": {"type": "array", "description": "the expanded requirement list."}, "params": [{"type": "object", "name": "mod", "description": " The module definition from moduleInfo."}], "description": "Returns an object containing properties for all modules required\nin order to load the requested module", "guessedname": "getRequires", "guessedtype": "function"}, "onProgress": {"type": "function", "description": "Callback executed each time a script or css file is loaded"}, "onCSS": {"type": "function", "description": "Callback for the 'CSSComplete' event.  When loading YUI components\nwith CSS the CSS is loaded first, then the script.  This provides\na moment you can tie into to improve the presentation of the page\nwhile the script is loading."}, "onTimeout": {"type": "function", "description": "Callback that will be executed if a timeout occurs"}, "getProvides": {"return": {"type": "object", "description": "what this module provides."}, "params": [{"type": "string", "name": "name", "description": " The name of the module."}], "description": "Returns a hash of module names the supplied module satisfies.", "guessedname": "getProvides", "guessedtype": "function"}, "_reduce": {"guessedname": "_reduce", "return": {"type": "object", "description": "the reduced dependency hash."}, "description": "Remove superceded modules and loaded modules.  Called by\ncalculate() after we have the mega list of all dependencies", "private": "", "guessedtype": "function"}, "calculate": {"params": [{"type": "object", "name": "o", "description": " optional options object."}, {"type": "string", "name": "type", "description": " optional argument to prune modules."}], "description": "Calculates the dependency tree, the result is stored in the sorted\nproperty.", "guessedname": "calculate", "guessedtype": "function"}, "_filter": {"return": {"type": "string", "description": "the filtered string."}, "description": "Apply filter defined for this instance to a url/path\nmethod _filter", "private": "", "params": [{"type": "string", "name": "u", "description": " the string to filter."}, {"type": "string", "name": "name", "description": " the name of the module, if we are processing\na single module as opposed to a combined url."}], "guessedname": "_filter", "guessedtype": "function"}, "_addSkin": {"return": {"type": "string", "description": "the module name for the skin."}, "description": "Adds the skin def to the module info", "private": "", "params": [{"type": "string", "name": "skin", "description": " the name of the skin."}, {"type": "string", "name": "mod", "description": " the name of the module."}, {"type": "string", "name": "parent", "description": " parent module if this is a skin of a\nsubmodule or plugin."}], "guessedname": "_addSkin", "guessedtype": "function"}, "_explode": {"private": "", "description": "Inspects the required modules list looking for additional\ndependencies.  Expands the required list to include all\nrequired modules.  Called by calculate()", "guessedname": "_explode", "guessedtype": "function"}, "insert": {"params": [{"type": "object", "name": "o", "description": " optional options object."}, {"type": "string", "name": "type", "description": " the type of dependency to insert."}], "description": "inserts the requested modules and their dependencies.\n<code>type</code> can be \"js\" or \"css\".  Both script and\ncss are inserted if type is not provided.", "guessedname": "insert", "guessedtype": "function"}, "formatSkin": {"return": {"type": "string", "description": "the full skin module name."}, "params": [{"type": "string", "name": "skin", "description": " the name of the skin."}, {"type": "string", "name": "mod", "description": " optional: the name of a module to skin."}], "description": "Returns the skin module name for the specified skin name.  If a\nmodule name is supplied, the returned skin module name is\nspecific to the module passed in.", "guessedname": "formatSkin", "guessedtype": "function"}, "addModule": {"return": {"type": "object", "description": "the module definition or null if\nthe object passed in did not provide all required attributes."}, "params": [{"type": "object", "name": "o", "description": " An object containing the module data."}, {"type": "string", "name": "name", "description": " the module name (optional), required if not\nin the module data."}], "description": "Add a new module to the component metadata.\n<dl>\n<dt>name:</dt>       <dd>required, the component name</dd>\n<dt>type:</dt>       <dd>required, the component type (js or css)\n</dd>\n<dt>path:</dt>       <dd>required, the path to the script from\n\"base\"</dd>\n<dt>requires:</dt>   <dd>array of modules required by this\ncomponent</dd>\n<dt>optional:</dt>   <dd>array of optional modules for this\ncomponent</dd>\n<dt>supersedes:</dt> <dd>array of the modules this component\nreplaces</dd>\n<dt>after:</dt>      <dd>array of modules the components which, if\npresent, should be sorted above this one</dd>\n<dt>after_map:</dt>  <dd>faster alternative to 'after' -- supply\na hash instead of an array</dd>\n<dt>rollup:</dt>     <dd>the number of superseded modules required\nfor automatic rollup</dd>\n<dt>fullpath:</dt>   <dd>If fullpath is specified, this is used\ninstead of the configured base + path</dd>\n<dt>skinnable:</dt>  <dd>flag to determine if skin assets should\nautomatically be pulled in</dd>\n<dt>submodules:</dt> <dd>a hash of submodules</dd>\n<dt>group:</dt>      <dd>The group the module belongs to -- this\nis set automatically when it is added as part of a group\nconfiguration.</dd>\n<dt>lang:</dt>\n<dd>array of BCP 47 language tags of languages for which this\nmodule has localized resource bundles,\ne.g., [\"en-GB\",\"zh-Hans-CN\"]</dd>\n<dt>condition:</dt>\n<dd>Specifies that the module should be loaded automatically if\na condition is met.  This is an object with up to three fields:\n[trigger] - the name of a module that can trigger the auto-load\n[test] - a function that returns true when the module is to be\nloaded.\n[when] - specifies the load order of the conditional module\nwith regard to the position of the trigger module.\nThis should be one of three values: 'before', 'after', or\n'instead'.  The default is 'after'.\n</dd>\n</dl>", "guessedname": "addModule", "guessedtype": "function"}, "loadNext": {"params": [{"type": "string", "name": "mname", "description": " optional the name of the module that has\nbeen loaded (which is usually why it is time to load the next\none)."}], "description": "Executed every time a module is loaded, and if we are in a load\ncycle, we attempt to load the next script.  Public so that it\nis possible to call this if using a method other than\nY.register to determine when scripts are fully loaded", "guessedname": "loadNext", "guessedtype": "function"}, "addGroup": {"params": [{"type": "object", "name": "o", "description": " An object containing the module data."}, {"type": "string", "name": "name", "description": " the group name."}], "description": "Add a new module group\n<dl>\n<dt>name:</dt>      <dd>required, the group name</dd>\n<dt>base:</dt>      <dd>The base dir for this module group</dd>\n<dt>root:</dt>      <dd>The root path to add to each combo\nresource path</dd>\n<dt>combine:</dt>   <dd>combo handle</dd>\n<dt>comboBase:</dt> <dd>combo service base path</dd>\n<dt>modules:</dt>   <dd>the group of modules</dd>\n</dl>", "guessedname": "addGroup", "guessedtype": "function"}, "_rollup": {"guessedname": "_rollup", "description": "Look for rollup packages to determine if all of the modules a\nrollup supersedes are required.  If so, include the rollup to\nhelp reduce the total number of connections required.  Called\nby calculate().  This is an optional feature, and requires the\nappropriate submodule to function.", "private": "", "guessedtype": "function"}, "getLangPackName": {"return": {"type": "string", "description": "the language pack module name."}, "params": [{"type": "string", "name": "lang", "description": " the language code."}, {"type": "string", "name": "mname", "description": " the module to build it for."}], "description": "Builds a module name for a language pack", "guessedname": "getLangPackName", "guessedtype": "function"}, "_sort": {"private": "", "description": "Sorts the dependency tree.  The last step of calculate()", "guessedname": "_sort", "guessedtype": "function"}, "onFailure": {"type": "function", "description": "Callback that will be executed if there is a failure"}, "require": {"params": [{"type": "string[] | string*", "name": "what", "description": " the modules to load."}], "description": "Add a requirement for one or more module", "guessedname": "require", "guessedtype": "function"}, "_setup": {"private": "", "description": "Investigates the current YUI configuration on the page.  By default,\nmodules already detected will not be loaded again unless a force\noption is encountered.  Called by calculate()", "guessedname": "_setup", "guessedtype": "function"}, "onSuccess": {"type": "function", "description": "Callback that will be executed when the loader is finished\nwith an insert"}, "_url": {"return": {"type": "string", "description": "the full url."}, "description": "Generates the full url for a module\nmethod _url", "private": "", "params": [{"type": "string", "name": "path", "description": " the path fragment."}], "guessedname": "_url", "guessedtype": "function"}}, "file": "loader.js", "guessedtype": "function", "shortname": "Loader", "properties": {"cssAttributes": {"type": "object", "description": "An object literal containing attributes to add to link nodes"}, "force": {"type": "string[]", "description": "A list of modules that should always be loaded, even\nif they have already been inserted into the page."}, "allowRollup": {"default": "true", "type": "boolean", "description": "Should we allow rollups", "guessedname": "allowRollup", "guessedtype": "property"}, "maxURLLength": {"type": "int", "description": "Max url length for combo urls.  The default is 2048 for\ninternet explorer, and 8192 otherwise.  This is the URL\nlimit for the Yahoo! hosted combo servers.  If consuming\na different combo service that has a different URL limit\nit is possible to override this default by supplying\nthe maxURLLength config option.  The config option will\nonly take effect if lower than the default.\nBrowsers:\nIE: 2048\nOther A-Grade Browsers: Higher that what is typically supported\n'capable' mobile browsers:\nServers:\nApache: 8192", "guessedname": "maxURLLength", "guessedtype": "property"}, "rollups": {"description": "List of rollup files found in the library metadata"}, "filters": {"type": "object", "description": "per-component filter specification.  If specified for a given\ncomponent, this overrides the filter config.", "guessedname": "filters", "guessedtype": "property"}, "skin": {"description": "Provides the information used to skin the skinnable components.\nThe following skin definition would result in 'skin1' and 'skin2'\nbeing loaded for calendar (if calendar was requested), and\n'sam' for all other skinnable components:\n<code>\nskin: {\n// The default skin, which is automatically applied if not\n// overriden by a component-specific skin definition.\n// Change this in to apply a different skin globally\ndefaultSkin: 'sam',\n// This is combined with the loader base property to get\n// the default root directory for a skin. ex:\n// http://yui.yahooapis.com/2.3.0/build/assets/skins/sam/\nbase: 'assets/skins/',\n// Any component-specific overrides can be specified here,\n// making it possible to load different skins for different\n// components.  It is possible to load more than one skin\n// for a given component as well.\noverrides: {\ncalendar: ['skin1', 'skin2']\n}\n}\n</code>", "guessedname": "skin", "guessedtype": "property"}, "loaded": {"type": "{string: boolean}", "description": "Set when beginning to compute the dependency tree.\nComposed of what YUI reports to be loaded combined\nwith what has been loaded by any instance on the page\nwith the version number specified in the metadata.", "guessedname": "loaded", "guessedtype": "property"}, "_internalCallback": {"description": "Internal callback to handle multiple internal insert() calls\nso that css is inserted prior to js", "private": ""}, "inserted": {"type": "{string: boolean}", "description": "List of modules inserted by the utility", "guessedname": "inserted", "guessedtype": "property"}, "charset": {"deprecated": ", use cssAttributes or jsAttributes.", "type": "string", "description": "The charset attribute for inserted nodes"}, "loadOptional": {"default": "false", "type": "boolean", "description": "Whether or not to load optional dependencies for\nthe requested modules"}, "ignoreRegistered": {"default": "false", "description": "Ignore modules registered on the YUI global"}, "combine": {"default": "true if a base dir isn't in the config", "type": "boolean", "description": "If configured, the loader will attempt to use the combo\nservice for YUI resources and configured external resources.", "guessedname": "combine", "guessedtype": "property"}, "moduleInfo": {"description": "The library metadata"}, "filter": {"type": "string| {searchExp: string, replaceStr: string}", "description": "A filter to apply to result urls.  This filter will modify the default\npath for all modules.  The default path for the YUI library is the\nminified version of the files (e.g., event-min.js).  The filter property\ncan be a predefined filter or a custom filter.  The valid predefined\nfilters are:\n<dl>\n<dt>DEBUG</dt>\n<dd>Selects the debug versions of the library (e.g., event-debug.js).\nThis option will automatically include the Logger widget</dd>\n<dt>RAW</dt>\n<dd>Selects the non-minified version of the library (e.g., event.js).\n</dd>\n</dl>\nYou can also define a custom filter, which must be an object literal\ncontaining a search expression and a replace string:\n<pre>\nmyFilter: &#123;\n'searchExp': \"-min\\\\.js\",\n'replaceStr': \"-debug.js\"\n&#125;\n</pre>"}, "comboBase": {"default": "http://yui.yahooapis.com/combo?", "type": "string", "description": "Base path for the combo service", "guessedname": "comboBase", "guessedtype": "property"}, "skipped": {"description": "List of skipped modules during insert() because the module\nwas not defined", "guessedname": "skipped", "guessedtype": "property"}, "context": {"default": "{YUI} the YUI instance", "description": "The execution context for all callbacks", "guessedname": "context", "guessedtype": "property"}, "insertBefore": {"type": "string|HTMLElement", "description": "Node reference or id where new nodes should be inserted before"}, "jsAttributes": {"type": "object", "description": "An object literal containing attributes to add to script nodes"}, "base": {"default": "http://yui.yahooapis.com/[YUI VERSION]/build/", "type": "string", "description": "The base directory.", "guessedname": "base", "guessedtype": "property"}, "sorted": {"type": "string[]", "description": "All of the derived dependencies in sorted order, which\nwill be populated when either calculate() or insert()\nis called", "guessedname": "sorted", "guessedtype": "property"}, "data": {"description": "Data that is passed to all callbacks"}, "required": {"type": "{string: boolean}", "description": "The list of requested modules", "guessedname": "required", "guessedtype": "property"}, "ignore": {"type": "string[]", "description": "A list of modules that should not be loaded, even if\nthey turn up in the dependency tree"}, "patterns": {"type": "Object", "description": "If a module name is predefined when requested, it is checked againsts\nthe patterns provided in this property.  If there is a match, the\nmodule is added with the default configuration.\nAt the moment only supporting module prefixes, but anticipate\nsupporting at least regular expressions."}, "dirty": {"default": "true", "type": "boolean", "description": "Flag to indicate the dependency tree needs to be recomputed\nif insert is called again.", "guessedname": "dirty", "guessedtype": "property"}, "timeout": {"type": "int", "description": "Timeout value in milliseconds.  If set, self value will be used by\nthe get utility.  the timeout event will fire if\na timeout occurs.", "guessedname": "timeout", "guessedtype": "property"}, "root": {"default": "[YUI VERSION]/build/", "type": "string", "description": "Root path to prepend to module path for the combo\nservice", "guessedname": "root", "guessedtype": "property"}}, "description": "Loader dynamically loads script and css files.  It includes the dependency\ninfo for the version of the library in use, and will automatically pull in\ndependencies for the modules requested.  It supports rollup files and will\nautomatically use these when appropriate in order to minimize the number of\nhttp connections required to load all of the dependencies.  It can load the\nfiles from the Yahoo! CDN, and it can utilize the combo service provided on\nthis network to reduce the number of http connections required to download\nYUI files.\nWhile the loader can be instantiated by the end user, it normally is not."}, "Tab": {"name": "Tab", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying tabview configuration properties."}], "description": "Provides Tab instances for use with TabView"}], "namespace": "", "module": "tabview", "events": {"contentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "contentChange", "description": "Fires when the value for the configuration attribute 'content' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelChange", "description": "Fires when the value for the configuration attribute 'label' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "triggerEventChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "triggerEventChange", "description": "Fires when the value for the configuration attribute 'triggerEvent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "panelNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "panelNodeChange", "description": "Fires when the value for the configuration attribute 'panelNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Tab", "uses": ["WidgetChild"], "superclass": "Widget", "file": "Lang", "guessedtype": "property", "extends": "Widget", "shortname": "Tab", "configs": {"triggerEvent": {"default": "\"click\"", "type": "String", "guessedname": "triggerEvent", "guessedtype": "property"}, "content": {"type": "String", "guessedname": "content", "guessedtype": "property"}, "panelNode": {"type": "Y.Node", "guessedname": "panelNode", "guessedtype": "property"}, "label": {"type": "String", "guessedname": "label", "guessedtype": "property"}}, "description": "Provides Tab instances for use with TabView"}, "Attribute": {"name": "Attribute", "namespace": "", "module": "attribute", "methods": {"_setAttrVal": {"return": {"type": "booolean", "description": "true if the new attribute value was stored, false if not."}, "description": "Updates the stored value of the attribute in the privately held State object,\nif validation and setter passes.", "private": "", "params": [{"type": "String", "name": "attrName", "description": " The attribute name."}, {"type": "String", "name": "subAttrName", "description": " The sub-attribute name, if setting a sub-attribute property (\"x.y.z\")."}, {"type": "Any", "name": "prevVal", "description": " The currently stored value of the attribute."}, {"type": "Any", "name": "newVal", "description": " The value which is going to be stored."}], "guessedname": "_setAttrVal", "guessedtype": "function"}, "set": {"return": {"type": "Object", "description": "A reference to the host object."}, "description": "Sets the value of an attribute.", "chainable": "", "params": [{"type": "String", "name": "name", "description": " The name of the attribute. If the \ncurrent value of the attribute is an Object, dot notation can be used\nto set the value of a property within the object (e.g. <code>set(\"x.y.z\", 5)</code>)."}, {"type": "Any", "name": "value", "description": " The value to set the attribute to."}, {"type": "Object", "name": "opts", "description": " (Optional) Optional event data to be mixed into\nthe event facade passed to subscribers of the attribute's change event. This \ncan be used as a flexible way to identify the source of a call to set, allowing \nthe developer to distinguish between set called internally by the host, vs. \nset called externally by the application developer."}], "guessedname": "set", "guessedtype": "function"}, "getAttrs": {"return": {"type": "Object", "description": "An object with attribute name/value pairs."}, "params": [{"type": "Array | boolean", "name": "attrs", "description": " Optional. An array of attribute names. If omitted, all attribute values are\nreturned. If set to true, all attributes modified from their initial values are returned."}], "description": "Gets multiple attribute values.", "guessedname": "getAttrs", "guessedtype": "function"}, "_fireAttrChange": {"guessedname": "_fireAttrChange", "params": [{"type": "String", "name": "attrName", "description": " The name of the attribute"}, {"type": "String", "name": "subAttrName", "description": " The full path of the property being changed, \nif this is a sub-attribute value being change. Otherwise null."}, {"type": "Any", "name": "currVal", "description": " The current value of the attribute"}, {"type": "Any", "name": "newVal", "description": " The new value of the attribute"}, {"type": "Object", "name": "opts", "description": " Any additional event data to mix into the attribute change event's event facade."}], "description": "Utility method to help setup the event payload and fire the attribute change event.", "private": "", "guessedtype": "function"}, "modifyAttr": {"params": [{"type": "String", "name": "name", "description": " The name of the attribute whose configuration is to be updated."}, {"type": "Object", "name": "config", "description": " An object with configuration property/value pairs, specifying the configuration properties to modify."}], "description": "Updates the configuration of an attribute which has already been added.\n<p>\nThe properties which can be modified through this interface are limited\nto the following subset of attributes, which can be safely modified\nafter a value has already been set on the attribute: readOnly, writeOnce, \nbroadcast and getter.\n</p>", "guessedname": "modifyAttr", "guessedtype": "function"}, "_protectAttrs": {"return": {"type": "Object", "description": "A protected version of the attrs argument."}, "description": "Utility method to protect an attribute configuration\nhash, by merging the entire object and the individual \nattr config objects.", "protected": "", "params": [{"type": "Object", "name": "attrs", "description": " A hash of attribute to configuration object pairs."}], "guessedname": "_protectAttrs", "guessedtype": "function"}, "_setAttr": {"return": {"type": "Object", "description": "A reference to the host object."}, "description": "Provides the common implementation for the public set and protected _set methods.\nSee <a href=\"#method_set\">set</a> for argument details.", "chainable": "", "protected": "", "params": [{"type": "String", "name": "name", "description": " The name of the attribute."}, {"type": "Any", "name": "value", "description": " The value to set the attribute to."}, {"type": "Object", "name": "opts", "description": " (Optional) Optional event data to be mixed into\nthe event facade passed to subscribers of the attribute's change event."}, {"type": "boolean", "name": "force", "description": " If true, allows the caller to set values for \nreadOnly or writeOnce attributes which have already been set."}], "guessedname": "_setAttr", "guessedtype": "function"}, "_normAttrVals": {"return": {"type": "Object", "description": ""}, "description": "Utility method to normalize attribute values. The base implementation \nsimply merges the hash to protect the original.", "private": "", "params": [{"type": "Object", "name": "valueHash", "description": " An object with attribute name/value pairs"}], "param": "{Object} valueHash An object with attribute name/value pairs", "guessedname": "_normAttrVals", "guessedtype": "function"}, "_getAttrCfg": {"return": {"type": "Object", "description": "The configuration properties for the given attribute, or all attributes."}, "description": "Returns an object with the configuration properties (and value)\nfor the given attrubute. If attrName is not provided, returns the\nconfiguration properties for all attributes.", "protected": "", "params": [{"type": "String", "name": "name", "description": " Optional. The attribute name. If not provided, the method will return the configuration for all attributes."}], "guessedname": "_getAttrCfg", "guessedtype": "function"}, "_defAttrChangeFn": {"guessedname": "_defAttrChangeFn", "params": [{"type": "EventFacade", "name": "e", "description": " The event object for attribute change events."}], "description": "Default function for attribute change events.", "private": "", "guessedtype": "function"}, "_addLazyAttr": {"guessedname": "_addLazyAttr", "params": [{"type": "Object", "name": "name", "description": " The name of the attribute"}], "description": "Finishes initializing an attribute which has been lazily added.", "private": "", "guessedtype": "function"}, "_getAttrInitVal": {"return": {"type": "Any", "description": "The initial value of the attribute."}, "description": "Returns the initial value of the given attribute from\neither the default configuration provided, or the \nover-ridden value if it exists in the set of initValues \nprovided and the attribute is not read-only.", "private": "", "params": [{"type": "String", "name": "attr", "description": " The name of the attribute"}, {"type": "Object", "name": "cfg", "description": " The attribute configuration object"}, {"type": "Object", "name": "initValues", "description": " The object with simple and complex attribute name/value pairs returned from _normAttrVals"}], "param": "{String} attr The name of the attribute", "guessedname": "_getAttrInitVal", "guessedtype": "function"}, "_getAttr": {"return": {"type": "Any", "description": "The value of the attribute."}, "description": "Provides the common implementation for the public get method,\nallowing Attribute hosts to over-ride either method.\nSee <a href=\"#method_get\">get</a> for argument details.", "chainable": "", "protected": "", "params": [{"type": "String", "name": "name", "description": " The name of the attribute."}], "guessedname": "_getAttr", "guessedtype": "function"}, "_getAttrs": {"return": {"type": "Object", "description": "An object with attribute name/value pairs."}, "description": "Implementation behind the public getAttrs method, to get multiple attribute values.", "protected": "", "params": [{"type": "Array | boolean", "name": "attrs", "description": " Optional. An array of attribute names. If omitted, all attribute values are\nreturned. If set to true, all attributes modified from their initial values are returned."}], "guessedname": "_getAttrs", "guessedtype": "function"}, "removeAttr": {"params": [{"type": "String", "name": "name", "description": " The name of the attribute to be removed."}], "description": "Removes an attribute from the host object", "guessedname": "removeAttr", "guessedtype": "function"}, "get": {"return": {"type": "Any", "description": "The value of the attribute"}, "params": [{"type": "String", "name": "name", "description": " The name of the attribute. If the value of the attribute is an Object, \ndot notation can be used to obtain the value of a property of the object (e.g. <code>get(\"x.y.z\")</code>)"}], "description": "Returns the current value of the attribute. If the attribute\nhas been configured with a 'getter' function, this method will delegate\nto the 'getter' to obtain the value of the attribute.", "guessedname": "get", "guessedtype": "function"}, "_setStateVal": {"guessedname": "_setStateVal", "params": [{"type": "String", "name": "name", "description": " The name of the attribute"}, {"type": "Any", "name": "value", "description": " The value of the attribute"}], "description": "Sets the stored value for the attribute, in either the \ninternal state object, or the state proxy if it exits", "private": "", "guessedtype": "function"}, "addAttrs": {"return": {"type": "Object", "description": "A reference to the host object."}, "description": "Configures a group of attributes, and sets initial values.\n<p>\n<strong>NOTE:</strong> This method does not isolate the configuration object by merging/cloning. \nThe caller is responsible for merging/cloning the configuration object if required.\n</p>", "chainable": "", "params": [{"type": "Object", "name": "cfgs", "description": " An object with attribute name/configuration pairs."}, {"type": "Object", "name": "values", "description": " An object with attribute name/value pairs, defining the initial values to apply.\nValues defined in the cfgs argument will be over-written by values in this argument unless defined as read only."}, {"type": "boolean", "name": "lazy", "description": " Whether or not to delay the intialization of these attributes until the first call to get/set.\nIndividual attributes can over-ride this behavior by defining a lazyAdd configuration property in their configuration.\nSee <a href=\"#method_addAttr\">addAttr</a>."}], "guessedname": "addAttrs", "guessedtype": "function"}, "_getStateVal": {"return": {"type": "Any", "description": "The stored value of the attribute"}, "description": "Gets the stored value for the attribute, from either the \ninternal state object, or the state proxy if it exits", "private": "", "params": [{"type": "String", "name": "name", "description": " The name of the attribute"}], "guessedname": "_getStateVal", "guessedtype": "function"}, "_setAttrs": {"return": {"type": "Object", "description": "A reference to the host object."}, "description": "Implementation behind the public setAttrs method, to set multiple attribute values.", "chainable": "", "protected": "", "params": [{"type": "Object", "name": "attrs", "description": "  An object with attributes name/value pairs."}], "guessedname": "_setAttrs", "guessedtype": "function"}, "reset": {"return": {"type": "Object", "description": "A reference to the host object."}, "description": "Resets the attribute (or all attributes) to its initial value, as long as\nthe attribute is not readOnly, or writeOnce.", "chainable": "", "params": [{"type": "String", "name": "name", "description": " Optional. The name of the attribute to reset.  If omitted, all attributes are reset."}], "guessedname": "reset", "guessedtype": "function"}, "addAttr": {"return": {"type": "Object", "description": "A reference to the host object."}, "description": "<p>\nAdds an attribute with the provided configuration to the host object.\n</p>\n<p>\nThe config argument object supports the following properties:\n</p>\n<dl>\n<dt>value &#60;Any&#62;</dt>\n<dd>The initial value to set on the attribute</dd>\n<dt>valueFn &#60;Function | String&#62;</dt>\n<dd>\n<p>A function, which will return the initial value to set on the attribute. This is useful\nfor cases where the attribute configuration is defined statically, but needs to \nreference the host instance (\"this\") to obtain an initial value. If both the value and valueFn properties are defined, \nthe value returned by the valueFn has precedence over the value property, unless it returns undefined, in which \ncase the value property is used.</p>\n<p>valueFn can also be set to a string, representing the name of the instance method to be used to retrieve the value.</p>\n</dd>\n<dt>readOnly &#60;boolean&#62;</dt>\n<dd>Whether or not the attribute is read only. Attributes having readOnly set to true\ncannot be modified by invoking the set method.</dd>\n<dt>writeOnce &#60;boolean&#62; or &#60;string&#62;</dt>\n<dd>\nWhether or not the attribute is \"write once\". Attributes having writeOnce set to true, \ncan only have their values set once, be it through the default configuration, \nconstructor configuration arguments, or by invoking set.\n<p>The writeOnce attribute can also be set to the string \"initOnly\", in which case the attribute can only be set during initialization\n(when used with Base, this means it can only be set during construction)</p>\n</dd>\n<dt>setter &#60;Function | String&#62;</dt>\n<dd>\n<p>The setter function used to massage or normalize the value passed to the set method for the attribute. \nThe value returned by the setter will be the final stored value. Returning\n<a href=\"#property_Attribute.INVALID_VALUE\">Attribute.INVALID_VALUE</a>, from the setter will prevent\nthe value from being stored.\n</p>\n<p>setter can also be set to a string, representing the name of the instance method to be used as the setter function.</p>\n</dd>\n<dt>getter &#60;Function | String&#62;</dt>\n<dd>\n<p>\nThe getter function used to massage or normalize the value returned by the get method for the attribute.\nThe value returned by the getter function is the value which will be returned to the user when they \ninvoke get.\n</p>\n<p>getter can also be set to a string, representing the name of the instance method to be used as the getter function.</p>\n</dd>\n<dt>validator &#60;Function | String&#62;</dt>\n<dd>\n<p>\nThe validator function invoked prior to setting the stored value. Returning\nfalse from the validator function will prevent the value from being stored.\n</p>\n<p>validator can also be set to a string, representing the name of the instance method to be used as the validator function.</p>\n</dd>\n<dt>broadcast &#60;int&#62;</dt>\n<dd>If and how attribute change events for this attribute should be broadcast. See CustomEvent's <a href=\"CustomEvent.html#property_broadcast\">broadcast</a> property for \nvalid values. By default attribute change events are not broadcast.</dd>\n<dt>lazyAdd &#60;boolean&#62;</dt>\n<dd>Whether or not to delay initialization of the attribute until the first call to get/set it. \nThis flag can be used to over-ride lazy initialization on a per attribute basis, when adding multiple attributes through \nthe <a href=\"#method_addAttrs\">addAttrs</a> method.</dd>\n</dl>\n<p>The setter, getter and validator are invoked with the value and name passed in as the first and second arguments, and with\nthe context (\"this\") set to the host object.</p>\n<p>Configuration properties outside of the list mentioned above are considered private properties used internally by attribute, and are not intended for public use.</p>", "chainable": "", "params": [{"type": "String", "name": "name", "description": " The name of the attribute."}, {"type": "Object", "name": "config", "description": " An object with attribute configuration property/value pairs, specifying the configuration for the attribute.\n<p>\n<strong>NOTE:</strong> The configuration object is modified when adding an attribute, so if you need \nto protect the original values, you will need to merge the object.\n</p>"}, {"type": "boolean", "name": "lazy", "description": " (optional) Whether or not to add this attribute lazily (on the first call to get/set)."}], "guessedname": "addAttr", "guessedtype": "function"}, "attrAdded": {"return": {"type": "boolean", "description": "true if an attribute with the given name has been added, false if it hasn't. This method will return true for lazily added attributes."}, "params": [{"type": "String", "name": "name", "description": " The name of the attribute to check."}], "description": "Checks if the given attribute has been added to the host", "guessedname": "attrAdded", "guessedtype": "function"}, "_isLazyAttr": {"return": {"type": "boolean", "description": "true if it's a lazily added attribute, false otherwise."}, "description": "Checks whether or not the attribute is one which has been\nadded lazily and still requires initialization.", "private": "", "params": [{"type": "String", "name": "name", "description": " The name of the attribute"}], "guessedname": "_isLazyAttr", "guessedtype": "function"}, "_addAttrs": {"guessedname": "_addAttrs", "params": [{"type": "Object", "name": "cfgs", "description": " An object with attribute name/configuration pairs."}, {"type": "Object", "name": "values", "description": " An object with attribute name/value pairs, defining the initial values to apply.\nValues defined in the cfgs argument will be over-written by values in this argument unless defined as read only."}, {"type": "boolean", "name": "lazy", "description": " Whether or not to delay the intialization of these attributes until the first call to get/set.\nIndividual attributes can over-ride this behavior by defining a lazyAdd configuration property in their configuration.\nSee <a href=\"#method_addAttr\">addAttr</a>."}], "description": "Implementation behind the public addAttrs method. \nThis method is invoked directly by get if it encounters a scenario \nin which an attribute's valueFn attempts to obtain the \nvalue an attribute in the same group of attributes, which has not yet \nbeen added (on demand initialization).", "private": "", "guessedtype": "function"}, "setAttrs": {"return": {"type": "Object", "description": "A reference to the host object."}, "description": "Sets multiple attribute values.", "chainable": "", "params": [{"type": "Object", "name": "attrs", "description": "  An object with attributes name/value pairs."}], "guessedname": "setAttrs", "guessedtype": "function"}, "_set": {"return": {"type": "Object", "description": "A reference to the host object."}, "description": "Allows setting of readOnly/writeOnce attributes. See <a href=\"#method_set\">set</a> for argument details.", "chainable": "", "protected": "", "params": [{"type": "String", "name": "name", "description": " The name of the attribute."}, {"type": "Any", "name": "val", "description": " The value to set the attribute to."}, {"type": "Object", "name": "opts", "description": " (Optional) Optional event data to be mixed into\nthe event facade passed to subscribers of the attribute's change event."}], "guessedname": "_set", "guessedtype": "function"}}, "uses": ["EventTarget"], "file": "Attribute.js", "shortname": "Attribute", "properties": {"Attribute._ATTR_CFG": {"description": "The list of properties which can be configured for \neach attribute (e.g. setter, getter, writeOnce etc.).\nThis property is used internally as a whitelist for faster\nY.mix operations.", "protected": "", "static": "", "guessedname": "_ATTR_CFG", "guessedtype": "property", "type": "Array"}, "Attribute.INVALID_VALUE": {"description": "<p>The value to return from an attribute setter in order to prevent the set from going through.</p>\n<p>You can return this value from your setter if you wish to combine validator and setter \nfunctionality into a single setter function, which either returns the massaged value to be stored or \nAttribute.INVALID_VALUE to prevent invalid values from being stored.</p>", "static": "", "guessedname": "INVALID_VALUE", "guessedtype": "property", "type": "Object", "final": ""}}, "description": "<p>\nAttribute provides configurable attribute support along with attribute change events. It is designed to be \naugmented on to a host class, and provides the host with the ability to configure attributes to store and retrieve state, \nalong with attribute change events.\n</p>\n<p>For example, attributes added to the host can be configured:</p>\n<ul>\n<li>As read only.</li>\n<li>As write once.</li>\n<li>With a setter function, which can be used to manipulate\nvalues passed to Attribute's <a href=\"#method_set\">set</a> method, before they are stored.</li>\n<li>With a getter function, which can be used to manipulate stored values,\nbefore they are returned by Attribute's <a href=\"#method_get\">get</a> method.</li>\n<li>With a validator function, to validate values before they are stored.</li>\n</ul>\n<p>See the <a href=\"#method_addAttr\">addAttr</a> method, for the complete set of configuration\noptions available for attributes</p>.\n<p><strong>NOTE:</strong> Most implementations will be better off extending the <a href=\"Base.html\">Base</a> class, \ninstead of augmenting Attribute directly. Base augments Attribute and will handle the initial configuration \nof attributes for derived classes, accounting for values passed into the constructor.</p>"}, "Text.Data.WordBreak": {"name": "Text.Data.WordBreak", "namespace": "", "module": "text", "guessedname": "WordBreak", "static": "", "file": "text-data-wordbreak.js", "guessedtype": "property", "shortname": "Text.Data.WordBreak", "description": "<p>\nUnicode character data used by the word breaking algorithm.\n</p>\n<p>\nWhenever possible, word breaking should be done on the server, where it's\npossible to use tools that are both more complete and more performant. It\nshould only be done on the client as an absolute last resort.\n</p>"}, "Plugin.SortScroll": {"name": "Plugin.SortScroll", "constructors": [{"description": "Plugin for sortable to handle scrolling lists."}], "namespace": "Plugin", "module": "sortable", "guessedname": "SortScroll", "extends": "Base", "superclass": "Base", "file": "sortable-scroll.js", "guessedtype": "function", "shortname": "SortScroll", "properties": {"NS": {"description": "The scroll instance.", "default": "scroll", "readonly": "", "protected": "", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "{String}"}, "NAME": {"description": "The name of the class.", "default": "SortScroll", "readonly": "", "protected": "", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "{String}"}}, "description": "Plugin for sortable to handle scrolling lists."}, "Event": {"name": "Event", "namespace": "", "module": "event", "guessedname": "dom_wrappers", "methods": {"nativeRemove": {"description": "Basic remove listener", "private": "", "static": "", "guessedname": "nativeRemove", "guessedtype": "property", "params": [{"type": "HTMLElement", "name": "el", "description": "      the element to bind the handler to"}, {"type": "string", "name": "type", "description": "   the type of event handler"}, {"type": "function", "name": "fn", "description": "      the callback to invoke"}, {"type": "boolen", "name": "capture", "description": " capture or bubble phase"}]}, "getListeners": {"return": {"type": "Y.Custom.Event", "description": "the custom event wrapper for the DOM event(s)"}, "description": "Returns all listeners attached to the given element via addListener.\nOptionally, you can specify a specific type of event to return.", "static": "", "guessedname": "getListeners", "guessedtype": "function", "params": [{"type": "HTMLElement|string", "name": "el", "description": "  the element or element id to inspect"}, {"type": "string", "name": "type", "description": "  optional type of listener to return. If\nleft out, all listeners will be returned"}]}, "getEvent": {"return": {"type": "Event", "description": "the event"}, "description": "Finds the event in the window object, the caller's arguments, or\nin the arguments of another method in the callstack.  This is\nexecuted automatically for events registered through the event\nmanager, so the implementer should not normally need to execute\nthis function at all.", "static": "", "guessedname": "getEvent", "guessedtype": "function", "params": [{"type": "Event", "name": "e", "description": " the event parameter from the handler"}, {"type": "HTMLElement", "name": "el", "description": " the element the listener was attached to"}]}, "attach": {"return": {"type": "EventHandle", "description": "an object to that can be used to detach the listener"}, "description": "Adds an event listener", "static": "", "guessedname": "attach", "guessedtype": "function", "params": [{"type": "String", "name": "type", "description": "     The type of event to append"}, {"type": "Function", "name": "fn", "description": "        The method the event invokes"}, {"type": "String|HTMLElement|Array|NodeList", "name": "el", "description": " An id, an element\nreference, or a collection of ids and/or elements to assign the\nlistener to."}, {"type": "Object", "name": "context", "description": " optional context object"}, {"type": "Boolean|object", "name": "args", "description": " 0..n arguments to pass to the callback"}]}, "_unload": {"guessedname": "_unload", "static": "", "description": "Removes all listeners registered by pe.event.  Called\nautomatically during the unload event.", "private": "", "guessedtype": "function"}, "purgeElement": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": " the element to purge"}, {"type": "boolean", "name": "recurse", "description": " recursively purge this element's children\nas well.  Use with caution."}, {"type": "string", "name": "type", "description": " optional type of listener to purge. If\nleft out, all listeners will be removed"}], "description": "Removes all listeners attached to the given element via addListener.\nOptionally, the node's children can also be purged.\nOptionally, you can specify a specific type of event to remove.", "guessedname": "purgeElement", "guessedtype": "function"}, "generateId": {"return": {"type": "string", "description": "the resulting id of the element"}, "description": "Generates an unique ID for the element if it does not already\nhave one.", "static": "", "guessedname": "generateId", "guessedtype": "function", "params": [{"type": "", "name": "el", "description": " the element to create the id for"}]}, "_isValidCollection": {"return": {"type": "boolean", "description": "true if the object is array-like and populated"}, "description": "We want to be able to use getElementsByTagName as a collection\nto attach a group of events to.  Unfortunately, different\nbrowsers return different types of collections.  This function\ntests to determine if the object is array-like.  It will also\nfail if the object is an array, but is empty.", "deprecated": "was not meant to be used directly", "private": "", "static": "", "guessedname": "_isValidCollection", "guessedtype": "property", "params": [{"type": "", "name": "o", "description": " the object to test"}]}, "Event.define": {"return": {"type": "SyntheticEvent", "description": "the subclass implementation instance created to\nhandle event subscriptions of this type"}, "description": "<p>Defines a new event in the DOM event system.  Implementers are\nresponsible for monitoring for a scenario whereby the event is fired.  A\nnotifier object is provided to the functions identified below.  When the\ncriteria defining the event are met, call notifier.fire( [args] ); to\nexecute event subscribers.</p>\n<p>The first parameter is the name of the event.  The second parameter is a\nconfiguration object which define the behavior of the event system when the\nnew event is subscribed to or detached from.  The methods that should be\ndefined in this configuration object are <code>on</code>,\n<code>detach</code>, <code>delegate</code>, and <code>detachDelegate</code>.\nYou are free to define any other methods or properties needed to define your\nevent.  Be aware, however, that since the object is used to subclass\nSyntheticEvent, you should avoid method names used by SyntheticEvent unless\nyour intention is to override the default behavior.</p>\n<p>This is a list of properties and methods that you can or should specify\nin the configuration object:</p>\n<dl>\n<dt><code>on</code></dt>\n<dd><code>function (node, subscription, notifier)</code> The\nimplementation logic for subscription.  Any special setup you need to\ndo to create the environment for the event being fired--E.g. native\nDOM event subscriptions.  Store subscription related objects and\nstate on the <code>subscription</code> object.  When the\ncriteria have been met to fire the synthetic event, call\n<code>notifier.fire(e)</code>.  See Notifier's <code>fire()</code>\nmethod for details about what to pass as parameters.</dd>\n<dt><code>detach</code></dt>\n<dd><code>function (node, subscription, notifier)</code> The\nimplementation logic for cleaning up a detached subscription. E.g.\ndetach any DOM subscriptions added in <code>on</code>.</dd>\n<dt><code>delegate</code></dt>\n<dd><code>function (node, subscription, notifier, filter)</code> The\nimplementation logic for subscription via <code>Y.delegate</code> or\n<code>node.delegate</code>.  The filter is typically either a selector\nstring or a function.  You can use\n<code>Y.delegate.compileFilter(selectorString)</code> to create a\nfilter function from a selector string if needed.  The filter function\nexpects an event object as input and should output either null, a\nmatching Node, or an array of matching Nodes.  Otherwise, this acts\nlike <code>on</code> DOM event subscriptions.  Store subscription\nrelated objects and information on the <code>subscription</code>\nobject.  When the criteria have been met to fire the synthetic event,\ncall <code>notifier.fire(e)</code> as noted above.</dd>\n<dt><code>detachDelegate</code></dt>\n<dd><code>function (node, subscription, notifier)</code> The\nimplementation logic for cleaning up a detached delegate subscription.\nE.g. detach any DOM delegate subscriptions added in\n<code>delegate</code>.</dd>\n<dt><code>publishConfig</code></dt>\n<dd>(Object) The configuration object that will be used to instantiate\nthe underlying CustomEvent. See Notifier's <code>fire</code> method\nfor details.</dd>\n<dt><code>processArgs</code></dt\n<dd>\n<p><code>function (argArray, fromDelegate)</code> Optional method\nto extract any additional arguments from the subscription\nsignature.  Using this allows <code>on</code> or\n<code>delegate</code> signatures like\n<code>node.on(&quot;hover&quot;, overCallback,\noutCallback)</code>.</p>\n<p>When processing an atypical argument signature, make sure the\nargs array is returned to the normal signature before returning\nfrom the function.  For example, in the &quot;hover&quot; example\nabove, the <code>outCallback</code> needs to be <code>splice</code>d\nout of the array.  The expected signature of the args array for\n<code>on()</code> subscriptions is:</p>\n<pre>\n<code>[type, callback, target, contextOverride, argN...]</code>\n</pre>\n<p>And for <code>delegate()</code>:</p>\n<pre>\n<code>[type, callback, target, filter, contextOverride, argN...]</code>\n</pre>\n<p>where <code>target</code> is the node the event is being\nsubscribed for.  You can see these signatures documented for\n<code>Y.on()</code> and <code>Y.delegate()</code> respectively.</p>\n<p>Whatever gets returned from the function will be stored on the\n<code>subscription</code> object under\n<code>subscription._extra</code>.</p></dd>\n<dt><code>subMatch</code></dt>\n<dd>\n<p><code>function (sub, args)</code>  Compares a set of\nsubscription arguments against a Subscription object to determine\nif they match.  The default implementation compares the callback\nfunction against the second argument passed to\n<code>Y.on(...)</code> or <code>node.detach(...)</code> etc.</p>\n</dd>\n</dl>", "since": "3.1.0", "static": "", "guessedname": "define", "in": "", "params": [{"type": "String", "name": "type", "description": "  the name of the event"}, {"type": "Object", "name": "config", "description": "  the prototype definition for the new event (see above)"}, {"type": "Boolean", "name": "force", "description": "  override an existing event (use with caution)"}], "guessedtype": "function"}, "onContentReady": {"deprecated": "Use Y.on(\"contentready\")", "static": "", "params": [{"type": "string", "name": "id", "description": " the id of the element to look for."}, {"type": "function", "name": "fn", "description": " what to execute when the element is ready."}, {"type": "object", "name": "obj", "description": " an optional object to be passed back as\na parameter to fn."}, {"type": "boolean|object", "name": "override", "description": " If set to true, fn will execute\nin the context of p_obj.  If an object, fn will\nexectute in the context of that object"}], "description": "Works the same way as onAvailable, but additionally checks the\nstate of sibling elements to determine if the content of the\navailable element is safe to modify.\n<p>The callback is executed with a single parameter:\nthe custom object parameter, if provided.</p>"}, "startInterval": {"static": "", "private": "", "guessedname": "startInterval", "guessedtype": "function"}, "nativeAdd": {"description": "Adds a DOM event directly without the caching, cleanup, context adj, etc", "private": "", "static": "", "guessedname": "nativeAdd", "guessedtype": "property", "params": [{"type": "HTMLElement", "name": "el", "description": "      the element to bind the handler to"}, {"type": "string", "name": "type", "description": "   the type of event handler"}, {"type": "function", "name": "fn", "description": "      the callback to invoke"}, {"type": "boolen", "name": "capture", "description": " capture or bubble phase"}]}, "_poll": {"guessedname": "_poll", "static": "", "description": "Polling function that runs before the onload event fires,\nattempting to attach to DOM Nodes as soon as they are\navailable", "private": "", "guessedtype": "function"}, "simulate": {"return": {"type": "void", "description": ""}, "description": "Simulates the event with the given name on a target.", "static": "", "guessedname": "simulate", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "target", "description": " The DOM element that's the target of the event."}, {"type": "String", "name": "type", "description": " The type of event to simulate (i.e., \"click\")."}, {"type": "Object", "name": "options", "description": " (Optional) Extra options to copy onto the event object."}]}, "onAvailable": {"deprecated": "Use Y.on(\"available\")", "static": "", "params": [{"type": "string||string[]", "name": "id", "description": " the id of the element, or an array\nof ids to look for."}, {"type": "function", "name": "fn", "description": " what to execute when the element is found."}, {"type": "object", "name": "p_obj", "description": " an optional object to be passed back as\na parameter to fn."}, {"type": "boolean|object", "name": "p_override", "description": " If set to true, fn will execute\nin the context of p_obj, if set to an object it\nwill execute in the context of that object"}, {"type": "boolean", "name": "checkContent", "description": "  check child node readiness (onContentReady)"}], "description": "Executes the supplied callback when the item with the supplied\nid is found.  This is meant to be used to execute behavior as\nsoon as possible as the page loads.  If you use this after the\ninitial page load it will poll for a fixed time for the element.\nThe number of times it will poll and the frequency are\nconfigurable.  By default it will poll for 10 seconds.\n<p>The callback is executed with a single parameter:\nthe custom object parameter, if provided.</p>"}, "detach": {"return": {"type": "boolean", "description": "true if the unbind was successful, false otherwise."}, "description": "Removes an event listener.  Supports the signature the event was bound\nwith, but the preferred way to remove listeners is using the handle\nthat is returned when using Y.on", "static": "", "guessedname": "detach", "guessedtype": "function", "params": [{"type": "String", "name": "type", "description": " the type of event to remove."}, {"type": "Function", "name": "fn", "description": " the method the event invokes.  If fn is\nundefined, then all event handlers for the type of event are\nremoved."}, {"type": "String|HTMLElement|Array|NodeList|EventHandle", "name": "el", "description": " An\nevent handle, an id, an element reference, or a collection\nof ids and/or elements to remove the listener from."}]}, "_load": {"guessedname": "_load", "static": "", "description": "hook up any deferred listeners", "private": "", "guessedtype": "function"}}, "static": "", "file": "event-dom.js", "guessedtype": "property", "shortname": "Event", "properties": {"DOMReady": {"type": "boolean", "static": "", "description": "True when the document is initially usable", "guessedname": "DOMReady", "guessedtype": "property"}, "_retryCount": {"guessedname": "_retryCount", "static": "", "description": "The number of times to poll after window.onload.  This number is\nincreased if additional late-bound handlers are requested after\nthe page load.", "private": "", "guessedtype": "property"}, "POLL_RETRYS": {"description": "The number of times we should look for elements that are not\nin the DOM at the time the event is requested after the document\nhas been loaded.  The default is 1000@amp;40 ms, so it will poll\nfor 40 seconds or until all outstanding handlers are bound\n(whichever comes first).", "static": "", "guessedname": "POLL_RETRYS", "guessedtype": "property", "type": "int", "final": ""}, "_dri": {"guessedname": "_dri", "static": "", "description": "document readystate poll handle", "private": "", "guessedtype": "property"}, "_wrappers": {"description": "Custom event wrappers for DOM events.  Key is\n'event:' + Element uid stamp + event type", "private": "", "static": "", "guessedname": "_wrappers", "guessedtype": "property", "type": "Y.Event.Custom"}, "_loadComplete": {"description": "True after the onload event has fired", "private": "", "static": "", "guessedname": "_loadComplete", "guessedtype": "property", "type": "boolean"}, "POLL_INTERVAL": {"description": "The poll interval in milliseconds", "static": "", "guessedname": "POLL_INTERVAL", "guessedtype": "property", "type": "int", "final": ""}, "_interval": {"guessedname": "_interval", "static": "", "description": "poll handle", "private": "", "guessedtype": "property"}, "_el_events": {"guessedname": "_el_events", "static": "", "description": "Custom event wrapper map DOM events.  Key is\nElement uid stamp.  Each item is a hash of custom event\nwrappers as provided in the _wrappers collection.  This\nprovides the infrastructure for getListeners.", "private": "", "guessedtype": "property"}, "lastError": {"type": "Error", "static": "", "description": "addListener/removeListener can throw errors in unexpected scenarios.\nThese errors are suppressed, the method returns false, and this property\nis set", "guessedname": "lastError", "guessedtype": "property"}, "_avail": {"guessedname": "_avail", "static": "", "description": "onAvailable listeners", "private": "", "guessedtype": "property"}}, "description": "The event utility provides functions to add and remove event listeners,\nevent cleansing.  It also tries to automatically remove listeners it\nregisters during the unload event."}, "DataSourceCacheExtension": {"name": "DataSourceCacheExtension", "namespace": "", "module": "datasource", "guessedname": "DataSourceCacheExtension", "methods": {"_beforeDefRequestFn": {"protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object.</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>"}], "description": "First look for cached response, then send request to live data.", "guessedname": "_beforeDefRequestFn", "guessedtype": "function"}, "_beforeDefResponseFn": {"protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n<dt>response (Object)</dt> <dd>Normalized response object with the following properties:\n<dl>\n<dt>cached (Object)</dt> <dd>True when response is cached.</dd>\n<dt>results (Object)</dt> <dd>Parsed results.</dd>\n<dt>meta (Object)</dt> <dd>Parsed meta data.</dd>\n<dt>error (Object)</dt> <dd>Error object.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>"}], "description": "Adds data to cache before returning data.", "guessedname": "_beforeDefResponseFn", "guessedtype": "function"}, "initializer": {"guessedname": "initializer", "params": [{"type": "Object", "name": "config", "description": "  Config object."}], "description": "Internal init() handler.", "private": "", "guessedtype": "function"}}, "file": "datasource-cache.js", "guessedtype": "function", "shortname": "DataSourceCacheExtension", "properties": {"NS": {"description": "The namespace for the plugin. This will be the property on the host which\nreferences the plugin instance.", "value": "\"cache\"", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String", "final": ""}, "NAME": {"description": "Class name.", "value": "\"dataSourceCacheExtension\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "DataSourceCache extension binds Cache to DataSource."}, "AutoCompleteHighlighters": {"name": "AutoCompleteHighlighters", "description": "Provides pre-built result highlighters for AutoComplete.", "namespace": "", "module": "autocomplete", "guessedname": "Highlight", "static": "", "file": "autocomplete-highlighters.js", "guessedtype": "property", "shortname": "AutoCompleteHighlighters", "methods": {"phraseMatchFold": {"return": {"type": "Array", "description": "Highlighted results"}, "description": "Accent-folding version of <code>phraseMatch()</code>.", "static": "", "guessedname": "phraseMatchFold", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to highlight"}]}, "phraseMatch": {"return": {"type": "Array", "description": "Highlighted results"}, "description": "Highlights the complete query as a phrase anywhere within a result.\nCase-insensitive.", "static": "", "guessedname": "phraseMatch", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to highlight"}]}, "charMatchFold": {"return": {"type": "Array", "description": "Highlighted results"}, "description": "Accent-folding version of <code>charMatch()</code>.", "static": "", "guessedname": "charMatchFold", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to highlight"}]}, "charMatchCase": {"return": {"type": "Array", "description": "Highlighted results"}, "description": "Case-sensitive version of <code>charMatch()</code>.", "static": "", "guessedname": "charMatchCase", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to highlight"}]}, "startsWith": {"return": {"type": "Array", "description": "Highlighted results"}, "description": "Highlights the complete query as a phrase at the beginning of a result.\nCase-insensitive.", "static": "", "guessedname": "startsWith", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to highlight"}]}, "wordMatchCase": {"return": {"type": "Array", "description": "Filtered results"}, "description": "Case-sensitive version of <code>wordMatch()</code>.", "static": "", "guessedname": "wordMatchCase", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to filter"}]}, "startsWithFold": {"return": {"type": "Array", "description": "Highlighted results"}, "description": "Accent-folding version of <code>startsWith()</code>.", "static": "", "guessedname": "startsWithFold", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to highlight"}]}, "charMatch": {"return": {"type": "Array", "description": "Highlighted results"}, "description": "Highlights any individual query character that occurs anywhere in a\nresult. Case-insensitive.", "static": "", "guessedname": "charMatch", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to highlight"}]}, "wordMatch": {"return": {"type": "Array", "description": "Filtered results"}, "description": "Highlights individual words in results that are also in the query.\nNon-word characters like punctuation are ignored. Case-insensitive.", "static": "", "guessedname": "wordMatch", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to filter"}]}, "startsWithCase": {"return": {"type": "Array", "description": "Highlighted results"}, "description": "Case-sensitive version of <code>startsWith()</code>.", "static": "", "guessedname": "startsWithCase", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to highlight"}]}, "phraseMatchCase": {"return": {"type": "Array", "description": "Highlighted results"}, "description": "Case-sensitive version of <code>phraseMatch()</code>.", "static": "", "guessedname": "phraseMatchCase", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to highlight"}]}, "wordMatchFold": {"return": {"type": "Array", "description": "Highlighted results"}, "description": "Accent-folding version of <code>wordMatch()</code>.", "static": "", "guessedname": "wordMatchFold", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to highlight"}]}}}, "State": {"name": "State", "constructors": [{"description": "The State class maintains state for a collection of named items, with \na varying number of properties defined.\nIt avoids the need to create a separate class for the item, and separate instances \nof these classes for each item, by storing the state in a 2 level hash table, \nimproving performance when the number of items is likely to be large."}], "namespace": "", "module": "attribute", "guessedname": "State", "methods": {"addAll": {"params": [{"type": "String", "name": "name", "description": "  The name of the item."}, {"type": "Object", "name": "o", "description": "  A hash of property/value pairs."}], "description": "Adds multiple properties to an item.", "guessedname": "addAll", "guessedtype": "function"}, "get": {"return": {"type": "Any", "description": "The value of the supplied property."}, "params": [{"type": "String", "name": "name", "description": "  The name of the item"}, {"type": "String", "name": "key", "description": "  Optional. The property value to retrieve."}], "description": "For a given item, returns the value of the property requested, or undefined if not found.", "guessedname": "get", "guessedtype": "function"}, "getAll": {"return": {"type": "Object", "description": "An object with property/value pairs for the item."}, "params": [{"type": "String", "name": "name", "description": "  The name of the item"}], "description": "For the given item, returns a disposable object with all of the\nitem's property/value pairs.", "guessedname": "getAll", "guessedtype": "function"}, "remove": {"params": [{"type": "String", "name": "name", "description": "  The name of the item."}, {"type": "String", "name": "key", "description": "  The property to remove."}], "description": "Removes a property from an item.", "guessedname": "remove", "guessedtype": "function"}, "removeAll": {"params": [{"type": "String", "name": "name", "description": "  The name of the item."}, {"type": "Object|Array", "name": "o", "description": "  Collection of properties to delete. If not provided, the entire item is removed."}], "description": "Removes multiple properties from an item, or remove the item completely.", "guessedname": "removeAll", "guessedtype": "function"}, "add": {"params": [{"type": "String", "name": "name", "description": "  The name of the item."}, {"type": "String", "name": "key", "description": "  The name of the property."}, {"type": "Any", "name": "val", "description": "  The value of the property."}], "description": "Adds a property to an item.", "guessedname": "add", "guessedtype": "function"}}, "file": "State.js", "guessedtype": "function", "shortname": "State", "properties": {"data": {"description": "Hash of attributes", "guessedname": "data", "guessedtype": "property"}}, "description": "The State class maintains state for a collection of named items, with \na varying number of properties defined.\nIt avoids the need to create a separate class for the item, and separate instances \nof these classes for each item, by storing the state in a 2 level hash table, \nimproving performance when the number of items is likely to be large."}, "HistoryHash": {"since": "3.2.0", "name": "HistoryHash", "description": "Provides browser history management backed by\n<code>window.location.hash</code>, as well as convenience methods for working\nwith the location hash and a synthetic <code>hashchange</code> event that\nnormalizes differences across browsers.", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " (optional) Configuration object. See the HistoryBase\ndocumentation for details."}], "description": "Provides browser history management backed by\n<code>window.location.hash</code>, as well as convenience methods for working\nwith the location hash and a synthetic <code>hashchange</code> event that\nnormalizes differences across browsers."}], "namespace": "", "module": "history", "guessedname": "HistoryBase", "extends": "HistoryBase", "superclass": "HistoryBase", "file": "history-hash.js", "guessedtype": "property", "shortname": "HistoryHash", "properties": {"_REGEX_HASH": {"description": "Regular expression used to parse location hash/query strings.", "protected": "", "static": "", "guessedname": "_REGEX_HASH", "guessedtype": "property", "type": "RegExp", "final": ""}, "SRC_HASH": {"description": "Constant used to identify state changes originating from\n<code>hashchange</code> events.", "static": "", "guessedname": "SRC_HASH", "guessedtype": "property", "type": "String", "final": ""}, "hashPrefix": {"description": "<p>\nPrefix to prepend when setting the hash fragment. For example, if the\nprefix is <code>!</code> and the hash fragment is set to\n<code>#foo=bar&baz=quux</code>, the final hash fragment in the URL will\nbecome <code>#!foo=bar&baz=quux</code>. This can be used to help make an\nAjax application crawlable in accordance with Google's guidelines at\n<a href=\"http://code.google.com/web/ajaxcrawling/\">http://code.google.com/web/ajaxcrawling/</a>.\n</p>\n<p>\nNote that this prefix applies to all HistoryHash instances. It's not\npossible for individual instances to use their own prefixes since they\nall operate on the same URL.\n</p>", "default": "''", "static": "", "guessedname": "hashPrefix", "guessedtype": "property", "type": "String"}}, "methods": {"_updateIframe": {"description": "Updates the history iframe with the specified hash.", "protected": "", "static": "", "guessedname": "_updateIframe", "guessedtype": "function", "params": [{"type": "String", "name": "hash", "description": " location hash"}, {"type": "Boolean", "name": "replace", "description": " (optional) if <code>true</code>, the current\nhistory state will be replaced without adding a new history entry"}]}, "replaceHash": {"static": "", "params": [{"type": "String", "name": "hash", "description": " new location hash"}], "description": "Replaces the browser's current location hash with the specified hash\nand removes all forward navigation states, without creating a new browser\nhistory entry. Automatically prepends the <code>hashPrefix</code> if one\nis set.", "guessedname": "replaceHash", "guessedtype": "function"}, "getUrl": {"static": "", "return": {"type": "String", "description": "current bookmarkable URL"}, "description": "Gets the current bookmarkable URL.", "guessedname": "getUrl", "guessedtype": "function"}, "setHash": {"static": "", "params": [{"type": "String", "name": "hash", "description": " new location hash"}], "description": "Sets the browser's location hash to the specified string. Automatically\nprepends the <code>hashPrefix</code> if one is set.", "guessedname": "setHash", "guessedtype": "function"}, "decode": {"return": {"type": "String", "description": "decoded string"}, "description": "Wrapper around <code>decodeURIComponent()</code> that also converts +\nchars into spaces.", "static": "", "guessedname": "decode", "guessedtype": "function", "params": [{"type": "String", "name": "string", "description": " string to decode"}]}, "getHash": {"static": "", "return": {"type": "String", "description": "current location hash"}, "description": "Gets the raw (not decoded) current location hash, minus the preceding '#'\ncharacter and the hashPrefix (if one is set).", "guessedname": "getHash", "guessedtype": "function"}, "createHash": {"return": {"type": "String", "description": "location hash string"}, "description": "Creates a location hash string from the specified object of key/value\npairs.", "static": "", "guessedname": "createHash", "guessedtype": "function", "params": [{"type": "Object", "name": "params", "description": " object of key/value parameter pairs"}]}, "_afterHashChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": ""}], "description": "Handler for hashchange events.", "guessedname": "_afterHashChange", "guessedtype": "function"}, "encode": {"return": {"type": "String", "description": "encoded string"}, "description": "Wrapper around <code>encodeURIComponent()</code> that converts spaces to\n+ chars.", "static": "", "guessedname": "encode", "guessedtype": "function", "params": [{"type": "String", "name": "string", "description": " string to encode"}]}, "parseHash": {"return": {"type": "Object", "description": "object of parsed key/value parameter pairs"}, "description": "Parses a location hash string into an object of key/value parameter\npairs. If <i>hash</i> is not specified, the current location hash will\nbe used.", "static": "", "guessedname": "parseHash", "guessedtype": "function", "params": [{"type": "String", "name": "hash", "description": " (optional) location hash string"}]}}}, "Test.Format": {"name": "Test.Format", "namespace": "Test", "module": "test", "methods": {"XML": {"return": {"type": "String", "description": "An XML-formatted string of results."}, "description": "Returns test results formatted as an XML string.", "static": "", "guessedname": "XML", "guessedtype": "function", "params": [{"type": "Object", "name": "result", "description": " The results object created by TestRunner."}]}, "JSON": {"return": {"type": "String", "description": "A JSON-formatted string of results."}, "description": "Returns test results formatted as a JSON string. Requires JSON utility.", "static": "", "guessedname": "JSON", "guessedtype": "function", "params": [{"type": "Object", "name": "result", "description": " The results object created by TestRunner."}]}, "JUnitXML": {"return": {"type": "String", "description": "An XML-formatted string of results."}, "description": "Returns test results formatted in JUnit XML format.", "static": "", "guessedname": "JUnitXML", "guessedtype": "function", "params": [{"type": "Object", "name": "result", "description": " The results object created by TestRunner."}]}, "TAP": {"return": {"type": "String", "description": "A TAP-formatted string of results."}, "description": "Returns test results formatted in TAP format.\nFor more information, see <a href=\"http://testanything.org/\">Test Anything Protocol</a>.", "static": "", "guessedname": "TAP", "guessedtype": "function", "params": [{"type": "Object", "name": "result", "description": " The results object created by TestRunner."}]}}, "static": "", "file": "TestFormat.js", "shortname": "Format", "description": "Contains specific formatting options for test result information."}, "Plugin.Shim": {"name": "Plugin.Shim", "namespace": "", "module": "shim-plugin", "methods": {"destroy": {"description": "Removes the shim and destroys the plugin", "guessedname": "destroy", "guessedtype": "function"}, "sync": {"description": "Updates the size of the shim to fill its container", "guessedname": "sync", "guessedtype": "function"}}, "param": "{Object} User configuration object", "file": "shim-plugin.js", "shortname": "Plugin.Shim", "properties": {"Shim.TEMPLATE": {"type": "String", "static": "", "description": "Default markup template used to generate the shim element.", "guessedname": "TEMPLATE", "guessedtype": "property"}, "Shim.CLASS_NAME": {"default": "\"yui-node-shim\"", "type": "String", "static": "", "description": "Default class used to mark the shim element"}}, "description": "Node plugin which can be used to add shim support."}, "CustomEvent": {"name": "CustomEvent", "constructors": [{"params": [{"type": "String", "name": "type", "description": " The type of event, which is passed to the callback\nwhen the event fires."}, {"type": "object", "name": "o", "description": " configuration object."}], "description": "The CustomEvent class lets you define events for your application\nthat can be subscribed to by one or more independent component."}], "namespace": "", "module": "event-custom", "guessedname": "CustomEvent", "methods": {"on": {"return": {"type": "EventHandle", "description": "An object with a detach method to detch the handler(s)."}, "params": [{"type": "Function", "name": "fn", "description": " The function to execute."}, {"type": "object", "name": "context", "description": " optional execution context."}, {"type": "mixed", "name": "arg*", "description": " 0..n additional arguments to supply to the subscriber\nwhen the event fires."}], "description": "Listen for this event", "guessedname": "on", "guessedtype": "function"}, "_notify": {"guessedname": "_notify", "params": [{"type": "Subscriber", "name": "s", "description": " the subscriber."}, {"type": "Array", "name": "args", "description": " the arguments array to apply to the listener."}], "description": "Notify a single subscriber", "private": "", "guessedtype": "function"}, "monitor": {"return": {"type": "EventHandle", "description": "return value from the monitor event subscription."}, "params": [{"type": "string", "name": "what", "description": "  what to monitor ('detach', 'attach', 'publish')."}], "description": "Monitor the event state for the subscribed event.  The first parameter\nis what should be monitored, the rest are the normal parameters when\nsubscribing to an event.", "guessedname": "monitor", "guessedtype": "function"}, "_delete": {"params": [{"type": "", "name": "subscriber", "description": " object."}], "private": "", "guessedname": "_delete", "guessedtype": "function"}, "fire": {"return": {"type": "boolean", "description": "false if one of the subscribers returned false,\ntrue otherwise."}, "params": [{"type": "Object*", "name": "arguments", "description": " an arbitrary set of parameters to pass to\nthe handler."}], "description": "Notifies the subscribers.  The callback functions will be executed\nfrom the context specified when the event was created, and with the\nfollowing parameters:\n<ul>\n<li>The type of event</li>\n<li>All of the arguments fire() was executed with as an array</li>\n<li>The custom object (if any) that was passed into the subscribe()\nmethod</li>\n</ul>", "guessedname": "fire", "guessedtype": "function"}, "unsubscribeAll": {"deprecated": "use detachAll.", "return": {"type": "int", "description": "The number of listeners unsubscribed."}, "description": "Removes all listeners", "guessedname": "unsubscribeAll", "guessedtype": "function"}, "after": {"return": {"type": "EventHandle", "description": "handle Unsubscribe handle."}, "params": [{"type": "Function", "name": "fn", "description": " The function to execute."}, {"type": "object", "name": "context", "description": " optional execution context."}, {"type": "mixed", "name": "arg*", "description": " 0..n additional arguments to supply to the subscriber\nwhen the event fires."}], "description": "Listen for this event after the normal subscribers have been notified and\nthe default behavior has been applied.  If a normal subscriber prevents the\ndefault behavior, it also prevents after listeners from firing.", "guessedname": "after", "guessedtype": "function"}, "applyConfig": {"params": [{"type": "", "name": "o", "description": " hash of properties to apply."}, {"type": "boolean", "name": "force", "description": "  if true, properties that exist on the event\nwill be overwritten."}], "description": "Apply configuration properties.  Only applies the CONFIG whitelist", "guessedname": "applyConfig", "guessedtype": "function"}, "preventDefault": {"description": "Prevents the execution of this event's defaultFn", "guessedname": "preventDefault", "guessedtype": "function"}, "detachAll": {"return": {"type": "int", "description": "The number of listeners unsubscribed."}, "description": "Removes all listeners", "guessedname": "detachAll", "guessedtype": "function"}, "subscribe": {"return": {"type": "EventHandle", "description": "Unsubscribe handle."}, "description": "Listen for this event", "deprecated": "use on.", "params": [{"type": "Function", "name": "fn", "description": " The function to execute."}], "guessedname": "subscribe", "guessedtype": "function"}, "halt": {"params": [{"type": "boolean", "name": "immediate", "description": "  if true additional listeners\non the current target will not be executed"}], "description": "Stops the event propagation and prevents the default\nevent behavior.", "guessedname": "halt", "guessedtype": "function"}, "unsubscribe": {"return": {"type": "int|undefined", "description": "returns the number of subscribers unsubscribed."}, "description": "Detach listeners.", "deprecated": "use detach.", "params": [{"type": "Function", "name": "fn", "description": "  The subscribed function to remove, if not supplied\nall will be removed."}, {"type": "Object", "name": "context", "description": " The context object passed to subscribe."}], "guessedname": "unsubscribe", "guessedtype": "function"}, "stopImmediatePropagation": {"description": "Stops propagation to bubble targets, and prevents any remaining\nsubscribers on the current target from executing.", "guessedname": "stopImmediatePropagation", "guessedtype": "function"}, "getSubs": {"return": {"type": "Array", "description": "first item is the on subscribers, second the after."}, "description": "Get all of the subscribers to this event and any sibling event", "guessedname": "getSubs", "guessedtype": "function"}, "detach": {"return": {"type": "int", "description": "returns the number of subscribers unsubscribed."}, "params": [{"type": "Function", "name": "fn", "description": "  The subscribed function to remove, if not supplied\nall will be removed."}, {"type": "Object", "name": "context", "description": " The context object passed to subscribe."}], "description": "Detach listeners.", "guessedname": "detach", "guessedtype": "function"}, "stopPropagation": {"description": "Stop propagation to bubble targets", "guessedname": "stopPropagation", "guessedtype": "function"}, "log": {"params": [{"type": "string", "name": "msg", "description": " message to log."}, {"type": "string", "name": "cat", "description": " log category."}], "description": "Logger abstraction to centralize the application of the silent flag", "guessedname": "log", "guessedtype": "function"}}, "file": "event-custom.js", "guessedtype": "function", "shortname": "CustomEvent", "properties": {"fired": {"default": "false;", "type": "boolean", "description": "This event has fired if true"}, "afters": {"type": "Subscriber {}", "description": "'After' subscribers", "guessedname": "afters", "guessedtype": "property"}, "monitored": {"type": "boolean", "description": "Monitor when an event is attached or detached."}, "silent": {"type": "boolean", "description": "By default all custom events are logged in the debug build, set silent\nto true to disable debug outpu for this event.", "guessedname": "silent", "guessedtype": "property"}, "firedWith": {"type": "Array", "description": "An array containing the arguments the custom event\nwas last fired with."}, "preventable": {"default": "true", "type": "boolean", "description": "Specifies whether or not this event's default function\ncan be cancelled by a subscriber by executing preventDefault()\non the event facade", "guessedname": "preventable", "guessedtype": "property"}, "stoppedFn": {"type": "Function", "description": "The function to execute if a subscriber calls\nstopPropagation or stopImmediatePropagation"}, "type": {"type": "string", "description": "The type of event, returned to subscribers when the event fires", "guessedname": "type", "guessedtype": "property"}, "defaultFn": {"type": "Function", "description": "The default function to execute after event listeners\nhave fire, but only if the default action was not\nprevented."}, "prevented": {"type": "int", "description": "Flag for preventDefault that is modified during fire().\nif it is not 0, the default behavior for this event"}, "queuable": {"default": "false", "type": "boolean", "description": "Specifies whether this event should be queued when the host is actively\nprocessing an event.  This will effect exectution order of the callbacks\nfor the various events."}, "host": {"type": "EventTarget", "description": "Specifies the host for this custom event.  This is used\nto enable event bubbling"}, "subscribers": {"type": "Subscriber {}", "description": "The subscribers to this event", "guessedname": "subscribers", "guessedtype": "property"}, "emitFacade": {"default": "false", "type": "boolean", "description": "If set to true, the custom event will deliver an EventFacade object\nthat is similar to a DOM event object."}, "bubbles": {"default": "true", "type": "boolean", "description": "Specifies whether or not a subscriber can stop the event propagation\nvia stopPropagation(), stopImmediatePropagation(), or halt()\nEvents can only bubble if emitFacade is true.", "guessedname": "bubbles", "guessedtype": "property"}, "broadcast": {"type": "int", "description": "If 0, this event does not broadcast.  If 1, the YUI instance is notified\nevery time this event fires.  If 2, the YUI instance and the YUI global\n(if event is enabled on the global) are notified every time this event\nfires."}, "fireOnce": {"default": "false;", "type": "boolean", "description": "This event should only fire one time if true, and if\nit has fired, any new subscribers should be notified\nimmediately."}, "preventedFn": {"type": "Function", "description": "The function to execute if a subscriber calls\npreventDefault"}, "stopped": {"type": "int", "description": "Flag for stopPropagation that is modified during fire()\n1 means to stop propagation to bubble targets.  2 means\nto also stop additional subscribers on this target."}, "context": {"type": "object", "description": "The context the the event will fire from by default.  Defaults to the YUI\ninstance.", "guessedname": "context", "guessedtype": "property"}, "signature": {"default": "9", "type": "int", "description": "Supports multiple options for listener signatures in order to\nport YUI 2 apps.", "guessedname": "signature", "guessedtype": "property"}, "async": {"default": "false", "type": "boolean", "description": "fireOnce listeners will fire syncronously unless async\nis set to true"}}, "description": "The CustomEvent class lets you define events for your application\nthat can be subscribed to by one or more independent component."}, "Plugin.Drop": {"name": "Plugin.Drop", "constructors": [{"description": "Simple Drop plugin that can be attached to a Node via the plug method."}], "namespace": "Plugin", "module": "dd", "guessedname": "Drop", "extends": "DD.Drop", "superclass": "DD.Drop", "file": "dd-drop-plugin.js", "guessedtype": "function", "shortname": "Drop", "properties": {"NS": {"type": "{String}", "description": "The Drop instance will be placed on the Node instance under the drop namespace. It can be accessed via Node.drop;", "guessedname": "NS", "guessedtype": "property"}, "NAME": {"type": "{String}", "description": "dd-drop-plugin", "guessedname": "NAME", "guessedtype": "property"}}, "description": "Simple Drop plugin that can be attached to a Node via the plug method."}, "Text.Data.AccentFold": {"name": "Text.Data.AccentFold", "namespace": "", "module": "text", "static": "", "file": "text-data-accentfold.js", "shortname": "Text.Data.AccentFold", "description": "<p>\nAn imperfect, incomplete reverse mapping of ASCII characters to\ncase-insensitive regexes that match their most common accented forms.\n</p>\n<p>\nThe goal of this module is to provide a pragmatic and generally useful set of\naccent folding data, since serving and performing lookups on a complete\ndataset would be impractical in client-side JavaScript.\n</p>\n<p>\nWhenever possible, accent folding should be done on the server, where it's\npossible to use tools that are both more complete and more performant. It\nshould only be done on the client as an absolute last resort.\n</p>"}, "JSONPRequest": {"methods": {"_format": {"return": {"type": "String", "description": "fully qualified JSONP url"}, "description": "URL formatter that looks for callback= in the url and appends it\nif not present.  The supplied proxy name will be assigned to the query\nparam.  Override this method by passing a function as the\n&quot;format&quot; property in the config object to the constructor.", "param": "url { String } the original url", "protected": "", "params": [{"type": " String ", "name": "url", "description": "  the original url"}, {"type": "String", "name": "proxy", "description": "  the function name that will be used as a proxy to\nthe configured callback methods."}], "guessedname": "_format", "guessedtype": "function"}, "Y.jsonp": {"return": {"type": "JSONPRequest", "description": ""}, "static": "", "params": [{"type": "String} the url of the JSONP service with the {callback", "name": "url", "description": " \nplaceholder where the callback function name typically goes."}, {"type": "Function|Object", "name": "c", "description": "  Callback function accepting the JSON payload\nas its argument, or a configuration object (see above)."}, {"type": "any", "name": "args*", "description": "  additional arguments to pass to send()"}], "guessedname": "jsonp", "guessedtype": "function"}, "_defaultCallback": {"return": {"type": "Function", "description": "the callback function if found, or null"}, "description": "<p>Parses the url for a callback named explicitly in the string.\nOverride this if the target JSONP service uses a different query\nparameter or url format.</p>\n<p>If the callback is declared inline, the corresponding function will\nbe returned.  Otherwise null.</p>", "param": "url {String} the url passed at construction", "protected": "", "params": [{"type": "String", "name": "url", "description": "  the url to search in"}], "guessedname": "_defaultCallback", "guessedtype": "function"}, "_init": {"protected": "", "params": [{"type": "String", "name": "url", "description": "  the url of the JSONP service"}, {"type": "Object|Function", "name": "callback", "description": "  Optional success callback or config\nobject containing success and failure functions and\nthe url regex."}], "description": "Set up the success and failure handlers and the regex pattern used\nto insert the temporary callback name in the url.", "guessedname": "_init", "guessedtype": "function"}, "send": {"chainable": "", "params": [{"type": "any", "name": "args*", "description": "  any additional arguments to pass to the url formatter\nbeyond the base url and the proxy function name"}], "description": "Issues the JSONP request.", "guessedname": "send", "guessedtype": "function"}}, "description": "<p>Provides a JSONPRequest class for repeated JSONP calls, and a convenience\nmethod Y.jsonp(url, callback) to instantiate and send a JSONP request.</p>\n<p>Both the constructor as well as the convenience function take two\nparameters: a url string and a callback.</p>\n<p>The url provided must include the placeholder string\n&quot;{callback}&quot; which will be replaced by a dynamically\ngenerated routing function to pass the data to your callback function.\nAn example url might look like\n&quot;http://example.com/service?callback={callback}&quot;.</p>\n<p>The second parameter can be a callback function that accepts the JSON\npayload as its argument, or a configuration object supporting the keys:</p>\n<ul>\n<li>on - map of callback subscribers\n<ul>\n<li>success - function handler for successful transmission</li>\n<li>failure - function handler for failed transmission</li>\n<li>timeout - function handler for transactions that timeout</li>\n</ul>\n</li>\n<li>format  - override function for inserting the proxy name in the url</li>\n<li>timeout - the number of milliseconds to wait before giving up</li>\n<li>context - becomes <code>this</code> in the callbacks</li>\n<li>args    - array of subsequent parameters to pass to the callbacks</li>\n</ul>", "constructors": [{"params": [{"type": "String", "name": "url", "description": "  the url of the JSONP service"}, {"type": "Object|Function", "name": "callback", "description": "  the default callback configuration or\nsuccess handler"}], "description": "<p>Provides a JSONPRequest class for repeated JSONP calls, and a convenience\nmethod Y.jsonp(url, callback) to instantiate and send a JSONP request.</p>\n<p>Both the constructor as well as the convenience function take two\nparameters: a url string and a callback.</p>\n<p>The url provided must include the placeholder string\n&quot;{callback}&quot; which will be replaced by a dynamically\ngenerated routing function to pass the data to your callback function.\nAn example url might look like\n&quot;http://example.com/service?callback={callback}&quot;.</p>\n<p>The second parameter can be a callback function that accepts the JSON\npayload as its argument, or a configuration object supporting the keys:</p>\n<ul>\n<li>on - map of callback subscribers\n<ul>\n<li>success - function handler for successful transmission</li>\n<li>failure - function handler for failed transmission</li>\n<li>timeout - function handler for transactions that timeout</li>\n</ul>\n</li>\n<li>format  - override function for inserting the proxy name in the url</li>\n<li>timeout - the number of milliseconds to wait before giving up</li>\n<li>context - becomes <code>this</code> in the callbacks</li>\n<li>args    - array of subsequent parameters to pass to the callbacks</li>\n</ul>"}], "namespace": "", "module": "jsonp", "file": "isFunction", "shortname": "JSONPRequest", "properties": {"_template": {"description": "Template used by the default URL formatter to add the callback function\nname to the url.", "default": "\"callback={callback}\"", "member": "_template", "protected": "", "guessedname": "_template", "guessedtype": "property", "type": "String"}, "_pattern": {"description": "RegExp used by the default URL formatter to insert the generated callback\nname into the JSONP url.  Looks for a query param callback=.  If a value\nis assigned, it will be clobbered.", "default": "/\\bcallback=.*?(?=&|$)/i", "member": "_pattern", "protected": "", "guessedname": "_pattern", "guessedtype": "property", "type": "RegExp"}}, "name": "JSONPRequest"}, "DataSource.Get": {"name": "DataSource.Get", "configs": {"scriptCallbackParam": {"default": "\"callback\"", "type": "String", "description": "Callback string parameter name sent to the remote script. By default,\nrequests are sent to\n&#60;URI&#62;?&#60;scriptCallbackParam&#62;=callbackFunction", "guessedname": "scriptCallbackParam", "guessedtype": "property"}, "asyncMode": {"default": "\"allowAll\"", "type": "String", "description": "Defines request/response management in the following manner:\n<dl>\n<!--<dt>queueRequests</dt>\n<dd>If a request is already in progress, wait until response is\nreturned before sending the next request.</dd>\n<dt>cancelStaleRequests</dt>\n<dd>If a request is already in progress, cancel it before\nsending the next request.</dd>-->\n<dt>ignoreStaleResponses</dt>\n<dd>Send all requests, but handle only the response for the most\nrecently sent request.</dd>\n<dt>allowAll</dt>\n<dd>Send all requests and handle all responses.</dd>\n</dl>", "guessedname": "asyncMode", "guessedtype": "property"}, "generateRequestCallback": {"type": "Function", "description": "Accepts the DataSource instance and a callback ID, and returns a callback\nparam/value string that gets appended to the script URI. Implementers\ncan customize this string to match their server's query syntax.", "guessedname": "generateRequestCallback", "guessedtype": "property"}, "get": {"default": "Y.Get", "type": "Y.Get", "description": "Pointer to Get Utility.", "guessedname": "get", "guessedtype": "property"}}, "constructors": [{"description": "Get Utility subclass for the DataSource Utility."}], "namespace": "", "module": "datasource", "events": {"generateRequestCallbackChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "generateRequestCallbackChange", "description": "Fires when the value for the configuration attribute 'generateRequestCallback' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "scriptCallbackParamChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "scriptCallbackParamChange", "description": "Fires when the value for the configuration attribute 'scriptCallbackParam' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "getChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "getChange", "description": "Fires when the value for the configuration attribute 'get' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "asyncModeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "asyncModeChange", "description": "Fires when the value for the configuration attribute 'asyncMode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "DSGet", "methods": {"_defRequestFn": {"protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>"}], "description": "Passes query string to Get Utility. Fires <code>response</code> event when\nresponse is received asynchronously.", "guessedname": "_defRequestFn", "guessedtype": "function"}, "_generateRequest": {"protected": "", "params": [{"type": "String", "name": "guid", "description": "  unique identifier for callback function wrapper"}], "description": "Default method for adding callback param to url.  See\ngenerateRequestCallback attribute.", "guessedname": "_generateRequest", "guessedtype": "function"}}, "extends": "DataSource.Local", "superclass": "DataSource.Local", "file": "datasource-get.js", "guessedtype": "function", "shortname": "DataSource.Get", "properties": {"NAME": {"description": "Class name.", "value": "\"dataSourceGet\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}, "_last": {"protected": "", "type": "{String}", "description": "Stores the most recent request id for validation against stale\nresponse handling.", "guessedname": "_last", "guessedtype": "property"}}, "description": "Get Utility subclass for the DataSource Utility."}, "Selector": {"methods": {"query": {"return": {"type": "Array", "description": "An array of nodes that match the given selector."}, "description": "Retrieves a set of nodes based on a given CSS selector.", "static": "", "guessedname": "query", "guessedtype": "function", "params": [{"type": "string", "name": "selector", "description": " The CSS Selector to test the node against."}, {"type": "HTMLElement", "name": "root", "description": " optional An HTMLElement to start the query from. Defaults to Y.config.doc"}, {"type": "Boolean", "name": "firstOnly", "description": " optional Whether or not to return only the first match."}]}, "ancestor": {"return": {"type": "HTMLElement", "description": "The ancestor node matching the selector, or null."}, "description": "A convenience function to emulate Y.Node's aNode.ancestor(selector).", "static": "", "guessedname": "ancestor", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "element", "description": " An HTMLElement to start the query from."}, {"type": "String", "name": "selector", "description": " The CSS selector to test the node against."}, {"type": "Boolean", "name": "testSelf", "description": " optional Whether or not to include the element in the scan"}]}, "_tokenize": {"description": "Break selector into token units per simple selector.\nCombinator is attached to the previous token.", "guessedname": "_tokenize", "guessedtype": "function"}}, "for": "Selector", "description": "Provides support for using CSS selectors to query the DOM", "namespace": "", "module": "dom", "static": "", "file": "selector-native.js", "shortname": "Selector", "properties": {"shorthand": {"type": "object", "description": "Mapping of shorthand tokens to corresponding attribute selector", "guessedname": "shorthand", "guessedtype": "property"}, "operators": {"type": "object", "description": "List of operators and corresponding boolean functions. \nThese functions are passed the attribute and the current node's value of the attribute.", "guessedname": "operators", "guessedtype": "property"}, "PARENT_NODE": {"description": "Provides helper methods for collecting and filtering DOM elements.", "guessedname": "PARENT_NODE", "guessedtype": "property"}}, "name": "Selector"}, "DataSourceXMLSchema": {"name": "DataSourceXMLSchema", "namespace": "", "module": "datasource", "guessedname": "DataSourceXMLSchema", "methods": {"_beforeDefDataFn\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n</dl>": {"protected": "", "description": "Parses raw data into a normalized response.", "guessedname": "_beforeDefDataFn", "guessedtype": "function"}, "initializer": {"guessedname": "initializer", "params": [{"type": "Object", "name": "config", "description": "  Config object."}], "description": "Internal init() handler.", "private": "", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "datasource-xmlschema.js", "guessedtype": "function", "shortname": "DataSourceXMLSchema", "properties": {"NS": {"description": "The namespace for the plugin. This will be the property on the host which\nreferences the plugin instance.", "value": "\"schema\"", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String", "final": ""}, "NAME": {"description": "Class name.", "value": "\"dataSourceXMLSchema\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Adds schema-parsing to the DataSource Utility."}, "WidgetPosition": {"name": "WidgetPosition", "namespace": "", "module": "widget-position", "events": {"yChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "yChange", "description": "Fires when the value for the configuration attribute 'y' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "xyChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "xyChange", "description": "Fires when the value for the configuration attribute 'xy' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "xChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "xChange", "description": "Fires when the value for the configuration attribute 'x' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"y": {"default": "0", "type": "number", "description": "Page Y co-ordinate for the widget. This attribute acts as a facade for the \nxy attribute. Changes in position can be monitored by listening for xyChange events.", "guessedname": "y", "guessedtype": "property"}, "x": {"default": "0", "type": "number", "description": "Page X co-ordinate for the widget. This attribute acts as a facade for the \nxy attribute. Changes in position can be monitored by listening for xyChange events.", "guessedname": "x", "guessedtype": "property"}, "xy": {"default": "[0,0]", "type": "Array", "description": "Page XY co-ordinate pair for the widget.", "guessedname": "xy", "guessedtype": "property"}}, "methods": {"_getX": {"return": {"type": "Number", "description": "The X page co-ordinate value"}, "description": "Default getter for the X attribute. The value is retrieved from \nthe XY attribute, which is the sole store for the XY state.", "guessedname": "_getX", "guessedtype": "function"}, "_validateXY": {"return": {"type": "boolean", "description": "true if valid, false if not."}, "params": [{"type": "Array", "name": "val", "description": " The XY page co-ordinate value which is being set."}], "description": "Default validator for the XY attribute", "guessedname": "_validateXY", "guessedtype": "function"}, "_setX": {"params": [{"type": "Number", "name": "val", "description": " The X page co-ordinate value"}], "description": "Default setter for the X attribute. The setter passes the X value through\nto the XY attribute, which is the sole store for the XY state.", "guessedname": "_setX", "guessedtype": "function"}, "_uiSetXY": {"protected": "", "params": [{"type": "String", "name": "val", "description": " The XY page co-ordinates value to be reflected in the UI"}], "description": "Updates the UI to reflect the XY page co-ordinates passed in.", "guessedname": "_uiSetXY", "guessedtype": "function"}, "move": {"params": [{"type": "Number", "name": "x", "description": " The new x position"}, {"type": "Number", "name": "y", "description": " The new y position\n<p>Or</p>"}, {"type": "Array", "name": "x,", "description": " y values passed as an array ([x, y]), to support\nsimple pass through of Node.getXY results"}], "description": "Moves the Widget to the specified page xy co-ordinate position.", "guessedname": "move", "guessedtype": "function"}, "_syncUIPosition": {"protected": "", "description": "Synchronizes the UI to match the Widgets xy page position state.\n<p>\nThis method in invoked after syncUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_syncUIPosition", "guessedtype": "function"}, "_getY": {"return": {"type": "Number", "description": "The Y page co-ordinate value"}, "description": "Default getter for the Y attribute. The value is retrieved from \nthe XY attribute, which is the sole store for the XY state.", "guessedname": "_getY", "guessedtype": "function"}, "syncXY": {"description": "Synchronizes the Panel's \"xy\", \"x\", and \"y\" properties with the \nWidget's position in the DOM.", "guessedname": "syncXY", "guessedtype": "function"}, "_setY": {"params": [{"type": "Number", "name": "val", "description": " The Y page co-ordinate value"}], "description": "Default setter for the Y attribute. The setter passes the Y value through\nto the XY attribute, which is the sole store for the XY state.", "guessedname": "_setY", "guessedtype": "function"}, "_afterXYChange": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade for the attribute change"}], "description": "Default attribute change listener for the xy attribute, responsible\nfor updating the UI, in response to attribute changes.", "guessedname": "_afterXYChange", "guessedtype": "function"}, "_renderUIPosition": {"protected": "", "description": "Creates/Initializes the DOM to support xy page positioning.\n<p>\nThis method in invoked after renderUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_renderUIPosition", "guessedtype": "function"}, "_bindUIPosition": {"protected": "", "description": "Binds event listeners responsible for updating the UI state in response to \nWidget position related state changes.\n<p>\nThis method in invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_bindUIPosition", "guessedtype": "function"}}, "param": "{Object} config User configuration object", "file": "Widget-Position.js", "shortname": "WidgetPosition", "properties": {"WidgetPosition.POSITIONED_CLASS_NAME": {"description": "Default class used to mark the boundingBox of a positioned widget.", "default": "\"yui-widget-positioned\"", "static": "", "guessedname": "POSITIONED_CLASS_NAME", "guessedtype": "property", "type": "String"}, "WidgetPosition.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration introduced by WidgetPosition.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "Widget extension, which can be used to add positioning support to the base Widget class, \nthrough the <a href=\"Base.html#method_build\">Base.build</a> method."}, "Uploader": {"name": "Uploader", "configs": {"log": {"default": "false", "type": "{Boolean}", "description": "The flag that allows Flash player to \noutput debug messages to its trace stack \n(if the Flash debug player is used).", "guessedname": "log", "guessedtype": "property"}, "swfURL": {"description": "The URL of the uploader's SWF.", "writeonce": "", "default": "\"assets/uploader.swf\"", "guessedname": "swfURL", "guessedtype": "property", "type": "{String}"}, "multiFiles": {"default": "false", "type": "{Boolean}", "description": "The flag that allows the user to select\nmore than one files during the 'Browse'\ndialog (using 'Shift' or 'Ctrl' keys).", "guessedname": "multiFiles", "guessedtype": "property"}, "buttonSkin": {"description": "The URL of the image sprite for skinning the uploader's 'Browse' button.", "writeonce": "", "default": "null", "guessedname": "buttonSkin", "guessedtype": "property", "type": "{String}"}, "simLimit": {"default": "2", "type": "{Number}", "description": "The number of files that can be uploaded\nsimultaneously if the automatic queue management\nis used. This value can be in the range between 2\nand 5.", "guessedname": "simLimit", "guessedtype": "property"}, "boundingBox": {"description": "The Node containing the uploader's 'Browse' button.", "writeonce": "", "default": "null", "guessedname": "boundingBox", "guessedtype": "property", "type": "{Node}"}, "fileFilters": {"default": "[]", "type": "{Array}", "description": "The array of filters on file extensions for\nthe 'Browse' dialog. These filters only provide\nconvenience for the user and do not strictly\nlimit the selection to certain file extensions.\nEach item in the array must contain a 'description'\nproperty, and an 'extensions' property that must be\nin the form \"*.ext;*.ext;*.ext;...\"", "guessedname": "fileFilters", "guessedtype": "property"}, "transparent": {"description": "The flag indicating whether the uploader is rendered \nwith a transparent background.", "writeonce": "", "default": "true", "guessedname": "transparent", "guessedtype": "property", "type": "{Boolean}"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": " (optional) Configuration parameters for the Uploader. The following parameters are available:\n<dl>\n<dt>boundingBox : String|Node (required)</dt>\n<dd></dd>\n<dt>buttonSkin : String (optional)</dt>\n<dd></dd>\n<dt>transparent : String (optional)</dt>\n<dd></dd>\n<dt>swfURL : String (optional)</dt>\n<dd></dd>\n</dl>"}], "description": "Creates the Uploader instance and keeps the initialization data"}], "namespace": "", "module": "uploader", "events": {"mouseleave": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the mouseleave."}], "description": "Fired when the mouse leaves the Uploader's 'Browse' button."}, "uploadprogress": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the uploadprogress.\n<dl>\n<dt>id</dt>\n<dd>The id of the file for which the progress information is being provided.</dd>\n<dt>bytesLoaded</dt>\n<dd>The number of bytes of the file that has been uploaded.</dd>\n<dt>bytesTotal</dt>\n<dd>The total number of bytes in the file that is being uploaded.</dd>\n</dl>"}], "description": "Provides progress information on a specific file upload."}, "uploadcomplete": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the uploadcancel.\n<dl>\n<dt>id</dt>\n<dd>The id of the file whose upload has been cancelled.</dd>\n</dl>"}], "description": "Fires when a specific file's upload is cancelled."}, "uploaderReady": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the uploaderReady."}], "description": "Announces that the uploader is ready and available for calling methods\nand setting properties"}, "uploadcompletedata": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the uploadcompletedata.\n<dl>\n<dt>id</dt>\n<dd>The id of the file for which the response is being provided.</dd>\n<dt>data</dt>\n<dd>The content of the server response.</dd>\n</dl>"}], "description": "If the server has sent a response to the file upload, this event is\nfired and the response is added to its payload."}, "simLimitChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "simLimitChange", "description": "Fires when the value for the configuration attribute 'simLimit' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "uploadstart": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the uploadstart.\n<dl>\n<dt>id</dt>\n<dd>The id of the file whose upload has been started.</dd>\n</dl>"}], "description": "Announces that the upload has been started for a specific file."}, "swfURLChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "swfURLChange", "description": "Fires when the value for the configuration attribute 'swfURL' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "mouseup": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the mouseup."}], "description": "Fired when the mouse button is raised on the Uploader's 'Browse' button."}, "boundingBoxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "boundingBoxChange", "description": "Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "fileselect": {"params": [{"type": "Event} The event object for the fileSelect.\n<dl>\n<dt>fileList</dt>\n<dd>The file list Object with entries in the following format: \nfileList[fileID] = {id: fileID, name: fileName, cDate: fileCDate, mDate: fileMDate, size: fileSize", "name": "event", "description": " </dd>\n</dl>"}], "description": "Fires when the user has finished selecting a set of files to be uploaded."}, "multiFilesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "multiFilesChange", "description": "Fires when the value for the configuration attribute 'multiFiles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "fileFiltersChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "fileFiltersChange", "description": "Fires when the value for the configuration attribute 'fileFilters' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "transparentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "transparentChange", "description": "Fires when the value for the configuration attribute 'transparent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "mousedown": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the mousedown."}], "description": "Fired when the mouse button is pressed on the Uploader's 'Browse' button."}, "uploadcancel": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the uploaderReady.\n<dl>\n<dt>ddEvent</dt>\n<dd><code>drag:start</code> event from the thumb</dd>\n</dl>"}], "description": "Announces that the uploader is ready and available for calling methods\nand setting properties"}, "logChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "logChange", "description": "Fires when the value for the configuration attribute 'log' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "uploaderror": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the uploadeerror.\n<dl>\n<dt>id</dt>\n<dd>The id of the file for which the upload error has occurred.</dd>\n<dt>status</dt>\n<dd>Relevant error information.</dd>\n</dl>"}], "description": "Provides error information if an error has occurred during the upload."}, "click": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the click."}], "description": "Fired when the mouse button is clicked on the Uploader's 'Browse' button."}, "buttonSkinChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "buttonSkinChange", "description": "Fires when the value for the configuration attribute 'buttonSkin' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "mouseenter": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the mouseenter."}], "description": "Fired when the mouse enters the Uploader's 'Browse' button."}}, "methods": {"uploadAll": {"params": [{"type": "String", "name": "url", "description": "  The URL to upload the files to."}, {"type": "String", "name": "method", "description": "  (optional) The HTTP method to use for sending additional variables, either 'GET' or 'POST' ('GET' by default)"}, {"type": "Object", "name": "postVars", "description": "  (optional) A set of key-value pairs to send as variables along with the file upload HTTP request."}, {"type": "String", "name": "postFileVarName", "description": "  (optional) The name of the POST variable that should contain the uploaded file ('Filedata' by default)."}], "description": "Starts the upload of the files in the upload queue. \nThe upload queue is managed automatically.", "guessedname": "uploadAll", "guessedtype": "function"}, "enable": {"description": "Enables the uploader user input (mouse clicks on the 'Browse' button). If the button skin \nis applied, the sprite is reset from the \"disabled\" state.", "guessedname": "enable", "guessedtype": "function"}, "setAllowLogging": {"guessedname": "setAllowLogging", "params": [{"type": "Boolean", "name": "value", "description": "  The value for the 'log' property."}], "description": "Setter for the 'log' property.", "private": "", "guessedtype": "function"}, "_initializeUploader": {"guessedname": "_initializeUploader", "params": [{"type": "Object", "name": "event", "description": "  The event to be propagated from Flash."}], "description": "Called when the uploader SWF is initialized", "private": "", "guessedtype": "function"}, "_relayEvent": {"guessedname": "_relayEvent", "params": [{"type": "Object", "name": "event", "description": "  The event to be propagated from Flash."}], "description": "Called when an event is dispatched from Uploader", "private": "", "guessedtype": "function"}, "clearFileList": {"return": {"type": "Boolean", "description": "This method always returns true."}, "description": "Clears the upload queue.", "guessedname": "clearFileList", "guessedtype": "function"}, "upload": {"return": {"type": "Boolean", "description": "This method always returns true."}, "params": [{"type": "String", "name": "fileID", "description": "  The ID of the file to be uploaded."}, {"type": "String", "name": "url", "description": "  The URL to upload the file to."}, {"type": "String", "name": "method", "description": "  (optional) The HTTP method to use for sending additional variables, either 'GET' or 'POST' ('GET' by default)"}, {"type": "Object", "name": "postVars", "description": "  (optional) A set of key-value pairs to send as variables along with the file upload HTTP request."}, {"type": "String", "name": "postFileVarName", "description": "  (optional) The name of the POST variable that should contain the uploaded file ('Filedata' by default)"}], "description": "Starts the upload of a specific file.", "guessedname": "upload", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Uploader instantiation.", "guessedname": "initializer", "guessedtype": "function"}, "removeFile": {"return": {"type": "Object} The updated file list, which is an object of the format:\nfileList[fileID] = {id: fileID, name: fileName, cDate: fileCDate, mDate: fileMDate, size: fileSize", "description": ""}, "params": [{"type": "String", "name": "fileID", "description": "  The ID of the file to be removed"}], "description": "Removes a specific file from the upload queue.", "guessedname": "removeFile", "guessedtype": "function"}, "setSimUploadLimit": {"guessedname": "setSimUploadLimit", "params": [{"type": "Boolean", "name": "value", "description": "  The value for the 'simLimit' property."}], "description": "Setter for the 'simLimit' property.", "private": "", "guessedtype": "function"}, "setAllowMultipleFiles": {"guessedname": "setAllowMultipleFiles", "params": [{"type": "Boolean", "name": "value", "description": "  The value for the 'multiFiles' property."}], "description": "Setter for the 'multiFiles' property.", "private": "", "guessedtype": "function"}, "uploadThese": {"params": [{"type": "Array", "name": "fileIDs", "description": "  The array of IDs of the files to be uploaded."}, {"type": "String", "name": "url", "description": "  The URL to upload the files to."}, {"type": "String", "name": "method", "description": "  (optional) The HTTP method to use for sending additional variables, either 'GET' or 'POST' ('GET' by default)"}, {"type": "Object", "name": "postVars", "description": "  (optional) A set of key-value pairs to send as variables along with the file upload HTTP request."}, {"type": "String", "name": "postFileVarName", "description": "  (optional) The name of the POST variable that should contain the uploaded file ('Filedata' by default)"}], "description": "Starts the upload of a set of files, as specified in the first argument. \nThe upload queue is managed automatically.", "guessedname": "uploadThese", "guessedtype": "function"}, "cancel": {"params": [{"type": "String", "name": "fileID", "description": "  (optional) The ID of the file whose upload should be cancelled. If no ID is specified, all uploads are cancelled."}], "description": "Cancels the upload of a specific file, if currently in progress.", "guessedname": "cancel", "guessedtype": "function"}, "setFileFilters": {"guessedname": "setFileFilters", "params": [{"type": "Boolean", "name": "value", "description": "  The value for the 'fileFilters' property."}], "description": "Setter for the 'fileFilters' property.", "private": "", "guessedtype": "function"}}, "extends": "Y.Base", "superclass": "Y.Base", "file": "uploader.js", "shortname": "Uploader", "properties": {"uploaderswf": {"description": "The reference to the instance of Y.SWF that encapsulates the instance of the Flash player with uploader logic.", "default": "null", "private": "", "guessedname": "uploaderswf", "guessedtype": "property", "type": "{SWF}"}, "_id": {"guessedname": "_id", "type": "{String}", "description": "The id of this instance of uploader.", "private": "", "guessedtype": "property"}}, "description": "Creates the Uploader instance and keeps the initialization data"}, "Plugin.Align": {"name": "Plugin.Align", "namespace": "", "module": "align-plugin", "methods": {"to": {"parm": "region {String || Node || HTMLElement || Object} The node or\nregion to align with. Defaults to the viewport region.", "description": "Aligns node with a point on another node or region.\nPossible alignment points are:\n<dl>\n<dt>tl</dt>\n<dd>top left</dd>\n<dt>tr</dt>\n<dd>top right</dd>\n<dt>bl</dt>\n<dd>bottom left</dd>\n<dt>br</dt>\n<dd>bottom right</dd>\n<dt>tc</dt>\n<dd>top center</dd>\n<dt>bc</dt>\n<dd>bottom center</dd>\n<dt>rc</dt>\n<dd>right center</dd>\n<dt>lc</dt>\n<dd>left center</dd>\n<dt>cc</dt>\n<dd>center center</dd>\n</dl>", "guessedname": "to", "guessedtype": "function"}, "center": {"parm": "region {Node || HTMLElement || Object} optional The node or\nregion to align with. Defaults to the viewport region.\nthe window is resized. If centering to viewport, this defaults\nto true, otherwise default is false.", "description": "Aligns the center of a node to the center of another node or region.", "guessedname": "center", "guessedtype": "function"}, "destroy": {"description": "Removes the resize handler, if any. This is called automatically\nwhen unplugged from the host node.", "guessedname": "destroy", "guessedtype": "function"}}, "param": "{Object} User configuration object", "file": "align-plugin.js", "shortname": "Plugin.Align", "description": "Node plugin which can be used to align a node with another node,\nregion, or the viewport."}, "YUI~oop": {"name": "YUI~oop", "namespace": "", "module": "oop", "guessedname": "L", "methods": {"augment": {"return": {"type": "object", "description": "the augmented object."}, "description": "Applies prototype properties from the supplier to the receiver.\nThe receiver can be a constructor or an instance.", "params": [{"type": "function", "name": "r", "description": "  the object to receive the augmentation."}, {"type": "function", "name": "s", "description": "  the object that supplies the properties to augment."}, {"type": "boolean", "name": "ov", "description": " if true, properties already on the receiver\nwill be overwritten if found on the supplier."}, {"type": "string[]", "name": "wl", "description": "  a whitelist.  If supplied, only properties in\nthis list will be applied to the receiver."}, {"type": "Array | Any", "name": "args", "description": " arg or arguments to apply to the supplier\nconstructor when initializing."}], "guessedname": "augment", "guessedtype": "function", "todo": "constructor optional?"}, "extend": {"return": {"type": "object", "description": "the extended object."}, "params": [{"type": "function", "name": "r", "description": "   the object to modify."}, {"type": "function", "name": "s", "description": " the object to inherit."}, {"type": "object", "name": "px", "description": " prototype properties to add/override."}, {"type": "object", "name": "sx", "description": " static properties to add/override."}], "description": "Utility to set up the prototype, constructor and superclass properties to\nsupport an inheritance strategy that can chain constructors and methods.\nStatic members will not be inherited.", "guessedname": "extend", "guessedtype": "function"}, "bind": {"return": {"type": "function", "description": "the wrapped function."}, "params": [{"type": "Function|String", "name": "f", "description": " the function to bind, or a function name\nto execute on the context object."}, {"type": "object", "name": "c", "description": " the execution context."}, {"type": "any", "name": "args*", "description": " 0..n arguments to include before the arguments the\nfunction is executed with."}], "description": "Returns a function that will execute the supplied function in the\nsupplied object's context, optionally adding any additional\nsupplied parameters to the beginning of the arguments collection the\nsupplied to the function.", "guessedname": "bind", "guessedtype": "function"}, "clone": {"return": {"type": "Array|Object", "description": "the cloned object."}, "params": [{"type": "object", "name": "o", "description": " what to clone."}, {"type": "boolean", "name": "safe", "description": " if true, objects will not have prototype\nitems from the source.  If false, they will.  In this case, the\noriginal is initially protected, but the clone is not completely\nimmune from changes to the source object prototype.  Also, cloned\nprototype items that are deleted from the clone will result\nin the value of the source prototype being exposed.  If operating\non a non-safe clone, items should be nulled out rather than deleted."}, {"type": "function", "name": "f", "description": " optional function to apply to each item in a\ncollection; it will be executed prior to applying the value to\nthe new object.  Return false to prevent the copy."}, {"type": "object", "name": "c", "description": " optional execution context for f."}, {"type": "object", "name": "owner", "description": " Owner object passed when clone is iterating\nan object.  Used to set up context for cloned functions."}, {"type": "object", "name": "cloned", "description": " hash of previously cloned objects to avoid\nmultiple clones."}], "description": "Deep obj/array copy.  Function clones are actually\nwrappers around the original function.\nArray-like objects are treated as arrays.\nPrimitives are returned untouched.  Optionally, a\nfunction can be provided to handle other data types,\nfilter keys, validate values, etc.", "guessedname": "clone", "guessedtype": "function"}, "some": {"return": {"type": "boolean", "description": "true if the function ever returns true,\nfalse otherwise."}, "params": [{"type": "object", "name": "o", "description": " the object to iterate."}, {"type": "function", "name": "f", "description": " the function to execute.  This function\nreceives the value, key, and object as parameters."}, {"type": "object", "name": "c", "description": " the execution context for the function."}, {"type": "boolean", "name": "proto", "description": " if true, prototype properties are\niterated on objects."}], "description": "Executes the supplied function for each item in\na collection.  The operation stops if the function\nreturns true. Supports arrays, objects, and\nY.NodeLists.", "guessedname": "some", "guessedtype": "function"}, "rbind": {"return": {"type": "function", "description": "the wrapped function."}, "params": [{"type": "Function|String", "name": "f", "description": " the function to bind, or a function name\nto execute on the context object."}, {"type": "object", "name": "c", "description": " the execution context."}, {"type": "any", "name": "args*", "description": " 0..n arguments to append to the end of\narguments collection supplied to the function."}], "description": "Returns a function that will execute the supplied function in the\nsupplied object's context, optionally adding any additional\nsupplied parameters to the end of the arguments the function\nis executed with.", "guessedname": "rbind", "guessedtype": "function"}, "each": {"return": {"type": "YUI", "description": "the YUI instance."}, "params": [{"type": "object", "name": "o", "description": " the object to iterate."}, {"type": "function", "name": "f", "description": " the function to execute.  This function\nreceives the value, key, and object as parameters."}, {"type": "object", "name": "c", "description": " the execution context for the function."}, {"type": "boolean", "name": "proto", "description": " if true, prototype properties are\niterated on objects."}], "description": "Executes the supplied function for each item in\na collection.  Supports arrays, objects, and\nY.NodeLists", "guessedname": "each", "guessedtype": "function"}, "aggregate": {"return": {"type": "object", "description": "the extended object."}, "params": [{"type": "function", "name": "r", "description": "  the object to receive the augmentation."}, {"type": "function", "name": "s", "description": "  the object that supplies the properties to augment."}, {"type": "boolean", "name": "ov", "description": " if true, properties already on the receiver\nwill be overwritten if found on the supplier."}, {"type": "string[]", "name": "wl", "description": " a whitelist.  If supplied, only properties in\nthis list will be applied to the receiver."}], "description": "Applies object properties from the supplier to the receiver.  If\nthe target has the property, and the property is an object, the target\nobject will be augmented with the supplier's value.  If the property\nis an array, the suppliers value will be appended to the target.", "guessedname": "aggregate", "guessedtype": "function"}}, "file": "oop.js", "guessedtype": "property", "shortname": "YUI~oop", "description": "The following methods are added to the YUI instance"}, "DD.Drop": {"name": "DD.Drop", "configs": {"node": {"type": "Node", "description": "Y.Node instanace to use as the element to make a Drop Target", "guessedname": "node", "guessedtype": "property"}, "useShim": {"deprecated": "", "type": "Boolean", "description": "Use the Drop shim. Default: true", "guessedname": "useShim", "guessedtype": "property"}, "padding": {"type": "String", "description": "CSS style padding to make the Drop Target bigger than the node.", "guessedname": "padding", "guessedtype": "property"}, "groups": {"type": "Array", "description": "Array of groups to add this drop into.", "guessedname": "groups", "guessedtype": "property"}, "lock": {"type": "Boolean", "description": "Set to lock this drop element.", "guessedname": "lock", "guessedtype": "property"}, "bubbles": {"deprecated": "", "type": "Object", "description": "Controls the default bubble parent for this Drop instance. Default: Y.DD.DDM. Set to false to disable bubbling. Use bubbleTargets in config.", "guessedname": "bubbles", "guessedtype": "property"}}, "constructors": [{"description": "Provides the ability to create a Drop Target."}], "namespace": "DD", "module": "dd", "properties": {"_groups": {"guessedname": "_groups", "type": "Array", "description": "The groups this target belongs to.", "private": "", "guessedtype": "property"}, "_valid": {"guessedname": "_valid", "type": "Boolean", "description": "Flag for determining if the target is valid in this operation.", "private": "", "guessedtype": "property"}, "shim": {"type": "{Object}", "description": "Node reference to the targets shim", "guessedname": "shim", "guessedtype": "property"}, "region": {"type": "Object", "description": "A region object associated with this target, used for checking regions while dragging.", "guessedname": "region", "guessedtype": "property"}, "_bubbleTargets": {"private": "", "description": "The default bubbleTarget for this object. Default: Y.DD.DDM", "guessedname": "_bubbleTargets", "guessedtype": "property"}, "overTarget": {"type": "Boolean", "description": "This flag is tripped when a drag element is over this target.", "guessedname": "overTarget", "guessedtype": "property"}}, "guessedname": "NODE", "methods": {"addToGroup": {"return": {"type": "Self", "description": ""}, "description": "Add this Drop instance to a group, this should be used for on-the-fly group additions.", "chainable": "", "params": [{"type": "String", "name": "g", "description": " The group to add this Drop Instance to."}], "guessedname": "addToGroup", "guessedtype": "function"}, "_handleOverTarget": {"description": "This handles the over target call made from this object or from the DDM", "private": "", "guessedname": "_handleTargetOver", "guessedtype": "function"}, "removeFromGroup": {"return": {"type": "Self", "description": ""}, "description": "Remove this Drop instance from a group, this should be used for on-the-fly group removals.", "chainable": "", "params": [{"type": "String", "name": "g", "description": " The group to remove this Drop Instance from."}], "guessedname": "removeFromGroup", "guessedtype": "function"}, "_createEvents": {"description": "This method creates all the events for this Event Target and publishes them so we get Event Bubbling.", "private": "", "guessedname": "_createEvents", "guessedtype": "function"}, "_handleOut": {"description": "Handles out of target calls/checks", "private": "", "guessedname": "_handleOut", "guessedtype": "function"}, "sizeShim": {"description": "Positions and sizes the shim with the raw data from the node, this can be used to programatically adjust the Targets shim for Animation..", "guessedname": "sizeShim", "guessedtype": "function"}, "initializer": {"description": "Private lifecycle method", "private": "", "guessedname": "initializer", "guessedtype": "function"}, "_handleOutEvent": {"description": "Handles the mouseout DOM event on the Target Shim", "private": "", "guessedname": "_handleOutEvent", "guessedtype": "function"}, "_createShim": {"description": "Creates the Target shim and adds it to the DDM's playground..", "private": "", "guessedname": "_createShim", "guessedtype": "function"}, "inGroup": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "Array", "name": "groups", "description": " The groups to check against"}], "description": "Check if this target is in one of the supplied groups.", "guessedname": "inGroup", "guessedtype": "function"}, "_activateShim": {"description": "Activates the shim and adds some interaction CSS classes", "private": "", "guessedname": "_activateShim", "guessedtype": "function"}, "_deactivateShim": {"description": "Removes classes from the target, resets some flags and sets the shims deactive position [-999, -999]", "private": "", "guessedname": "_deactivateShim", "guessedtype": "function"}, "destructor": {"description": "Lifecycle destructor, unreg the drag from the DDM and remove listeners", "private": "", "guessedname": "destructor", "guessedtype": "function"}, "_handleOverEvent": {"description": "Handles the mouseover DOM event on the Target Shim", "private": "", "guessedname": "_handleOverEvent", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "drop.js", "guessedtype": "property", "shortname": "Drop", "events": {"paddingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "paddingChange", "description": "Fires when the value for the configuration attribute 'padding' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "groupsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "groupsChange", "description": "Fires when the value for the configuration attribute 'groups' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drop:enter": {"description": "Fires when a drag element enters this target.", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The drop object at the time of the event.</dd>\n<dt>drag</dt><dd>The drag object at the time of the event.</dd>\n</dl>"}], "guessedname": "EV_DROP_ENTER", "guessedtype": "property", "bubbles": "DDM", "type": "{Event.Custom}"}, "bubblesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "bubblesChange", "description": "Fires when the value for the configuration attribute 'bubbles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drop:over": {"description": "Fires when a drag element is over this target.", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The drop object at the time of the event.</dd>\n<dt>drag</dt><dd>The drag object at the time of the event.</dd>\n</dl>"}], "guessedname": "EV_DROP_OVER", "guessedtype": "property", "bubbles": "DDM", "type": "{Event.Custom}"}, "nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drop:hit": {"description": "Fires when a draggable node is dropped on this Drop Target. (Fired from dd-ddm-drop)", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The best guess on what was dropped on.</dd>\n<dt>drag</dt><dd>The drag object at the time of the event.</dd>\n<dt>others</dt><dd>An array of all the other drop targets that was dropped on.</dd>\n</dl>"}], "guessedname": "Drop", "guessedtype": "function", "bubbles": "DDM", "type": "{Event.Custom}"}, "useShimChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "useShimChange", "description": "Fires when the value for the configuration attribute 'useShim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "lockChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lockChange", "description": "Fires when the value for the configuration attribute 'lock' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drop:exit": {"description": "Fires when a drag element exits this target.", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object"}], "guessedname": "EV_DROP_EXIT", "guessedtype": "property", "bubbles": "DDM", "type": "{Event.Custom}"}}, "description": "Provides the ability to create a Drop Target."}, "DataType.Number": {"name": "DataType.Number", "namespace": "", "module": "datatype", "guessedname": "LANG", "methods": {"parse": {"return": {"type": "Number", "description": "A number, or null."}, "params": [{"type": "String | Number | Boolean", "name": "data", "description": "  Data to convert. The following\nvalues return as null: null, undefined, NaN, \"\"."}], "description": "Converts data to type Number.", "guessedname": "parse", "guessedtype": "function"}, "format": {"return": {"type": "String", "description": "Formatted number for display. Note, the following values\nreturn as \"\": null, undefined, NaN, \"\"."}, "params": [{"type": "Number", "name": "data", "description": "  Number."}, {"type": "Object} (Optional) Optional configuration values:\n<dl>\n<dt>prefix {String}</dd>\n<dd>String prepended before each number, like a currency designator \"$\"</dd>\n<dt>decimalPlaces {Number}</dd>\n<dd>Number of decimal places to round. Must be a number 0 to 20.</dd>\n<dt>decimalSeparator {String}</dd>\n<dd>Decimal separator</dd>\n<dt>thousandsSeparator {String}</dd>\n<dd>Thousands separator</dd>\n<dt>suffix {String", "name": "config", "description": " </dd>\n<dd>String appended after each number, like \" items\" (note the space)</dd>\n</dl>"}], "description": "Takes a Number and formats to string for display to user.", "guessedname": "format", "guessedtype": "function"}}, "static": "", "file": "datatype-number-format.js", "guessedtype": "property", "shortname": "DataType.Number", "description": "DataType.Number provides a set of utility functions to operate against Number objects."}, "HistoryBase": {"name": "HistoryBase", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " (optional) configuration object, which may contain\nzero or more of the following properties:\n<dl>\n<dt>initialState (Object)</dt>\n<dd>\nInitial state to set, as an object hash of key/value pairs. This will be\nmerged into the current global state.\n</dd>\n</dl>"}], "description": "Provides global state management backed by an object, but with no browser\nhistory integration. For actual browser history integration and back/forward\nsupport, use the history-html5 or history-hash modules."}], "namespace": "", "module": "history", "events": {"history:change": {"params": [{"type": "EventFacade", "name": "e", "description": " Event facade with the following additional\nproperties:\n<dl>\n<dt>changed (Object)</dt>\n<dd>\nObject hash of state items that have been added or changed. The\nkey is the item key, and the value is an object containing\n<code>newVal</code> and <code>prevVal</code> properties\nrepresenting the values of the item both before and after the\nchange. If the item was newly added, <code>prevVal</code> will be\n<code>undefined</code>.\n</dd>\n<dt>newVal (Object)</dt>\n<dd>\nObject hash of key/value pairs of all state items after the\nchange.\n</dd>\n<dt>prevVal (Object)</dt>\n<dd>\nObject hash of key/value pairs of all state items before the\nchange.\n</dd>\n<dt>removed (Object)</dt>\n<dd>\nObject hash of key/value pairs of state items that have been\nremoved. Values are the old values prior to removal.\n</dd>\n<dt>src (String)</dt>\n<dd>\nThe source of the event. This can be used to selectively ignore\nevents generated by certain sources.\n</dd>\n</dl>"}], "description": "Fired when the state changes. To be notified of all state changes\nregardless of the History or YUI instance that generated them,\nsubscribe to this event on <code>Y.Global</code>. If you would rather\nbe notified only about changes generated by this specific History\ninstance, subscribe to this event on the instance."}, "[key]Change": {"params": [{"type": "EventFacade", "name": "e", "description": " Event facade with the following additional\nproperties:\n<dl>\n<dt>newVal (mixed)</dt>\n<dd>\nThe new value of the item after the change.\n</dd>\n<dt>prevVal (mixed)</dt>\n<dd>\nThe previous value of the item before the change, or\n<code>undefined</code> if the item was just added and has no\nprevious value.\n</dd>\n<dt>src (String)</dt>\n<dd>\nThe source of the event. This can be used to selectively ignore\nevents generated by certain sources.\n</dd>\n</dl>"}], "description": "<p>\nDynamic event fired when an individual history item is added or\nchanged. The name of this event depends on the name of the key that\nchanged. To listen to change events for a key named \"foo\", subscribe\nto the <code>fooChange</code> event; for a key named \"bar\", subscribe\nto <code>barChange</code>, etc.\n</p>\n<p>\nKey-specific events are only fired for instance-level changes; that\nis, changes that were made via the same History instance on which the\nevent is subscribed. To be notified of changes made by other History\ninstances, subscribe to the global <code>history:change</code> event.\n</p>"}, "[key]Remove": {"params": [{"type": "EventFacade", "name": "e", "description": " Event facade with the following additional\nproperties:\n<dl>\n<dt>prevVal (mixed)</dt>\n<dd>\nThe value of the item before it was removed.\n</dd>\n<dt>src (String)</dt>\n<dd>\nThe source of the event. This can be used to selectively ignore\nevents generated by certain sources.\n</dd>\n</dl>"}], "description": "<p>\nDynamic event fired when an individual history item is removed. The\nname of this event depends on the name of the key that was removed.\nTo listen to remove events for a key named \"foo\", subscribe to the\n<code>fooRemove</code> event; for a key named \"bar\", subscribe to\n<code>barRemove</code>, etc.\n</p>\n<p>\nKey-specific events are only fired for instance-level changes; that\nis, changes that were made via the same History instance on which the\nevent is subscribed. To be notified of changes made by other History\ninstances, subscribe to the global <code>history:change</code> event.\n</p>"}}, "guessedname": "Lang", "methods": {"_isSimpleObject": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "mixed", "name": "value", "description": ""}], "description": "Returns <code>true</code> if <i>value</i> is a simple object and not a\nfunction or an array.", "private": ""}, "_defChangeFn": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " state change event facade"}], "description": "Default <code>history:change</code> event handler.", "guessedname": "_defChangeFn", "guessedtype": "function"}, "get": {"return": {"type": "Object|String", "description": "Value of the specified state parameter, or an\nobject hash of key/value pairs for all current state parameters."}, "params": [{"type": "String", "name": "key", "description": " (optional) State parameter key."}], "description": "Returns the current value of the state parameter specified by <i>key</i>,\nor an object hash of key/value pairs for all current state parameters if\nno key is specified.", "guessedname": "get", "guessedtype": "function"}, "_fireRemoveEvent": {"protected": "", "params": [{"type": "String", "name": "src", "description": " source of the change, for inclusion in event facades\nto facilitate filtering"}, {"type": "String", "name": "key", "description": " key of the item that was removed"}, {"type": "mixed", "name": "value", "description": " value of the item prior to its removal"}], "description": "Fires a dynamic \"[key]Remove\" event.", "guessedname": "_fireRemoveEvent", "guessedtype": "function"}, "_init": {"protected": "", "params": [{"type": "Object", "name": "config", "description": " configuration object"}], "description": "Initializes this HistoryBase instance. This method is called by the\nconstructor.", "guessedname": "_init", "guessedtype": "function"}, "_storeState": {"protected": "", "params": [{"type": "String", "name": "src", "description": " source of the changes"}, {"type": "Object", "name": "newState", "description": " new state to store"}, {"type": "Object", "name": "options", "description": " Zero or more options. See <code>add()</code> for\na list of supported options."}], "description": "Stores the specified state. Don't call this method directly; go through\n_resolveChanges() to ensure that changes are resolved and all events are\nfired properly.", "guessedname": "_storeState", "guessedtype": "function"}, "replace": {"chainable": "", "params": [{"type": "Object", "name": "state", "description": " Object hash of key/value pairs."}, {"type": "Object", "name": "options", "description": " (optional) Zero or more options. See\n<code>add()</code> for a list of supported options."}], "description": "Same as <code>add()</code> except that a new browser history entry will\nnot be created. Instead, the current history entry will be replaced with\nthe new state.", "guessedname": "replace", "guessedtype": "function"}, "_change": {"description": "Changes the state. This method provides a common implementation shared by\nthe public methods for changing state.", "chainable": "", "protected": "", "params": [{"type": "String", "name": "src", "description": " Source of the change, for inclusion in event facades\nto facilitate filtering."}, {"type": "Object", "name": "state", "description": " Object hash of key/value pairs."}, {"type": "Object", "name": "options", "description": " (optional) Zero or more options. See\n<code>add()</code> for a list of supported options."}], "guessedname": "_change", "guessedtype": "function"}, "getIframeHash": {"static": "", "return": {"type": "String", "description": "current iframe hash"}, "description": "Gets the raw (not decoded) current location hash from the IE iframe,\nminus the preceding '#' character and the hashPrefix (if one is set).", "guessedname": "getIframeHash", "guessedtype": "function"}, "add": {"chainable": "", "params": [{"type": "Object", "name": "state", "description": " Object hash of key/value pairs."}, {"type": "Object", "name": "options", "description": " (optional) Zero or more of the following options:\n<dl>\n<dt>merge (Boolean)</dt>\n<dd>\n<p>\nIf <code>true</code> (the default), the new state will be merged\ninto the existing state. New values will override existing values,\nand <code>null</code> or <code>undefined</code> values will be\nremoved from the state.\n</p>\n<p>\nIf <code>false</code>, the existing state will be discarded as a\nwhole and the new state will take its place.\n</p>\n</dd>\n</dl>"}], "description": "Adds a state entry with new values for the specified keys. By default,\nthe new state will be merged into the existing state, and new values will\noverride existing values. Specifying a <code>null</code> or\n<code>undefined</code> value will cause that key to be removed from the\nnew state entry.", "guessedname": "add", "guessedtype": "function"}, "_fireEvents": {"protected": "", "params": [{"type": "String", "name": "src", "description": " Source of the changes, for inclusion in event facades\nto facilitate filtering."}, {"type": "Object", "name": "changes", "description": " Resolved changes."}, {"type": "Object", "name": "options", "description": " Zero or more options. See <code>add()</code> for\na list of supported options."}], "description": "Called by _resolveChanges() when the state has changed. This method takes\ncare of actually firing the necessary events.", "guessedname": "_fireEvents", "guessedtype": "function"}, "_resolveChanges": {"protected": "", "params": [{"type": "String", "name": "src", "description": " source of the changes, for inclusion in event facades\nto facilitate filtering"}, {"type": "Object", "name": "newState", "description": " object hash of key/value pairs representing the\nnew state"}, {"type": "Object", "name": "options", "description": " Zero or more options. See <code>add()</code> for\na list of supported options."}], "description": "Resolves the changes (if any) between <i>newState</i> and the current\nstate and fires appropriate events if things have changed.", "guessedname": "_resolveChanges", "guessedtype": "function"}, "addValue": {"chainable": "", "params": [{"type": "String", "name": "key", "description": " State parameter key."}, {"type": "String", "name": "value", "description": " New value."}, {"type": "Object", "name": "options", "description": " (optional) Zero or more options. See\n<code>add()</code> for a list of supported options."}], "description": "Adds a state entry with a new value for a single key. By default, the new\nvalue will be merged into the existing state values, and will override an\nexisting value with the same key if there is one. Specifying a\n<code>null</code> or <code>undefined</code> value will cause the key to\nbe removed from the new state entry.", "guessedname": "addValue", "guessedtype": "function"}, "_fireChangeEvent": {"protected": "", "params": [{"type": "String", "name": "src", "description": " source of the change, for inclusion in event facades\nto facilitate filtering"}, {"type": "String", "name": "key", "description": " key of the item that was changed"}, {"type": "Object", "name": "value", "description": " object hash containing <i>newVal</i> and\n<i>prevVal</i> properties for the changed item"}], "description": "Fires a dynamic \"[key]Change\" event.", "guessedname": "_fireChangeEvent", "guessedtype": "function"}, "replaceValue": {"chainable": "", "params": [{"type": "String", "name": "key", "description": " State parameter key."}, {"type": "String", "name": "value", "description": " New value."}, {"type": "Object", "name": "options", "description": " (optional) Zero or more options. See\n<code>add()</code> for a list of supported options."}], "description": "Same as <code>addValue()</code> except that a new browser history entry\nwill not be created. Instead, the current history entry will be replaced\nwith the new state.", "guessedname": "replaceValue", "guessedtype": "function"}}, "uses": ["EventTarget"], "file": "history-base.js", "guessedtype": "property", "shortname": "HistoryBase", "properties": {"_config": {"description": "Configuration object provided by the user on instantiation, or an\nempty object if one wasn't provided.", "default": "{}", "protected": "", "guessedname": "config", "guessedtype": "property", "type": "Object"}, "NAME": {"type": "String", "static": "", "description": "Name of this component.", "guessedname": "NAME", "guessedtype": "property"}, "SRC_REPLACE": {"description": "Constant used to identify state changes originating from the\n<code>replace()</code> method.", "static": "", "guessedname": "SRC_REPLACE", "guessedtype": "property", "type": "String", "final": ""}, "SRC_ADD": {"description": "Constant used to identify state changes originating from the\n<code>add()</code> method.", "static": "", "guessedname": "SRC_ADD", "guessedtype": "property", "type": "String", "final": ""}, "nativeHashChange": {"type": "Boolean", "static": "", "description": "Whether or not this browser supports the <code>window.onhashchange</code>\nevent natively. Note that even if this is <code>true</code>, you may\nstill want to use HistoryHash's synthetic <code>hashchange</code> event\nsince it normalizes implementation differences and fixes spec violations\nacross various browsers."}, "_initialState": {"description": "Resolved initial state: a merge of the user-supplied initial state\n(if any) and any initial state provided by a subclass. This may\ndiffer from <code>_config.initialState</code>. If neither the config\nnor a subclass supplies an initial state, this property will be\n<code>null</code>.", "default": "{}", "protected": "", "guessedname": "initialState", "guessedtype": "property", "type": "Object|null"}, "html5": {"type": "Boolean", "static": "", "description": "Whether or not this browser supports the HTML5 History API."}}, "description": "Provides global state management backed by an object, but with no browser\nhistory integration. For actual browser history integration and back/forward\nsupport, use the history-html5 or history-hash modules."}, "DataSourceArraySchema": {"name": "DataSourceArraySchema", "namespace": "", "module": "datasource", "guessedname": "DataSourceArraySchema", "methods": {"_beforeDefDataFn\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n</dl>": {"protected": "", "description": "Parses raw data into a normalized response.", "guessedname": "_beforeDefDataFn", "guessedtype": "function"}, "initializer": {"guessedname": "initializer", "params": [{"type": "Object", "name": "config", "description": "  Config object."}], "description": "Internal init() handler.", "private": "", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "datasource-arrayschema.js", "guessedtype": "function", "shortname": "DataSourceArraySchema", "properties": {"NS": {"description": "The namespace for the plugin. This will be the property on the host which\nreferences the plugin instance.", "value": "\"schema\"", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String", "final": ""}, "NAME": {"description": "Class name.", "value": "\"dataSourceArraySchema\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Adds schema-parsing to the DataSource Utility."}, "Plugin.EditorLists": {"name": "Plugin.EditorLists", "constructors": [{"description": "Handles list manipulation inside the Editor. Adds keyboard manipulation and execCommand support. Adds overrides for the <a href=\"Plugin.ExecCommand.html#method_COMMANDS.insertorderedlist\">insertorderedlist</a> and <a href=\"Plugin.ExecCommand.html#method_COMMANDS.insertunorderedlist\">insertunorderedlist</a> execCommands."}], "namespace": "", "module": "editor", "guessedname": "EditorLists", "methods": {"_onNodeChange": {"guessedname": "_onNodeChange", "params": [{"type": "Event", "name": "e", "description": " The Event facade passed from the host."}], "description": "Listener for host's nodeChange event and captures the tabkey interaction only when inside a list node.", "private": "", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "lists.js", "guessedtype": "function", "shortname": "Plugin.EditorLists", "properties": {"NS": {"static": "", "description": "lists", "guessedname": "NS", "guessedtype": "property"}, "NONSEL": {"static": "", "description": "The selector query to get all non elements", "guessedname": "NON_SEL", "guessedtype": "property"}, "REMOVE": {"static": "", "description": "The non element placeholder, used for positioning the cursor and filling empty items", "guessedname": "NON", "guessedtype": "property"}, "NAME": {"static": "", "description": "editorLists", "guessedname": "NAME", "guessedtype": "property"}}, "description": "Handles list manipulation inside the Editor. Adds keyboard manipulation and execCommand support. Adds overrides for the <a href=\"Plugin.ExecCommand.html#method_COMMANDS.insertorderedlist\">insertorderedlist</a> and <a href=\"Plugin.ExecCommand.html#method_COMMANDS.insertunorderedlist\">insertunorderedlist</a> execCommands."}, "ScrollView": {"name": "ScrollView", "configs": {"flick": {"default": "Object with properties minDistance = 10, minVelocity = 0.3.", "type": "Object", "description": "The minimum distance and/or velocity which define a flick", "guessedname": "flick", "guessedtype": "property"}, "bounce": {"default": "0.1", "type": "Number", "description": "Drag coefficient for intertial scrolling at the upper\nand lower boundaries of the scrollview. Set to 0 to \ndisable \"rubber-banding\".", "guessedname": "bounce", "guessedtype": "property"}, "deceleration": {"default": "0.93", "description": "Drag coefficent for inertial scrolling. The closer to 1 this\nvalue is, the less friction during scrolling.", "guessedname": "deceleration", "guessedtype": "property"}, "scrollX": {"default": "0", "type": "Number", "description": "The scroll position in the x-axis", "guessedname": "scrollX", "guessedtype": "property"}, "scrollY": {"default": "0", "type": "Number", "description": "The scroll position in the y-axis", "guessedname": "scrollY", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal with initial attribute values"}], "description": "ScrollView provides a scrollable widget, supporting flick gestures, across both touch and mouse based devices."}], "namespace": "", "module": "scrollview-base", "properties": {"_prevent": {"protected": "", "type": "Object", "description": "<p>Used to control whether or not ScrollView's internal\ngesturemovestart, gesturemove and gesturemoveend\nevent listeners should preventDefault. The value is an\nobject, with \"start\", \"move\" and \"end\" properties used to \nspecify which events should preventDefault and which shouldn't:</p>\n<pre>\n{\nstart : false,\nmove : true,\nend : false\n}\n</pre>\n<p>The default values are set up in order to prevent panning,\non touch devices, while allowing click listeners on elements inside \nthe ScrollView to be notified as expected.</p>", "guessedname": "_prevent", "guessedtype": "property"}, "ScrollView.FRAME_STEP": {"description": "The interval used when animating the flick", "default": "30", "static": "", "guessedname": "FRAME_STEP", "guessedtype": "property", "type": "Number"}, "_isDragging": {"protected": "", "type": "boolean", "description": "Internal state, defines whether or not the scrollview is currently being dragged", "guessedname": "_isDragging", "guessedtype": "property"}, "ScrollView.SNAP_EASING": {"description": "The default easing to use when animatiing the bounce snap back.", "default": "'ease-out'", "static": "", "guessedname": "SNAP_EASING", "guessedtype": "property", "type": "String"}, "_scrollsHorizontal": {"protected": "", "type": "boolean", "description": "Internal state, defines whether or not the scrollview can scroll horizontally"}, "_currentVelocity": {"protected": "", "type": "number", "description": "Internal state, currently calculated velocity from the flick", "guessedname": "_currentVelocity", "guessedtype": "property"}, "_scrollHeight": {"protected": "", "type": "number", "description": "Internal state, cached scrollHeight, for performance"}, "_maxScrollY": {"protected": "", "type": "number", "description": "Internal state, defines the maximum amount that the scrollview can be scrolled along the Y axis"}, "_maxScrollX": {"protected": "", "type": "number", "description": "Internal state, defines the maximum amount that the scrollview can be scrolled along the X axis"}, "ScrollView.CLASS_NAMES": {"type": "Object", "static": "", "description": "List of class names used in the scrollview's DOM", "guessedname": "CLASS_NAMES", "guessedtype": "property"}, "_snapToEdge": {"protected": "", "type": "boolean", "description": "Internal state, defines whether or not the scrollview needs to snap to a boundary edge", "guessedname": "_snapToEdge", "guessedtype": "property"}, "ScrollView.UI_SRC": {"description": "Flag used to source property changes initiated from the DOM", "default": "\"ui\"", "static": "", "guessedname": "UI_SRC", "guessedtype": "property", "type": "String"}, "_scrolledForward": {"protected": "", "type": "boolean", "description": "Internal state, defines whether or not the scrollview has been scrolled in the forward (distance > 0), or backward (distance < 0) direction", "guessedname": "_scrolledForward", "guessedtype": "property"}, "ScrollView.EASING": {"description": "The default easing used when animating the flick", "default": "'cubic-bezier(0, 0.1, 0, 1.0)'", "static": "", "guessedname": "EASING", "guessedtype": "property", "type": "String"}, "lastScrolledAmt": {"public": "", "type": "Number", "description": "Contains the distance (postive or negative) in pixels by which the scrollview was last scrolled. This is useful when\nsetting up click listeners on the scrollview content, which on mouse based devices are always fired, even after a\ndrag/flick. \n<p>Touch based devices don't currently fire a click event, if the finger has been moved (beyond a threshold) so this check isn't required,\nif working in a purely touch based environment</p>", "guessedname": "lastScrolledAmt", "guessedtype": "property"}, "_minScrollY": {"protected": "", "type": "number", "description": "Internal state, defines the minimum amount that the scrollview can be scrolled along the Y axis"}, "_minScrollX": {"protected": "", "type": "number", "description": "Internal state, defines the minimum amount that the scrollview can be scrolled along the X axis"}, "ScrollView.ATTRS": {"description": "Static property used to define the default attribute configuration of\nthe Widget.", "protected": "", "static": "", "guessedname": "ATTRS", "guessedtype": "property", "type": "{Object}"}, "_scrollsVertical": {"protected": "", "type": "boolean", "description": "Internal state, defines whether or not the scrollview can scroll vertically"}, "_scrollWidth": {"protected": "", "type": "number", "description": "Internal state, cached scrollWidth, for performance"}, "_scrolledHalfway": {"protected": "", "type": "boolean", "description": "Internal state, defines whether or not the scrollview has been scrolled half it's width/height", "guessedname": "_scrolledHalfway", "guessedtype": "property"}, "_flicking": {"protected": "", "type": "boolean", "description": "Internal state, defines whether or not the scrollview is currently animating a flick", "guessedname": "_flicking", "guessedtype": "property"}, "ScrollView._TRANSITION.PROPERTY": {"private": "", "description": "Style property name to use to set transition property. Currently, Webkit specific (WebkitTransitionProperty)", "guessedname": "_TRANSITION", "guessedtype": "property"}, "ScrollView.BOUNCE_RANGE": {"description": "The default bounce distance in pixels", "default": "150", "static": "", "guessedname": "BOUNCE_RANGE", "guessedtype": "property", "type": "Number"}, "ScrollView.NAME": {"description": "The identity of the widget.", "default": "'scrollview'", "readonly": "", "protected": "", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String"}}, "methods": {"_onGestureMove": {"guessedname": "_onGestureMove", "params": [{"type": "Event.Facade", "name": "e", "description": "  The gesturemove event facade"}], "description": "gesturemove event handler", "private": "", "guessedtype": "function"}, "_uiDimensionsChange": {"protected": "", "description": "This method gets invoked whenever the height or width attributes change,\nallowing us to determine which scrolling axes need to be enabled.", "guessedname": "_uiDimensionsChange", "guessedtype": "function"}, "_uiScrollTo": {"protected": "", "params": [{"type": "Number", "name": "x", "description": ""}, {"type": "Number", "name": "y", "description": ""}, {"type": "Number", "name": "duration", "description": ""}, {"type": "String", "name": "easing", "description": ""}], "description": "Used to move the ScrollView content", "guessedname": "_uiScrollTo", "guessedtype": "function"}, "_killTimer": {"protected": "", "params": [{"type": "Boolean", "name": "fireEvent", "description": "  If true, fire the scrollEnd event"}], "description": "Stop the animation timer", "guessedname": "_killTimer", "guessedtype": "function"}, "_flick": {"protected": "", "params": [{"type": "Number", "name": "distance", "description": "  The distance (in px) the user scrolled before the flick"}, {"type": "Number", "name": "time", "description": "  The number of ms the scroll event lasted before the flick"}], "description": "Execute a flick at the end of a scroll action", "guessedname": "_flick", "guessedtype": "function"}, "_setScrollX": {"return": {"type": "Number", "description": "The normalized value"}, "description": "Setter for the scrollX attribute", "protected": "", "params": [{"type": "Number", "name": "val", "description": "  The new scrollX value"}], "guessedname": "_setScrollX", "guessedtype": "function"}, "scrollTo": {"params": [{"type": "Number", "name": "x", "description": "  The x-position to scroll to"}, {"type": "Number", "name": "y", "description": "  The y-position to scroll to"}, {"type": "Number", "name": "duration", "description": "  Duration, in ms, of the scroll animation (default is 0)"}, {"type": "String", "name": "easing", "description": "  An easing equation if duration is set"}], "description": "Scroll the element to a given y coordinate", "guessedname": "scrollTo", "guessedtype": "function"}, "_setScrollY": {"return": {"type": "Number", "description": "The normalized value"}, "description": "Setter for the scrollY ATTR", "protected": "", "params": [{"type": "Number", "name": "val", "description": "  The new scrollY value"}], "guessedname": "_setScrollY", "guessedtype": "function"}, "_afterScrollChange": {"protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  The event facade"}], "description": "After listener for changes to the scrollX or scrollY attribute", "guessedname": "_afterScrollChange", "guessedtype": "function"}, "_setScroll": {"return": {"type": "Number", "description": "The constrained value, if it exceeds min/max range"}, "description": "The scrollX, scrollY setter implementation", "private": "", "params": [{"type": "Number", "name": "val", "description": ""}, {"type": "String", "name": "dim", "description": ""}], "guessedname": "_setScroll", "guessedtype": "function"}, "_flickFrame": {"protected": "", "description": "Execute a single frame in the flick animation", "guessedname": "_flickFrame", "guessedtype": "function"}, "initializer": {"description": "Designated initializer", "guessedname": "initializer", "guessedtype": "function"}, "_afterDimChange": {"protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  The event facade"}], "description": "After listener for the height or width attribute", "guessedname": "_afterDimChange", "guessedtype": "function"}, "_onGestureMoveStart": {"guessedname": "_onGestureMoveStart", "params": [{"type": "Event.Facade", "name": "e", "description": "  The gesturemovestart event facade"}], "description": "gesturemovestart event handler", "private": "", "guessedtype": "function"}, "_uiSizeCB": {"protected": "", "description": "Override the contentBox sizing method, since the contentBox height\nshould not be that of the boundingBox.", "guessedname": "_uiSizeCB", "guessedtype": "function"}, "bindUI": {"description": "bindUI implementation\nHooks up events for the widget", "guessedname": "bindUI", "guessedtype": "function"}, "_onGestureMoveEnd": {"guessedname": "_onGestureMoveEnd", "params": [{"type": "Event.Facade", "name": "e", "description": "  The gesturemoveend event facade"}], "description": "gestureend event handler", "private": "", "guessedtype": "function"}, "_onTransEnd": {"guessedname": "_onTransEnd", "params": [{"type": "Event.Facade", "name": "e", "description": " The event facade"}], "description": "Content box transition callback", "private": "", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "scrollview-base.js", "shortname": "ScrollView", "events": {"flick": {"params": [{"type": "EventFacade", "name": "e", "description": "  The default event facade."}], "description": "Notification event fired at the end of a flick gesture (the flick animation may still be in progress)", "guessedname": "sv", "guessedtype": "property"}, "flickChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "flickChange", "description": "Fires when the value for the configuration attribute 'flick' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "decelerationChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "decelerationChange", "description": "Fires when the value for the configuration attribute 'deceleration' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "scrollXChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "scrollXChange", "description": "Fires when the value for the configuration attribute 'scrollX' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "bounceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "bounceChange", "description": "Fires when the value for the configuration attribute 'bounce' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "scrollYChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "scrollYChange", "description": "Fires when the value for the configuration attribute 'scrollY' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "scrollEnd": {"params": [{"type": "EventFacade", "name": "e", "description": "  The default event facade."}], "description": "Notification event fired at the end of a scroll transition"}}, "description": "ScrollView provides a scrollable widget, supporting flick gestures, across both touch and mouse based devices."}, "Profiler": {"name": "Profiler", "namespace": "", "module": "profiler", "guessedname": "Profiler", "methods": {"getFunctionReport": {"return": {"type": "Object", "description": "An object containing profile data for a given function."}, "description": "Returns an object containing profiling data for a single function.\nThe object has an entry for min, max, avg, calls, and points).", "deprecated": "Use getReport() instead.", "static": "", "guessedname": "getFunctionReport", "guessedtype": "function"}, "pause": {"return": {"type": "Void", "description": ""}, "description": "Pauses profiling information for a given name.", "static": "", "guessedname": "pause", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the data point."}]}, "getReport": {"static": "", "return": {"type": "Object", "description": "An object containing profile data for a given function."}, "description": "Returns an object containing profiling data for a single function.\nThe object has an entry for min, max, avg, calls, and points).", "guessedname": "getReport", "guessedtype": "function"}, "start": {"return": {"type": "Void", "description": ""}, "description": "Start profiling information for a given name. The name cannot be the name\nof a registered function or object. This is used to start timing for a\nparticular block of code rather than instrumenting the entire function.", "static": "", "guessedname": "start", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the data point."}]}, "getFullReport": {"static": "", "return": {"type": "Object", "description": "An object containing all profile data."}, "description": "Returns an object containing profiling data for all of the functions \nthat were profiled. The object has an entry for each function and \nreturns all information (min, max, average, calls, etc.) for each\nfunction.", "guessedname": "getFullReport", "guessedtype": "function"}, "unregisterFunction": {"return": {"type": "Void", "description": ""}, "description": "Removes a constructor function from profiling. Reverses the registerConstructor() method.", "param": "{String} name The full name of the function including namespacing. This\nis the name of the function that is stored in the report.", "static": "", "guessedname": "unregisterConstructor", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The full name of the function including namespacing. This\nis the name of the function that is stored in the report."}]}, "clear": {"return": {"type": "Void", "description": ""}, "description": "Removes all report data from the profiler.", "static": "", "guessedname": "clear", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " (Optional) The name of the report to clear. If\nomitted, then all report data is cleared."}]}, "stop": {"return": {"type": "Void", "description": ""}, "description": "Stops profiling information for a given name.", "static": "", "guessedname": "stop", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the data point."}]}, "getCallCount": {"return": {"type": "int", "description": "The number of times the function was called."}, "description": "Returns the number of times that the given function has been called.", "static": "", "guessedname": "getCallCount", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the function whose data should be returned."}]}, "registerFunction": {"return": {"type": "Void", "description": ""}, "description": "Sets up a function for profiling. It essentially overwrites the function with one\nthat has instrumentation data. This method also creates an entry for the function\nin the profile report. The original function is stored on the container object.", "static": "", "guessedname": "registerFunction", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The full name of the function including namespacing. This\nis the name of the function that is stored in the report."}, {"type": "Object", "name": "owner", "description": " (Optional) The object that owns the function. If the function\nisn't global then this argument is required. This could be the namespace that\nthe function belongs to or the object on which it's\na method."}, {"type": "Boolean", "name": "registerPrototype", "description": " (Optional) Indicates that the prototype should\nalso be instrumented. Setting to true has the same effect as calling\nregisterConstructor()."}]}, "instrument": {"return": {"type": "Function", "description": "An instrumented version of the function."}, "description": "Instruments a method to have profiling calls.", "static": "", "guessedname": "instrument", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the report for the function."}, {"type": "Function", "name": "method", "description": " The function to instrument."}]}, "getOriginal": {"return": {"type": "Function|Object", "description": "The uninstrumented version of a function/object."}, "description": "Returns the uninstrumented version of a function/object.", "static": "", "guessedname": "getOriginal", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the function/object to retrieve."}]}, "getAverage": {"return": {"type": "float", "description": "The average time it takes the function to execute."}, "description": "Returns the average amount of time (in milliseconds) that the function\nwith the given name takes to execute.", "static": "", "guessedname": "getAverage", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the function whose data should be returned.\nIf an object type method, it should be 'constructor.prototype.methodName';\na normal object method would just be 'object.methodName'."}]}, "getMin": {"return": {"type": "float", "description": "The minimum time it takes the function to execute."}, "description": "Returns the minimum amount of time (in milliseconds) that the function\nwith the given name takes to execute.", "static": "", "guessedname": "getMin", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the function whose data should be returned.\nIf an object type method, it should be 'constructor.prototype.methodName';\na normal object method would just be 'object.methodName'."}]}, "unregisterObject": {"return": {"type": "Void", "description": ""}, "description": "Unregisters an object for profiling. It takes the object and looks for functions.\nWhen a function is found, unregisterMethod() is called on it. If set to recrusive\nmode, it will also unregister objects found inside of this object, \nusing the same methodology.", "static": "", "guessedname": "unregisterObject", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the object to unregister."}, {"type": "Boolean", "name": "recurse", "description": " (Optional) Determines if subobject methods should also be\nunregistered."}]}, "getMax": {"return": {"type": "float", "description": "The maximum time it takes the function to execute."}, "description": "Returns the maximum amount of time (in milliseconds) that the function\nwith the given name takes to execute.", "static": "", "guessedname": "getMax", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the function whose data should be returned.\nIf an object type method, it should be 'constructor.prototype.methodName';\na normal object method would just be 'object.methodName'."}]}, "registerConstructor": {"return": {"type": "Void", "description": ""}, "description": "Sets up a constructor for profiling, including all properties and methods on the prototype.", "static": "", "guessedname": "registerConstructor", "guessedtype": "function", "params": [{"type": "string", "name": "name", "description": " The fully-qualified name of the function including namespace information."}, {"type": "Object", "name": "owner", "description": " (Optional) The object that owns the function (namespace or containing object)."}]}, "registerObject": {"return": {"type": "Void", "description": ""}, "description": "Sets up an object for profiling. It takes the object and looks for functions.\nWhen a function is found, registerMethod() is called on it. If set to recrusive\nmode, it will also setup objects found inside of this object for profiling, \nusing the same methodology.", "static": "", "guessedname": "registerObject", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the object to profile (shows up in report)."}, {"type": "Object", "name": "owner", "description": " (Optional) The object represented by the name."}, {"type": "Boolean", "name": "recurse", "description": " (Optional) Determines if subobject methods are also profiled."}]}}, "static": "", "file": "Profiler.js", "guessedtype": "property", "shortname": "Profiler", "description": "Profiles functions in JavaScript."}, "Queue": {"name": "Queue", "constructors": [{"params": [{"type": "MIXED", "name": "item*", "description": " 0..n items to seed the queue."}], "description": "A simple FIFO queue.  Items are added to the Queue with add(1..n items) and\nremoved using next()."}], "namespace": "", "module": "yui", "methods": {"last": {"return": {"type": "MIXED", "description": "the last item in the queue."}, "description": "Get the last in the queue. LIFO support.", "guessedname": "last", "guessedtype": "function"}, "indexOf": {"return": {"type": "Number", "description": "the index of the item or -1 if not found"}, "params": [{"type": "MIXED", "name": "needle", "description": "  the item to search for"}], "description": "Returns the current index in the queue of the specified item", "guessedname": "indexOf", "guessedtype": "function"}, "_init": {"protected": "", "description": "Initialize the queue", "guessedname": "_init", "guessedtype": "function"}, "remove": {"params": [{"type": "MIXED", "name": "item", "description": "  an item in the queue"}], "description": "Removes the referenced item from the queue", "guessedname": "remove", "guessedtype": "function"}, "next": {"return": {"type": "MIXED", "description": "the next item in the queue."}, "description": "Get the next item in the queue. FIFO support", "guessedname": "next", "guessedtype": "function"}, "add": {"return": {"type": "object", "description": "this queue."}, "params": [{"type": "MIXED", "name": "item*", "description": " 0..n items."}], "description": "Add 0..n items to the end of the queue.", "guessedname": "add", "guessedtype": "function"}, "_rls": {"return": {"type": "string", "description": "the url for the remote loader service call."}, "description": "Implentation for building the remote loader service url.", "since": "3.2.0", "params": [{"type": "Array", "name": "what", "description": " the requested modules."}], "guessedname": "_rls", "guessedtype": "function"}, "promote": {"params": [{"type": "MIXED", "name": "item", "description": "  an item in the queue"}], "description": "Moves the referenced item to the head of the queue", "guessedname": "promote", "guessedtype": "function"}, "size": {"return": {"type": "Number", "description": "The size."}, "description": "Returns the current number of queued items.", "guessedname": "size", "guessedtype": "function"}}, "file": "queue-base.js", "shortname": "Queue", "properties": {"_q": {"protected": "", "type": "Array", "description": "The collection of enqueued items", "guessedname": "_q", "guessedtype": "property"}}, "description": "A simple FIFO queue.  Items are added to the Queue with add(1..n items) and\nremoved using next()."}, "DataSource.IO": {"name": "DataSource.IO", "configs": {"ioConfig": {"default": "null", "type": "Object", "description": "Default IO Config.", "guessedname": "ioConfig", "guessedtype": "property"}, "io": {"default": "Y.io", "type": "Y.io", "description": "Pointer to IO Utility.", "guessedname": "io", "guessedtype": "property"}}, "constructors": [{"description": "IO subclass for the DataSource Utility."}], "namespace": "", "module": "datasource", "events": {"ioConfigChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "ioConfigChange", "description": "Fires when the value for the configuration attribute 'ioConfig' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "ioChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "ioChange", "description": "Fires when the value for the configuration attribute 'io' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "DSIO", "methods": {"_defRequestFn": {"protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>cfg (Object)</dt> <dd>Configuration object.</dd>\n</dl>"}], "description": "Passes query string to IO. Fires <code>response</code> event when\nresponse is received asynchronously.", "guessedname": "_defRequestFn", "guessedtype": "function"}, "initializer": {"guessedname": "initializer", "params": [{"type": "Object", "name": "config", "description": "  Config object."}], "description": "Internal init() handler.", "private": "", "guessedtype": "function"}}, "extends": "DataSource.Local", "superclass": "DataSource.Local", "file": "datasource-io.js", "guessedtype": "function", "shortname": "DataSource.IO", "properties": {"NAME": {"description": "Class name.", "value": "\"dataSourceIO\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}, "_queue": {"description": "Object literal to manage asynchronous request/response\ncycles enabled if queue needs to be managed (asyncMode/ioConnMode):\n<dl>\n<dt>interval {Number}</dt>\n<dd>Interval ID of in-progress queue.</dd>\n<dt>conn</dt>\n<dd>In-progress connection identifier (if applicable).</dd>\n<dt>requests {Object[]}</dt>\n<dd>Array of queued request objects: {request:request, callback:callback}.</dd>\n</dl>", "default": "{interval:null, conn:null, requests:[]}", "private": "", "guessedname": "_queue", "guessedtype": "property", "type": "Object"}}, "description": "IO subclass for the DataSource Utility."}, "Plugin.EditorTab": {"name": "Plugin.EditorTab", "constructors": [{"description": "Handles tab and shift-tab indent/outdent support."}], "namespace": "", "module": "editor", "guessedname": "EditorTab", "methods": {"_onNodeChange": {"guessedname": "_onNodeChange", "params": [{"type": "Event", "name": "e", "description": " The Event facade passed from the host."}], "description": "Listener for host's nodeChange event and captures the tabkey interaction.", "private": "", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "editor-tab.js", "guessedtype": "function", "shortname": "Plugin.EditorTab", "properties": {"NS": {"static": "", "description": "tab", "guessedname": "NS", "guessedtype": "property"}, "NAME": {"static": "", "description": "editorTab", "guessedname": "NAME", "guessedtype": "property"}}, "description": "Handles tab and shift-tab indent/outdent support."}, "WidgetChild": {"properties": {"ROOT_TYPE": {"type": "Object", "description": "Constructor reference used to determine the root of a Widget-based \nobject tree.\n<p>\nCurrently used to control the behavior of the <code>root</code>  \nattribute so that recursing up the object heirarchy can be constrained \nto a specific type of Widget.  Widget authors should set this property\nto the constructor function for a given Widget implementation.\n</p>", "guessedname": "ROOT_TYPE", "guessedtype": "property"}}, "name": "WidgetChild", "namespace": "", "module": "widget-child", "events": {"depthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "depthChange", "description": "Fires when the value for the configuration attribute 'depth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "rootChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "rootChange", "description": "Fires when the value for the configuration attribute 'root' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "parentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "parentChange", "description": "Fires when the value for the configuration attribute 'parent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "selectedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "selectedChange", "description": "Fires when the value for the configuration attribute 'selected' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "indexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "indexChange", "description": "Fires when the value for the configuration attribute 'index' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"_afterChildSelectedChange": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The event facade for the attribute change."}], "description": "Default attribute change listener for the <code>selected</code> \nattribute, responsible for updating the UI, in response to \nattribute changes.", "guessedname": "_afterChildSelectedChange", "guessedtype": "function"}, "isRoot": {"return": {"type": "Boolean", "description": "Boolean indicating if Widget is the root Widget in the \nobject hierarchy."}, "description": "Determines if the Widget is the root Widget in the \nobject hierarchy.", "guessedname": "isRoot", "guessedtype": "function"}, "next": {"return": {"type": "Widget", "description": "Widget instance."}, "params": [{"type": "Boolean", "name": "circular", "description": " Boolean indicating if the parent's first child \nshould be returned if the child has no next sibling."}], "description": "Returns the Widget's next sibling.", "guessedname": "next", "guessedtype": "function"}, "_uiSetChildSelected": {"protected": "", "params": [{"type": "number", "name": "selected", "description": " The selected value to be reflected in the UI."}], "description": "Updates the UI to reflect the <code>selected</code> attribute value.", "guessedname": "_uiSetChildSelected", "guessedtype": "function"}, "_syncUIChild": {"protected": "", "description": "Synchronizes the UI to match the WidgetChild state.\n<p>\nThis method is invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_syncUIChild", "guessedtype": "function"}, "ancestor": {"return": {"type": "Widget", "description": "Widget instance."}, "params": [{"type": "number", "name": "depth", "description": " Number representing the depth of the ancestor."}], "description": "Returns the Widget instance at the specified depth.", "guessedname": "ancestor", "guessedtype": "function"}, "_bindUIChild": {"protected": "", "description": "Binds event listeners responsible for updating the UI state in response \nto WidgetChild related state changes.\n<p>\nThis method is invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_bindUIChild", "guessedtype": "function"}, "previous": {"return": {"type": "Widget", "description": "Widget instance."}, "params": [{"type": "Boolean", "name": "circular", "description": " Boolean indicating if the parent's last child \nshould be returned if the child has no previous sibling."}], "description": "Returns the Widget's previous sibling.", "guessedname": "previous", "guessedtype": "function"}}, "param": "{Object} config User configuration object.", "file": "Widget-Child.js", "shortname": "WidgetChild", "configs": {"index": {"readonly": "", "type": "Number", "description": "Number representing the Widget's ordinal position in its \nparent Widget.", "guessedname": "index", "guessedtype": "property"}, "depth": {"description": "Number representing the depth of this Widget relative to \nthe root Widget in the object heirarchy.", "default": "-1", "readonly": "", "guessedname": "depth", "guessedtype": "property", "type": "Number"}, "selected": {"default": "0", "type": "Number", "description": "Number indicating if the Widget is selected.  Possible \nvalues are:\n<dl>\n<dt>0</dt> <dd>(Default) Not selected</dd>\n<dt>1</dt> <dd>Fully selected</dd>\n<dt>2</dt> <dd>Partially selected</dd>\n</dl>", "guessedname": "selected", "guessedtype": "property"}, "root": {"readonly": "", "type": "Widget", "description": "Returns the root Widget in the object hierarchy.  If the\nROOT_TYPE property is set, the search for the root Widget will be \nconstrained to parent Widgets of the specified type.", "guessedname": "root", "guessedtype": "property"}, "parent": {"readonly": "", "type": "Widget", "description": "Retrieves the parent of the Widget in the object hierarchy.", "guessedname": "parent", "guessedtype": "property"}}, "description": "Widget extension providing functionality enabling a Widget to be a \nchild of another Widget."}, "ImgLoadGroup": {"properties": {"_areFoldTriggersSet": {"guessedname": "_areFoldTriggersSet", "type": "Boolean", "description": "Boolean tracking whether the window scroll and window resize triggers have been set if this is a fold group.", "private": "", "guessedtype": "property"}, "_maxKnownHLimit": {"guessedname": "_maxKnownHLimit", "type": "Int", "description": "The maximum pixel height of the document that has been made visible.\nDuring fold checks, if the user scrolls up then there's no need to check for newly exposed images.", "private": "", "guessedtype": "property"}, "_imgObjs": {"guessedname": "_imgObjs", "type": "Object", "description": "Collection of images (<code>Y.ImgLoadImgObj</code> objects) registered with this group, keyed by DOM id.", "private": "", "guessedtype": "property"}, "_classImageEls": {"guessedname": "_classImageEls", "type": "Array", "description": "DOM elements having the class name that is associated with this group.\nElements are stored during the <code>_foldCheck</code> function and reused later during any subsequent <code>_foldCheck</code> calls - gives a slight performance improvement when the page fold is repeatedly checked.", "private": "", "guessedtype": "property"}, "_triggers": {"guessedname": "_triggers", "type": "Array", "description": "Collection of triggers for this group.\nKeeps track of each trigger's event handle, as returned from <code>Y.on</code>.", "private": "", "guessedtype": "property"}, "_className": {"guessedname": "_className", "type": "String", "description": "Keep the CSS class name in a member variable for ease and speed.", "private": "", "guessedtype": "property"}, "_timeout": {"guessedname": "_timeout", "type": "Object", "description": "Timeout object to keep a handle on the time limit.", "private": "", "guessedtype": "property"}}, "name": "ImgLoadGroup", "constructors": [{"description": "A group for images. A group can have one time limit and a series of triggers. Thus the images belonging to this group must share these constraints."}], "namespace": "", "module": "imageloader", "events": {"foldDistanceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "foldDistanceChange", "description": "Fires when the value for the configuration attribute 'foldDistance' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "timeLimitChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "timeLimitChange", "description": "Fires when the value for the configuration attribute 'timeLimit' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "classNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "classNameChange", "description": "Fires when the value for the configuration attribute 'className' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nameChange", "description": "Fires when the value for the configuration attribute 'name' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "ImgLoadGroup", "methods": {"addCustomTrigger": {"chainable": "", "params": [{"type": "String", "name": "name", "description": "  The name of the event"}, {"type": "Object", "name": "obj", "description": "  The object on which to attach the event. <code>obj</code> is optional - by default the event is attached to the <code>Y</code> instance"}], "description": "Adds a custom event trigger to the group.", "guessedname": "addCustomTrigger", "guessedtype": "function"}, "addTrigger": {"chainable": "", "params": [{"type": "Object", "name": "obj", "description": "  The DOM object to attach the trigger event to"}, {"type": "String", "name": "type", "description": "  The event type"}], "description": "Adds a trigger to the group. Arguments are passed to <code>Y.on</code>.", "guessedname": "addTrigger", "guessedtype": "function"}, "_setFoldTriggers": {"private": "", "description": "Sets the window scroll and window resize triggers for any group that is fold-conditional (i.e., has a fold distance set).", "guessedname": "_setFoldTriggers", "guessedtype": "function"}, "_init": {"private": "", "description": "Initialize all private members needed for the group.", "guessedname": "_init", "guessedtype": "function"}, "_clearTriggers": {"private": "", "description": "Clears the timeout and all triggers associated with the group.", "guessedname": "_clearTriggers", "guessedtype": "function"}, "_getFetchTimeout": {"guessedname": "_getFetchTimeout", "return": {"type": "Function", "description": "group's <code>fetch</code> method"}, "description": "Returns the group's <code>fetch</code> method, with the proper closure, for use with <code>setTimeout</code>.", "private": "", "guessedtype": "function"}, "_onloadTasks": {"private": "", "description": "Performs necessary setup at domready time.\nInitiates time limit for group; executes the fold check for the images.", "guessedname": "_onloadTasks", "guessedtype": "function"}, "registerImage": {"return": {"type": "Object", "description": "<code>Y.ImgLoadImgObj</code> that was registered"}, "params": [{"type": "Object", "name": "*", "description": "  A configuration object literal with attribute name/value pairs  (passed through to a <code>Y.ImgLoadImgObj</code> constructor)"}], "description": "Registers an image with the group.\nArguments are passed through to a <code>Y.ImgLoadImgObj</code> constructor; see that class' attribute documentation for detailed information. \"<code>domId</code>\" is a required attribute.", "guessedname": "registerImage", "guessedtype": "function"}, "_foldCheck": {"private": "", "description": "Checks the position of each image in the group. If any part of the image is within the specified distance (<code>foldDistance</code>) of the client viewport, the image is fetched immediately.", "guessedname": "_foldCheck", "guessedtype": "function"}, "fetch": {"description": "Displays the images in the group.\nThis method is called when a trigger fires or the time limit expires; it shouldn't be called externally, but is not private in the rare event that it needs to be called immediately.", "guessedname": "fetch", "guessedtype": "function"}, "_fetchByClass": {"private": "", "description": "Finds all elements in the DOM with the class name specified in the group. Removes the class from the element in order to let the style definitions trigger the image fetching.", "guessedname": "_fetchByClass", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "imageloader.js", "guessedtype": "function", "shortname": "ImgLoadGroup", "configs": {"className": {"type": "String", "description": "Class name that will identify images belonging to the group. This class name will be removed from each element in order to fetch images.\nThis class should have, in its CSS style definition, \"<code>background:none !important;</code>\".", "guessedname": "className", "guessedtype": "property"}, "timeLimit": {"type": "Number", "description": "Time limit, in seconds, after which images are fetched regardless of trigger events.", "guessedname": "timeLimit", "guessedtype": "property"}, "foldDistance": {"type": "Number", "description": "Distance below the fold for which images are loaded. Images are not loaded until they are at most this distance away from (or above) the fold.\nThis check is performed at page load (domready) and after any window scroll or window resize event (until all images are loaded).", "guessedname": "foldDistance", "guessedtype": "property"}, "name": {"type": "String", "description": "Name for the group. Only used to identify the group in logging statements.", "guessedname": "name", "guessedtype": "property"}}, "description": "A group for images. A group can have one time limit and a series of triggers. Thus the images belonging to this group must share these constraints."}, "Test.Wait": {"name": "Test.Wait", "constructors": [{"params": [{"type": "Function", "name": "segment", "description": " A function to run when the wait is over."}, {"type": "int", "name": "delay", "description": " The number of milliseconds to wait before running the code."}], "description": "Represents a stoppage in test execution to wait for an amount of time before\ncontinuing."}], "namespace": "Test", "module": "test", "guessedname": "Wait", "file": "TestCase.js", "guessedtype": "function", "shortname": "Wait", "properties": {"delay": {"type": "int", "description": "The delay before running the segment of code.", "guessedname": "delay", "guessedtype": "property"}, "segment": {"type": "Function", "description": "The segment of code to run when the wait is over.", "guessedname": "segment", "guessedtype": "property"}}, "description": "Represents a stoppage in test execution to wait for an amount of time before\ncontinuing."}, "Do.Method": {"name": "Do.Method", "constructors": [{"params": [{"type": "", "name": "obj", "description": " The object to operate on"}, {"type": "", "name": "sFn", "description": " The name of the method to displace"}], "description": "Wrapper for a displaced method with aop enabled"}], "namespace": "", "module": "event-custom", "guessedname": "Method", "methods": {"register": {"params": [{"type": "string", "name": "sid", "description": "  the subscriber id"}, {"type": "Function", "name": "fn", "description": "  the function to execute"}, {"type": "string", "name": "when", "description": "  when to execute the function"}], "description": "Register a aop subscriber", "guessedname": "register", "guessedtype": "function"}, "exec": {"description": "Execute the wrapped method", "guessedname": "exec", "guessedtype": "function"}, "delete": {"params": [{"type": "string", "name": "sid", "description": "  the subscriber id"}, {"type": "Function", "name": "fn", "description": "  the function to execute"}, {"type": "string", "name": "when", "description": "  when to execute the function"}], "description": "Unregister a aop subscriber", "guessedname": "_delete", "guessedtype": "function"}}, "file": "event-do.js", "guessedtype": "function", "shortname": "Do.Method", "description": "Wrapper for a displaced method with aop enabled"}, "AutoCompleteBase": {"name": "AutoCompleteBase", "configs": {"value": {"default": "''", "type": "String", "description": "Current value of the input node.", "guessedname": "value", "guessedtype": "property"}, "minQueryLength": {"default": "1", "type": "Number", "description": "Minimum number of characters that must be entered before a\n<code>query</code> event will be fired. A value of <code>0</code>\nallows empty queries; a negative value will effectively disable all\n<code>query</code> events.", "guessedname": "minQueryLength", "guessedtype": "property"}, "tokenInput": {"readonly": "", "type": "Plugin.TokenInput", "description": "If the <code>inputNode</code> specified at instantiation time has a\n<code>node-tokeninput</code> plugin attached to it, this attribute will\nbe a reference to the <code>Y.Plugin.TokenInput</code> instance.", "guessedname": "tokenInput", "guessedtype": "property"}, "yqlProtocol": {"default": "'http'", "type": "String", "description": "URL protocol to use when the <code>source</code> is set to a YQL query.", "guessedname": "yqlProtocol", "guessedtype": "property"}, "resultFilters": {"default": "[]", "type": "Array", "description": "<p>\nArray of local result filter functions. If provided, each filter\nwill be called with two arguments when results are received: the query\nand an array of result objects. See the documentation for the\n<code>results</code> event for a list of the properties available on each\nresult object.\n</p>\n<p>\nEach filter is expected to return a filtered or modified version of the\nresults array, which will then be passed on to subsequent filters, then\nthe <code>resultHighlighter</code> function (if set), then the\n<code>resultFormatter</code> function (if set), and finally to\nsubscribers to the <code>results</code> event.\n</p>\n<p>\nIf no <code>source</code> is set, result filters will not be called.\n</p>\n<p>\nPrepackaged result filters provided by the autocomplete-filters and\nautocomplete-filters-accentfold modules can be used by specifying the\nfilter name as a string, such as <code>'phraseMatch'</code> (assuming\nthe necessary filters module is loaded).\n</p>", "guessedname": "resultFilters", "guessedtype": "property"}, "resultHighlighter": {"type": "Function|null", "description": "<p>\nFunction which will be used to highlight results. If provided, this\nfunction will be called with two arguments after results have been\nreceived and filtered: the query and an array of filtered result objects.\nThe highlighter is expected to return an array of highlighted result\ntext in the form of HTML strings.\n</p>\n<p>\nSee the documentation for the <code>results</code> event for a list of\nthe properties available on each result object.\n</p>\n<p>\nIf no <code>source</code> is set, the highlighter will not be called.\n</p>", "guessedname": "resultHighlighter", "guessedtype": "property"}, "resultTextLocator": {"type": "Function|String|null", "description": "<p>\nLocator that should be used to extract a plain text string from a\nnon-string result item. The resulting text value will typically be the\nvalue that ends up being inserted into an input field or textarea when\nthe user of an autocomplete implementation selects a result.\n</p>\n<p>\nBy default, no locator is applied, and all results are assumed to be\nplain text strings. If all results are already plain text strings, you\ndon't need to define a locator.\n</p>\n<p>\nThe locator may be either a function (which will receive the raw result\nas an argument and must return a string) or a string representing an\nobject path, such as \"foo.bar.baz\" (which would return the value of\n<code>result.foo.bar.baz</code> if the result is an object).\n</p>\n<p>\nWhile <code>resultTextLocator</code> may be set to either a function or a\nstring, it will always be returned as a function that accepts a result\nargument and returns a string.\n</p>", "guessedname": "resultTextLocator", "guessedtype": "property"}, "results": {"description": "Current results, or an empty array if there are no results.", "default": "[]", "readonly": "", "guessedname": "results", "guessedtype": "property", "type": "Array"}, "maxResults": {"default": "0", "type": "Number", "description": "Maximum number of results to return. A value of <code>0</code> or less\nwill allow an unlimited number of results.", "guessedname": "maxResults", "guessedtype": "property"}, "queryDelimiter": {"default": "null", "type": "String|null", "description": "Query delimiter string. When a delimiter is configured, the input value\nwill be split on the delimiter, and only the last portion will be used in\nautocomplete queries and updated when the <code>query</code> attribute is\nmodified.", "guessedname": "queryDelimiter", "guessedtype": "property"}, "requestTemplate": {"default": "null", "type": "Function|String|null", "description": "<p>\nSource request template. This can be a function that accepts a query as a\nparameter and returns a request string, or it can be a string containing\nthe placeholder \"{query}\", which will be replaced with the actual\nURI-encoded query.\n</p>\n<p>\nWhile <code>requestTemplate</code> may be set to either a function or\na string, it will always be returned as a function that accepts a\nquery argument and returns a string.\n</p>", "guessedname": "requestTemplate", "guessedtype": "property"}, "resultFormatter": {"type": "Function|null", "description": "<p>\nFunction which will be used to format results. If provided, this function\nwill be called with two arguments after results have been received and\nfiltered: the query and an array of result objects. The formatter is\nexpected to return an array of HTML strings or Node instances containing\nthe desired HTML for each result.\n</p>\n<p>\nSee the documentation for the <code>results</code> event for a list of\nthe properties available on each result object.\n</p>\n<p>\nIf no <code>source</code> is set, the formatter will not be called.\n</p>", "guessedname": "resultFormatter", "guessedtype": "property"}, "source": {"type": "Array|DataSource|Object|String|null", "description": "<p>\nSource for autocomplete results. The following source types are\nsupported:\n</p>\n<dl>\n<dt>Array</dt>\n<dd>\n<p>\n<i>Example:</i> <code>['first result', 'second result', 'etc']</code>\n</p>\n<p>\nThe full array will be provided to any configured filters for each\nquery. This is an easy way to create a fully client-side autocomplete\nimplementation.\n</p>\n</dd>\n<dt>DataSource</dt>\n<dd>\n<p>\nA <code>DataSource</code> instance or other object that provides a\nDataSource-like <code>sendRequest</code> method. See the\n<code>DataSource</code> documentation for details.\n</p>\n</dd>\n<dt>Object</dt>\n<dd>\n<p>\n<i>Example:</i> <code>{foo: ['foo result 1', 'foo result 2'], bar: ['bar result']}</code>\n</p>\n<p>\nAn object will be treated as a query hashmap. If a property on the\nobject matches the current query, the value of that property will be\nused as the response.\n</p>\n<p>\nThe response is assumed to be an array of results by default. If the\nresponse is not an array, provide a <code>resultListLocator</code> to\nprocess the response and return an array.\n</p>\n</dd>\n<dt>String (JSONP URL)</dt>\n<dd>\n<p>\n<i>Example:</i> <code>'http://example.com/search?q={query}&callback={callback}'</code>\n</p>\n<p>\nIf a URL is provided, it will be used to make a JSONP request. The\n<code>{query}</code> placeholder will be replaced with the current\nquery, and the <code>{callback}</code> placeholder will be replaced with\nan internally-generated JSONP callback name. Both placeholders must\nappear in the URL, or the request will fail. An optional\n<code>{maxResults}</code> placeholder may also be provided, and will\nbe replaced with the value of the maxResults attribute (or 1000 if\nthe maxResults attribute is 0 or less).\n</p>\n<p>\nThe response is assumed to be an array of results by default. If the\nresponse is not an array, provide a <code>resultListLocator</code> to\nprocess the response and return an array.\n</p>\n<p>\n<strong>The <code>jsonp</code> module must be loaded in order for URL\nsources to work.</strong> If the <code>jsonp</code> module is not\nalready loaded, it will be loaded on demand if possible.\n</p>\n</dd>\n<dt>String (YQL query)</dt>\n<dd>\n<p>\n<i>Example:</i> <code>'select * from search.suggest where query=\"{query}\"'</code>\n</p>\n<p>\nIf a YQL query is provided, it will be used to make a YQL request.\nThe <code>{query}</code> placeholder will be replaced with the\ncurrent autocomplete query. This placeholder must appear in the YQL\nquery, or the request will fail. An optional\n<code>{maxResults}</code> placeholder may also be provided, and will\nbe replaced with the value of the maxResults attribute (or 1000 if\nthe maxResults attribute is 0 or less).\n</p>\n<p>\n<strong>The <code>yql</code> module must be loaded in order for YQL\nsources to work.</strong> If the <code>yql</code> module is not\nalready loaded, it will be loaded on demand if possible.\n</p>\n</dd>\n</dl>\n<p>\nAs an alternative to providing a source, you could also simply listen for\n<code>query</code> events and handle them any way you see fit. Providing\na source is optional, but will usually be simpler.\n</p>", "guessedname": "source", "guessedtype": "property"}, "query": {"description": "<p>\nCurrent query, or <code>null</code> if there is no current query.\n</p>\n<p>\nThe query might not be the same as the current value of the input\nnode, both for timing reasons (due to <code>queryDelay</code>) and\nbecause when one or more <code>queryDelimiter</code> separators are\nin use, only the last portion of the delimited input string will be\nused as the query value.\n</p>", "default": "null", "readonly": "", "guessedname": "query", "guessedtype": "property", "type": "String|null"}, "inputNode": {"guessedtype": "property", "type": "Node|HTMLElement|String", "description": "Node to monitor for changes, which will generate <code>query</code>\nevents when appropriate. May be either an input field or a textarea.", "guessedname": "inputNode", "writeonce": ""}, "queryDelay": {"default": "100", "type": "Number", "description": "<p>\nNumber of milliseconds to delay after input before triggering a\n<code>query</code> event. If new input occurs before this delay is\nover, the previous input event will be ignored and a new delay will\nbegin.\n</p>\n<p>\nThis can be useful both to throttle queries to a remote data source\nand to avoid distracting the user by showing them less relevant\nresults before they've paused their typing.\n</p>", "guessedname": "queryDelay", "guessedtype": "property"}, "allowBrowserAutocomplete": {"default": "false", "type": "Boolean", "description": "Whether or not to enable the browser's built-in autocomplete\nfunctionality for input fields.", "guessedname": "allowBrowserAutocomplete", "guessedtype": "property"}, "resultListLocator": {"type": "Function|String|null", "description": "<p>\nLocator that should be used to extract an array of results from a\nnon-array response.\n</p>\n<p>\nBy default, no locator is applied, and all responses are assumed to be\narrays by default. If all responses are already arrays, you don't need to\ndefine a locator.\n</p>\n<p>\nThe locator may be either a function (which will receive the raw response\nas an argument and must return an array) or a string representing an\nobject path, such as \"foo.bar.baz\" (which would return the value of\n<code>result.foo.bar.baz</code> if the response is an object).\n</p>\n<p>\nWhile <code>resultListLocator</code> may be set to either a function or a\nstring, it will always be returned as a function that accepts a response\nargument and returns an array.\n</p>", "guessedname": "resultListLocator", "guessedtype": "property"}}, "namespace": "", "module": "autocomplete", "guessedname": "Escape", "methods": {"_defQueryFn": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "description": "Default <code>query</code> event handler. Sets the <code>query</code>\nproperty and sends a request to the source if one is configured.", "guessedname": "_defQueryFn", "guessedtype": "function"}, "_createStringSource": {"return": {"type": "Object", "description": "DataSource-like object."}, "description": "Creates a DataSource-like object that calls the specified JSONP\nURL or executes the specified YQL query for results. If the string starts\nwith \"select \", \"use \", or \"set \" (case-insensitive), it's assumed to be\na YQL query; otherwise, it's assumed to be a URL (which may be absolute\nor relative). See the <code>source</code> attribute for more details.", "protected": "", "params": [{"type": "String", "name": "source", "description": " JSONP URL or YQL query."}], "guessedname": "_createStringSource", "guessedtype": "function"}, "_setResultFilters": {"return": {"type": "Array", "description": "Array of filter functions (empty if <i>filters</i> is\n<code>null</code>)."}, "description": "Setter for the <code>resultFilters</code> attribute.", "protected": "", "params": [{"type": "Array|Function|String|null", "name": "filters", "description": " <code>null</code>, a filter\nfunction, an array of filter functions, or a string or array of strings\nrepresenting the names of methods on\n<code>Y.AutoCompleteFilters</code>."}], "guessedname": "_setResultFilters", "guessedtype": "function"}, "sendRequest": {"chainable": "", "params": [{"type": "String", "name": "query", "description": " (optional) Query to send. If specified, the\n<code>query</code> attribute will be set to this query. If not\nspecified, the current value of the <code>query</code> attribute will\nbe used."}, {"type": "Function", "name": "requestTemplate", "description": " (optional) Request template function.\nIf not specified, the current value of the <code>requestTemplate</code>\nattribute will be used."}], "description": "<p>\nSends a request to the configured source. If no source is configured,\nthis method won't do anything.\n</p>\n<p>\nUsually there's no reason to call this method manually; it will be\ncalled automatically when user input causes a <code>query</code> event to\nbe fired. The only time you'll need to call this method manually is if\nyou want to force a request to be sent when no user input has occurred.\n</p>", "guessedname": "sendRequest", "guessedtype": "function"}, "_defaultYQLLocator": {"return": {"type": "Array", "description": ""}, "description": "Default resultListLocator used when a string-based YQL source is set and\nthe implementer hasn't already specified one.", "protected": "", "params": [{"type": "Object", "name": "response", "description": " YQL response object."}], "guessedname": "_defaultYQLLocator", "guessedtype": "function"}, "_createJSONPSource": {"return": {"type": "Object", "description": "DataSource-like object."}, "description": "Creates a DataSource-like object that uses the specified JSONPRequest\ninstance as a source. See the <code>source</code> attribute for more\ndetails.", "protected": "", "params": [{"type": "JSONPRequest", "name": "source", "description": ""}], "guessedname": "_createJSONPSource", "guessedtype": "function"}, "_destructorACBase": {"protected": "", "description": "Detaches AutoCompleteBase event listeners.", "guessedname": "_destructorACBase", "guessedtype": "function"}, "_onResponse": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "description": "Handles source responses and fires the <code>results</code> event.", "guessedname": "_onResponse", "guessedtype": "function"}, "_updateValue": {"protected": "", "params": [{"type": "String", "name": "newVal", "description": " New value."}], "description": "<p>\nUpdates the query portion of the <code>value</code> attribute.\n</p>\n<p>\nIf a query delimiter is defined, the last delimited portion of the input\nvalue will be replaced with the specified <i>value</i>.\n</p>", "guessedname": "_updateValue", "guessedtype": "function"}, "_jsonpFormatter": {"return": {"type": "String", "description": "Formatted URL"}, "description": "URL formatter passed to <code>JSONPRequest</code> instances.", "protected": "", "params": [{"type": "String", "name": "url", "description": ""}, {"type": "String", "name": "proxy", "description": ""}, {"type": "String", "name": "query", "description": ""}], "guessedname": "_jsonpFormatter", "guessedtype": "function"}, "_sourceSuccess": {"protected": "", "params": [{"type": "mixed", "name": "data", "description": " Response data."}, {"type": "Object", "name": "request", "description": " Request object."}], "description": "Shared success callback for non-DataSource sources.", "guessedname": "_sourceSuccess", "guessedtype": "function"}, "_parseValue": {"return": {"type": "String|null", "description": "query"}, "description": "<p>\nReturns the query portion of the specified input value, or\n<code>null</code> if there is no suitable query within the input value.\n</p>\n<p>\nIf a query delimiter is defined, the query will be the last delimited\npart of of the string.\n</p>", "protected": "", "params": [{"type": "String", "name": "value", "description": " Input value from which to extract the query."}], "guessedname": "_parseValue", "guessedtype": "function"}, "_defClearFn": {"protected": "", "description": "Default <code>clear</code> event handler. Sets the <code>results</code>\nproperty to an empty array and <code>query</code> to null.", "guessedname": "_defClearFn", "guessedtype": "function"}, "_setRequestTemplate": {"return": {"type": "Function|null", "description": ""}, "description": "Setter for the <code>requestTemplate</code> attribute.", "protected": "", "params": [{"type": "Function|String|null", "name": "template", "description": ""}], "guessedname": "_setRequestTemplate", "guessedtype": "function"}, "_functionValidator": {"protected": "", "params": [{"type": "Function|null", "name": "value", "description": " Value to validate."}], "description": "Returns <code>true</code> if <i>value</i> is either a function or\n<code>null</code>.", "guessedname": "_functionValidator", "guessedtype": "function"}, "_createObjectSource": {"return": {"type": "Object", "description": "DataSource-like object."}, "description": "Creates a DataSource-like object that looks up queries as properties on\nthe specified object, and returns the found value (if any) as a response.\nSee the <code>source</code> attribute for more details.", "protected": "", "params": [{"type": "Object", "name": "source", "description": ""}], "guessedname": "_createObjectSource", "guessedtype": "function"}, "_defResultsFn": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "description": "Default <code>results</code> event handler. Sets the <code>results</code>\nproperty to the latest results.", "guessedname": "_defResultsFn", "guessedtype": "function"}, "_syncUIACBase": {"protected": "", "description": "Synchronizes the UI state of the <code>inputNode</code>.", "guessedname": "_syncUIACBase", "guessedtype": "function"}, "_createArraySource": {"return": {"type": "Object", "description": "DataSource-like object."}, "description": "Creates a DataSource-like object that simply returns the specified array\nas a response. See the <code>source</code> attribute for more details.", "protected": "", "params": [{"type": "Array", "name": "source", "description": ""}], "guessedname": "_createArraySource", "guessedtype": "function"}, "_onInputValueChange": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "description": "Handles <code>valueChange</code> events on the input node and fires a\n<code>query</code> event when the input value meets the configured\ncriteria.", "guessedname": "_onInputValueChange", "guessedtype": "function"}, "_setLocator": {"return": {"type": "Function|null", "description": ""}, "description": "Setter for locator attributes.", "protected": "", "params": [{"type": "Function|String|null", "name": "locator", "description": ""}], "guessedname": "_setLocator", "guessedtype": "function"}, "_setSource": {"return": {"type": "DataSource|Object", "description": ""}, "description": "Setter for the <code>source</code> attribute. Returns a DataSource or\na DataSource-like object depending on the type of <i>source</i>.", "protected": "", "params": [{"type": "Array|DataSource|Object|String", "name": "source", "description": " AutoComplete source. See\nthe <code>source</code> attribute for details."}], "guessedname": "_setSource", "guessedtype": "function"}, "_setResultHighlighter": {"return": {"type": "Function|null", "description": ""}, "description": "Setter for the <code>resultHighlighter</code> attribute.", "protected": "", "params": [{"type": "Function|String|null", "name": "highlighter", "description": " <code>null</code>, a\nhighlighter function, or a string representing the name of a method on\n<code>Y.AutoCompleteHighlighters</code>."}], "guessedname": "_setResultHighlighter", "guessedtype": "function"}, "_bindUIACBase": {"protected": "", "description": "Attaches event listeners and behaviors.", "guessedname": "_bindUIACBase", "guessedtype": "function"}, "_getObjectValue": {"return": {"type": "mixed", "description": "Located value, or <code>undefined</code> if the value was\nnot found at the specified path."}, "description": "Faster and safer alternative to Y.Object.getValue(). Doesn't bother\ncasting the path to an array (since we already know it's an array) and\ndoesn't throw an error if a value in the middle of the object hierarchy\nis neither <code>undefined</code> nor an object.", "protected": "", "params": [{"type": "Object", "name": "obj", "description": ""}, {"type": "Array", "name": "path", "description": ""}], "guessedname": "_getObjectValue", "guessedtype": "function"}, "_afterValueChange": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "description": "Handles change events for the <code>value</code> attribute.", "guessedname": "_afterValueChange", "guessedtype": "function"}, "_syncBrowserAutocomplete": {"protected": "", "description": "Synchronizes the UI state of the <code>allowBrowserAutocomplete</code>\nattribute.", "guessedname": "_syncBrowserAutocomplete", "guessedtype": "function"}, "_createYQLSource": {"return": {"type": "Object", "description": "DataSource-like object."}, "description": "Creates a DataSource-like object that uses the specified YQL query string\nto create a YQL-based source. See the <code>source</code> attribute for\ndetails. If no <code>resultListLocator</code> is defined, this method\nwill set a best-guess locator that might work for many typical YQL\nqueries.", "protected": "", "params": [{"type": "String", "name": "source", "description": " YQL query."}], "guessedname": "_createYQLSource", "guessedtype": "function"}, "_parseResponse": {"protected": "", "params": [{"type": "String", "name": "query", "description": " Query that generated these results."}, {"type": "Object", "name": "response", "description": " Response containing results."}, {"type": "Object", "name": "data", "description": " Raw response data."}], "description": "Parses result responses, performs filtering and highlighting, and fires\nthe <code>results</code> event.", "guessedname": "_parseResponse", "guessedtype": "function"}}, "file": "autocomplete-base.js", "guessedtype": "property", "shortname": "AutoCompleteBase", "events": {"valueChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "valueChange", "description": "Fires when the value for the configuration attribute 'value' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "queryDelimiterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "queryDelimiterChange", "description": "Fires when the value for the configuration attribute 'queryDelimiter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "inputNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "inputNodeChange", "description": "Fires when the value for the configuration attribute 'inputNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "yqlProtocolChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "yqlProtocolChange", "description": "Fires when the value for the configuration attribute 'yqlProtocol' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "sourceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "sourceChange", "description": "Fires when the value for the configuration attribute 'source' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "clear": {"preventable": "_defClearFn", "params": [{"type": "EventFacade", "name": "e", "description": " Event facade with the following additional\nproperties:\n<dl>\n<dt>prevVal (String)</dt>\n<dd>\nValue of the query before it was cleared.\n</dd>\n</dl>"}], "description": "Fires after the query has been completely cleared or no longer meets the\nminimum query length requirement."}, "queryChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "queryChange", "description": "Fires when the value for the configuration attribute 'query' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "results": {"preventable": "_defResultsFn", "params": [{"type": "EventFacade", "name": "e", "description": " Event facade with the following additional\nproperties:\n<dl>\n<dt>data (Array|Object)</dt>\n<dd>\nRaw, unfiltered result data (if available).\n</dd>\n<dt>query (String)</dt>\n<dd>\nQuery that generated these results.\n</dd>\n<dt>results (Array)</dt>\n<dd>\nArray of filtered, formatted, and highlighted results. Each item in\nthe array is an object with the following properties:\n<dl>\n<dt>display (Node|HTMLElement|String)</dt>\n<dd>\nFormatted result HTML suitable for display to the user. If no\ncustom formatter is set, this will be an HTML-escaped version of\nthe string in the <code>text</code> property.\n</dd>\n<dt>highlighted (String)</dt>\n<dd>\nHighlighted (but not formatted) result text. This property will\nonly be set if a highlighter is in use.\n</dd>\n<dt>raw (mixed)</dt>\n<dd>\nRaw, unformatted result in whatever form it was provided by the\n<code>source</code>.\n</dd>\n<dt>text (String)</dt>\n<dd>\nPlain text version of the result, suitable for being inserted\ninto the value of a text input field or textarea when the result\nis selected by a user. This value is not HTML-escaped and should\nnot be inserted into the page using innerHTML.\n</dd>\n</dl>\n</dd>\n</dl>"}], "description": "Fires after query results are received from the <code>source</code>. If\nsource has been set, this event will not fire."}, "requestTemplateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "requestTemplateChange", "description": "Fires when the value for the configuration attribute 'requestTemplate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resultListLocatorChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "resultListLocatorChange", "description": "Fires when the value for the configuration attribute 'resultListLocator' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resultsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "resultsChange", "description": "Fires when the value for the configuration attribute 'results' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resultFiltersChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "resultFiltersChange", "description": "Fires when the value for the configuration attribute 'resultFilters' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxResultsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxResultsChange", "description": "Fires when the value for the configuration attribute 'maxResults' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resultTextLocatorChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "resultTextLocatorChange", "description": "Fires when the value for the configuration attribute 'resultTextLocator' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "allowBrowserAutocompleteChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "allowBrowserAutocompleteChange", "description": "Fires when the value for the configuration attribute 'allowBrowserAutocomplete' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "minQueryLengthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minQueryLengthChange", "description": "Fires when the value for the configuration attribute 'minQueryLength' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "query": {"preventable": "_defQueryFn", "params": [{"type": "EventFacade", "name": "e", "description": " Event facade with the following additional\nproperties:\n<dl>\n<dt>inputValue (String)</dt>\n<dd>\nFull contents of the text input field or textarea that generated\nthe query.\n</dd>\n<dt>query (String)</dt>\n<dd>\nAutocomplete query. This is the string that will be used to\nrequest completion results. It may or may not be the same as\n<code>inputValue</code>.\n</dd>\n</dl>"}], "description": "Fires when the contents of the input field have changed and the input\nvalue meets the criteria necessary to generate an autocomplete query."}, "resultHighlighterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "resultHighlighterChange", "description": "Fires when the value for the configuration attribute 'resultHighlighter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "queryDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "queryDelayChange", "description": "Fires when the value for the configuration attribute 'queryDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resultFormatterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "resultFormatterChange", "description": "Fires when the value for the configuration attribute 'resultFormatter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tokenInputChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tokenInputChange", "description": "Fires when the value for the configuration attribute 'tokenInput' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "description": "<p>\nExtension that provides core autocomplete logic (but no UI implementation)\nfor a text input field or textarea.\n</p>\n<p>\nThe <code>AutoCompleteBase</code> class provides events and attributes that\nabstract away core autocomplete logic and configuration, but does not provide\na widget implementation or suggestion UI. For a prepackaged autocomplete\nwidget, see <code>AutoCompleteList</code>.\n</p>\n<p>\nThis extension cannot be instantiated directly, since it doesn't provide an\nactual implementation. It's intended to be mixed into a\n<code>Y.Base</code>-based class or widget.\n</p>\n<p>\n<code>Y.Widget</code>-based example:\n</p>\n<pre>\nYUI().use('autocomplete-base', 'widget', function (Y) {\n&nbsp;&nbsp;var MyAC = Y.Base.create('myAC', Y.Widget, [Y.AutoCompleteBase], {\n&nbsp;&nbsp;&nbsp;&nbsp;// Custom prototype methods and properties.\n&nbsp;&nbsp;}, {\n&nbsp;&nbsp;&nbsp;&nbsp;// Custom static methods and properties.\n&nbsp;&nbsp;});\n&nbsp;\n&nbsp;&nbsp;// Custom implementation code.\n});\n</pre>\n<p>\n<code>Y.Base</code>-based example:\n</p>\n<pre>\nYUI().use('autocomplete-base', function (Y) {\n&nbsp;&nbsp;var MyAC = Y.Base.create('myAC', Y.Base, [Y.AutoCompleteBase], {\n&nbsp;&nbsp;&nbsp;&nbsp;initializer: function () {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this._bindUIACBase();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this._syncUIACBase();\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;// Custom prototype methods and properties.\n&nbsp;&nbsp;}, {\n&nbsp;&nbsp;&nbsp;&nbsp;// Custom static methods and properties.\n&nbsp;&nbsp;});\n&nbsp;\n&nbsp;&nbsp;// Custom implementation code.\n});\n</pre>"}, "SliderValueRange": {"name": "SliderValueRange", "configs": {"max": {"default": "100", "type": "{ Number }", "description": "The value associated with the farthest bottom, right position of\nthe rail.  Can be less than the configured <code>min</code> if\nyou want values to increase from right-to-left or bottom-to-top.", "guessedname": "max", "guessedtype": "property"}, "value": {"default": "(inferred from current thumb position)", "type": "{ Number }", "description": "The value associated with the thumb's current position on the\nrail. Defaults to the value inferred from the thumb's current\nposition. Specifying value in the constructor will move the\nthumb to the position that corresponds to the supplied value.", "guessedname": "value", "guessedtype": "property"}, "min": {"default": "0", "type": "{ Number }", "description": "The value associated with the farthest top, left position of the\nrail.  Can be greater than the configured <code>max</code> if you\nwant values to increase from right-to-left or bottom-to-top.", "guessedname": "min", "guessedtype": "property"}}, "namespace": "", "module": "slider", "events": {"valueChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "valueChange", "description": "Fires when the value for the configuration attribute 'value' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "minChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minChange", "description": "Fires when the value for the configuration attribute 'min' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxChange", "description": "Fires when the value for the configuration attribute 'max' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"setValue": {"return": {"type": "Slider", "description": ""}, "description": "Updates the current value.  Override this if you want to introduce\ninput value parsing or preprocessing.  Otherwise equivalent to\nslider.set( \"value\", v );", "chainable": "", "params": [{"type": "Number", "name": "val", "description": "  The new value"}], "guessedname": "setValue", "guessedtype": "function"}, "_defThumbMoveFn": {"protected": "", "params": [{"type": " EventFacade ", "name": "e", "description": "  The host's thumbMove event"}], "description": "Dispatch the new position of the thumb into the value setting\noperations.", "guessedname": "_defThumbMoveFn", "guessedtype": "function"}, "_validateNewMax": {"return": {"type": " Boolean ", "description": "True for numbers.  False otherwise."}, "description": "Validates new values assigned to <code>max</code> attribute.  Numbers\nare acceptable.  Override this to enforce different rules.", "protected": "", "params": [{"type": " mixed ", "name": "value", "description": "  Value assigned to <code>max</code> attribute."}], "guessedname": "_validateNewMax", "guessedtype": "function"}, "_bindValueLogic": {"protected": "", "description": "Override of stub method in SliderBase that is called at the end of\nits bindUI stage of render().  Subscribes to internal events to\ntrigger UI and related state updates.", "guessedname": "_bindValueLogic", "guessedtype": "function"}, "_valueToOffset": {"return": {"type": " Number ", "description": "The pixel offset"}, "description": "Converts a value into a pixel offset for use in positioning\nthe thumb according to the reverse of the\n<code>_offsetToValue( xy )</code> operation.", "protected": "", "params": [{"type": " Number ", "name": "val", "description": "  The value to map to pixel X or Y position"}], "guessedname": "_valueToOffset", "guessedtype": "function"}, "_verifyValue": {"protected": "", "description": "Verifies that the current value is within the min - max range.  If\nnot, value is set to either min or max, depending on which is\ncloser.", "guessedname": "_verifyValue", "guessedtype": "function"}, "_setNewValue": {"return": {"type": " Number ", "description": "Normalized and constrained value"}, "description": "Restricts new values assigned to <code>value</code> attribute to be\nbetween the configured <code>min</code> and <code>max</code>.\nRounds to nearest integer value.", "protected": "", "params": [{"type": " Number ", "name": "value", "description": "  Value assigned to <code>value</code> attribute"}], "guessedname": "_setNewValue", "guessedtype": "function"}, "_syncThumbPosition": {"protected": "", "description": "Move the thumb to appropriate position if necessary.  Also resets\nthe cached offsets and recalculates the conversion factor to\ntranslate position to value.", "guessedname": "_syncThumbPosition", "guessedtype": "function"}, "_afterMaxChange": {"protected": "", "params": [{"type": " EventFacade ", "name": "e", "description": "  The <code>max</code> attribute change event."}], "description": "Update position according to new max value.  If the new max results\nin the current value being out of range, the value is set to the\ncloser of min or max.", "guessedname": "_afterMaxChange", "guessedtype": "function"}, "_validateNewMin": {"return": {"type": " Boolean ", "description": "True for numbers.  False otherwise."}, "description": "Validates new values assigned to <code>min</code> attribute.  Numbers\nare acceptable.  Override this to enforce different rules.", "protected": "", "params": [{"type": " mixed ", "name": "value", "description": "  Value assigned to <code>min</code> attribute."}], "guessedname": "_validateNewMin", "guessedtype": "function"}, "_afterValueChange": {"protected": "", "params": [{"type": " EventFacade ", "name": "e", "description": "  The <code>valueChange</code> event."}], "description": "Propagate change to the thumb position unless the change originated\nfrom the thumbMove event.", "guessedname": "_afterValueChange", "guessedtype": "function"}, "_setPosition": {"protected": "", "description": "Positions the thumb in accordance with the translated value.", "guessedname": "_setPosition", "guessedtype": "function"}, "_nearestValue": {"return": {"type": " Number ", "description": "Current min, max, or value if within range"}, "description": "Returns the nearest valid value to the value input.  If the provided\nvalue is outside the min - max range, accounting for min > max\nscenarios, the nearest of either min or max is returned.  Otherwise,\nthe provided value is returned.", "protected": "", "params": [{"type": " mixed ", "name": "value", "description": "  Value to test against current min - max range"}], "guessedname": "_nearestValue", "guessedtype": "function"}, "_calculateFactor": {"protected": "", "description": "Calculates and caches\n(range between max and min) / (rail length)\nfor fast runtime calculation of position -&gt; value.", "guessedname": "_calculateFactor", "guessedtype": "function"}, "_afterMinChange": {"protected": "", "params": [{"type": " EventFacade ", "name": "e", "description": "  The <code>min</code> attribute change event."}], "description": "Update position according to new min value.  If the new min results\nin the current value being out of range, the value is set to the\ncloser of min or max.", "guessedname": "_afterMinChange", "guessedtype": "function"}, "_offsetToValue": {"return": {"type": " mixed ", "description": "Value corresponding to the provided pixel offset"}, "description": "<p>Converts a pixel position into a value.  Calculates current\nthumb offset from the leading edge of the rail multiplied by the\nratio of <code>(max - min) / (constraining dim)</code>.</p>\n<p>Override this if you want to use a different value mapping\nalgorithm.</p>", "protected": "", "params": [{"type": " Number ", "name": "offset", "description": "  X or Y pixel offset"}], "guessedname": "_offsetToValue", "guessedtype": "function"}, "getValue": {"return": {"type": "Number", "description": ""}, "description": "Returns the current value.  Override this if you want to introduce\noutput formatting. Otherwise equivalent to slider.get( \"value\" );", "guessedname": "getValue", "guessedtype": "function"}, "_initSliderValueRange": {"protected": "", "description": "Stub for construction logic.  Override if extending this class and\nyou need to set something up during the initializer phase.", "guessedname": "_initSliderValueRange", "guessedtype": "function"}}, "file": "value-range.js", "shortname": "SliderValueRange", "properties": {"_factor": {"protected": "", "type": "{Number}", "description": "Factor used to translate value -&gt; position -&gt; value.", "guessedname": "_factor", "guessedtype": "property"}, "ATTRS": {"description": "Attributes that will be added onto host class.", "protected": "", "static": "", "guessedname": "ATTRS", "guessedtype": "property", "type": "{Object}"}}, "description": "One class of value algorithm that can be built onto SliderBase.  By default,\nvalues range between 0 and 100, but you can configure these on the\nbuilt Slider class by setting the <code>min</code> and <code>max</code>\nconfigurations.  Set the initial value (will cause the thumb to move to the\nappropriate location on the rail) in configuration as well if appropriate."}, "EventTarget": {"name": "EventTarget", "description": "EventTarget provides the implementation for any object to\npublish, subscribe and fire to custom events, and also\nalows other EventTargets to target the object with events\nsourced from the other object.\nEventTarget is designed to be used with Y.augment to wrap\nEventCustom in an interface that allows events to be listened to\nand fired by name.  This makes it possible for implementing code to\nsubscribe to an event that either has not been created yet, or will\nnot be created at all.", "namespace": "", "module": "event-custom", "guessedname": "L", "param": "opts a configuration object", "file": "event-target.js", "guessedtype": "property", "shortname": "EventTarget", "config": "emitFacade {boolean} if true, all events will emit event\nfacade payloads by default (default false)", "methods": {"on": {"return": {"type": "", "description": "the event target or a detach handle per 'chain' config"}, "params": [{"type": "string", "name": "type", "description": "       The type of the event"}, {"type": "Function", "name": "fn", "description": "  The callback"}, {"type": "object", "name": "context", "description": "  optional execution context."}, {"type": "mixed", "name": "arg*", "description": "  0..n additional arguments to supply to the subscriber"}], "description": "Subscribe to a custom event hosted by this object", "guessedname": "on", "guessedtype": "function"}, "detach": {"return": {"type": "EventTarget", "description": "the host"}, "params": [{"type": "string|Object", "name": "type", "description": "    Either the handle to the subscriber or the\ntype of event.  If the type\nis not specified, it will attempt to remove\nthe listener from all hosted events."}, {"type": "Function", "name": "fn", "description": "    The subscribed function to unsubscribe, if not\nsupplied, all subscribers will be removed."}, {"type": "Object", "name": "context", "description": "     The custom object passed to subscribe.  This is\noptional, but if supplied will be used to\ndisambiguate multiple listeners that are the same\n(e.g., you subscribe many object using a function\nthat lives on the prototype)"}], "description": "Detach one or more listeners the from the specified event", "guessedname": "detach", "guessedtype": "function"}, "getEvent": {"return": {"type": "CustomEvent", "description": "the custom event or null"}, "params": [{"type": "string", "name": "type", "description": "  the type, or name of the event"}, {"type": "string", "name": "prefixed", "description": "  if true, the type is prefixed already"}], "description": "Returns the custom event of the provided type has been created, a\nfalsy value otherwise", "guessedname": "getEvent", "guessedtype": "function"}, "_getType": {"private": "", "description": "If the instance has a prefix attribute and the\nevent type is not prefixed, the instance prefix is\napplied to the supplied type.", "guessedname": "_getType", "guessedtype": "function"}, "removeTarget": {"params": [{"type": "EventTarget", "name": "o", "description": "  the target to remove"}], "description": "Removes a bubble target", "guessedname": "removeTarget", "guessedtype": "function"}, "fire": {"return": {"type": "EventTarget", "description": "the event host"}, "params": [{"type": "String|Object", "name": "type", "description": "  The type of the event, or an object that contains\na 'type' property."}, {"type": "Object*", "name": "arguments", "description": "  an arbitrary set of parameters to pass to\nthe handler.  If the first of these is an object literal and the event is\nconfigured to emit an event facade, the event facade will replace that\nparameter after the properties the object literal contains are copied to\nthe event facade."}], "description": "Fire a custom event by name.  The callback functions will be executed\nfrom the context specified when the event was created, and with the\nfollowing parameters.\nIf the custom event object hasn't been created, then the event hasn't\nbeen published and it has no subscribers.  For performance sake, we\nimmediate exit in this case.  This means the event won't bubble, so\nif the intention is that a bubble target be notified, the event must\nbe published on this object first.\nThe first argument is the event type, and any additional arguments are\npassed to the listeners as parameters.  If the first of these is an\nobject literal, and the event is configured to emit an event facade,\nthat object is mixed into the event facade and the facade is provided\nin place of the original object.", "guessedname": "fire", "guessedtype": "function"}, "unsubscribeAll": {"deprecated": "use detachAll", "params": [{"type": "string", "name": "type", "description": "    The type, or name of the event"}], "description": "Removes all listeners from the specified event.  If the event type\nis not specified, all listeners from all hosted custom events will\nbe removed.", "guessedname": "unsubscribeAll", "guessedtype": "function"}, "after": {"return": {"type": "", "description": "the event target or a detach handle per 'chain' config"}, "params": [{"type": "string", "name": "type", "description": "       The type of the event"}, {"type": "Function", "name": "fn", "description": "  The callback"}, {"type": "object", "name": "context", "description": "  optional execution context."}, {"type": "mixed", "name": "arg*", "description": "  0..n additional arguments to supply to the subscriber"}], "description": "Subscribe to a custom event hosted by this object.  The\nsupplied callback will execute after any listeners add\nvia the subscribe method, and after the default function,\nif configured for the event, has executed.", "guessedname": "after", "guessedtype": "function"}, "getTargets": {"return": {"type": "", "description": "EventTarget[]"}, "description": "Returns an array of bubble targets for this object.", "guessedname": "getTargets", "guessedtype": "function"}, "publish": {"return": {"type": "CustomEvent", "description": "the custom event"}, "params": [{"type": "string", "name": "type", "description": "  the type, or name of the event"}, {"type": "object", "name": "opts", "description": "  optional config params.  Valid properties are:\n<ul>\n<li>\n'broadcast': whether or not the YUI instance and YUI global are notified when the event is fired (false)\n</li>\n<li>\n'bubbles': whether or not this event bubbles (true)\nEvents can only bubble if emitFacade is true.\n</li>\n<li>\n'context': the default execution context for the listeners (this)\n</li>\n<li>\n'defaultFn': the default function to execute when this event fires if preventDefault was not called\n</li>\n<li>\n'emitFacade': whether or not this event emits a facade (false)\n</li>\n<li>\n'prefix': the prefix for this targets events, e.g., 'menu' in 'menu:click'\n</li>\n<li>\n'fireOnce': if an event is configured to fire once, new subscribers after\nthe fire will be notified immediately.\n</li>\n<li>\n'async': fireOnce event listeners will fire synchronously if the event has already\nfired unless async is true.\n</li>\n<li>\n'preventable': whether or not preventDefault() has an effect (true)\n</li>\n<li>\n'preventedFn': a function that is executed when preventDefault is called\n</li>\n<li>\n'queuable': whether or not this event can be queued during bubbling (false)\n</li>\n<li>\n'silent': if silent is true, debug messages are not provided for this event.\n</li>\n<li>\n'stoppedFn': a function that is executed when stopPropagation is called\n</li>\n<li>\n'monitored': specifies whether or not this event should send notifications about\nwhen the event has been attached, detached, or published.\n</li>\n<li>\n'type': the event type (valid option if not provided as the first parameter to publish)\n</li>\n</ul>"}], "description": "Creates a new custom event of the specified type.  If a custom event\nby that name already exists, it will not be re-created.  In either\ncase the custom event is returned.", "guessedname": "publish", "guessedtype": "function"}, "detachAll": {"params": [{"type": "string", "name": "type", "description": "    The type, or name of the event"}], "description": "Removes all listeners from the specified event.  If the event type\nis not specified, all listeners from all hosted custom events will\nbe removed.", "guessedname": "detachAll", "guessedtype": "function"}, "subscribe": {"deprecated": "use on", "description": "subscribe to an event", "guessedname": "subscribe", "guessedtype": "function"}, "_monitor": {"private": "", "description": "This is the entry point for the event monitoring system.\nYou can monitor 'attach', 'detach', 'fire', and 'publish'.\nWhen configured, these events generate an event.  click ->\nclick_attach, click_detach, click_publish -- these can\nbe subscribed to like other events to monitor the event\nsystem.  Inividual published events can have monitoring\nturned on or off (publish can't be turned off before it\nit published) by setting the events 'monitor' config.", "guessedname": "_monitor", "guessedtype": "function"}, "unsubscribe": {"deprecated": "use detach", "description": "detach a listener", "guessedname": "unsubscribe", "guessedtype": "function"}, "before": {"return": {"type": "", "description": "detach handle"}, "description": "Executes the callback before a DOM event, custom event\nor method.  If the first argument is a function, it\nis assumed the target is a method.  For DOM and custom\nevents, this is an alias for Y.on.\nFor DOM and custom events:\ntype, callback, context, 0-n arguments\nFor methods:\ncallback, object (method host), methodName, context, 0-n arguments", "guessedname": "before", "guessedtype": "function"}, "addTarget": {"params": [{"type": "EventTarget", "name": "o", "description": "  the target to add"}], "description": "Registers another EventTarget as a bubble target.  Bubble order\nis determined by the order registered.  Multiple targets can\nbe specified.\nEvents can only bubble if emitFacade is true.\nIncluded in the event-custom-complex submodule.", "guessedname": "addTarget", "guessedtype": "function"}, "bubble": {"return": {"type": "boolean", "description": "the aggregated return value from Event.Custom.fire"}, "params": [{"type": "CustomEvent", "name": "evt", "description": "  the custom event to propagate"}], "description": "Propagate an event.  Requires the event-custom-complex module.", "guessedname": "bubble", "guessedtype": "function"}, "_parseType": {"private": "", "description": "Returns an array with the detach key (if provided),\nand the prefixed event name from _getType\nY.on('detachcategory| menu:click', fn)", "guessedname": "_parseType", "guessedtype": "function"}, "once": {"return": {"type": "", "description": "the event target or a detach handle per 'chain' config"}, "params": [{"type": "string", "name": "type", "description": "       The type of the event"}, {"type": "Function", "name": "fn", "description": "  The callback"}, {"type": "object", "name": "context", "description": "  optional execution context."}, {"type": "mixed", "name": "arg*", "description": "  0..n additional arguments to supply to the subscriber"}], "description": "Listen to a custom event hosted by this object one time.\nThis is the equivalent to <code>on</code> except the\nlistener is immediatelly detached when it is executed.", "guessedname": "once", "guessedtype": "function"}}}, "Selection": {"name": "Selection", "for": "Selection", "constructors": [{"description": "Wraps some common Selection/Range functionality into a simple object"}], "namespace": "", "module": "editor", "methods": {"wrapContent": {"return": {"type": "NodeList", "description": "A NodeList of all items in the selection."}, "params": [{"type": "String", "name": "tag", "description": " The tag to wrap all selected items with."}], "description": "Get all elements inside a selection and wrap them with a new element and return a NodeList of all elements touched.", "guessedname": "wrapContent", "guessedtype": "function"}, "focusCursor": {"return": {"type": "Node", "description": ""}, "description": "Gets a stored cursor and focuses it for editing, must be called sometime after setCursor", "guessedname": "focusCursor", "guessedtype": "function"}, "getText": {"return": {"type": "String", "description": "The string of text"}, "description": "Returns the innerHTML of a node with all HTML tags removed.", "static": "", "guessedname": "getText", "guessedtype": "function", "params": [{"type": "Node", "name": "node", "description": " The Node instance to remove the HTML from"}]}, "replace": {"return": {"type": "Node", "description": "The node inserted."}, "params": [{"type": "String", "name": "se", "description": " The string to search for."}, {"type": "String", "name": "re", "description": " The string of HTML to replace it with."}], "description": "Find and replace a string inside a text node and replace it with HTML focusing the node after \nto allow you to continue to type.", "guessedname": "replace", "guessedtype": "function"}, "insertAtCursor": {"return": {"type": "Node", "description": "The inserted Node."}, "params": [{"type": "String", "name": "html", "description": " The HTML to insert."}, {"type": "Node", "name": "node", "description": " The text node to break when inserting."}, {"type": "Number", "name": "offset", "description": " The left offset of the text node to break and insert the new content."}, {"type": "Boolean", "name": "collapse", "description": " Should the range be collapsed after insertion. default: false"}], "description": "Insert HTML at the current cursor position, this method gives you control over the text node to insert into and the offset where to put it.", "guessedname": "insertAtCursor", "guessedtype": "function"}, "removeCursor": {"return": {"type": "Node", "description": ""}, "params": [{"type": "Boolean", "name": "keep", "description": " Setting this to true will keep the node, but remove the unique parts that make it the cursor."}], "description": "Remove the cursor placeholder from the DOM.", "guessedname": "removeCursor", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Generic toString for logging.", "guessedname": "toString", "guessedtype": "function"}, "filterBlocks": {"static": "", "description": "Method attempts to replace all \"orphined\" text nodes in the main body by wrapping them with a <p>. Called from filter.", "guessedname": "filterBlocks", "guessedtype": "function"}, "cleanCursor": {"static": "", "description": "Called from Editor keydown to remove the \"extra\" space before the cursor.", "guessedname": "cleanCursor", "guessedtype": "function"}, "_wrapBlock": {"guessedname": "_wrapBlock", "static": "", "description": "Wraps an array of elements in a Block level tag", "private": "", "guessedtype": "function"}, "unfilter": {"static": "", "return": {"type": "String", "description": "The filtered HTML"}, "description": "Undoes what filter does enough to return the HTML from the Editor, then re-applies the filter.", "guessedname": "unfilter", "guessedtype": "function"}, "getCursor": {"return": {"type": "Node", "description": ""}, "description": "Get the placeholder in the DOM at the current cursor position.", "guessedname": "getCursor", "guessedtype": "function"}, "selectNode": {"return": {"type": "Y.Selection", "description": ""}, "description": "Select a Node (hilighting it).", "chainable": "", "params": [{"type": "Node", "name": "node", "description": " The node to select"}, {"type": "Boolean", "name": "collapse", "description": " Should the range be collapsed after insertion. default: false"}], "guessedname": "selectNode", "guessedtype": "function"}, "getSelected": {"return": {"type": "NodeList", "description": "A NodeList of all items in the selection."}, "description": "Get all the nodes in the current selection. This method will actually perform a filter first.\nThen it calls doc.execCommand('fontname', null, 'yui-tmp') to touch all nodes in the selection.\nThe it compiles a list of all nodes affected by the execCommand and builds a NodeList to return.", "guessedname": "getSelected", "guessedtype": "function"}, "setCursor": {"return": {"type": "Node", "description": ""}, "description": "Put a placeholder in the DOM at the current cursor position.", "guessedname": "setCursor", "guessedtype": "function"}, "resolve": {"return": {"type": "Node", "description": "The Resolved node"}, "description": "Resolve a node from the selection object and return a Node instance", "static": "", "guessedname": "resolve", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "n", "description": " The HTMLElement to resolve. Might be a TextNode, gives parentNode."}]}, "remove": {"chainable": "", "return": {"type": "Y.Selection", "description": ""}, "description": "Destroy the range.", "guessedname": "remove", "guessedtype": "function"}, "filter": {"static": "", "description": "Performs a prefilter on all nodes in the editor. Looks for nodes with a style: fontFamily or font face\nIt then creates a dynamic class assigns it and removed the property. This is so that we don't lose\nthe fontFamily when selecting nodes.", "guessedname": "filter", "guessedtype": "function"}, "_swap": {"return": {"type": "HTMLElement", "description": "The new node"}, "description": "Swap an element, with another element", "private": "", "params": [{"type": "HTMLElement", "name": "n", "description": " The node to swap"}, {"type": "String", "name": "tag", "description": " The tag to use when creating the new element."}], "guessedname": "_swap", "guessedtype": "function"}, "createRange": {"return": {"type": "RangeObject", "description": ""}, "description": "Wrapper for the different range creation methods.", "guessedname": "createRange", "guessedtype": "function"}, "_wrap": {"return": {"type": "HTMLElement", "description": "The wrapped node"}, "description": "Wrap an element, with another element", "private": "", "params": [{"type": "HTMLElement", "name": "n", "description": " The node to wrap"}, {"type": "String", "name": "tag", "description": " The tag to use when creating the new element."}], "guessedname": "_wrap", "guessedtype": "function"}, "insertContent": {"return": {"type": "Node", "description": "The inserted Node."}, "params": [{"type": "String", "name": "html", "description": " The HTML to insert."}], "description": "Insert HTML at the current cursor position and return a Node instance of the newly inserted element.", "guessedname": "insertContent", "guessedtype": "function"}}, "file": "selection.js", "shortname": "Selection", "properties": {"TMP": {"static": "", "description": "The temporary fontname applied to a selection to retrieve their values: yui-tmp", "guessedname": "TMP", "guessedtype": "property"}, "isCollapsed": {"type": "Boolean", "description": "Flag to show if the range is collapsed or not", "guessedname": "isCollapsed", "guessedtype": "property"}, "ALL": {"static": "", "description": "The selector to use when looking for Nodes to cache the value of: [style],font[face]", "guessedname": "ALL", "guessedtype": "property"}, "BLOCKS": {"static": "", "description": "The selector to use when looking for block level items.", "guessedname": "BLOCKS", "guessedtype": "property"}, "focusNode": {"type": "Node", "description": "A Node instance of the parentNode of the focusNode of the range", "guessedname": "focusNode", "guessedtype": "property"}, "anchorOffset": {"type": "Number", "description": "The offset from the range object", "guessedname": "anchorOffset", "guessedtype": "property"}, "focusTextNode": {"type": "Node", "description": "A Node instance of the actual textNode of the range.", "guessedname": "focusTextNode", "guessedtype": "property"}, "text": {"type": "String", "description": "Range text value", "guessedname": "text", "guessedtype": "property"}, "REG_NON": {"static": "", "description": "Regular Expression to determine if a string has a non-character in it", "guessedname": "REG_NON", "guessedtype": "property"}, "CURSOR": {"static": "", "description": "The default HTML used to focus the cursor..", "guessedname": "CURSOR", "guessedtype": "property"}, "REG_NOHTML": {"static": "", "description": "Regular Expression to remove all HTML from a string", "guessedname": "REG_NOHTML", "guessedtype": "property"}, "anchorTextNode": {"type": "Node", "description": "A Node instance of the actual textNode of the range.", "guessedname": "anchorTextNode", "guessedtype": "property"}, "REG_CHAR": {"static": "", "description": "Regular Expression to determine if a string has a character in it", "guessedname": "REG_CHAR", "guessedtype": "property"}, "anchorNode": {"type": "Node", "description": "A Node instance of the parentNode of the anchorNode of the range", "guessedname": "anchorNode", "guessedtype": "property"}, "focusOffset": {"type": "Number", "description": "The offset from the range object", "guessedname": "focusOffset", "guessedtype": "property"}, "DEFAULT_TAG": {"static": "", "description": "The default tag to use when creating elements: span", "guessedname": "DEFAULT_TAG", "guessedtype": "property"}, "CUR_WRAPID": {"static": "", "description": "The id used to wrap the inner space of the cursor position", "guessedname": "CUR_WRAPID", "guessedtype": "property"}, "_selection": {"private": "", "description": "The actual Selection/Range object", "guessedname": "_selection", "guessedtype": "property"}}, "description": "Wraps some common Selection/Range functionality into a simple object"}, "EditorBase": {"name": "EditorBase", "for": "EditorBase", "configs": {"content": {"description": "The content to load into the Editor Frame", "guessedname": "content", "guessedtype": "property"}, "defaultblock": {"type": "String", "description": "The default tag to use for block level items, defaults to: p", "guessedname": "defaultblock", "guessedtype": "property"}, "linkedcss": {"type": "String", "description": "An array of url's to external linked style sheets", "guessedname": "linkedcss", "guessedtype": "property"}, "dir": {"description": "The value of the dir attribute on the HTML element of the frame. Default: ltr", "guessedname": "dir", "guessedtype": "property"}, "extracss": {"type": "String", "description": "A string of CSS to add to the Head of the Editor", "guessedname": "extracss", "guessedtype": "property"}}, "constructors": [{"description": "Base class for Editor. Handles the business logic of Editor, no GUI involved only utility methods and events."}], "namespace": "", "module": "editor", "events": {"contentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "contentChange", "description": "Fires when the value for the configuration attribute 'content' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dirChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dirChange", "description": "Fires when the value for the configuration attribute 'dir' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "ready": {"type": "{Event.Custom}", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object."}], "description": "Fired after the frame is ready."}, "nodeChange": {"type": "{Event.Custom}", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific properties added:\n<dl>\n<dt>changedEvent</dt><dd>The event that caused the nodeChange</dd>\n<dt>changedNode</dt><dd>The node that was interacted with</dd>\n<dt>changedType</dt><dd>The type of change: mousedown, mouseup, right, left, backspace, tab, enter, etc..</dd>\n<dt>commands</dt><dd>The list of execCommands that belong to this change and the dompath that's associated with the changedNode</dd>\n<dt>classNames</dt><dd>An array of classNames that are applied to the changedNode and all of it's parents</dd>\n<dt>dompath</dt><dd>A sorted array of node instances that make up the DOM path from the changedNode to body.</dd>\n<dt>backgroundColor</dt><dd>The cascaded backgroundColor of the changedNode</dd>\n<dt>fontColor</dt><dd>The cascaded fontColor of the changedNode</dd>\n<dt>fontFamily</dt><dd>The cascaded fontFamily of the changedNode</dd>\n<dt>fontSize</dt><dd>The cascaded fontSize of the changedNode</dd>\n</dl>"}], "description": "Fired from mouseup & keyup."}, "extracssChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "extracssChange", "description": "Fires when the value for the configuration attribute 'extracss' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "linkedcssChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "linkedcssChange", "description": "Fires when the value for the configuration attribute 'linkedcss' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "defaultblockChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultblockChange", "description": "Fires when the value for the configuration attribute 'defaultblock' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "EditorBase", "methods": {"_onFrameActivate": {"private": "", "description": "Moves the cached selection bookmark back so IE can place the cursor in the right place.", "guessedname": "_onFrameActivate", "guessedtype": "function"}, "_afterFrameReady": {"private": "", "description": "After frame ready, bind mousedown & keyup listeners", "guessedname": "_afterFrameReady", "guessedtype": "function"}, "hide": {"chainable": "", "return": {"type": "EditorBase", "description": ""}, "description": "Handles the hiding of the Editor instance. Currently only handles the iframe", "guessedname": "hide", "guessedtype": "function"}, "render": {"return": {"type": "EditorBase", "description": ""}, "description": "Renders the Y.Frame to the passed node.", "chainable": "", "params": [{"type": "Selector/HTMLElement/Node", "name": "node", "description": " The node to append the Editor to"}], "guessedname": "render", "guessedtype": "function"}, "getInstance": {"return": {"type": "YUI", "description": "The YUI instance bound to the frame."}, "description": "Get the YUI instance of the frame", "guessedname": "getInstance", "guessedtype": "function"}, "copyStyles": {"params": [{"type": "Node", "name": "from", "description": " The Node instance to copy the styles from"}, {"type": "Node", "name": "to", "description": " The Node instance to copy the styles to"}], "description": "Copy certain styles from one node instance to another (used for new paragraph creation mainly)", "guessedname": "copyStyles", "guessedtype": "function"}, "execCommand": {"return": {"type": "Node/NodeList", "description": "The Node or Nodelist affected by the command. Only returns on override commands, not browser defined commands."}, "params": [{"type": "String", "name": "cmd", "description": " The command to pass: inserthtml, insertimage, bold"}, {"type": "String", "name": "val", "description": " The optional value of the command: Helvetica"}], "description": "Pass through to the frame.execCommand method", "guessedname": "execCommand", "guessedtype": "function"}, "show": {"chainable": "", "return": {"type": "EditorBase", "description": ""}, "description": "Handles the showing of the Editor instance. Currently only handles the iframe", "guessedname": "show", "guessedtype": "function"}, "FILTER_RGB": {"return": {"type": "", "description": "String"}, "description": "Converts an RGB color string to a hex color, example: rgb(0, 255, 0) converts to #00ff00", "static": "", "guessedname": "FILTER_RGB", "guessedtype": "function", "params": [{"type": "", "name": "String", "description": " css The CSS string containing rgb(#,#,#);"}]}, "focus": {"return": {"type": "EditorBase", "description": ""}, "description": "Focus the contentWindow of the iframe", "chainable": "", "params": [{"type": "Function", "name": "fn", "description": " Callback function to execute after focus happens"}], "guessedname": "focus", "guessedtype": "function"}, "_resolveChangedNode": {"guessedname": "_resolveChangedNode", "params": [{"type": "Node", "name": "n", "description": " The node to resolve"}], "description": "Resolves the e.changedNode in the nodeChange event if it comes from the document. If\nthe event came from the document, it will get the last child of the last child of the document\nand return that instead.", "private": "", "guessedtype": "function"}, "_onFrameMouseDown": {"private": "", "description": "Fires nodeChange event", "guessedname": "_onFrameMouseDown", "guessedtype": "function"}, "_defNodeChangeFn": {"guessedname": "_defNodeChangeFn", "params": [{"type": "Event", "name": "e", "description": " The event"}], "description": "The default handler for the nodeChange event.", "private": "", "guessedtype": "function"}, "_onFrameKeyUp": {"private": "", "description": "Fires nodeChange event for keyup on specific keys", "guessedname": "_onFrameKeyUp", "guessedtype": "function"}, "_onFrameKeyDown": {"private": "", "description": "Fires nodeChange event", "guessedname": "_onFrameKeyDown", "guessedtype": "function"}, "_onFrameKeyPress": {"private": "", "description": "Fires nodeChange event", "guessedname": "_onFrameKeyPress", "guessedtype": "function"}, "getContent": {"return": {"type": "String", "description": "The filtered content of the Editor"}, "description": "(Un)Filters the content of the Editor, cleaning YUI related code. //TODO better filtering", "guessedname": "getContent", "guessedtype": "function"}, "NORMALIZE_FONTSIZE": {"static": "", "description": "Pulls the fontSize from a node, then checks for string values (x-large, x-small)\nand converts them to pixel sizes. If the parsed size is different from the original, it calls\nnode.setStyle to update the node with a pixel size for normalization.", "guessedname": "NORMALIZE_FONTSIZE", "guessedtype": "function"}, "_onFrameMouseUp": {"private": "", "description": "Fires nodeChange event", "guessedname": "_onFrameMouseUp", "guessedtype": "function"}, "getDomPath": {"params": [{"type": "Node", "name": "node", "description": " The Node to start from"}], "description": "Walk the dom tree from this node up to body, returning a reversed array of parents.", "guessedname": "getDomPath", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "editor-base.js", "guessedtype": "function", "shortname": "EditorBase", "properties": {"_currentSelectionTimer": {"private": "", "description": "Holds the timer for selection clearing", "guessedname": "_currentSelectionTimer", "guessedtype": "property"}, "USE": {"type": "Array", "static": "", "description": "The default modules to use inside the Frame", "guessedname": "USE", "guessedtype": "property"}, "_currentSelectionClear": {"private": "", "description": "Flag to determine if we can clear the selection or not.", "guessedname": "_currentSelectionClear", "guessedtype": "property"}, "NAME": {"static": "", "description": "The Class Name: editorBase", "guessedname": "NAME", "guessedtype": "property"}, "frame": {"description": "Internal reference to the Y.Frame instance", "guessedname": "frame", "guessedtype": "property"}, "NC_KEYS": {"type": "Object", "static": "", "description": "Hash table of keys to fire a nodeChange event for.", "guessedname": "NC_KEYS", "guessedtype": "property"}, "_lastBookmark": {"private": "", "description": "Holder for the selection bookmark in IE.", "guessedname": "_lastBookmark", "guessedtype": "property"}, "TABKEY": {"static": "", "description": "The HTML markup to use for the tabkey", "guessedname": "TABKEY", "guessedtype": "property"}, "bq": {"description": "When executing execCommand 'indent or 'outdent' Webkit applies\na class to the BLOCKQUOTE that adds left/right margin to it\nThis strips that style so it is just a normal BLOCKQUOTE", "guessedname": "bq", "guessedtype": "property"}, "STRINGS.title": {"static": "", "description": "Title of frame document: Rich Text Editor", "guessedname": "title", "guessedtype": "property"}, "_currentSelection": {"private": "", "description": "Caches a copy of the selection for key events. Only creating the selection on keydown", "guessedname": "_currentSelection", "guessedtype": "property"}, "STRINGS": {"static": "", "description": "Editor Strings", "guessedname": "STRINGS", "guessedtype": "property"}, "TAG2CMD": {"static": "", "description": "A hash table of tags to their execcomand's", "guessedname": "TAG2CMD", "guessedtype": "property"}}, "description": "Base class for Editor. Handles the business logic of Editor, no GUI involved only utility methods and events."}, "Assert.ShouldError": {"name": "Assert.ShouldError", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}], "description": "ShouldError is subclass of Error that is thrown whenever\na test is expected to throw an error but doesn't."}], "namespace": "Assert", "module": "test", "guessedname": "ShouldError", "extends": "Assert.Error", "superclass": "Assert.Error", "file": "Assert.js", "guessedtype": "function", "shortname": "ShouldError", "properties": {"name": {"type": "String", "description": "The name of the error that occurred.", "guessedname": "name", "guessedtype": "property"}}, "description": "ShouldError is subclass of Error that is thrown whenever\na test is expected to throw an error but doesn't."}, "Do.AlterReturn": {"name": "Do.AlterReturn", "namespace": "", "module": "event-custom", "guessedname": "AlterReturn", "file": "event-do.js", "guessedtype": "function", "shortname": "Do.AlterReturn", "description": "Return an AlterReturn object when you want to change the result returned\nfrom the core method to the caller"}, "SyntheticEvent.Notifier": {"since": "3.2.0", "name": "SyntheticEvent.Notifier", "constructors": [{"params": [{"type": "EventHandle", "name": "handle", "description": "  the detach handle for the subscription to an\ninternal custom event used to execute the callback passed to\non(..) or delegate(..)"}, {"type": "Boolean", "name": "emitFacade", "description": "  take steps to ensure the first arg received by\nthe subscription callback is an event facade"}], "description": "<p>The triggering mechanism used by SyntheticEvents.</p>\n<p>Implementers should not instantiate these directly.  Use the Notifier\nprovided to the event's implemented <code>on(node, sub, notifier)</code> or\n<code>delegate(node, sub, notifier, filter)</code> methods.</p>"}], "namespace": "", "module": "event", "methods": {"fire": {"guessedname": "fire", "params": [{"type": "EventFacade|DOMEventFacade|Object|any", "name": "e", "description": "  (see description)"}, {"type": "any", "name": "arg*", "description": "  additional arguments received by all subscriptions"}], "description": "<p>Executes the subscription callback, passing the firing arguments as the\nfirst parameters to that callback. For events that are configured with\nemitFacade=true, it is common practice to pass the triggering DOMEventFacade\nas the first parameter.  Barring a proper DOMEventFacade or EventFacade\n(from a CustomEvent), a new EventFacade will be generated.  In that case, if\nfire() is called with a simple object, it will be mixed into the facade.\nOtherwise, the facade will be prepended to the callback parameters.</p>\n<p>For notifiers provided to delegate logic, the first argument should be an\nobject with a &quot;currentTarget&quot; property to identify what object to\ndefault as 'this' in the callback.  Typically this is gleaned from the\nDOMEventFacade or EventFacade, but if configured with emitFacade=false, an\nobject must be provided.  In that case, the object will be removed from the\ncallback parameters.</p>\n<p>Additional arguments passed during event subscription will be\nautomatically added after those passed to fire().</p>", "private": "", "guessedtype": "function"}}, "private": "", "file": "synthetic.js", "shortname": "SyntheticEvent.Notifier", "description": "<p>The triggering mechanism used by SyntheticEvents.</p>\n<p>Implementers should not instantiate these directly.  Use the Notifier\nprovided to the event's implemented <code>on(node, sub, notifier)</code> or\n<code>delegate(node, sub, notifier, filter)</code> methods.</p>"}, "Do.Prevent": {"name": "Do.Prevent", "namespace": "", "module": "event-custom", "guessedname": "Prevent", "file": "event-do.js", "guessedtype": "function", "shortname": "Do.Prevent", "description": "Return a Prevent object when you want to prevent the wrapped function\nfrom executing, but want the remaining listeners to execute"}, "Plugin.NodeFX": {"name": "Plugin.NodeFX", "namespace": "", "module": "anim", "guessedname": "NodeFX", "extends": "Base", "superclass": "Base", "file": "anim-node-plugin.js", "guessedtype": "function", "shortname": "Plugin.NodeFX", "description": "Binds an Anim instance to a Node instance"}, "Escape": {"name": "Escape", "since": "3.3.0", "namespace": "", "module": "escape", "guessedname": "HTML_CHARS", "methods": {"regex": {"return": {"type": "String", "description": "Escaped string."}, "description": "Returns a copy of the specified string with special regular expression\ncharacters escaped, allowing the string to be used safely inside a regex.\nThe following characters, and all whitespace characters, are escaped:\n<code>- # $ ^ * ( ) + [ ] { } | \\ , . ?</code>", "static": "", "guessedname": "regex", "guessedtype": "function", "params": [{"type": "String", "name": "string", "description": " String to escape."}]}, "html": {"return": {"type": "String", "description": "Escaped string."}, "description": "<p>\nReturns a copy of the specified string with special HTML characters\nescaped. The following characters will be converted to their\ncorresponding character entities:\n<code>&amp; &lt; &gt; &quot; &#x27; &#x2F; &#x60;</code>\n</p>\n<p>\nThis implementation is based on the\n<a href=\"http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet\">OWASP\nHTML escaping recommendations</a>. In addition to the characters\nin the OWASP recommendation, we also escape the <code>&#x60;</code>\ncharacter, since IE interprets it as an attribute delimiter when used in\ninnerHTML.\n</p>", "static": "", "guessedname": "html", "guessedtype": "function", "params": [{"type": "String", "name": "string", "description": " String to escape."}]}, "_htmlReplacer": {"description": "Regex replacer for HTML escaping.", "returns": "{String} HTML entity.", "protected": "", "static": "", "guessedname": "_htmlReplacer", "guessedtype": "function", "params": [{"type": "String", "name": "match", "description": " Matched character (must exist in HTML_CHARS)."}]}}, "static": "", "file": "escape.js", "guessedtype": "property", "shortname": "Escape", "description": "Provides utility methods for escaping strings."}, "CacheOffline": {"name": "CacheOffline", "constructors": [{"description": "Extends Cache utility with offline functionality."}], "namespace": "", "module": "cache", "events": {"expiresChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "expiresChange", "description": "Fires when the value for the configuration attribute 'expires' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "uniqueKeysChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "uniqueKeysChange", "description": "Fires when the value for the configuration attribute 'uniqueKeys' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "error": {"description": "Fired when an entry could not be added, most likely due to\nexceeded browser quota.\n<dl>\n<dt>error (Object)</dt> <dd>The error object.</dd>\n</dl>", "guessedname": "cacheOfflinePrototype", "guessedtype": "property"}, "sandboxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "sandboxChange", "description": "Fires when the value for the configuration attribute 'sandbox' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxChange", "description": "Fires when the value for the configuration attribute 'max' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"max": {"default": "null", "readonly": "", "description": "Disabled.", "guessedname": "max", "guessedtype": "property"}, "sandbox": {"description": "A string that must be passed in via the constructor.\nThis identifier is used to sandbox one cache instance's entries\nfrom another. Calling the cache instance's flush and length methods\nor get(\"entries\") will apply to only these sandboxed entries.", "default": "\"default\"", "initonly": "", "guessedname": "sandbox", "guessedtype": "property", "type": "String"}, "expires": {"default": "86400000 (one day)", "type": "Date | Number", "description": "Absolute Date when data expires or\nrelative number of milliseconds. Zero disables expiration.", "guessedname": "expires", "guessedtype": "property"}, "uniqueKeys": {"default": "true", "readonly": "", "description": "Always true for CacheOffline.", "guessedname": "uniqueKeys", "guessedtype": "property"}}, "methods": {"retrieve": {"return": {"type": "Object", "description": "Cached object with the properties request, response,\nand expires, or null."}, "params": [{"type": "Object", "name": "request", "description": "  Request object."}], "description": "Retrieves cached object for given request, if available.\nReturns null if there is no cache match.", "guessedname": "retrieve", "guessedtype": "function"}, "_setMax": {"protected": "", "description": "Always return null.", "guessedname": "_setMax", "guessedtype": "function"}, "_getEntries": {"protected": "", "description": "Gets all entries.", "guessedname": "_getEntries", "guessedtype": "function"}, "_defFlushFn": {"protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade object."}], "description": "Flushes cache.", "guessedname": "_defFlushFn", "guessedtype": "function"}, "add": {"params": [{"type": "Object", "name": "request", "description": "  Request value must be a String or JSON."}, {"type": "Object", "name": "response", "description": "  Response value must be a String or JSON."}], "description": "Adds a new entry to the cache of the format\n{request:request, response:response, cached:cached, expires: expires}."}, "_getSize": {"protected": "", "description": "Gets size.", "guessedname": "_getSize", "guessedtype": "function"}, "_defAddFn": {"protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>entry (Object)</dt> <dd>The cached entry.</dd>\n</dl>"}], "description": "Adds entry to cache.", "guessedname": "_defAddFn", "guessedtype": "function"}, "flushAll": {"static": "", "description": "Removes all items from all sandboxes. Useful if localStorage has\nexceeded quota. Only supported on browsers that implement HTML 5\nlocalStorage.", "guessedname": "flushAll", "guessedtype": "function"}}, "extends": "Cache", "superclass": "Cache", "file": "cache-offline.js", "shortname": "CacheOffline", "properties": {"NAME": {"description": "Class name.", "value": "\"cacheOffline\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Extends Cache utility with offline functionality."}, "UA": {"name": "UA", "namespace": "", "module": "yui", "methods": {"Env.parseUA": {"description": "Static method for parsing the UA string. Defaults to assigning it's value to Y.UA", "returns": "{Object} The Y.UA object", "static": "", "guessedname": "parseUA", "guessedtype": "function", "params": [{"type": "String", "name": "subUA", "description": " Parse this UA string instead of navigator.userAgent"}]}}, "static": "", "file": "yui-ua.js", "shortname": "UA", "properties": {"ipad": {"type": "float", "static": "", "description": "Detects Apple iPad's OS version", "guessedname": "ipad", "guessedtype": "property"}, "secure": {"type": "boolean", "static": "", "description": "Set to true if the page appears to be in SSL", "guessedname": "secure", "guessedtype": "property"}, "opera": {"type": "float", "static": "", "description": "Opera version number or 0.  Example: 9.2", "guessedname": "opera", "guessedtype": "property"}, "ie": {"type": "float", "static": "", "description": "Internet Explorer version number or 0.  Example: 6", "guessedname": "ie", "guessedtype": "property"}, "ipod": {"type": "float", "static": "", "description": "Detects Apples iPod's OS version", "guessedname": "ipod", "guessedtype": "property"}, "ios": {"type": "float", "static": "", "description": "General truthy check for iPad, iPhone or iPod", "guessedname": "ios", "guessedtype": "property"}, "webos": {"type": "float", "static": "", "description": "Detects Palms WebOS version", "guessedname": "webos", "guessedtype": "property"}, "air": {"type": "float", "description": "Adobe AIR version number or 0.  Only populated if webkit is detected.\nExample: 1.0", "guessedname": "air", "guessedtype": "property"}, "mobile": {"type": "string", "static": "", "description": "The mobile property will be set to a string containing any relevant\nuser agent information when a modern mobile browser is detected.\nCurrently limited to Safari on the iPhone/iPod Touch, Nokia N-series\ndevices with the WebKit-based browser, and Opera Mini.", "guessedname": "mobile", "guessedtype": "property"}, "caja": {"type": "float", "description": "Google Caja version number or 0.", "guessedname": "caja", "guessedtype": "property"}, "iphone": {"type": "float", "static": "", "description": "Detects Apple iPhone's OS version", "guessedname": "iphone", "guessedtype": "property"}, "webkit": {"type": "float", "static": "", "description": "AppleWebKit version.  KHTML browsers that are not WebKit browsers\nwill evaluate to 1, other browsers 0.  Example: 418.9\n<pre>\nSafari 1.3.2 (312.6): 312.8.1 <-- Reports 312.8 -- currently the\nlatest available for Mac OSX 10.3.\nSafari 2.0.2:         416     <-- hasOwnProperty introduced\nSafari 2.0.4:         418     <-- preventDefault fixed\nSafari 2.0.4 (419.3): 418.9.1 <-- One version of Safari may run\ndifferent versions of webkit\nSafari 2.0.4 (419.3): 419     <-- Tiger installations that have been\nupdated, but not updated\nto the latest patch.\nWebkit 212 nightly:   522+    <-- Safari 3.0 precursor (with native\nSVG and many major issues fixed).\nSafari 3.0.4 (523.12) 523.12  <-- First Tiger release - automatic\nupdate from 2.x via the 10.4.11 OS patch.\nWebkit nightly 1/2008:525+    <-- Supports DOMContentLoaded event.\nyahoo.com user agent hack removed.\n</pre>\nhttp://en.wikipedia.org/wiki/Safari_version_history", "guessedname": "webkit", "guessedtype": "property"}, "os": {"type": "string", "static": "", "description": "The operating system.  Currently only detecting windows or macintosh", "guessedname": "os", "guessedtype": "property"}, "android": {"type": "float", "static": "", "description": "Detects Googles Android OS version", "guessedname": "android", "guessedtype": "property"}, "gecko": {"type": "float", "static": "", "description": "Gecko engine revision number.  Will evaluate to 1 if Gecko\nis detected but the revision could not be found. Other browsers\nwill be 0.  Example: 1.8\n<pre>\nFirefox 1.0.0.4: 1.7.8   <-- Reports 1.7\nFirefox 1.5.0.9: 1.8.0.9 <-- 1.8\nFirefox 2.0.0.3: 1.8.1.3 <-- 1.81\nFirefox 3.0   <-- 1.9\nFirefox 3.5   <-- 1.91\n</pre>", "guessedname": "gecko", "guessedtype": "property"}, "chrome": {"type": "float", "static": "", "description": "Chrome will be detected as webkit, but this property will also\nbe populated with the Chrome version number", "guessedname": "chrome", "guessedtype": "property"}}, "description": "YUI user agent detection.\nDo not fork for a browser if it can be avoided.  Use feature detection when\nyou can.  Use the user agent as a last resort.  UA stores a version\nnumber for the browser engine, 0 otherwise.  This value may or may not map\nto the version number of the browser using the engine.  The value is\npresented as a float so that it can easily be used for boolean evaluation\nas well as for looking for a particular range of versions.  Because of this,\nsome of the granularity of the version info may be lost (e.g., Gecko 1.8.0.9\nreports 1.8)."}, "DataSourceJSONSchema": {"name": "DataSourceJSONSchema", "namespace": "", "module": "datasource", "guessedname": "DataSourceJSONSchema", "methods": {"_beforeDefDataFn\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n</dl>": {"protected": "", "description": "Parses raw data into a normalized response. To accommodate XHR responses,\nwill first look for data in data.responseText. Otherwise will just work\nwith data.", "guessedname": "_beforeDefDataFn", "guessedtype": "function"}, "initializer": {"guessedname": "initializer", "params": [{"type": "Object", "name": "config", "description": "  Config object."}], "description": "Internal init() handler.", "private": "", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "datasource-jsonschema.js", "guessedtype": "function", "shortname": "DataSourceJSONSchema", "properties": {"NS": {"description": "The namespace for the plugin. This will be the property on the host which\nreferences the plugin instance.", "value": "\"schema\"", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String", "final": ""}, "NAME": {"description": "Class name.", "value": "\"dataSourceJSONSchema\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Adds schema-parsing to the DataSource Utility."}, "WidgetParent": {"name": "WidgetParent", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " User configuration object."}], "description": "Widget extension providing functionality enabling a Widget to be a \nparent of another Widget.\n<p>In addition to the set of attributes supported by WidgetParent, the constructor\nconfiguration object can also contain a <code>children</code> which can be used\nto add child widgets to the parent during construction. The <code>children</code>\nproperty is an array of either child widget instances or child widget configuration \nobjects, and is sugar for the <a href=\"#method_add\">add</a> method. See the \n<a href=\"#method_add\">add</a> for details on the structure of the child widget \nconfiguration object."}], "namespace": "", "module": "widget-parent", "properties": {"_childrenContainer": {"description": "<p>By default WidgetParent will render it's children to the parent's content box.</p>\n<p>If the children need to be rendered somewhere else, the _childrenContainer property\ncan be set to the Node which the children should be rendered to. This property should be\nset before the _renderChildren method is invoked, ideally in your renderUI method, \nas soon as you create the element to be rendered to.</p>", "value": "The content box", "protected": "", "guessedname": "renderTo", "guessedtype": "property", "type": "Node"}}, "configs": {"selection": {"readonly": "", "type": "{Y.ArrayList|Widget}", "description": "Returns the currently selected child Widget.  If the \n<code>mulitple</code> attribte is set to <code>true</code> will \nreturn an Y.ArrayList instance containing the currently selected \nchildren.  If no children are selected, will return null.", "guessedname": "selection", "guessedtype": "property"}, "activeDescendant": {"readonly": "", "type": "Widget", "description": "Returns the Widget's currently focused descendant Widget.", "guessedname": "activeDescendant", "guessedtype": "property"}, "multiple": {"description": "Boolean indicating if multiple children can be selected at \nonce.  Whether or not multiple selection is enabled is always delegated\nto the value of the <code>multiple</code> attribute of the root widget\nin the object hierarchy.", "writeonce": "", "default": "false", "guessedname": "multiple", "guessedtype": "property", "type": "Boolean"}, "defaultChildType": {"type": "{String|Object}", "description": "String representing the default type of the children \nmanaged by this Widget.  Can also supply default type as a constructor\nreference.", "guessedname": "defaultChildType", "guessedtype": "property"}}, "methods": {"selectAll": {"description": "Selects all children.", "guessedname": "selectAll", "guessedtype": "function"}, "selectChild": {"params": [{"type": "Number", "name": "i", "description": " the index of the child to be selected"}], "description": "Selects the child at the given index (zero-based).", "guessedname": "selectChild", "guessedtype": "function"}, "_updateActiveDescendant": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The event facade for the attribute change."}], "description": "Attribute change listener for the <code>focused</code> \nattribute of child Widgets, responsible for setting the value of the \nparent's <code>activeDescendant</code> attribute.", "guessedname": "_updateActiveDescendant", "guessedtype": "function"}, "_bindUIParent": {"protected": "", "description": "Sets up DOM and CustomEvent listeners for the parent widget.\n<p>\nThis method in invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_bindUIParent", "guessedtype": "function"}, "_add": {"return": {"type": "Widget|Array", "description": "Successfully added Widget or Array containing the \nsuccessfully added Widget instance(s). If no children where added, will \nwill return undefined."}, "description": "Adds a Widget as a child.  If the specified Widget already\nhas a parent it will be removed from its current parent before\nbeing added as a child.", "protected": "", "params": [{"type": "Widget|Object", "name": "child", "description": "  The Widget instance, or configuration \nobject for the Widget to be added as a child."}, {"type": "Array", "name": "child", "description": "  Array of Widget instances, or configuration \nobjects for the Widgets to be added as a children."}, {"type": "Number", "name": "index", "description": "  (Optional.)  Number representing the position at \nwhich the child should be inserted."}], "guessedname": "_add", "guessedtype": "function"}, "_updateSelection": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The event facade for the attribute change."}], "description": "Attribute change listener for the <code>selected</code> \nattribute of child Widgets, responsible for setting the value of the \nparent's <code>selection</code> attribute.", "guessedname": "_updateSelection", "guessedtype": "function"}, "_afterParentSelectedChange": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The event facade for the attribute change."}], "description": "Attribute change listener for the <code>selected</code> \nattribute, responsible for syncing the selected state of all children to \nmatch that of their parent Widget.", "guessedname": "_afterParentSelectedChange", "guessedtype": "function"}, "_defRemoveChildFn": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": "  The Event object"}, {"type": "Widget", "name": "child", "description": "  The Widget instance to be removed."}, {"type": "Number", "name": "index", "description": "  Number representing the index of the Widget to \nbe removed."}], "description": "Default removeChild handler", "guessedname": "_defRemoveChildFn", "guessedtype": "function"}, "_afterDestroyChild": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The event facade for the attribute change."}], "description": "Destroy event listener for each child Widget, responsible for removing \nthe destroyed child Widget from the parent's internal array of children\n(_items property).", "guessedname": "_afterDestroyChild", "guessedtype": "function"}, "add": {"return": {"type": "Y.ArrayList", "description": "Y.ArrayList containing the successfully added \nWidget instance(s).  If no children where added, will return an empty \nY.ArrayList instance."}, "params": [{"type": "Widget|Object", "name": "child", "description": "  The Widget instance, or configuration \nobject for the Widget to be added as a child. The configuration object\nfor the child can include a <code>childType</code> property, which is either\na constructor function or a string which names a constructor function on the \nY instance (e.g. \"Tab\" would refer to Y.Tab) (<code>childType</code> used to be \nnamed <code>type</code>, support for which has been deprecated, but is still\nmaintained for backward compatibility. <code>childType</code> takes precedence\nover <code>type</code> if both are defined."}, {"type": "Array", "name": "child", "description": "  Array of Widget instances, or configuration \nobjects for the Widgets to be added as a children."}, {"type": "Number", "name": "index", "description": "  (Optional.)  Number representing the position at \nwhich the child should be inserted."}], "description": "Adds a Widget as a child.  If the specified Widget already\nhas a parent it will be removed from its current parent before\nbeing added as a child.", "guessedname": "add", "guessedtype": "function"}, "_afterActiveDescendantChange": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The event facade for the attribute change."}], "description": "Attribute change listener for the <code>activeDescendant</code> \nattribute, responsible for setting the value of the \nparent's <code>activeDescendant</code> attribute.", "guessedname": "_afterActiveDescendantChange", "guessedtype": "function"}, "_createChild": {"protected": "", "params": [{"type": "Object", "name": "config", "description": "  Object literal representing the configuration \nused to create an instance of a Widget."}], "description": "Creates an instance of a child Widget using the specified configuration.\nBy default Widget instances will be created of the type specified \nby the <code>defaultChildType</code> attribute.  Types can be explicitly\ndefined via the <code>childType</code> property of the configuration object\nliteral. The use of the <code>type</code> property has been deprecated, but \nwill still be used as a fallback, if <code>childType</code> is not defined,\nfor backwards compatibility.", "guessedname": "_createChild", "guessedtype": "function"}, "_uiAddChild": {"protected": "", "params": [{"type": "Widget", "name": "child", "description": "  The child Widget instance to render."}, {"type": "Object", "name": "parentNode", "description": "  The Node under which the \nchild Widget is to be rendered."}], "description": "Updates the UI in response to a child being added.", "guessedname": "_uiAddChild", "guessedtype": "function"}, "_setSelection": {"return": {"type": "Widget|Array", "description": "Widget or Array of Widget instances."}, "description": "Default setter for <code>selection</code> attribute changes.", "protected": "", "params": [{"type": "Widget|Array", "name": "child", "description": "  Widget or Array of Widget instances."}], "guessedname": "_setSelection", "guessedtype": "function"}, "_destroyChildren": {"protected": "", "description": "Destroys all child Widgets for the parent.\n<p>\nThis method is invoked before the destructor is invoked for the Widget \nclass using YUI's aop infrastructure.\n</p>", "guessedname": "_destroyChildren", "guessedtype": "function"}, "deselectAll": {"description": "Deselects all children.", "guessedname": "deselectAll", "guessedtype": "function"}, "_afterSelectionChange": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The event facade for the attribute change."}], "description": "Attribute change listener for the <code>selection</code> \nattribute, responsible for setting the value of the \nparent's <code>selected</code> attribute.", "guessedname": "_afterSelectionChange", "guessedtype": "function"}, "_renderChildren": {"protected": "", "description": "Renders all child Widgets for the parent.\n<p>\nThis method in invoked after renderUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_renderChildren", "guessedtype": "function"}, "_uiRemoveChild": {"protected": "", "params": [{"type": "Widget", "name": "child", "description": "  The child Widget instance to render."}], "description": "Updates the UI in response to a child being removed.", "guessedname": "_uiRemoveChild", "guessedtype": "function"}, "remove": {"return": {"type": "Widget", "description": "Widget instance that was successfully removed, otherwise\nundefined."}, "params": [{"type": "Number", "name": "index", "description": "  (Optional.)  Number representing the index of the \nchild to be removed."}], "description": "Removes the Widget from its parent.  Optionally, can remove\na child by specifying its index.", "guessedname": "remove", "guessedtype": "function"}, "removeAll": {"return": {"type": "Y.ArrayList", "description": "Y.ArrayList instance containing Widgets that were \nsuccessfully removed.  If no children where removed, will return an empty \nY.ArrayList instance."}, "description": "Removes all of the children from the Widget.", "guessedname": "removeAll", "guessedtype": "function"}, "_defAddChildFn": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": "  The Event object"}, {"type": "Widget", "name": "child", "description": "  The Widget instance, or configuration \nobject for the Widget to be added as a child."}, {"type": "Number", "name": "index", "description": "  Number representing the position at \nwhich the child will be inserted."}], "description": "Default addChild handler", "guessedname": "_defAddChildFn", "guessedtype": "function"}}, "uses": ["ArrayList"], "file": "Widget-Parent.js", "shortname": "WidgetParent", "events": {"defaultChildTypeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultChildTypeChange", "description": "Fires when the value for the configuration attribute 'defaultChildType' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "multipleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "multipleChange", "description": "Fires when the value for the configuration attribute 'multiple' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "addChild": {"preventable": "_defAddChildFn", "params": [{"type": "EventFacade", "name": "e", "description": " The Event Facade"}], "description": "Fires when a Widget is add as a child.  The event object will have a \n'child' property that returns a reference to the child Widget, as well \nas an 'index' property that returns a reference to the index specified \nwhen the add() method was called.\n<p>\nSubscribers to the \"on\" moment of this event, will be notified \nbefore a child is added.\n</p>\n<p>\nSubscribers to the \"after\" moment of this event, will be notified\nafter a child is added.\n</p>"}, "activeDescendantChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeDescendantChange", "description": "Fires when the value for the configuration attribute 'activeDescendant' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "selectionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "selectionChange", "description": "Fires when the value for the configuration attribute 'selection' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "removeChild": {"preventable": "_defRemoveChildFn", "params": [{"type": "EventFacade", "name": "e", "description": " The Event Facade"}], "description": "Fires when a child Widget is removed.  The event object will have a \n'child' property that returns a reference to the child Widget, as well \nas an 'index' property that returns a reference child's ordinal position.\n<p>\nSubscribers to the \"on\" moment of this event, will be notified \nbefore a child is removed.\n</p>\n<p>\nSubscribers to the \"after\" moment of this event, will be notified\nafter a child is removed.\n</p>"}}, "description": "Widget extension providing functionality enabling a Widget to be a \nparent of another Widget.\n<p>In addition to the set of attributes supported by WidgetParent, the constructor\nconfiguration object can also contain a <code>children</code> which can be used\nto add child widgets to the parent during construction. The <code>children</code>\nproperty is an array of either child widget instances or child widget configuration \nobjects, and is sugar for the <a href=\"#method_add\">add</a> method. See the \n<a href=\"#method_add\">add</a> for details on the structure of the child widget \nconfiguration object."}, "TabView": {"name": "TabView", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying tabview configuration properties."}], "description": "Provides a tabbed widget interface"}], "namespace": "", "module": "tabview", "guessedname": "TabView", "uses": ["WidgetParent"], "superclass": "Widget", "file": "tabview.js", "guessedtype": "property", "extends": "Widget", "shortname": "TabView", "description": "Provides a tabbed widget interface"}, "DOM": {"name": "DOM", "description": "Provides DOM helper methods.", "namespace": "", "module": "dom", "guessedname": "NODE_TYPE", "file": "dom.js", "guessedtype": "property", "shortname": "DOM", "methods": {"viewportRegion": {"return": {"type": "Object", "description": "Object literal containing the following about the visible region of the viewport: (top, right, bottom, left)"}, "description": "Returns an Object literal containing the following about the visible region of viewport: (top, right, bottom, left)", "guessedname": "viewportRegion", "guessedtype": "function"}, "getComputedStyle": {"return": {"type": "String", "description": "The computed value of the style property."}, "params": [{"type": "HTMLElement", "name": "An", "description": " HTMLElement to get the style from."}, {"type": "String", "name": "att", "description": " The style property to get."}], "description": "Returns the computed style for the given node.", "guessedname": "getComputedStyle", "guessedtype": "function"}, "addHTML": {"params": [{"type": "HTMLElement", "name": "node", "description": " The node to insert into"}, {"type": "String | HTMLElement | Array | HTMLCollection", "name": "content", "description": " The content to be inserted"}, {"type": "String | HTMLElement", "name": "where", "description": " Where to insert the content\nIf no \"where\" is given, content is appended to the node\nPossible values for \"where\"\n<dl>\n<dt>HTMLElement</dt>\n<dd>The element to insert before</dd>\n<dt>\"replace\"</dt>\n<dd>Replaces the existing HTML</dd>\n<dt>\"before\"</dt>\n<dd>Inserts before the existing HTML</dd>\n<dt>\"before\"</dt>\n<dd>Inserts content before the node</dd>\n<dt>\"after\"</dt>\n<dd>Inserts content after the node</dd>\n</dl>"}], "description": "Inserts content in a node at the given location", "guessedname": "addHTML", "guessedtype": "function"}, "getText": {"return": {"type": "String", "description": "The text content of the element (includes text of any descending elements)."}, "params": [{"type": "HTMLElement", "name": "element", "description": " The html element."}], "description": "Returns the text content of the HTMLElement.", "guessedname": "getText", "guessedtype": "property"}, "setStyle": {"params": [{"type": "HTMLElement", "name": "An", "description": " HTMLElement to apply the style to."}, {"type": "String", "name": "att", "description": " The style property to set."}, {"type": "String|Number", "name": "val", "description": " The value."}], "description": "Sets a style property for a given element.", "guessedname": "setStyle", "guessedtype": "function"}, "getX": {"return": {"type": "Int", "description": "The X position of the element"}, "params": [{"type": "", "name": "element", "description": " The target element"}], "description": "Gets the current X position of an element based on page coordinates. \nElement must be part of the DOM tree to have page coordinates\n(display:none or elements not appended return false).", "guessedname": "getX", "guessedtype": "function"}, "getY": {"return": {"type": "Int", "description": "The Y position of the element"}, "params": [{"type": "", "name": "element", "description": " The target element"}], "description": "Gets the current Y position of an element based on page coordinates. \nElement must be part of the DOM tree to have page coordinates\n(display:none or elements not appended return false).", "guessedname": "getY", "guessedtype": "function"}, "inRegion": {"return": {"type": "Boolean", "description": "True if in region, false if not."}, "params": [{"type": "Object} node2 The node to get the region from or an Object literal of the region\n$param {Boolean", "name": "all", "description": " Should all of the node be inside the region"}, {"type": "Object", "name": "altRegion", "description": " An object literal containing the region for this node if we already have the data (for performance i.e. DragDrop)"}], "description": "Check if any part of this node is in the passed region", "guessedname": "inRegion", "guessedtype": "function"}, "_getRegExp": {"return": {"type": "RegExp", "description": "An instance of RegExp"}, "description": "Memoizes dynamic regular expressions to boost runtime performance.", "private": "", "params": [{"type": "String", "name": "str", "description": " The string to convert to a regular expression."}, {"type": "String", "name": "flags", "description": " optional An optinal string of flags."}], "guessedname": "_getRegExp", "guessedtype": "function"}, "setWidth": {"params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element."}, {"type": "String|Int", "name": "size", "description": " The pixel height to size to"}], "description": "Sets the width of the element to the given size, regardless\nof box model, border, padding, etc.", "guessedname": "setWidth", "guessedtype": "function"}, "inViewportRegion": {"return": {"type": "Boolean", "description": "True if in region, false if not."}, "params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element."}, {"type": "Boolean", "name": "all", "description": " Should all of the node be inside the region"}, {"type": "Object", "name": "altRegion", "description": " An object literal containing the region for this node if we already have the data (for performance i.e. DragDrop)"}], "description": "Check if any part of this element is in the viewport", "guessedname": "inViewportRegion", "guessedtype": "function"}, "_bruteContains": {"return": {"type": "Boolean", "description": "Whether or not the element is or contains the needle."}, "description": "Brute force version of contains.\nUsed for browsers without contains support for non-HTMLElement Nodes (textNodes, etc).", "private": "", "params": [{"type": "HTMLElement", "name": "element", "description": " The containing html element."}, {"type": "HTMLElement", "name": "needle", "description": " The html element that may be contained."}], "guessedname": "_bruteContains", "guessedtype": "function"}, "byId": {"return": {"type": "HTMLElement | null", "description": "The HTMLElement with the id, or null if none found."}, "params": [{"type": "String", "name": "id", "description": " the id attribute"}, {"type": "Object", "name": "doc", "description": " optional The document to search. Defaults to current document"}], "description": "Returns the HTMLElement with the given ID (Wrapper for document.getElementById).", "guessedname": "byId", "guessedtype": "function"}, "create": {"return": {"type": "HTMLElement|DocumentFragment", "description": "returns a single HTMLElement \nwhen creating one node, and a documentFragment when creating\nmultiple nodes."}, "params": [{"type": "String", "name": "html", "description": " The markup used to create the element"}, {"type": "HTMLDocument", "name": "doc", "description": " An optional document context"}], "description": "Creates a new dom node using the provided markup string.", "guessedname": "create", "guessedtype": "function"}, "contains": {"return": {"type": "Boolean", "description": "Whether or not the element is or contains the needle."}, "params": [{"type": "HTMLElement", "name": "element", "description": " The containing html element."}, {"type": "HTMLElement", "name": "needle", "description": " The html element that may be contained."}], "description": "Determines whether or not one HTMLElement is or contains another HTMLElement.", "guessedname": "contains", "guessedtype": "function"}, "replaceClass": {"params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element"}, {"type": "String", "name": "oldClassName", "description": " the class name to be replaced"}, {"type": "String", "name": "newClassName", "description": " the class name that will be replacing the old class name"}], "description": "Replace a class with another class for a given element.\nIf no oldClassName is present, the newClassName is simply added.", "guessedname": "replaceClass", "guessedtype": "function"}, "winHeight": {"return": {"type": "Number", "description": "The current height of the viewport."}, "description": "Returns the inner height of the viewport (exludes scrollbar).", "guessedname": "winHeight", "guessedtype": "function"}, "setStyles": {"params": [{"type": "HTMLElement", "name": "node", "description": " An HTMLElement to apply the styles to."}, {"type": "Object", "name": "hash", "description": " An object literal of property:value pairs."}], "description": "Sets multiple style properties.", "guessedname": "setStyles", "guessedtype": "function"}, "intersect": {"return": {"type": "Object", "description": "Object literal containing the following intersection data: (top, right, bottom, left, area, yoff, xoff, inRegion)"}, "params": [{"type": "HTMLElement", "name": "element", "description": " The first element"}, {"type": "HTMLElement | Object", "name": "element2", "description": " The element or region to check the interect with"}, {"type": "Object", "name": "altRegion", "description": " An object literal containing the region for the first element if we already have the data (for performance i.e. DragDrop)"}], "description": "Find the intersect information for the passes nodes.", "guessedname": "intersect", "guessedtype": "function"}, "toggleClass": {"params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element"}, {"type": "String", "name": "className", "description": " the class name to be toggled"}, {"type": "Boolean", "name": "addClass", "description": " optional boolean to indicate whether class\nshould be added or removed regardless of current state"}], "description": "If the className exists on the node it is removed, if it doesn't exist it is added.", "guessedname": "toggleClass", "guessedtype": "function"}, "inDoc": {"return": {"type": "Boolean", "description": "Whether or not the element is attached to the document."}, "params": [{"type": "HTMLElement", "name": "element", "description": " The containing html element."}, {"type": "HTMLElement", "name": "doc", "description": " optional The document to check."}], "description": "Determines whether or not the HTMLElement is part of the document.", "guessedname": "inDoc", "guessedtype": "function"}, "swapXY": {"return": {"type": "Node", "description": ""}, "params": [{"type": "Node", "name": "node", "description": " The node to swap with"}, {"type": "Node", "name": "otherNode", "description": " The other node to swap with"}], "description": "Swap the xy position with another node", "guessedname": "swapXY", "guessedtype": "function"}, "addClass": {"params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element."}, {"type": "String", "name": "className", "description": " the class name to add to the class attribute"}], "description": "Adds a class name to a given DOM element.", "guessedname": "addClass", "guessedtype": "function"}, "setHeight": {"params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element."}, {"type": "String|Int", "name": "size", "description": " The pixel height to size to"}], "description": "Sets the height of the element to the given size, regardless\nof box model, border, padding, etc.", "guessedname": "setHeight", "guessedtype": "function"}, "winWidth": {"return": {"type": "Number", "description": "The current width of the viewport."}, "description": "Returns the inner width of the viewport (exludes scrollbar).", "guessedname": "winWidth", "guessedtype": "function"}, "removeClass": {"params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element."}, {"type": "String", "name": "className", "description": " the class name to remove from the class attribute"}], "description": "Removes a class name from a given element.", "guessedname": "removeClass", "guessedtype": "function"}, "docScrollY": {"return": {"type": "Number", "description": "The current amount the screen is scrolled vertically."}, "description": "Amount page has been scroll vertically", "guessedname": "docScrollY", "guessedtype": "function"}, "docScrollX": {"return": {"type": "Number", "description": "The current amount the screen is scrolled horizontally."}, "description": "Amount page has been scroll horizontally", "guessedname": "docScrollX", "guessedtype": "function"}, "docHeight": {"return": {"type": "Number", "description": "The current height of the document."}, "description": "Document height", "guessedname": "docHeight", "guessedtype": "function"}, "getStyle": {"params": [{"type": "HTMLElement", "name": "An", "description": " HTMLElement to get the style from."}, {"type": "String", "name": "att", "description": " The style property to get."}], "description": "Returns the current style value for the given property.", "guessedname": "getStyle", "guessedtype": "function"}, "setXY": {"params": [{"type": "", "name": "element", "description": " The target element"}, {"type": "Array", "name": "xy", "description": " Contains X & Y values for new position (coordinates are page-based)"}, {"type": "Boolean", "name": "noRetry", "description": " By default we try and set the position a second time if the first fails"}], "description": "Set the position of an html element in page coordinates.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "setXY", "guessedtype": "function"}, "_getWin": {"return": {"type": "Object", "description": "The window for the given element or the default window."}, "description": "returns the appropriate window.", "private": "", "params": [{"type": "HTMLElement", "name": "element", "description": " optional Target element."}], "guessedname": "_getWin", "guessedtype": "function"}, "setAttibute": {"params": [{"type": "String | HTMLElement", "name": "el", "description": " The target element for the attribute."}, {"type": "String", "name": "attr", "description": " The attribute to set."}, {"type": "String", "name": "val", "description": " The value of the attribute."}], "description": "Provides a normalized attribute interface.", "guessedname": "setAttribute", "guessedtype": "function"}, "setX": {"params": [{"type": "", "name": "element", "description": " The target element"}, {"type": "Int", "name": "x", "description": " The X values for new position (coordinates are page-based)"}], "description": "Set the X position of an html element in page coordinates, regardless of how the element is positioned.\nThe element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "setX", "guessedtype": "function"}, "setY": {"params": [{"type": "", "name": "element", "description": " The target element"}, {"type": "Int", "name": "y", "description": " The Y values for new position (coordinates are page-based)"}], "description": "Set the Y position of an html element in page coordinates, regardless of how the element is positioned.\nThe element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "setY", "guessedtype": "function"}, "getXY": {"return": {"type": "Array", "description": "The XY position of the element\nTODO: test inDocument/display?"}, "params": [{"type": "", "name": "element", "description": " The target element"}], "description": "Gets the current position of an element based on page coordinates. \nElement must be part of the DOM tree to have page coordinates\n(display:none or elements not appended return false).", "guessedname": "getXY", "guessedtype": "function"}, "elementByAxis": {"return": {"type": "HTMLElement | null", "description": "The matching element or null if none found."}, "params": [{"type": "HTMLElement", "name": "element", "description": " The html element."}, {"type": "String", "name": "axis", "description": " The axis to search (parentNode, nextSibling, previousSibling)."}, {"type": "Function", "name": "fn", "description": " optional An optional boolean test to apply."}, {"type": "Boolean", "name": "all", "description": " optional Whether all node types should be returned, or just element nodes.\nThe optional function is passed the current HTMLElement being tested as its only argument.\nIf no function is given, the first element is returned."}], "description": "Searches the element by the given axis for the first matching element.", "guessedname": "elementByAxis", "guessedtype": "function"}, "docWidth": {"return": {"type": "Number", "description": "The current width of the document."}, "description": "Document width", "guessedname": "docWidth", "guessedtype": "function"}, "region": {"return": {"type": "Object", "description": "Object literal containing the following about this element: (top, right, bottom, left)"}, "params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element."}], "description": "Returns an Object literal containing the following about this element: (top, right, bottom, left)", "guessedname": "region", "guessedtype": "function"}, "getAttibute": {"return": {"type": "String", "description": "The current value of the attribute."}, "params": [{"type": "String | HTMLElement", "name": "el", "description": " The target element for the attribute."}, {"type": "String", "name": "attr", "description": " The attribute to get."}], "description": "Provides a normalized attribute interface.", "guessedname": "getAttribute", "guessedtype": "function"}, "hasClass": {"return": {"type": "Boolean", "description": "Whether or not the element has the given class."}, "params": [{"type": "HTMLElement", "name": "element", "description": " The DOM element."}, {"type": "String", "name": "className", "description": " the class name to search for"}], "description": "Determines whether a DOM element has the given className.", "guessedname": "hasClass", "guessedtype": "function"}, "setText": {"params": [{"type": "HTMLElement", "name": "element", "description": " The html element."}, {"type": "String", "name": "content", "description": " The content to add."}], "description": "Sets the text content of the HTMLElement.", "guessedname": "setText", "guessedtype": "property"}, "_getDoc": {"return": {"type": "Object", "description": "The document for the given element or the default document."}, "description": "returns the appropriate document.", "private": "", "params": [{"type": "HTMLElement", "name": "element", "description": " optional Target element."}], "guessedname": "_getDoc", "guessedtype": "function"}}}, "YUI~array~invoke": {"name": "YUI~array~invoke", "namespace": "", "module": "collection", "methods": {"invoke": {"return": {"type": " Array ", "description": "All return values, indexed according to item index."}, "description": "<p>Execute a named method on an array of objects.  Items in the list that do\nnot have a function by that name will be skipped. For example,\n<code>Y.Array.invoke( arrayOfDrags, 'plug', Y.Plugin.DDProxy );</code></p>\n<p>The return values from each call are returned in an array.</p>", "static": "", "guessedname": "invoke", "guessedtype": "function", "params": [{"type": " Array ", "name": "items", "description": " Array of objects supporting the named method."}, {"type": " String ", "name": "name", "description": " the name of the method to execute on each item."}, {"type": " mixed ", "name": "args*", "description": " Any number of additional args are passed as\nparameters to the execution of the named method."}]}}, "file": "invoke.js", "shortname": "YUI~array~invoke", "description": "Adds the <code>Y.Array.invoke( items, methodName )</code> utility method."}, "Plugin.Flick": {"properties": {"Flick.SNAP_EASING": {"description": "The default easing to use for the bounce snap-back transition", "default": "'ease-out'", "static": "", "guessedname": "SNAP_EASING", "guessedtype": "property", "type": "String"}, "Flick.EASING": {"description": "The default easing to use for the main flick movement transition", "default": "'cubic-bezier(0, 0.1, 0, 1.0)'", "static": "", "guessedname": "EASING", "guessedtype": "property", "type": "String"}, "Flick.NAME": {"description": "The NAME of the Flick class. Used to prefix events generated\nby the plugin.", "default": "\"pluginFlick\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String"}, "Flick.VELOCITY_THRESHOLD": {"description": "The threshold used to determine when the decelerated velocity of the node\nis practically 0.", "default": "0.015", "static": "", "guessedname": "VELOCITY_THRESHOLD", "guessedtype": "property", "type": "Number"}, "Flick.SNAP_DURATION": {"description": "The duration to use for the bounce snap-back transition", "default": "400", "static": "", "guessedname": "SNAP_DURATION", "guessedtype": "property", "type": "Number"}, "Flick.NS": {"description": "The namespace for the plugin. This will be the property on the node, which will \nreference the plugin instance, when it's plugged in.", "default": "\"flick\"", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String"}, "Flick.CLASS_NAMES": {"type": "Object", "static": "", "description": "The default CSS class names used by the plugin", "guessedname": "CLASS_NAMES", "guessedtype": "property"}}, "name": "Plugin.Flick", "namespace": "Plugin", "module": "node-flick", "events": {"minVelocityChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minVelocityChange", "description": "Fires when the value for the configuration attribute 'minVelocity' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "durationChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "durationChange", "description": "Fires when the value for the configuration attribute 'duration' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "decelerationChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "decelerationChange", "description": "Fires when the value for the configuration attribute 'deceleration' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "bounceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "bounceChange", "description": "Fires when the value for the configuration attribute 'bounce' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "boundingBoxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "boundingBoxChange", "description": "Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "bounceDistanceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "bounceDistanceChange", "description": "Fires when the value for the configuration attribute 'bounceDistance' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "easingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "easingChange", "description": "Fires when the value for the configuration attribute 'easing' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"_bounce": {"guessedname": "_bounce", "params": [{"type": "Number", "name": "x", "description": " The offset value to constrain."}, {"type": "Number", "name": "max", "description": " The max offset value."}], "description": "Internal utility method to constrain the offset value\nbased on the bounce criteria.", "private": "", "guessedtype": "function"}, "_move": {"guessedname": "_move", "params": [{"type": "Number", "name": "x", "description": " The X offset position"}, {"type": "Number", "name": "y", "description": " The Y offset position"}, {"type": "Number", "name": "duration", "description": " The duration to use for the transition animation"}, {"type": "String", "name": "easing", "description": " The easing to use for the transition animation."}], "description": "Internal utility method to move the node to a given XY position,\nusing transitions, if specified.", "private": "", "guessedtype": "function"}, "setBounds": {"description": "Sets the min/max boundaries for the flick animation,\nbased on the boundingBox dimensions.", "guessedname": "setBounds", "guessedtype": "function"}, "_flickFrame": {"protected": "", "description": "Executes a single frame in the flick animation", "guessedname": "_flickAnim", "guessedtype": "function"}, "_killTimer": {"private": "", "description": "Stop the animation timer", "guessedname": "_killTimer", "guessedtype": "function"}, "initializer": {"params": [{"type": "Object", "name": "config", "description": " The user configuration for the plugin"}], "description": "The initializer lifecycle implementation.", "guessedname": "initializer", "guessedtype": "function"}, "_renderClasses": {"protected": "", "description": "Adds the CSS classes, necessary to set up overflow/position properties on the\nnode and boundingBox.", "guessedname": "_renderClasses", "guessedtype": "function"}, "_onFlick": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": "  The flick event facade, containing e.flick.distance, e.flick.velocity etc."}], "description": "The flick event listener. Kicks off the flick animation.", "guessedname": "_onFlick", "guessedtype": "function"}, "_setX": {"guessedname": "_setX", "params": [{"type": "Number", "name": "val", "description": ""}], "description": "Internal utility method to set the X offset position", "private": "", "guessedtype": "function"}, "_setY": {"guessedname": "_setY", "params": [{"type": "Number", "name": "val", "description": ""}], "description": "Internal utility method to set the Y offset position", "private": "", "guessedtype": "function"}, "_anim": {"guessedname": "_anim", "params": [{"type": "Number", "name": "x", "description": " The X offset position"}, {"type": "Number", "name": "y", "description": " The Y offset position"}, {"type": "Number", "name": "duration", "description": " The duration to use for the transition animation"}, {"type": "String", "name": "easing", "description": " The easing to use for the transition animation."}], "description": "Internal utility method to perform the transition step", "private": "", "guessedtype": "function"}}, "param": "{Object} config The initial attribute values for the plugin", "file": "NodeFlick.js", "shortname": "Flick", "configs": {"minVelocity": {"default": "0", "type": "Number", "description": "The minimum flick gesture velocity (px/ms) at which to trigger the flick response", "guessedname": "minVelocity", "guessedtype": "property"}, "bounce": {"default": "0.7", "type": "Number", "description": "Drag coefficient for intertial scrolling at the upper\nand lower boundaries of the scrollview. Set to 0 to \ndisable \"rubber-banding\".", "guessedname": "bounce", "guessedtype": "property"}, "duration": {"default": "null", "type": "Number", "description": "The custom duration to apply to the flick animation. By default,\nthe animation duration is controlled by the deceleration factor.", "guessedname": "duration", "guessedtype": "property"}, "deceleration": {"default": "0.98", "description": "Drag coefficent for inertial scrolling. The closer to 1 this\nvalue is, the less friction during scrolling.", "guessedname": "deceleration", "guessedtype": "property"}, "boundingBox": {"default": "parentNode", "type": "Node", "description": "The constraining box relative to which the flick animation and bounds should be calculated.", "guessedname": "boundingBox", "guessedtype": "property"}, "easing": {"default": "null", "type": "String", "description": "The custom transition easing to use for the flick animation. If not\nprovided defaults to internally to Flick.EASING, or Flick.SNAP_EASING based\non whether or not we're animating the flick or bounce step.", "guessedname": "easing", "guessedtype": "property"}, "bounceDistance": {"default": "150", "type": "Number", "description": "The bounce distance in pixels", "guessedname": "bounceDistance", "guessedtype": "property"}}, "description": "A plugin class which can be used to animate the motion of a node, in response to a flick gesture."}, "Cache": {"name": "Cache", "configs": {"max": {"default": "0", "type": "Number", "description": "Maximum number of entries the Cache can hold.\nSet to 0 to turn off caching.", "guessedname": "max", "guessedtype": "property"}, "entries": {"type": "Array", "description": "Cached entries.", "guessedname": "entries", "guessedtype": "property"}, "uniqueKeys": {"type": "Boolean", "description": "Validate uniqueness of stored keys. Default is false and\nis more performant.", "guessedname": "uniqueKeys", "guessedtype": "property"}, "expires": {"default": "0", "type": "Date | Number", "description": "Absolute Date when data expires or\nrelative number of milliseconds. Zero disables expiration.", "guessedname": "expires", "guessedtype": "property"}, "size": {"type": "Number", "description": "Number of entries currently cached.", "guessedname": "size", "guessedtype": "property"}}, "constructors": [{"description": "Base class for the YUI Cache utility."}], "namespace": "", "module": "cache", "events": {"sizeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "sizeChange", "description": "Fires when the value for the configuration attribute 'size' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "retrieve": {"params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>entry (Object)</dt> <dd>The retrieved entry.</dd>\n</dl>"}], "description": "Fired when an entry is retrieved from the cache."}, "entriesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "entriesChange", "description": "Fires when the value for the configuration attribute 'entries' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "uniqueKeysChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "uniqueKeysChange", "description": "Fires when the value for the configuration attribute 'uniqueKeys' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "flush": {"preventable": "_defFlushFn", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade object."}], "description": "Fired when the cache is flushed.", "guessedname": "defaultFn", "guessedtype": "property"}, "request": {"params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>request (Object)</dt> <dd>The request object.</dd>\n</dl>"}], "description": "Fired when an entry is requested from the cache."}, "add": {"preventable": "_defAddFn", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>entry (Object)</dt> <dd>The cached entry.</dd>\n</dl>"}], "description": "Fired when an entry is added.", "guessedname": "defaultFn", "guessedtype": "property"}, "maxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxChange", "description": "Fires when the value for the configuration attribute 'max' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "expiresChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "expiresChange", "description": "Fires when the value for the configuration attribute 'expires' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Cache", "methods": {"retrieve": {"return": {"type": "Object", "description": "Cached object with the properties request and response, or null."}, "params": [{"type": "Object", "name": "request", "description": "  Request object."}], "description": "Retrieves cached object for given request, if available, and refreshes\nentry in the cache. Returns null if there is no cache match.", "guessedname": "retrieve", "guessedtype": "function"}, "_setMax": {"protected": "", "description": "Sets max.", "guessedname": "_setMax", "guessedtype": "function"}, "_getEntries": {"protected": "", "description": "Gets all entries.", "guessedname": "_getEntries", "guessedtype": "function"}, "add": {"params": [{"type": "Object", "name": "request", "description": "  Request value."}, {"type": "Object", "name": "response", "description": "  Response value."}], "description": "Adds a new entry to the cache of the format\n{request:request, response:response, cached:cached, expires:expires}.\nIf cache is full, evicts the stalest entry before adding the new one.", "guessedname": "add", "guessedtype": "function"}, "destructor": {"description": "Internal destroy() handler.", "private": "", "guessedname": "destructor", "guessedtype": "function"}, "_defFlushFn": {"protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade object."}], "description": "Flushes cache.", "guessedname": "_defFlushFn", "guessedtype": "function"}, "_isMatch": {"return": {"type": "Boolean", "description": "True if current request matches given cached request, false otherwise."}, "description": "Default overridable method compares current request with given cache entry.\nReturns true if current request matches the cached request, otherwise\nfalse. Implementers should override this method to customize the\ncache-matching algorithm.", "protected": "", "params": [{"type": "Object", "name": "request", "description": "  Request object."}, {"type": "Object", "name": "entry", "description": "  Cached entry."}], "guessedname": "_isMatch", "guessedtype": "function"}, "flush": {"description": "Flushes cache.", "guessedname": "flush", "guessedtype": "function"}, "_getSize": {"protected": "", "description": "Gets size.", "guessedname": "_getSize", "guessedtype": "function"}, "initializer": {"guessedname": "initializer", "params": [{"type": "Object", "name": "config", "description": "  Config object."}], "description": "Internal init() handler.", "private": "", "guessedtype": "function"}, "_defAddFn": {"protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": "  Event Facade with the following properties:\n<dl>\n<dt>entry (Object)</dt> <dd>The cached entry.</dd>\n</dl>"}], "description": "Adds entry to cache.", "guessedname": "_defAddFn", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "cache-base.js", "guessedtype": "function", "shortname": "Cache", "properties": {"_entries": {"guessedname": "_entries", "type": "Object[]", "description": "Array of request/response objects indexed chronologically.", "private": "", "guessedtype": "property"}, "NAME": {"description": "Class name.", "value": "\"cache\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Base class for the YUI Cache utility."}, "DD.Delegate": {"name": "DD.Delegate", "configs": {"dragNode": {"type": "Node", "description": "Y.Node instance of the dd dragNode.", "guessedname": "dragNode", "guessedtype": "property"}, "container": {"type": "String", "description": "A selector query to get the container to listen for mousedown events on. All \"nodes\" should be a child of this container.", "guessedname": "container", "guessedtype": "property"}, "target": {"type": "Boolean", "description": "Should the items also be a drop target.", "guessedname": "target", "guessedtype": "property"}, "over": {"type": "Boolean", "description": "Is the mouse currently over the container", "guessedname": "over", "guessedtype": "property"}, "lastNode": {"type": "Node", "description": "Y.Node instance of the last item dragged.", "guessedname": "lastNode", "guessedtype": "property"}, "invalid": {"type": "String", "description": "A selector query to test a node to see if it's an invalid item.", "guessedname": "invalid", "guessedtype": "property"}, "handles": {"type": "Array", "description": "The handles config option added to the temp DD instance.", "guessedname": "handles", "guessedtype": "property"}, "dragConfig": {"type": "Object", "description": "The default config to be used when creating the DD instance.", "guessedname": "dragConfig", "guessedtype": "property"}, "currentNode": {"type": "Node", "description": "Y.Node instance of the dd node.", "guessedname": "currentNode", "guessedtype": "property"}, "nodes": {"type": "String", "description": "A selector query to get the children of the \"container\" to make draggable elements from.", "guessedname": "nodes", "guessedtype": "property"}}, "constructors": [{"description": "Provides the ability to drag multiple nodes under a container element using only one Y.DD.Drag instance as a delegate."}], "namespace": "DD", "module": "dd", "events": {"overChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "overChange", "description": "Fires when the value for the configuration attribute 'over' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "invalidChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "invalidChange", "description": "Fires when the value for the configuration attribute 'invalid' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "lastNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lastNodeChange", "description": "Fires when the value for the configuration attribute 'lastNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dragNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dragNodeChange", "description": "Fires when the value for the configuration attribute 'dragNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dragConfigChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dragConfigChange", "description": "Fires when the value for the configuration attribute 'dragConfig' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "currentNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "currentNodeChange", "description": "Fires when the value for the configuration attribute 'currentNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "handlesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "handlesChange", "description": "Fires when the value for the configuration attribute 'handles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodesChange", "description": "Fires when the value for the configuration attribute 'nodes' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "containerChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "containerChange", "description": "Fires when the value for the configuration attribute 'container' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "targetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "targetChange", "description": "Fires when the value for the configuration attribute 'target' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Delegate", "methods": {"_delMouseDown": {"guessedname": "_delMouseDown", "params": [{"type": "Event", "name": "e", "description": " The MouseDown Event."}], "description": "The callback for the Y.DD.Delegate instance used", "private": "", "guessedtype": "function"}, "syncTargets": {"chainable": "", "return": {"type": "Self", "description": ""}, "description": "Applies the Y.Plugin.Drop to all nodes matching the cont + nodes selector query.", "guessedname": "syncTargets", "guessedtype": "function"}, "createDrop": {"return": {"type": "", "description": "Node"}, "params": [{"type": "Node", "name": "node", "description": " The Node to apply the plugin to"}, {"type": "Array", "name": "groups", "description": " The default groups to assign this target to."}], "description": "Apply the Drop plugin to this node", "guessedname": "createDrop", "guessedtype": "function"}, "_afterDragEnd": {"guessedname": "_afterDragEnd", "params": [{"type": "Event", "name": "e", "description": " The Event."}], "description": "Listens for the drag:end event and updates the temp dd instance.", "private": "", "guessedtype": "function"}, "_onMouseEnter": {"guessedname": "_onMouseEnter", "params": [{"type": "Event", "name": "e", "description": " The MouseEnter Event"}], "description": "Sets the target shim state", "private": "", "guessedtype": "function"}, "_onNodeChange": {"guessedname": "_onNodeChange", "params": [{"type": "Event", "name": "e", "description": " The Event."}], "description": "Listens to the nodeChange event and sets the dragNode on the temp dd instance.", "private": "", "guessedtype": "function"}, "_onMouseLeave": {"guessedname": "_onMouseLeave", "params": [{"type": "Event", "name": "e", "description": " The MouseLeave Event"}], "description": "Resets the target shim state", "private": "", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "delegate.js", "guessedtype": "function", "shortname": "Delegate", "properties": {"_handles": {"private": "", "description": "Array of event handles to be destroyed", "guessedname": "_handles", "guessedtype": "property"}, "dd": {"description": "A reference to the temporary dd instance used under the hood.", "guessedname": "dd", "guessedtype": "property"}, "_shimState": {"private": "", "description": "The state of the Y.DD.DDM._noShim property to it can be reset.", "guessedname": "_shimState", "guessedtype": "property"}, "_bubbleTargets": {"private": "", "description": "The default bubbleTarget for this object. Default: Y.DD.DDM", "guessedname": "_bubbleTargets", "guessedtype": "property"}}, "description": "Provides the ability to drag multiple nodes under a container element using only one Y.DD.Drag instance as a delegate."}, "plugin.NodeMenuNav": {"name": "plugin.NodeMenuNav", "configs": {"submenuHideDelay": {"description": "Number indicating the time (in milliseconds) that should expire before a \nsubmenu is hidden when the user mouses out of a menu label heading in the \ndirection of a submenu.", "writeonce": "", "default": "250", "readonly": "", "guessedname": "submenuHideDelay", "guessedtype": "property", "type": "Number"}, "useARIA": {"description": "Boolean indicating if use of the WAI-ARIA Roles and States should be \nenabled for the menu.", "writeonce": "", "default": "true", "readonly": "", "guessedname": "useARIA", "guessedtype": "property", "type": "boolean"}, "autoSubmenuDisplay": {"description": "Boolean indicating if submenus are automatically made visible when the \nuser mouses over the menu's items.", "writeonce": "", "default": "true", "readonly": "", "guessedname": "autoSubmenuDisplay", "guessedtype": "property", "type": "boolean"}, "mouseOutHideDelay": {"description": "Number indicating the time (in milliseconds) that should expire before a \nsubmenu is hidden when the user mouses out of it.", "writeonce": "", "default": "750", "readonly": "", "guessedname": "mouseOutHideDelay", "guessedtype": "property", "type": "Number"}, "submenuShowDelay": {"description": "Number indicating the time (in milliseconds) that should expire before a \nsubmenu is made visible when the user mouses over the menu's label.", "writeonce": "", "default": "250", "readonly": "", "guessedname": "submenuShowDelay", "guessedtype": "property", "type": "Number"}}, "namespace": "plugin", "module": "node-menunav", "events": {"mouseOutHideDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "mouseOutHideDelayChange", "description": "Fires when the value for the configuration attribute 'mouseOutHideDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "autoSubmenuDisplayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "autoSubmenuDisplayChange", "description": "Fires when the value for the configuration attribute 'autoSubmenuDisplay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "submenuShowDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "submenuShowDelayChange", "description": "Fires when the value for the configuration attribute 'submenuShowDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "submenuHideDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "submenuHideDelayChange", "description": "Fires when the value for the configuration attribute 'submenuHideDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "useARIAChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "useARIAChange", "description": "Fires when the value for the configuration attribute 'useARIA' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "NodeMenuNav", "methods": {"_showMenu": {"protected": "", "params": [{"type": "Node", "name": "menu", "description": " Node instance representing a menu."}], "description": "Shows the specified menu.", "guessedname": "_showMenu", "guessedtype": "function"}, "_hideAndFocusLabel": {"protected": "", "description": "Hides all of the submenus of the root menu and focuses the \nlabel of the topmost submenu", "guessedname": "_hideAndFocusLabel", "guessedtype": "function"}, "_onMouseOut": {"protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"mouseout\" event handler for the menu.", "guessedname": "_onMouseOut", "guessedtype": "function"}, "_hideMenu": {"protected": "", "params": [{"type": "Node", "name": "menu", "description": " Node instance representing a menu."}, {"type": "Boolean", "name": "activateAndFocusLabel", "description": " Boolean indicating if the label \nfor the specified \nmenu should be focused and set as active."}], "description": "Hides the specified menu.", "guessedname": "_hideMenu", "guessedtype": "function"}, "_toggleSubmenuDisplay": {"protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"mousedown,\" \"keydown,\" and \"click\" event handler for the \nmenu used to toggle the display of a submenu.", "guessedname": "_toggleSubmenuDisplay", "guessedtype": "function"}, "_onHorizontalMenuKeyDown": {"protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"keydown\" event handler for horizontal menus.", "guessedname": "_onHorizontalMenuKeyDown", "guessedtype": "function"}, "_onVerticalMenuKeyDown": {"protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"keydown\" event handler for vertical menus.", "guessedname": "_onVerticalMenuKeyDown", "guessedtype": "function"}, "_onMouseOver": {"protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"mouseover\" event handler for the menu.", "guessedname": "_onMouseOver", "guessedtype": "function"}, "_focusItem": {"protected": "", "params": [{"type": "Node", "name": "item", "description": " Node instance representing a menuitem or menu label."}], "description": "Focuses the specified menuitem or menu label.", "guessedname": "_focusItem", "guessedtype": "function"}, "_cancelHideSubmenuTimer": {"protected": "", "description": "Cancels the timer used to hide a submenu.", "guessedname": "_cancelHideSubmenuTimer", "guessedtype": "function"}, "_onActiveDescendantChange": {"protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the Attribute change event."}, {"type": "NodeMenuNav", "name": "menuNav", "description": " Object representing the NodeMenuNav instance."}], "description": "\"activeDescendantChange\" event handler for menu's \nFocus Manager.", "guessedname": "_onActiveDescendantChange", "guessedtype": "function"}, "_onMenuLabelMouseOver": {"protected": "", "params": [{"type": "Node", "name": "menuLabel", "description": " Node instance representing a menu label."}, {"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"mouseover\" event handler for a menu label.", "guessedname": "_onMenuLabelMouseOver", "guessedtype": "function"}, "_onDocMouseDown": {"protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"mousedown\" event handler for the owner document of \nthe menu.", "guessedname": "_onDocMouseDown", "guessedtype": "function"}, "_onMenuLabelMouseOut": {"protected": "", "params": [{"type": "Node", "name": "menuLabel", "description": " Node instance representing a menu label."}, {"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"mouseout\" event handler for a menu label.", "guessedname": "_onMenuLabelMouseOut", "guessedtype": "function"}, "_afterActiveDescendantChange": {"protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the Attribute change event."}, {"type": "NodeMenuNav", "name": "menuNav", "description": " Object representing the NodeMenuNav instance."}], "description": "\"activeDescendantChange\" event handler for menu's \nFocus Manager.", "guessedname": "_afterActiveDescendantChange", "guessedtype": "function"}, "_onMenuItemMouseOver": {"protected": "", "params": [{"type": "Node", "name": "menuItem", "description": " Node instance representing a menuitem."}, {"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"mouseover\" event handler for a menuitem.", "guessedname": "_onMenuItemMouseOver", "guessedtype": "function"}, "_cancelShowSubmenuTimer": {"protected": "", "description": "Cancels the timer used to show a submenu.", "guessedname": "_cancelShowSubmenuTimer", "guessedtype": "function"}, "_isRoot": {"return": {"type": "Boolean", "description": "Boolean indicating if the specified menu is the root \nmenu in the menu."}, "description": "Returns a boolean indicating if the specified menu is the \nroot menu in the menu.", "protected": "", "params": [{"type": "Node", "name": "menu", "description": " Node instance representing a menu."}], "guessedname": "_isRoot", "guessedtype": "function"}, "_getTopmostSubmenu": {"return": {"type": "Node", "description": "Node instance representing a menu."}, "description": "Returns the topmost submenu of a submenu hierarchy.", "protected": "", "params": [{"type": "Node", "name": "menu", "description": " Node instance representing a menu."}], "guessedname": "_getTopmostSubmenu", "guessedtype": "function"}, "_clearActiveItem": {"protected": "", "description": "Clears the menu's active descendent.", "guessedname": "_clearActiveItem", "guessedtype": "function"}, "_onMouseMove": {"protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"mousemove\" event handler for the menu.", "guessedname": "_onMouseMove", "guessedtype": "function"}, "_onMenuItemMouseOut": {"protected": "", "params": [{"type": "Node", "name": "menuItem", "description": " Node instance representing a menuitem."}, {"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"mouseout\" event handler for a menuitem.", "guessedname": "_onMenuItemMouseOut", "guessedtype": "function"}, "_onDocFocus": {"protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"focus\" event handler for the owner document of the MenuNav.", "guessedname": "_onDocFocus", "guessedtype": "function"}, "_onMenuMouseOver": {"protected": "", "params": [{"type": "Node", "name": "menu", "description": " Node instance representing a menu."}, {"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"mouseover\" event handler for a menu.", "guessedname": "_onMenuMouseOver", "guessedtype": "function"}, "_hideAllSubmenus": {"protected": "", "params": [{"type": "Node", "name": "menu", "description": " Node instance representing a menu."}], "description": "Hides all submenus of the specified menu.", "guessedname": "_hideAllSubmenus", "guessedtype": "function"}, "_setActiveItem": {"protected": "", "params": [{"type": "Node", "name": "item", "description": " Node instance representing a menuitem or menu label."}], "description": "Sets the specified menuitem or menu label as the menu's \nactive descendent.", "guessedname": "_setActiveItem", "guessedtype": "function"}, "_initFocusManager": {"protected": "", "description": "Initializes and updates the Focus Manager so that is is \nalways managing descendants of the active menu.", "guessedname": "_initFocusManager", "guessedtype": "function"}, "_onKeyPress": {"protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"keypress\" event handler for the menu.", "guessedname": "_onKeyPress", "guessedtype": "function"}, "_onMenuMouseOut": {"protected": "", "params": [{"type": "Node", "name": "menu", "description": " Node instance representing a menu."}, {"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"mouseout\" event handler for a menu.", "guessedname": "_onMenuMouseOut", "guessedtype": "function"}, "_onKeyDown": {"protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"keydown\" event handler for the menu.", "guessedname": "_onKeyDown", "guessedtype": "function"}}, "file": "node-menunav.js", "guessedtype": "function", "shortname": "NodeMenuNav", "properties": {"_hideAllSubmenusTimer": {"description": "Timer used to hide a all submenus.", "default": "null", "protected": "", "guessedname": "_hideAllSubmenusTimer", "guessedtype": "property", "type": "Object"}, "_blockMouseEvent": {"description": "Boolean indicating whether or not to handle the \n\"mouseover\" event.", "default": "false", "protected": "", "guessedname": "_blockMouseEvent", "guessedtype": "property", "type": "Boolean"}, "_activeMenu": {"description": "Node instance representing the menu that is the parent of \nthe menu's active descendent.", "default": "null", "protected": "", "guessedname": "_activeMenu", "guessedtype": "property", "type": "Node"}, "NodeMenuNav.SHIM_TEMPLATE_TITLE": {"default": "\"Menu Stacking Shim\"", "type": "String", "description": "String representing the value for the <code>title</code> \nattribute for the shim used to prevent <code>&#60;select&#62;</code> elements \nfrom poking through menus in IE 6.", "guessedname": "SHIM_TEMPLATE_TITLE", "guessedtype": "property"}, "_hasFocus": {"description": "Boolean indicating if the menu has focus.", "default": "false", "protected": "", "guessedname": "_hasFocus", "guessedtype": "property", "type": "Boolean"}, "_currentMouseX": {"description": "Number representing the current x coordinate of the mouse \ninside the menu.", "default": "0", "protected": "", "guessedname": "_currentMouseX", "guessedtype": "property", "type": "Number"}, "_hideSubmenuTimer": {"description": "Timer used to hide a submenu.", "default": "null", "protected": "", "guessedname": "_hideSubmenuTimer", "guessedtype": "property", "type": "Object"}, "_firstItem": {"description": "Node instance representing the first item (menuitem or menu \nlabel) in the root menu of a menu.", "default": "null", "protected": "", "guessedname": "_firstItem", "guessedtype": "property", "type": "Node"}, "_showSubmenuTimer": {"description": "Timer used to show a submenu.", "default": "null", "protected": "", "guessedname": "_showSubmenuTimer", "guessedtype": "property", "type": "Object"}, "_movingToSubmenu": {"description": "Boolean indicating if the mouse is moving from a menu \nlabel to its corresponding submenu.", "default": "false", "protected": "", "guessedname": "_movingToSubmenu", "guessedtype": "property", "type": "Boolean"}, "NodeMenuNav.SHIM_TEMPLATE": {"default": "&#34;&#60;iframe frameborder=&#34;0&#34; tabindex=&#34;-1&#34; \nclass=&#34;yui-shim&#34; title=&#34;Menu Stacking Shim&#34; \nsrc=&#34;javascript:false;&#34;&#62;&#60;/iframe&#62;&#34;", "type": "String", "description": "String representing the HTML used to create the \n<code>&#60;iframe&#62;</code> shim used to prevent \n<code>&#60;select&#62;</code> elements from poking through menus in IE 6."}, "_activeItem": {"description": "Node instance representing the menu's active descendent: \nthe menuitem or menu label the user is currently interacting with.", "default": "null", "protected": "", "guessedname": "_activeItem", "guessedtype": "property", "type": "Node"}, "_rootMenu": {"description": "Node instance representing the root menu in the menu.", "default": "null", "protected": "", "guessedname": "_rootMenu", "guessedtype": "property", "type": "Node"}}, "description": "The NodeMenuNav class is a plugin for a Node instance.  The class is used via  \nthe <a href=\"Node.html#method_plug\"><code>plug</code></a> method of Node and \nshould not be instantiated directly."}, "DataSchema.Base": {"name": "DataSchema.Base", "namespace": "", "module": "dataschema", "guessedname": "SchemaBase", "methods": {"parse": {"return": {"type": "Object", "description": "Type-converted value."}, "params": [{"type": "Object", "name": "value", "description": "  Original value."}, {"type": "Object", "name": "field", "description": "  Field."}], "description": "Applies field parser, if defined", "guessedname": "parse", "guessedtype": "function"}, "apply": {"return": {"type": "Object", "description": "Schema-parsed data."}, "description": "Overridable method returns data as-is.", "static": "", "guessedname": "apply", "guessedtype": "function", "params": [{"type": "Object", "name": "schema", "description": "  Schema to apply."}, {"type": "Object", "name": "data", "description": "  Data."}]}}, "static": "", "file": "dataschema-base.js", "guessedtype": "property", "shortname": "DataSchema.Base", "description": "Base class for the YUI DataSchema Utility."}, "Do.Halt": {"name": "Do.Halt", "namespace": "", "module": "event-custom", "guessedname": "Halt", "file": "event-do.js", "guessedtype": "function", "shortname": "Do.Halt", "description": "Return a Halt object when you want to terminate the execution\nof all subsequent subscribers as well as the wrapped method\nif it has not exectued yet."}, "SyntheticEvent": {"since": "3.1.0", "name": "SyntheticEvent", "constructors": [{"params": [{"type": "Object", "name": "cfg", "description": "  Implementation pieces and configuration"}], "description": "<p>Wrapper class for the integration of new events into the YUI event\ninfrastructure.  Don't instantiate this object directly, use\n<code>Y.Event.define(type, config)</code>.  See that method for details.</p>\n<p>Properties that MAY or SHOULD be specified in the configuration are noted\nbelow and in the description of <code>Y.Event.define</code>.</p>"}], "namespace": "", "module": "event", "methods": {"on": {"params": [{"type": "Node", "name": "node", "description": "  the node the subscription is being applied to"}, {"type": "Subscription", "name": "sub", "description": "  the object to track this subscription"}, {"type": "SyntheticEvent.Notifier", "name": "notifier", "description": "  call notifier.fire(..) to\ntrigger the execution of the subscribers"}], "description": "<p>Implementers SHOULD provide this method definition.</p>\nImplementation logic for subscriptions done via <code>node.on(type,\nfn)</code> or <code>Y.on(type, fn, target)</code>.  This\nfunction should set up the monitor(s) that will eventually fire the\nevent.  Typically this involves subscribing to at least one DOM\nevent.  It is recommended to store detach handles from any DOM\nsubscriptions to make for easy cleanup in the <code>detach</code>\nmethod.  Typically these handles are added to the <code>sub</code>\nobject.  Also for SyntheticEvents that leverage a single DOM\nsubscription under the hood, it is recommended to pass the DOM event\nobject to <code>notifier.fire(e)</code>.  (The event name on the\nobject will be updated).", "guessedname": "on", "guessedtype": "property"}, "_on": {"return": {"type": "EventHandle", "description": "the detach handle for this subscription"}, "description": "Sets up the boilerplate for detaching the event and facilitating the\nexecution of subscriber callbacks.", "private": "", "params": [{"type": "Array", "name": "args", "description": "  array of arguments passed to\n<code>Y.on(...)</code> or <code>Y.delegate(...)</code>"}, {"type": "Boolean", "name": "delegate", "description": "  true if called from\n<code>Y.delegate(...)</code>"}], "guessedname": "_on", "guessedtype": "function"}, "subMatch": {"return": {"type": "Boolean", "description": "true if the sub can be described by the args\npresent"}, "description": "<p>Implementers MAY override this to define what constitutes a\n&quot;same&quot; subscription.  Override implementations should\nconsider the lack of a comparator as a match, so calling\n<code>getSubs()</code> with no arguments will return all subs.</p>\n<p>Compares a set of subscription arguments against a Subscription\nobject to determine if they match.  The default implementation\ncompares the callback function against the second argument passed to\n<code>Y.on(...)</code> or <code>node.detach(...)</code> etc.</p>", "since": "3.2.0", "params": [{"type": "Subscription", "name": "sub", "description": "  the existing subscription"}, {"type": "Array", "name": "args", "description": "  the calling arguments passed to\n<code>Y.on(...)</code> etc."}], "guessedname": "subMatch", "guessedtype": "function"}, "_unregisterSub": {"description": "Removes the subscription from the Notifier registry.", "since": "3.2.0", "private": "", "params": [{"type": "Subscription", "name": "sub", "description": "  the subscription"}], "guessedname": "_unregisterSub", "guessedtype": "function"}, "_init": {"protected": "", "description": "Construction logic for the event.", "guessedname": "_init", "guessedtype": "function"}, "detachDelegate": {"since": "3.2.0", "params": [{"type": "Node", "name": "node", "description": "  the node the subscription was applied to"}, {"type": "Subscription", "name": "sub", "description": "  the object tracking this subscription"}, {"type": "SyntheticEvent.Notifier", "name": "notifier", "description": "  the Notifier used to\ntrigger the execution of the subscribers"}, {"type": "String|Function", "name": "filter", "description": "  Selector string or function that\naccepts an event object and returns null, a Node, or an\narray of Nodes matching the criteria for processing."}], "description": "<p>Implementers SHOULD provide this method definition.</p>\n<p>Implementation logic for detaching subscriptions done via\n<code>node.delegate(type, fn, filter)</code> or\n<code>Y.delegate(type, fn, container, filter)</code>.  This function\nshould clean up any subscriptions made in the\n<code>delegate()</code> phase.</p>", "guessedname": "detachDelegate", "guessedtype": "property"}, "getRegistry": {"return": {"type": "Array", "description": ""}, "description": "Returns the array of subscription handles for a node for the given event\ntype.  Passing true as the third argument will create a registry entry\nin the event system's DOM map to host the array if one doesn't yet exist.", "since": "3.2.0", "protected": "", "params": [{"type": "Node", "name": "node", "description": "  the node"}, {"type": "String", "name": "type", "description": "  the event"}, {"type": "Boolean", "name": "create", "description": "  create a registration entry to host a new array\nif one doesn't exist."}], "guessedname": "getRegistry", "guessedtype": "function", "static": ""}, "_getNotifier": {"return": {"type": "SyntheticEvent.Notifier", "description": ""}, "description": "Creates a new Notifier object for use by this event's\n<code>on(...)</code> or <code>delegate(...)</code> implementation.", "since": "3.2.0", "private": "", "params": [{"type": "Node", "name": "node", "description": "  the Node hosting the event"}, {"type": "Array", "name": "args", "description": "  the subscription arguments passed to either\n<code>Y.on(...)</code> or <code>Y.delegate(...)</code>\nafter running through <code>processArgs(args)</code> to\nnormalize the argument signature"}, {"type": "any", "name": "extra", "description": "  Extra data parsed from\n<code>processArgs(args)</code>"}, {"type": "String|Function", "name": "filter", "description": "  the selector string or function\nfilter passed to <code>Y.delegate(...)</code> (not\npresent when called from <code>Y.on(...)</code>)"}], "guessedname": "_getNotifier", "guessedtype": "function"}, "delegate": {"since": "3.2.0", "params": [{"type": "Node", "name": "node", "description": "  the node the subscription is being applied to"}, {"type": "Subscription", "name": "sub", "description": "  the object to track this subscription"}, {"type": "SyntheticEvent.Notifier", "name": "notifier", "description": "  call notifier.fire(..) to\ntrigger the execution of the subscribers"}, {"type": "String|Function", "name": "filter", "description": "  Selector string or function that\naccepts an event object and returns null, a Node, or an\narray of Nodes matching the criteria for processing."}], "description": "<p>Implementers SHOULD provide this method definition.</p>\n<p>Implementation logic for subscriptions done via\n<code>node.delegate(type, fn, filter)</code> or\n<code>Y.delegate(type, fn, container, filter)</code>.  Like with\n<code>on()</code> above, this function should monitor the environment\nfor the event being fired, and trigger subscription execution by\ncalling <code>notifier.fire(e)</code>.</p>\n<p>This function receives a fourth argument, which is the filter\nused to identify which Node's are of interest to the subscription.\nThe filter will be either a boolean function that accepts a target\nNode for each hierarchy level as the event bubbles, or a selector\nstring.  To translate selector strings into filter functions, use\n<code>Y.delegate.compileFilter(filter)</code>.</p>", "guessedname": "delegate", "guessedtype": "property"}, "processArgs": {"return": {"type": "any", "description": ""}, "params": [{"type": "Array", "name": "args", "description": "  parmeters passed to Y.on(..) or Y.delegate(..)"}, {"type": "Boolean", "name": "delegate", "description": "  true if the subscription is from Y.delegate"}], "description": "<p>Implementers MAY provide this method definition.</p>\n<p>Implement this function if the event supports a different\nsubscription signature.  This function is used by both\n<code>on()</code> and <code>delegate()</code>.  The second parameter\nindicates that the event is being subscribed via\n<code>delegate()</code>.</p>\n<p>Implementations must remove extra arguments from the args list\nbefore returning.  The required args for <code>on()</code>\nsubscriptions are</p>\n<pre><code>[type, callback, target, context, argN...]</code></pre>\n<p>The required args for <code>delegate()</code>\nsubscriptions are</p>\n<pre><code>[type, callback, target, filter, context, argN...]</code></pre>\n<p>The return value from this function will be stored on the\nsubscription in the '_extra' property for reference elsewhere.</p>", "guessedname": "processArgs", "guessedtype": "property"}, "_detach": {"description": "Removes the subscription(s) from the internal subscription dispatch\nmechanism.  See <code>SyntheticEvent._deleteSub</code>.", "since": "3.2.0", "private": "", "params": [{"type": "Array", "name": "args", "description": "  The arguments passed to\n<code>node.detach(...)</code>"}], "guessedname": "_detach", "guessedtype": "function"}, "_deleteSub": {"description": "Alternate <code>_delete()</code> method for the CustomEvent object\ncreated to manage SyntheticEvent subscriptions.", "since": "3.2.0", "private": "", "params": [{"type": "Subscription", "name": "sub", "description": "  the subscription to clean up"}], "guessedname": "_deleteSub", "guessedtype": "function"}, "detach": {"params": [{"type": "Node", "name": "node", "description": "  the node the subscription was applied to"}, {"type": "Subscription", "name": "sub", "description": "  the object tracking this subscription"}, {"type": "SyntheticEvent.Notifier", "name": "notifier", "description": "  the Notifier used to\ntrigger the execution of the subscribers"}], "description": "<p>Implementers SHOULD provide this method definition.</p>\n<p>Implementation logic for detaching subscriptions done via\n<code>node.on(type, fn)</code>.  This function should clean up any\nsubscriptions made in the <code>on()</code> phase.</p>", "guessedname": "detach", "guessedtype": "property"}, "getSubs": {"return": {"type": "Array", "description": "detach handles for the matching subscriptions"}, "params": [{"type": "Node", "name": "node", "description": "  the node hosting the event"}, {"type": "Array", "name": "args", "description": "  the array of original subscription args passed\nto <code>Y.on(...)</code> (before\n<code>processArgs</code>"}, {"type": "Function", "name": "filter", "description": "  function used to identify a subscription\nfor inclusion in the returned array"}, {"type": "Boolean", "name": "first", "description": "  stop after the first match (used to check for\nduplicate subscriptions)"}], "description": "Returns the detach handles of subscriptions on a node that satisfy a\nsearch/filter function.  By default, the filter used is the\n<code>subMatch</code> method.", "guessedname": "getSubs", "guessedtype": "function"}}, "file": "synthetic.js", "in": "", "shortname": "SyntheticEvent", "properties": {"preventDups": {"default": "false", "type": "{Boolean}", "description": "<p>Implementers MAY override this property.</p>\n<p>Whether to prevent multiple subscriptions to this event that are\nclassified as being the same.  By default, this means the subscribed\ncallback is the same function.  See the <code>subMatch</code>\nmethod.  Setting this to true will impact performance for high volume\nevents.</p>"}}, "description": "<p>Wrapper class for the integration of new events into the YUI event\ninfrastructure.  Don't instantiate this object directly, use\n<code>Y.Event.define(type, config)</code>.  See that method for details.</p>\n<p>Properties that MAY or SHOULD be specified in the configuration are noted\nbelow and in the description of <code>Y.Event.define</code>.</p>"}, "Mock": {"name": "Mock", "constructors": [{"params": [{"type": "Object", "name": "template", "description": " (Optional) An object whose methods\nshould be stubbed out on the mock object. This object\nis used as the prototype of the mock object so instanceof\nworks correctly."}], "description": "Creates a new mock object."}, {"params": [{"type": "Function", "name": "method", "description": " The method to run on the argument. This should\nthrow an assertion error if the value is invalid."}, {"type": "Array", "name": "originalArgs", "description": " The first few arguments to pass in\nto the method. The value to test and failure message are\nalways the last two arguments passed into method."}, {"type": "String", "name": "message", "description": " The message to display if validation fails. If\nnot specified, the default assertion error message is displayed."}], "description": "Defines a custom mock validator for a particular argument."}], "namespace": "", "module": "test", "guessedname": "Mock", "methods": {"verify": {"return": {"type": "void", "description": ""}, "description": "Verifies that all expectations of a mock object have been met and\nthrows an assertion error if not.", "static": "", "guessedname": "verify", "guessedtype": "function", "params": [{"type": "Object", "name": "mock", "description": " The object to verify.."}]}, "expect": {"return": {"type": "void", "description": ""}, "description": "Assigns an expectation to a mock object. This is used to create\nmethods and properties on the mock object that are monitored for\ncalls and changes, respectively.", "static": "", "guessedname": "expect", "guessedtype": "function", "params": [{"type": "Object", "name": "mock", "description": " The object to add the expectation to."}, {"type": "Object", "name": "expectation", "description": " An object defining the expectation. For\na method, the keys \"method\" and \"args\" are required with\nan optional \"returns\" key available. For properties, the keys\n\"property\" and \"value\" are required."}]}}, "file": "Mock.js", "guessedtype": "function", "shortname": "Mock", "properties": {"Function": {"type": "Function", "static": "", "description": "Mock argument validator that accepts onlyfunctions as valid.", "guessedname": "Function", "guessedtype": "property"}, "String": {"type": "Function", "static": "", "description": "Mock argument validator that accepts only String values as valid.", "guessedname": "String", "guessedtype": "property"}, "Object": {"type": "Function", "static": "", "description": "Mock argument validator that accepts only non-null objects values as valid.", "guessedname": "Object", "guessedtype": "property"}, "Number": {"type": "Function", "static": "", "description": "Mock argument validator that accepts only numeric values as valid.", "guessedname": "Number", "guessedtype": "property"}, "Boolean": {"type": "Function", "static": "", "description": "Mock argument validator that accepts only Boolean values as valid.", "guessedname": "Boolean", "guessedtype": "property"}, "Any": {"type": "Function", "static": "", "description": "Mock argument validator that accepts any value as valid.", "guessedname": "Any", "guessedtype": "function"}}, "description": "Creates a new mock object."}, "Node": {"name": "Node", "for": "Node", "description": "The Node class provides a wrapper for manipulating DOM Nodes.\nNode properties can be accessed via the set/get methods.\nUse Y.get() to retrieve Node instances.\n<strong>NOTE:</strong> Node properties are accessed using\nthe <code>set</code> and <code>get</code> methods.", "constructors": [{"params": [{"type": "DOMNode", "name": "node", "description": " the DOM node to be mapped to the Node instance."}], "description": "The Node class provides a wrapper for manipulating DOM Nodes.\nNode properties can be accessed via the set/get methods.\nUse Y.get() to retrieve Node instances.\n<strong>NOTE:</strong> Node properties are accessed using\nthe <code>set</code> and <code>get</code> methods."}], "namespace": "", "module": "node", "properties": {"_node": {"private": "", "description": "The underlying DOM node bound to the Y.Node instance", "guessedname": "_node", "guessedtype": "property"}, "_instances": {"guessedname": "_instances", "static": "", "description": "A list of Node instances that have been created", "private": "", "guessedtype": "property"}, "NAME": {"static": "", "description": "The name of the component", "guessedname": "NAME", "guessedtype": "property"}, "DOM_EVENTS": {"static": "", "description": "List of events that route to DOM events", "guessedname": "DOM_EVENTS", "guessedtype": "property"}, "ATTRS": {"type": "object", "static": "", "description": "Static collection of configuration attributes for special handling", "guessedname": "ATTRS", "guessedtype": "property"}}, "file": "node.js", "configs": {"viewportRegion": {"type": "Node", "description": "Returns a region object for the node's viewport", "guessedname": "viewportRegion", "guessedtype": "property"}, "winWidth": {"type": "{Int}", "description": "Returns the inner width of the viewport (exludes scrollbar)."}, "text": {"type": "String", "description": "Allows for getting and setting the text of an element.\nFormatting is preserved and special characters are treated literally.", "guessedname": "text", "guessedtype": "property"}, "region": {"type": "Node", "description": "Returns a region object for the node", "guessedname": "region", "guessedtype": "property"}, "docScrollY": {"type": "{Int}", "description": "Amount page has been scroll horizontally"}, "docScrollX": {"type": "{Int}", "description": "Amount page has been scroll vertically"}, "docHeight": {"type": "{Int}", "description": "Document height"}, "winHeight": {"type": "{Int}", "description": "Returns the inner height of the viewport (exludes scrollbar)."}, "children": {"readonly": "", "type": "NodeList", "description": "Returns a NodeList instance of all HTMLElement children."}}, "shortname": "Node", "methods": {"all": {"return": {"type": "NodeList", "description": "A NodeList instance for the matching HTMLCollection/Array."}, "params": [{"type": "string", "name": "selector", "description": " The CSS selector to test against."}], "description": "Retrieves a nodeList based on the given CSS selector.", "guessedname": "all", "guessedtype": "function"}, "simulate": {"return": {"type": "void", "description": ""}, "params": [{"type": "String", "name": "type", "description": " The type of event to simulate (i.e., \"click\")."}, {"type": "Object", "name": "options", "description": " (Optional) Extra options to copy onto the event object."}], "description": "Simulates an event on the node.", "guessedname": "simulate", "guessedtype": "function"}, "show": {"chainable": "", "params": [{"type": "String", "name": "name", "description": " A named Transition effect to use as the show effect."}, {"type": "Object", "name": "config", "description": " Options to use with the transition."}, {"type": "Function", "name": "callback", "description": " An optional function to run after the transition completes."}], "description": "Makes the node visible.\nIf the \"transition\" module is loaded, show optionally\nanimates the showing of the node using either the default\ntransition effect ('fadeIn'), or the given named effect.", "guessedname": "show", "guessedtype": "function"}, "focus": {"chainable": "", "description": "Passes through to DOM method."}, "setStyle": {"chainable": "", "params": [{"type": "String", "name": "attr", "description": " The style attribute to set."}, {"type": "String|Number", "name": "val", "description": " The value."}], "description": "Sets a style property of the node."}, "prepend": {"chainable": "", "params": [{"type": "String | Y.Node | HTMLElement", "name": "content", "description": " The content to insert"}], "description": "Inserts the content as the firstChild of the node.", "guessedname": "prepend", "guessedtype": "function"}, "previous": {"return": {"type": "Node", "description": "Node instance or null if not found"}, "params": [{"type": "String | Function", "name": "fn", "description": " A selector or boolean method for testing elements.\nIf a function is used, it receives the current node being tested as the only argument."}], "description": "Returns the previous matching sibling.\nReturns the nearest element node sibling if no method provided.", "guessedname": "previous", "guessedtype": "function"}, "replaceClass": {"chainable": "", "params": [{"type": "String", "name": "oldClassName", "description": " the class name to be replaced"}, {"type": "String", "name": "newClassName", "description": " the class name that will be replacing the old class name"}], "description": "Replace a class with another class for each node.\nIf no oldClassName is present, the newClassName is simply added."}, "hasChildNodes": {"return": {"type": "Boolean", "description": "Whether or not the node has any childNodes"}, "description": "Passes through to DOM method."}, "swap": {"chainable": "", "params": [{"type": "Node", "name": "otherNode", "description": " The node to swap with"}], "description": "Swap DOM locations with the given node.\nThis does not change which DOM node each Node instance refers to.", "guessedname": "swap", "guessedtype": "property"}, "siblings": {"return": {"type": "NodeList", "description": "NodeList instance bound to found siblings"}, "params": [{"type": "String | Function", "name": "fn", "description": " A selector or boolean method for testing elements.\nIf a function is used, it receives the current node being tested as the only argument."}], "description": "Returns all matching siblings.\nReturns all siblings if no method provided.", "guessedname": "siblings", "guessedtype": "function"}, "inDoc": {"return": {"type": "Boolean", "description": "Whether or not this node is appended to the document."}, "params": [{"type": "Node|HTMLElement", "name": "doc", "description": " optional An optional document to check against.\nDefaults to current document."}], "description": "Determines whether the node is appended to the document.", "guessedname": "inDoc", "guessedtype": "function"}, "swapXY": {"chainable": "", "params": [{"type": "Y.Node || HTMLElement", "name": "otherNode", "description": " The node to swap with."}], "description": "Swaps the XY position of this node with another node."}, "addClass": {"chainable": "", "params": [{"type": "String", "name": "className", "description": " the class name to add to the node's class attribute"}], "description": "Adds a class name to each node."}, "invoke": {"return": {"type": "", "description": "Whatever the underly method returns.\nDOM Nodes and Collections return values\nare converted to Node/NodeList instances."}, "params": [{"type": "String", "name": "method", "description": " The name of the method to invoke"}, {"type": "Any", "name": "a,", "description": " b, c, etc. Arguments to invoke the method with."}], "description": "Invokes a method on the Node instance", "guessedname": "invoke", "guessedtype": "function"}, "get": {"return": {"type": "any", "description": "The current value of the attribute"}, "params": [{"type": "String", "name": "attr", "description": " The attribute"}], "description": "Returns an attribute value on the Node instance.\nUnless pre-configured (via Node.ATTRS), get hands\noff to the underlying DOM node.  Only valid\nattributes/properties for the node will be set.", "guessedname": "get", "guessedtype": "function"}, "removeClass": {"chainable": "", "params": [{"type": "String", "name": "className", "description": " the class name to remove from the node's class attribute"}], "description": "Removes a class name from each node."}, "addMethod": {"return": {"type": "any", "description": "Depends on what is returned from the DOM node."}, "description": "Adds methods to the Y.Node prototype, routing through scrubVal.", "static": "", "guessedname": "addMethod", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the method to add"}, {"type": "Function", "name": "fn", "description": " The function that becomes the method"}, {"type": "Object", "name": "context", "description": " An optional context to call the method with\n(defaults to the Node instance)"}]}, "one": {"return": {"type": "Node", "description": "A Node instance for the matching HTMLElement."}, "params": [{"type": "string", "name": "selector", "description": " The CSS selector to test against."}], "description": "Retrieves a Node instance of nodes based on the given CSS selector.", "guessedname": "one", "guessedtype": "function"}, "insert": {"chainable": "", "params": [{"type": "String | Y.Node | HTMLElement | Y.NodeList | HTMLCollection", "name": "content", "description": " The content to insert"}, {"type": "Int | Y.Node | HTMLElement | String", "name": "where", "description": " The position to insert at.\nPossible \"where\" arguments\n<dl>\n<dt>Y.Node</dt>\n<dd>The Node to insert before</dd>\n<dt>HTMLElement</dt>\n<dd>The element to insert before</dd>\n<dt>Int</dt>\n<dd>The index of the child element to insert before</dd>\n<dt>\"replace\"</dt>\n<dd>Replaces the existing HTML</dd>\n<dt>\"before\"</dt>\n<dd>Inserts before the existing HTML</dd>\n<dt>\"before\"</dt>\n<dd>Inserts content before the node</dd>\n<dt>\"after\"</dt>\n<dd>Inserts content after the node</dd>\n</dl>"}], "description": "Inserts the content before the reference node.", "guessedname": "insert", "guessedtype": "function"}, "getData": {"return": {"type": "any | Object", "description": "Whatever is stored at the given field,\nor an object hash of all fields."}, "params": [{"type": "string", "name": "name", "description": " Optional name of the data field to retrieve.\nIf no name is given, all data is returned."}], "description": "Retrieves arbitrary data stored on a Node instance.\nThis is not stored with the DOM node.", "guessedname": "getData", "guessedtype": "function"}, "scrollIntoView": {"chainable": "", "description": "Passes through to DOM method."}, "remove": {"chainable": "", "description": "Removes the node from its parent.\nShortcut for myNode.get('parentNode').removeChild(myNode);", "guessedname": "remove", "guessedtype": "function"}, "createCaption": {"chainable": "", "description": "Passes through to DOM method.\nOnly valid on TABLE elements"}, "removeChild": {"return": {"type": "Node", "description": "The removed node"}, "params": [{"type": "HTMLElement | Node", "name": "node", "description": " Node to be removed"}], "description": "Passes through to DOM method."}, "delegate": {"return": {"type": "EventHandle", "description": "the detach handle"}, "params": [{"type": "String", "name": "type", "description": "  the event type to delegate"}, {"type": "Function", "name": "fn", "description": "  the callback function to execute.  This function\nwill be provided the event object for the delegated event."}, {"type": "String|Function", "name": "spec", "description": "  a selector that must match the target of the\nevent or a function to test target and its parents for a match"}, {"type": "Object", "name": "context", "description": "  optional argument that specifies what 'this' refers to."}, {"type": "any", "name": "args*", "description": "  0..n additional arguments to pass on to the callback function.\nThese arguments will be added after the event object."}], "description": "<p>Sets up a delegation listener for an event occurring inside the Node.\nThe delegated event will be verified against a supplied selector or\nfiltering function to test if the event references at least one node that\nshould trigger the subscription callback.</p>\n<p>Selector string filters will trigger the callback if the event originated\nfrom a node that matches it or is contained in a node that matches it.\nFunction filters are called for each Node up the parent axis to the\nsubscribing container node, and receive at each level the Node and the event\nobject.  The function should return true (or a truthy value) if that Node\nshould trigger the subscription callback.  Note, it is possible for filters\nto match multiple Nodes for a single event.  In this case, the delegate\ncallback will be executed for each matching Node.</p>\n<p>For each matching Node, the callback will be executed with its 'this'\nobject set to the Node matched by the filter (unless a specific context was\nprovided during subscription), and the provided event's\n<code>currentTarget</code> will also be set to the matching Node.  The\ncontaining Node from which the subscription was originally made can be\nreferenced as <code>e.container</code>.", "guessedname": "delegate", "guessedtype": "function"}, "scrubVal": {"return": {"type": "Y.Node | Y.NodeList | any", "description": "Depends on what is returned from the DOM node."}, "description": "Checks Node return values and wraps DOM Nodes as Y.Node instances\nand DOM Collections / Arrays as Y.NodeList instances.\nOther return values just pass thru.  If undefined is returned (e.g. no return)\nthen the Node instance is returned for chainability.", "static": "", "guessedname": "scrubVal", "guessedtype": "function", "params": [{"type": "any", "name": "node", "description": " The Node instance or an HTMLNode"}]}, "set": {"chainable": "", "params": [{"type": "String", "name": "attr", "description": " The attribute to be set."}, {"type": "any", "name": "val", "description": " The value to set the attribute to."}], "description": "Sets an attribute on the Node instance.\nUnless pre-configured (via Node.ATTRS), set hands\noff to the underlying DOM node.  Only valid\nattributes/properties for the node will be set.\nTo set custom attributes use setAttribute.", "guessedname": "set", "guessedtype": "function"}, "setContent": {"chainable": "", "params": [{"type": "String | Y.Node | HTMLElement | Y.NodeList | HTMLCollection", "name": "content", "description": " The content to insert"}], "description": "Replaces the node's current content with the content.", "guessedname": "setContent", "guessedtype": "function"}, "append": {"chainable": "", "params": [{"type": "String | Y.Node | HTMLElement", "name": "content", "description": " The content to insert"}], "description": "Inserts the content as the lastChild of the node.", "guessedname": "append", "guessedtype": "function"}, "hide": {"chainable": "", "params": [{"type": "String", "name": "name", "description": " A named Transition effect to use as the show effect."}, {"type": "Object", "name": "config", "description": " Options to use with the transition."}, {"type": "Function", "name": "callback", "description": " An optional function to run after the transition completes."}], "description": "Hides the node.\nIf the \"transition\" module is loaded, hide optionally\nanimates the hiding of the node using either the default\ntransition effect ('fadeOut'), or the given named effect.", "guessedname": "hide", "guessedtype": "function"}, "clearData": {"chainable": "", "params": [{"type": "string", "name": "name", "description": " The name of the field to clear. If no name\nis given, all data is cleared."}], "description": "Clears stored data.", "guessedname": "clearData", "guessedtype": "function"}, "getComputedStyle": {"return": {"type": "String", "description": "The computed value of the style property for the element."}, "params": [{"type": "String", "name": "attr", "description": " The style attribute to retrieve."}], "description": "Returns the computed value for the given style property."}, "toString": {"return": {"type": "String", "description": "A string representation of the Node instance"}, "description": "The method called when outputting Node instances as strings", "guessedname": "toString", "guessedtype": "function"}, "intersect": {"return": {"type": "Object", "description": "An object representing the intersection of the regions."}, "params": [{"type": "Node|Object", "name": "node2", "description": " The node or region to compare with."}, {"type": "Object", "name": "altRegion", "description": " An alternate region to use (rather than this node's)."}], "description": "Compares the intersection of the node with another node or region", "guessedname": "intersect", "guessedtype": "function"}, "blur": {"chainable": "", "description": "Passes through to DOM method."}, "getContent": {"return": {"type": "String", "description": "The current content"}, "description": "Returns the node's current content (e.g. innerHTML)", "guessedname": "getContent", "guessedtype": "function"}, "_get": {"return": {"type": "any", "description": "The current value of the attribute"}, "description": "Helper method for get.", "private": "", "params": [{"type": "String", "name": "attr", "description": " The attribute"}], "guessedname": "_get", "guessedtype": "function"}, "hasAttribute": {"return": {"type": "Boolean", "description": "Whether or not the attribute is present"}, "params": [{"type": "String", "name": "attribute", "description": " The attribute to test for"}], "description": "Passes through to DOM method."}, "transition": {"chainable": "", "params": [{"type": "Object", "name": "config", "description": " An object containing one or more style properties, a duration and an easing."}, {"type": "Function", "name": "callback", "description": " A function to run after the transition has completed."}], "description": "Animate one or more css properties to a given value. Requires the \"transition\" module.\n<pre>example usage:\nY.one('#demo').transition({\nduration: 1, // in seconds, default is 0.5\neasing: 'ease-out', // default is 'ease'\ndelay: '1', // delay start for 1 second, default is 0\nheight: '10px',\nwidth: '10px',\nopacity: { // per property\nvalue: 0,\nduration: 2,\ndelay: 2,\neasing: 'ease-in'\n}\n});\n</pre>", "guessedname": "transition", "guessedtype": "function"}, "importMethod": {"static": "", "params": [{"type": "Object", "name": "host", "description": " The object that contains the method to import."}, {"type": "String", "name": "name", "description": " The name of the method to import"}, {"type": "String", "name": "altName", "description": " An optional name to use in place of the host name"}, {"type": "Object", "name": "context", "description": " An optional context to call the method with"}], "description": "Imports utility methods to be added as Y.Node methods.", "guessedname": "importMethod", "guessedtype": "function"}, "Y.one": {"return": {"type": "Y.Node | null", "description": "a Node instance or null if no match found."}, "description": "Returns a single Node instance bound to the node or the\nfirst element matching the given selector. Returns null if no match found.\n<strong>Note:</strong> For chaining purposes you may want to\nuse <code>Y.all</code>, which returns a NodeList when no match is found.", "static": "", "guessedname": "one", "guessedtype": "function", "params": [{"type": "String | HTMLElement", "name": "node", "description": " a node or Selector"}]}, "getAttrs": {"return": {"type": "Object", "description": "An object with attribute name/value pairs."}, "params": [{"type": "Array", "name": "attrs", "description": " an array of attributes to get values"}], "description": "Returns an object containing the values for the requested attributes.", "guessedname": "getAttrs", "guessedtype": "function"}, "removeAttribute": {"chainable": "", "params": [{"type": "String", "name": "attribute", "description": " The attribute to be removed"}], "description": "Passes through to DOM method."}, "getAttribute": {"return": {"type": "string", "description": "The attribute value"}, "params": [{"type": "string", "name": "name", "description": " The attribute name"}], "description": "Allows getting attributes on DOM nodes, normalizing in some cases.\nThis passes through to the DOM node, allowing for custom attributes."}, "replace": {"chainable": "", "params": [{"type": "Y.Node || HTMLNode", "name": "newNode", "description": " Node to be inserted"}], "description": "Replace the node with the other node. This is a DOM update only\nand does not change the node bound to the Node instance.\nShortcut for myNode.get('parentNode').replaceChild(newNode, myNode);", "guessedname": "replace", "guessedtype": "function"}, "inRegion": {"return": {"type": "Object", "description": "An object representing the intersection of the regions."}, "params": [{"type": "Node|Object", "name": "node2", "description": " The node or region to compare with."}, {"type": "Boolean", "name": "all", "description": " Whether or not all of the node must be in the region."}, {"type": "Object", "name": "altRegion", "description": " An alternate region to use (rather than this node's)."}], "description": "Determines whether or not the node is within the giving region.", "guessedname": "inRegion", "guessedtype": "function"}, "wrap": {"chainable": "", "params": [{"type": "String", "name": "html", "description": " The markup to wrap around the node."}], "description": "Wraps the given HTML around the node."}, "select": {"chainable": "", "description": "Passes through to DOM method."}, "create": {"return": {"type": "Node", "description": "A Node instance bound to a DOM node or fragment"}, "description": "Creates a new dom node using the provided markup string.", "param": "{String} html The markup used to create the element", "static": "", "guessedname": "create", "guessedtype": "function", "params": [{"type": "String", "name": "html", "description": " The markup used to create the element"}, {"type": "HTMLDocument", "name": "doc", "description": " An optional document context"}]}, "contains": {"return": {"type": "Boolean", "description": "Whether or not this node is the needle its ancestor"}, "params": [{"type": "Node | HTMLElement", "name": "needle", "description": " The possible node or descendent"}], "description": "Determines whether the node is an ancestor of another HTML element in the DOM hierarchy."}, "submit": {"chainable": "", "description": "Passes through to DOM method.\nOnly valid on FORM elements"}, "next": {"return": {"type": "Node", "description": "Node instance or null if not found"}, "params": [{"type": "String | Function", "name": "fn", "description": " A selector or boolean method for testing elements.\nIf a function is used, it receives the current node being tested as the only argument."}], "description": "Returns the next matching sibling.\nReturns the nearest element node sibling if no method provided.", "guessedname": "next", "guessedtype": "function"}, "toggleClass": {"chainable": "", "params": [{"type": "String", "name": "className", "description": " the class name to be toggled"}], "description": "If the className exists on the node it is removed, if it doesn't exist it is added."}, "empty": {"chainable": "", "params": [{"type": "Boolean", "name": "destroy", "description": " Whether the nodes should also be destroyed."}], "description": "Removes all of the child nodes from the node.", "guessedname": "empty", "guessedtype": "function"}, "unwrap": {"chainable": "", "description": "Removes the node's parent node."}, "getElementsByTagName": {"return": {"type": "NodeList", "description": "A NodeList representing the HTMLCollection"}, "params": [{"type": "String", "name": "tagName", "description": " The tagName to collect"}], "description": "Passes through to DOM method."}, "DEFAULT_SETTER": {"return": {"type": "any", "description": "The value"}, "description": "The default setter for DOM properties\nCalled with instance context (this === the Node instance)", "static": "", "guessedname": "DEFAULT_SETTER", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The attribute/property being set"}, {"type": "any", "name": "val", "description": " The value to be set"}]}, "replaceChild": {"return": {"type": "Node", "description": "The replaced node"}, "params": [{"type": "String | HTMLElement | Node", "name": "node", "description": " Node to be inserted"}, {"type": "HTMLElement | Node", "name": "refNode", "description": " Node to be replaced"}], "guessedname": "replaceChild", "guessedtype": "function"}, "reset": {"chainable": "", "description": "Passes through to DOM method.\nOnly valid on FORM elements"}, "setAttribute": {"chainable": "", "params": [{"type": "string", "name": "name", "description": " The attribute name"}, {"type": "string", "name": "value", "description": " The value to set"}], "description": "Allows setting attributes on DOM nodes, normalizing in some cases.\nThis passes through to the DOM node, allowing for custom attributes."}, "purge": {"chainable": "", "params": [{"type": "Boolean", "name": "recurse", "description": " (optional) Whether or not to remove listeners from the\nnode's subtree"}, {"type": "String", "name": "type", "description": " (optional) Only remove listeners of the specified type"}], "description": "Removes event listeners from the node and (optionally) its subtree", "guessedname": "purge", "guessedtype": "function"}, "DEFAULT_GETTER": {"return": {"type": "any", "description": "The current value"}, "description": "The default getter for DOM properties\nCalled with instance context (this === the Node instance)", "static": "", "guessedname": "DEFAULT_GETTER", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The attribute/property to look up"}]}, "appendChild": {"return": {"type": "Node", "description": "The appended node"}, "params": [{"type": "String | HTMLElement | Node", "name": "node", "description": " Node to be appended"}], "guessedname": "appendChild", "guessedtype": "function"}, "getDOMNode": {"return": {"type": "HTMLNode", "description": "The DOM node bound to the Node instance.  If a DOM node is passed\nas the node argument, it is simply returned."}, "description": "Retrieves the DOM node bound to a Node instance", "static": "", "guessedname": "getDOMNode", "guessedtype": "function", "params": [{"type": "Y.Node || HTMLNode", "name": "node", "description": " The Node instance or an HTMLNode"}]}, "cloneNode": {"return": {"type": "Node", "description": "The clone"}, "params": [{"type": "Boolean", "name": "deep", "description": " Whether or not to perform a deep clone, which includes\nsubtree and attributes"}], "description": "Passes through to DOM method."}, "getX": {"return": {"type": "Int", "description": "The X position of the node"}, "description": "Gets the current position of the node in page coordinates."}, "getY": {"return": {"type": "Int", "description": "The Y position of the node"}, "description": "Gets the current position of the node in page coordinates."}, "ancestors": {"return": {"type": "NodeList", "description": "A NodeList instance containing the matching elements"}, "params": [{"type": "String | Function", "name": "fn", "description": " A selector string or boolean method for testing elements."}, {"type": "Boolean", "name": "testSelf", "description": " optional Whether or not to include the element in the scan\nIf a function is used, it receives the current node being tested as the only argument."}], "description": "Returns the ancestors that pass the test applied by supplied boolean method.", "guessedname": "ancestors", "guessedtype": "function"}, "setStyles": {"chainable": "", "params": [{"type": "Object", "name": "hash", "description": " An object literal of property:value pairs."}], "description": "Sets multiple style properties on the node."}, "_hide": {"chainable": "", "protected": "", "description": "The implementation for hiding nodes.\nDefault is to toggle the style.display property.", "guessedname": "_hide", "guessedtype": "function"}, "appendTo": {"chainable": "", "params": [{"type": "Y.Node | HTMLElement", "name": "node", "description": " The node to append to"}], "description": "Appends the node to the given node.", "guessedname": "appendTo", "guessedtype": "function"}, "test": {"return": {"type": "boolean", "description": "Whether or not the node matches the selector."}, "params": [{"type": "string", "name": "selector", "description": " The CSS selector to test against."}], "description": "Test if the supplied node matches the supplied selector.", "guessedname": "test", "guessedtype": "function"}, "destroy": {"params": [{"type": "Boolean", "name": "recursivePurge", "description": " (optional) Whether or not to remove listeners from the\nnode's subtree (default is false)"}], "description": "Nulls internal node references, removes any plugins and event listeners", "guessedname": "destroy", "guessedtype": "function"}, "ancestor": {"return": {"type": "Node", "description": "The matching Node instance or null if not found"}, "params": [{"type": "String | Function", "name": "fn", "description": " A selector string or boolean method for testing elements."}, {"type": "Boolean", "name": "testSelf", "description": " optional Whether or not to include the element in the scan\nIf a function is used, it receives the current node being tested as the only argument."}], "description": "Returns the nearest ancestor that passes the test applied by supplied boolean method.", "guessedname": "ancestor", "guessedtype": "function"}, "setData": {"chainable": "", "params": [{"type": "string", "name": "name", "description": " The name of the field to set. If no name\nis given, name is treated as the data and overrides any existing data."}, {"type": "any", "name": "val", "description": " The value to be assigned to the field."}], "description": "Stores arbitrary data on a Node instance.\nThis is not stored with the DOM node.", "guessedname": "setData", "guessedtype": "function"}, "insertBefore": {"return": {"type": "Node", "description": "The inserted node"}, "params": [{"type": "String | HTMLElement | Node", "name": "newNode", "description": " Node to be appended"}, {"type": "HTMLElement | Node", "name": "refNode", "description": " Node to be inserted before"}], "guessedname": "insertBefore", "guessedtype": "function"}, "hasClass": {"return": {"type": "Array", "description": "An array of booleans for each node bound to the NodeList."}, "params": [{"type": "String", "name": "className", "description": " the class name to search for"}], "description": "Determines whether each node has the given className."}, "getStyle": {"return": {"type": "String", "description": "The current value of the style property for the element."}, "params": [{"type": "String", "name": "attr", "description": " The style attribute to retrieve."}], "description": "Returns the style's current value."}, "setXY": {"chainable": "", "params": [{"type": "Array", "name": "xy", "description": " Contains X & Y values for new position (coordinates are page-based)"}], "description": "Set the position of the node in page coordinates, regardless of how the node is positioned."}, "setX": {"chainable": "", "params": [{"type": "Int", "name": "x", "description": " X value for new position (coordinates are page-based)"}], "description": "Set the position of the node in page coordinates, regardless of how the node is positioned."}, "setY": {"chainable": "", "params": [{"type": "Int", "name": "y", "description": " Y value for new position (coordinates are page-based)"}], "description": "Set the position of the node in page coordinates, regardless of how the node is positioned."}, "getXY": {"return": {"type": "Array", "description": "The XY position of the node"}, "description": "Gets the current position of the node in page coordinates."}, "_show": {"chainable": "", "protected": "", "description": "The implementation for showing nodes.\nDefault is to toggle the style.display property.", "guessedname": "_show", "guessedtype": "function"}, "compareTo": {"return": {"type": "Boolean", "description": "True if the nodes match, false if they do not."}, "params": [{"type": "HTMLElement | Node", "name": "refNode", "description": " The reference node to compare to the node."}], "description": "Compares nodes to determine if they match.\nNode instances can be compared to each other and/or HTMLElements.", "guessedname": "compareTo", "guessedtype": "function"}, "setAttrs": {"chainable": "", "params": [{"type": "Object", "name": "attrMap", "description": " an object of name/value pairs to set"}], "description": "Sets multiple attributes.", "guessedname": "setAttrs", "guessedtype": "function"}}}, "Test.Runner": {"name": "Test.Runner", "namespace": "Test", "module": "test", "events": {"testcasebegin": {"static": "", "description": "Fires when a test case is opened but before the first \ntest is executed.", "guessedname": "TEST_CASE_BEGIN_EVENT", "guessedtype": "property"}, "testcasecomplete": {"static": "", "description": "Fires when all tests in a test case have been executed.", "guessedname": "TEST_CASE_COMPLETE_EVENT", "guessedtype": "property"}, "begin": {"static": "", "description": "Fires when the run() method is called.", "guessedname": "BEGIN_EVENT", "guessedtype": "property"}, "ignore": {"static": "", "description": "Fires when a test has been ignored.", "guessedname": "TEST_IGNORE_EVENT", "guessedtype": "property"}, "testsuitebegin": {"static": "", "description": "Fires when a test suite is opened but before the first \ntest is executed.", "guessedname": "TEST_SUITE_BEGIN_EVENT", "guessedtype": "property"}, "testsuitecomplete": {"static": "", "description": "Fires when all test cases in a test suite have been\ncompleted.", "guessedname": "TEST_SUITE_COMPLETE_EVENT", "guessedtype": "property"}, "pass": {"static": "", "description": "Fires when a test has passed.", "guessedname": "TEST_PASS_EVENT", "guessedtype": "property"}, "fail": {"static": "", "description": "Fires when a test has failed.", "guessedname": "TEST_FAIL_EVENT", "guessedtype": "property"}, "complete": {"static": "", "description": "Fires when all test suites and test cases have been completed.", "guessedname": "COMPLETE_EVENT", "guessedtype": "property"}}, "methods": {"disableLogging": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Disable logging via Y.log(). Test output will not be visible unless\nTestRunner events are subscribed to.", "guessedname": "disableLogging", "guessedtype": "function"}, "_run": {"return": {"type": "Object", "description": "Results of the execution with properties passed, failed, and total."}, "description": "Runs a test case or test suite, returning the results.", "private": "", "static": "", "guessedname": "_run", "guessedtype": "function", "params": [{"type": "Y.Test.Case|Y.Test.Suite", "name": "testObject", "description": " The test case or test suite to run."}]}, "isRunning": {"return": {"type": "Boolean", "description": "True if the TestRunner is running, false if not."}, "description": "Indicates that the TestRunner is busy running tests and therefore can't\nbe stopped and results cannot be gathered.", "guessedname": "isRunning", "guessedtype": "function"}, "setName": {"return": {"type": "Void", "description": ""}, "params": [{"type": "String", "name": "name", "description": " The name of the result set."}], "description": "The name assigned to the master suite of the TestRunner. This is the name\nthat is output as the root's name when results are retrieved.", "guessedname": "setName", "guessedtype": "function"}, "getCoverage": {"return": {"type": "Object|String", "description": "Either the coverage object or, if a coverage\nformat is specified, a string representing the results in that format."}, "params": [{"type": "Function", "name": "format", "description": " (Optional) A coverage format to return results in."}], "description": "Returns the coverage report for the files that have been executed.\nThis returns only coverage information for files that have been\ninstrumented using YUI Test Coverage and only those that were run\nin the same pass.", "guessedname": "getCoverage", "guessedtype": "function"}, "_logEvent": {"return": {"type": "Void", "description": ""}, "description": "Logs TestRunner events using Y.log().", "private": "", "static": "", "guessedname": "_logEvent", "guessedtype": "function", "params": [{"type": "Object", "name": "event", "description": " The event object for the event."}]}, "_addTestCaseToTestTree": {"return": {"type": "Void", "description": ""}, "description": "Adds a test case to the test tree as a child of the specified node.", "private": "", "static": "", "guessedname": "_addTestCaseToTestTree", "guessedtype": "function", "params": [{"type": "TestNode", "name": "parentNode", "description": " The node to add the test case to as a child."}, {"type": "Y.Test.Case", "name": "testCase", "description": " The test case to add."}]}, "getName": {"return": {"type": "String", "description": "The name of the result set."}, "description": "Retrieves the name of the current result set.", "guessedname": "getName", "guessedtype": "function"}, "resume": {"return": {"type": "Void", "description": ""}, "description": "Resumes the TestRunner after wait() was called.", "static": "", "guessedname": "resume", "guessedtype": "function", "params": [{"type": "Function", "name": "segment", "description": " The function to run as the rest\nof the haulted test."}]}, "getResults": {"return": {"type": "Object|String", "description": "Either the results object or, if a test format is \npassed as the argument, a string representing the results in a specific\nformat."}, "params": [{"type": "Function", "name": "format", "description": " (Optional) A test format to return the results in."}], "description": "Returns the last complete results set from the TestRunner. Null is returned\nif the TestRunner is running or no tests have been run.", "guessedname": "getResults", "guessedtype": "function"}, "enableLogging": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Enable logging via Y.log(). Test output is published and can be read via\nlogreader.", "guessedname": "enableLogging", "guessedtype": "function"}, "_buildTestTree": {"return": {"type": "Void", "description": ""}, "description": "Builds the test tree based on items in the master suite. The tree is a hierarchical\nrepresentation of the test suites, test cases, and test functions. The resulting tree\nis stored in _root and the pointer _cur is set to the root initially.", "private": "", "static": "", "guessedname": "_buildTestTree", "guessedtype": "function"}, "_addTestSuiteToTestTree": {"return": {"type": "Void", "description": ""}, "description": "Adds a test suite to the test tree as a child of the specified node.", "private": "", "static": "", "guessedname": "_addTestSuiteToTestTree", "guessedtype": "function", "params": [{"type": "TestNode", "name": "parentNode", "description": " The node to add the test suite to as a child."}, {"type": "Y.Test.Suite", "name": "testSuite", "description": " The test suite to add."}]}, "_handleTestObjectComplete": {"return": {"type": "Void", "description": ""}, "description": "Handles the completion of a test object's tests. Tallies test results \nfrom one level up to the next.", "private": "", "params": [{"type": "TestNode", "name": "node", "description": " The TestNode representing the test object."}], "guessedname": "_handleTestObjectComplete", "guessedtype": "function"}, "add": {"return": {"type": "Void", "description": ""}, "description": "Adds a test suite or test case to the list of test objects to run.", "static": "", "guessedname": "add", "guessedtype": "function", "params": [{"type": "", "name": "testObject", "description": " Either a TestCase or a TestSuite that should be run."}]}, "isWaiting": {"static": "", "return": {"type": "Boolean", "description": "True if the TestRunner is waiting, false if not."}, "description": "Indicates if the TestRunner is waiting for a test to resume", "guessedname": "isWaiting", "guessedtype": "function"}, "_next": {"return": {"type": "TestNode", "description": "The next node in the test tree or null if the end is reached."}, "description": "Retrieves the next node in the test tree.", "private": "", "static": "", "guessedname": "_next", "guessedtype": "function"}, "run": {"return": {"type": "Void", "description": ""}, "description": "Runs the test suite.", "static": "", "guessedname": "run", "guessedtype": "function", "params": [{"type": "Boolean", "name": "oldMode", "description": " (Optional) Specifies that the <= 2.8 way of\ninternally managing test suites should be used."}]}, "_handleError": {"return": {"type": "Void", "description": ""}, "description": "Handles an error as if it occurred within the currently executing\ntest. This is for mock methods that may be called asynchronously\nand therefore out of the scope of the TestRunner. Previously, this\nerror would bubble up to the browser. Now, this method is used\nto tell TestRunner about the error. This should never be called\nby anyplace other than the Mock object.", "private": "", "static": "", "guessedname": "_handleError", "guessedtype": "function", "params": [{"type": "Error", "name": "error", "description": " The error object."}]}, "clear": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Removes all test objects from the runner.", "guessedname": "clear", "guessedtype": "function"}, "_runTest": {"return": {"type": "Void", "description": ""}, "description": "Runs a single test based on the data provided in the node.", "private": "", "static": "", "guessedname": "_runTest", "guessedtype": "function", "params": [{"type": "TestNode", "name": "node", "description": " The TestNode representing the test to run."}], "name": "_runTest"}}, "static": "", "file": "TestRunner.js", "shortname": "Runner", "properties": {"_running": {"description": "Indicates if the TestRunner is currently running tests.", "private": "", "static": "", "guessedname": "_running", "guessedtype": "property", "type": "Boolean"}, "_root": {"description": "Pointer to the root node in the test tree.", "private": "", "static": "", "guessedname": "_root", "guessedtype": "property", "type": "TestNode"}, "masterSuite": {"type": "Y.Test.Suite", "static": "", "description": "Suite on which to attach all TestSuites and TestCases to be run.", "private": ""}, "_log": {"description": "Indicates if the TestRunner will log events or not.", "private": "", "static": "", "guessedname": "_log", "guessedtype": "property", "type": "Boolean"}, "_waiting": {"description": "Indicates if the TestRunner is waiting as a result of\nwait() being called.", "private": "", "static": "", "guessedname": "_waiting", "guessedtype": "property", "type": "Boolean"}, "_cur": {"description": "Pointer to the current node in the test tree.", "private": "", "static": "", "guessedname": "_cur", "guessedtype": "property", "type": "TestNode"}, "_lastResults": {"description": "Holds copy of the results object generated when all tests are\ncomplete.", "private": "", "static": "", "guessedname": "_lastResults", "guessedtype": "property", "type": "Object"}}, "description": "Runs test suites and test cases, providing events to allowing for the\ninterpretation of test results."}, "Get": {"name": "Get", "namespace": "", "module": "yui", "guessedname": "Get", "methods": {"_purge": {"guessedname": "_purge", "params": [{"type": "string", "name": "tId", "description": " the transaction id."}], "description": "Removes the nodes for the specified queue", "private": "", "guessedtype": "function"}, "_finalize": {"description": "Called by the the helper for detecting script load in Safari", "private": "", "static": "", "guessedname": "_finalize", "guessedtype": "function", "params": [{"type": "string", "name": "id", "description": " the transaction id."}]}, "_autoPurge": {"private": "", "description": "Removes processed queues and corresponding nodes", "guessedname": "_autoPurge", "guessedtype": "function"}, "_finish": {"guessedname": "_finish", "params": [{"type": "string", "name": "id", "description": " the id of the request."}], "description": "The request is complete, so executing the requester's callback", "private": "", "guessedtype": "function"}, "_linkNode": {"return": {"type": "HTMLElement", "description": "the generated node."}, "description": "Generates a link node", "private": "", "params": [{"type": "string", "name": "url", "description": " the url for the css file."}, {"type": "Window", "name": "win", "description": " optional window to create the node in."}, {"type": "object", "name": "attributes", "description": " optional attributes collection to apply to the\nnew node."}], "guessedname": "_linkNode", "guessedtype": "function"}, "script": {"return": {"type": "tId: string", "description": "an object containing info about the\ntransaction."}, "description": "Fetches and inserts one or more script nodes into the head\nof the current document or the document in a specified window.", "static": "", "guessedname": "script", "guessedtype": "function", "params": [{"type": "string|string[]", "name": "url", "description": " the url or urls to the script(s)."}, {"type": "object", "name": "opts", "description": " Options:\n<dl>\n<dt>onSuccess</dt>\n<dd>\ncallback to execute when the script(s) are finished loading\nThe callback receives an object back with the following\ndata:\n<dl>\n<dt>win</dt>\n<dd>the window the script(s) were inserted into</dd>\n<dt>data</dt>\n<dd>the data object passed in when the request was made</dd>\n<dt>nodes</dt>\n<dd>An array containing references to the nodes that were\ninserted</dd>\n<dt>purge</dt>\n<dd>A function that, when executed, will remove the nodes\nthat were inserted</dd>\n<dt>\n</dl>\n</dd>\n<dt>onTimeout</dt>\n<dd>\ncallback to execute when a timeout occurs.\nThe callback receives an object back with the following\ndata:\n<dl>\n<dt>win</dt>\n<dd>the window the script(s) were inserted into</dd>\n<dt>data</dt>\n<dd>the data object passed in when the request was made</dd>\n<dt>nodes</dt>\n<dd>An array containing references to the nodes that were\ninserted</dd>\n<dt>purge</dt>\n<dd>A function that, when executed, will remove the nodes\nthat were inserted</dd>\n<dt>\n</dl>\n</dd>\n<dt>onEnd</dt>\n<dd>a function that executes when the transaction finishes,\nregardless of the exit path</dd>\n<dt>onFailure</dt>\n<dd>\ncallback to execute when the script load operation fails\nThe callback receives an object back with the following\ndata:\n<dl>\n<dt>win</dt>\n<dd>the window the script(s) were inserted into</dd>\n<dt>data</dt>\n<dd>the data object passed in when the request was made</dd>\n<dt>nodes</dt>\n<dd>An array containing references to the nodes that were\ninserted successfully</dd>\n<dt>purge</dt>\n<dd>A function that, when executed, will remove any nodes\nthat were inserted</dd>\n<dt>\n</dl>\n</dd>\n<dt>context</dt>\n<dd>the execution context for the callbacks</dd>\n<dt>win</dt>\n<dd>a window other than the one the utility occupies</dd>\n<dt>autopurge</dt>\n<dd>\nsetting to true will let the utilities cleanup routine purge\nthe script once loaded\n</dd>\n<dt>purgethreshold</dt>\n<dd>\nThe number of transaction before autopurge should be initiated\n</dd>\n<dt>data</dt>\n<dd>\ndata that is supplied to the callback when the script(s) are\nloaded.\n</dd>\n<dt>insertBefore</dt>\n<dd>node or node id that will become the new node's nextSibling.\nIf this is not specified, nodes will be inserted before a base\ntag should it exist.  Otherwise, the nodes will be appended to the\nend of the document head.</dd>\n</dl>\n<dt>charset</dt>\n<dd>Node charset, default utf-8 (deprecated, use the attributes\nconfig)</dd>\n<dt>attributes</dt>\n<dd>An object literal containing additional attributes to add to\nthe link tags</dd>\n<dt>timeout</dt>\n<dd>Number of milliseconds to wait before aborting and firing\nthe timeout event</dd>\n<pre>\n&nbsp; Y.Get.script(\n&nbsp; [\"http://yui.yahooapis.com/2.5.2/build/yahoo/yahoo-min.js\",\n&nbsp;  \"http://yui.yahooapis.com/2.5.2/build/event/event-min.js\"],\n&nbsp; &#123;\n&nbsp;   onSuccess: function(o) &#123;\n&nbsp;     this.log(\"won't cause error because Y is the context\");\n&nbsp;     Y.log(o.data); // foo\n&nbsp;     Y.log(o.nodes.length === 2) // true\n&nbsp;     // o.purge(); // optionally remove the script nodes\n&nbsp;                   // immediately\n&nbsp;   &#125;,\n&nbsp;   onFailure: function(o) &#123;\n&nbsp;     Y.log(\"transaction failed\");\n&nbsp;   &#125;,\n&nbsp;   onTimeout: function(o) &#123;\n&nbsp;     Y.log(\"transaction timed out\");\n&nbsp;   &#125;,\n&nbsp;   data: \"foo\",\n&nbsp;   timeout: 10000, // 10 second timeout\n&nbsp;   context: Y, // make the YUI instance\n&nbsp;   // win: otherframe // target another window/frame\n&nbsp;   autopurge: true // allow the utility to choose when to\n&nbsp;                   // remove the nodes\n&nbsp;   purgetheshold: 1 // purge previous transaction before\n&nbsp;                    // next transaction\n&nbsp; &#125;);.\n</pre>"}]}, "_end": {"guessedname": "_end", "params": [{"type": "string", "name": "id", "description": " the id of the request."}, {"type": "string", "name": "msg", "description": " the result message."}, {"type": "string", "name": "result", "description": " the status message from the request."}], "description": "The transaction is finished", "private": "", "guessedtype": "function"}, "_returnData": {"return": {"type": "object", "description": "the state data from the request."}, "description": "Returns the data payload for callback functions.", "private": "", "params": [{"type": "object", "name": "q", "description": " the queue."}, {"type": "string", "name": "msg", "description": " the result message."}, {"type": "string", "name": "result", "description": " the status message from the request."}], "guessedname": "_returnData", "guessedtype": "function"}, "queue": {"return": {"type": "object", "description": "transaction object."}, "description": "Saves the state for the request and begins loading\nthe requested urls", "private": "", "params": [{"type": "string", "name": "type", "description": " the type of node to insert."}, {"type": "string", "name": "url", "description": " the url to load."}, {"type": "object", "name": "opts", "description": " the hash of options for this request."}], "guessedname": "_queue", "guessedtype": "function"}, "_scriptNode": {"return": {"type": "HTMLElement", "description": "the generated node."}, "description": "Generates a script node", "private": "", "params": [{"type": "string", "name": "url", "description": " the url for the script file."}, {"type": "Window", "name": "win", "description": " optional window to create the node in."}, {"type": "object", "name": "attributes", "description": " optional attributes collection to apply to the\nnew node."}], "guessedname": "_scriptNode", "guessedtype": "function"}, "_node": {"return": {"type": "HTMLElement", "description": "the generated node."}, "description": "Generates an HTML element, this is not appended to a document", "private": "", "params": [{"type": "string", "name": "type", "description": " the type of element."}, {"type": "string", "name": "attr", "description": " the attributes."}, {"type": "Window", "name": "win", "description": " optional window to create the element in."}], "guessedname": "_node", "guessedtype": "function"}, "abort": {"static": "", "params": [{"type": "string|object", "name": "o", "description": " Either the tId or the object returned from\nscript() or css()."}], "description": "Abort a transaction", "guessedname": "abort", "guessedtype": "function"}, "_next": {"return": {"type": "string", "description": "the result."}, "description": "Loads the next item for a given request", "private": "", "params": [{"type": "string", "name": "id", "description": " the id of the request."}, {"type": "string", "name": "loaded", "description": " the url that was just loaded, if any."}], "guessedname": "_next", "guessedtype": "function"}, "_timeout": {"guessedname": "_timeout", "params": [{"type": "string", "name": "id", "description": " the id of the request."}], "description": "Timeout detected", "private": "", "guessedtype": "function"}, "_track": {"guessedname": "_track", "params": [{"type": "string", "name": "type", "description": " the type of node to track."}, {"type": "HTMLElement", "name": "n", "description": " the node to track."}, {"type": "string", "name": "id", "description": " the id of the request."}, {"type": "string", "name": "url", "description": " the url that is being loaded."}, {"type": "Window", "name": "win", "description": " the targeted window."}, {"type": "int", "name": "qlength", "description": " the number of remaining items in the queue,\nincluding this one."}, {"type": "Function", "name": "trackfn", "description": " function to execute when finished\nthe default is _next."}], "description": "Detects when a node has been loaded.  In the case of\nscript nodes, this does not guarantee that contained\nscript is ready to use.", "private": "", "guessedtype": "function"}, "css": {"return": {"type": "tId: string", "description": "an object containing info about the\ntransaction."}, "description": "Fetches and inserts one or more css link nodes into the\nhead of the current document or the document in a specified\nwindow.", "static": "", "guessedname": "css", "guessedtype": "function", "params": [{"type": "string", "name": "url", "description": " the url or urls to the css file(s)."}, {"type": "object", "name": "opts", "description": " Options:\n<dl>\n<dt>onSuccess</dt>\n<dd>\ncallback to execute when the css file(s) are finished loading\nThe callback receives an object back with the following\ndata:\n<dl>win</dl>\n<dd>the window the link nodes(s) were inserted into</dd>\n<dt>data</dt>\n<dd>the data object passed in when the request was made</dd>\n<dt>nodes</dt>\n<dd>An array containing references to the nodes that were\ninserted</dd>\n<dt>purge</dt>\n<dd>A function that, when executed, will remove the nodes\nthat were inserted</dd>\n<dt>\n</dl>\n</dd>\n<dt>context</dt>\n<dd>the execution context for the callbacks</dd>\n<dt>win</dt>\n<dd>a window other than the one the utility occupies</dd>\n<dt>data</dt>\n<dd>\ndata that is supplied to the callbacks when the nodes(s) are\nloaded.\n</dd>\n<dt>insertBefore</dt>\n<dd>node or node id that will become the new node's nextSibling</dd>\n<dt>charset</dt>\n<dd>Node charset, default utf-8 (deprecated, use the attributes\nconfig)</dd>\n<dt>attributes</dt>\n<dd>An object literal containing additional attributes to add to\nthe link tags</dd>\n</dl>\n<pre>\nY.Get.css(\"http://localhost/css/menu.css\");\n</pre>\n<pre>\n&nbsp; Y.Get.css(\n&nbsp; [\"http://localhost/css/menu.css\",\n&nbsp;  \"http://localhost/css/logger.css\"], &#123;\n&nbsp;   insertBefore: 'custom-styles' // nodes will be inserted\n&nbsp;                                 // before the specified node\n&nbsp; &#125;);.\n</pre>"}]}}, "static": "", "file": "get.js", "guessedtype": "function", "shortname": "Get", "properties": {"queues": {"description": "hash of queues to manage multiple requests", "private": ""}, "qidx": {"guessedname": "qidx", "type": "int", "description": "queue index used to generate transaction ids", "private": "", "guessedtype": "property"}, "PURGE_THRESH": {"description": "The number of request required before an automatic purge.\nCan be configured via the 'purgethreshold' config\nproperty PURGE_THRESH", "default": "20", "private": "", "static": "", "guessedname": "PURGE_THRESH", "guessedtype": "property", "type": "int"}, "purging": {"type": "boolean", "description": "interal property used to prevent multiple simultaneous purge\nprocesses", "private": ""}}, "description": "Fetches and inserts one or more script or link nodes into the document"}, "Plugin.DDConstrained": {"name": "Plugin.DDConstrained", "configs": {"tickX": {"type": "Number/false", "description": "The X tick offset the drag node should snap to on each drag move. False for no ticks. Default: false", "guessedname": "tickX", "guessedtype": "property"}, "tickY": {"type": "Number/false", "description": "The Y tick offset the drag node should snap to on each drag move. False for no ticks. Default: false", "guessedname": "tickY", "guessedtype": "property"}, "gutter": {"type": "String", "description": "CSS style string for the gutter of a region (supports negative values): '5 0' (sets top and bottom to 5px, left and right to 0px), '1 2 3 4' (top 1px, right 2px, bottom 3px, left 4px)", "guessedname": "gutter", "guessedtype": "property"}, "tickYArray": {"type": "Array", "description": "An array of page coordinates to use as Y ticks for drag movement.", "guessedname": "tickYArray", "guessedtype": "property"}, "constrain2node": {"deprecated": "", "type": "Object", "description": "Will attempt to constrain the drag node to the boundaries of this node.", "guessedname": "constrain2node", "guessedtype": "property"}, "stickX": {"type": "Boolean", "description": "Stick the drag movement to the X-Axis. Default: false", "guessedname": "stickX", "guessedtype": "property"}, "stickY": {"type": "Boolean", "description": "Stick the drag movement to the Y-Axis", "guessedname": "stickY", "guessedtype": "property"}, "constrain2region": {"deprecated": "", "type": "Object", "description": "An Object Literal containing a valid region (top, right, bottom, left) of page positions to constrain the drag node to.", "guessedname": "constrain2region", "guessedtype": "property"}, "cacheRegion": {"type": "Boolean", "description": "Should the region be cached for performace. Default: true", "guessedname": "cacheRegion", "guessedtype": "property"}, "constrain": {"type": "{String/Object/Node}", "description": "Will attempt to constrain the drag node to the boundaries. Arguments:<br>\n'view': Contrain to Viewport<br>\n'#selector_string': Constrain to this node<br>\n'{Region Object}': An Object Literal containing a valid region (top, right, bottom, left) of page positions", "guessedname": "constrain", "guessedtype": "property"}, "constrain2view": {"deprecated": "", "type": "Object", "description": "Will attempt to constrain the drag node to the boundaries of the viewport region.", "guessedname": "constrain2view", "guessedtype": "property"}, "tickXArray": {"type": "Array", "description": "An array of page coordinates to use as X ticks for drag movement.", "guessedname": "tickXArray", "guessedtype": "property"}}, "constructors": [{"description": "Plugin for the dd-drag module to add the constraining methods to it. It supports constraining to a node or viewport. It supports tick based moves and XY axis constraints."}], "namespace": "Plugin", "module": "dd", "properties": {"_regionCache": {"guessedname": "_regionCache", "type": "Object", "description": "Store a cache of the region that we are constraining to", "private": "", "guessedtype": "property"}, "NS": {"description": "The Constrained instance will be placed on the Drag instance under the con namespace.", "default": "con", "readonly": "", "protected": "", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "{String}"}}, "guessedname": "DRAG_NODE", "methods": {"_createEvents": {"description": "This method creates all the events for this Event Target and publishes them so we get Event Bubbling.", "private": "", "guessedname": "_createEvents", "guessedtype": "function"}, "_getConstraint": {"description": "Standardizes the 'constraint' attribute", "private": "", "guessedname": "_getConstraint", "guessedtype": "function"}, "_tickAlignY": {"description": "Fires when the actXY[1] reach a new value respecting the tickY gap.", "private": "", "guessedname": "_tickAlignY", "guessedtype": "function"}, "_checkTicks": {"return": {"type": "Array", "description": "The calced XY coords"}, "description": "This method delegates the proper helper method for tick calculations", "private": "", "params": [{"type": "Array", "name": "xy", "description": " The XY coords for the Drag"}, {"type": "Object", "name": "r", "description": " The optional region that we are bound to."}], "guessedname": "_checkTicks", "guessedtype": "function"}, "_checkRegion": {"return": {"type": "Array", "description": "The new XY that is inside the region"}, "description": "Check if xy is inside a given region, if not change to it be inside.", "private": "", "params": [{"type": "Array", "name": "_xy", "description": " The XY to check if it's in the current region, if it isn't inside the region, it will reset the xy array to be inside the region."}], "guessedname": "_checkRegion", "guessedtype": "function"}, "getRegion": {"return": {"type": "Object", "description": ""}, "params": [{"type": "Boolean", "name": "inc", "description": " Include the node's height and width"}], "description": "Get the active region: viewport, node, custom region", "guessedname": "getRegion", "guessedtype": "function"}, "align": {"description": "Modifies the Drag.actXY method from the after drag:align event. This is where the constraining happens.", "guessedname": "align", "guessedtype": "function"}, "resetCache": {"description": "Reset the internal region cache.", "guessedname": "resetCache", "guessedtype": "function"}, "drag": {"description": "Fires after drag:drag. Handle the tickX and tickX align events.", "guessedname": "drag", "guessedtype": "function"}, "_handleStart": {"description": "Fires on drag:start and clears the _regionCache", "private": "", "guessedname": "_handleStart", "guessedtype": "function"}, "_handleEnd": {"description": "Fires on drag:end", "private": "", "guessedname": "_handleEnd", "guessedtype": "function"}, "inRegion": {"return": {"type": "Boolean", "description": "True if the XY is inside the region, false otherwise."}, "params": [{"type": "Array", "name": "xy", "description": " Optional XY to check, if not supplied this.get('dragNode').getXY() is used."}], "description": "Checks if the XY passed or the dragNode is inside the active region.", "guessedname": "inRegion", "guessedtype": "function"}, "_tickAlignX": {"description": "Fires when the actXY[0] reach a new value respecting the tickX gap.", "private": "", "guessedname": "_tickAlignX", "guessedtype": "function"}, "_cacheRegion": {"description": "Get's the region and caches it, called from window.resize and when the cache is null", "private": "", "guessedname": "_cacheRegion", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "constrain.js", "guessedtype": "property", "shortname": "DDConstrained", "events": {"constrain2viewChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "constrain2viewChange", "description": "Fires when the value for the configuration attribute 'constrain2view' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tickXChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tickXChange", "description": "Fires when the value for the configuration attribute 'tickX' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tickXArrayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tickXArrayChange", "description": "Fires when the value for the configuration attribute 'tickXArray' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "gutterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "gutterChange", "description": "Fires when the value for the configuration attribute 'gutter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "constrain2nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "constrain2nodeChange", "description": "Fires when the value for the configuration attribute 'constrain2node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stickYChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stickYChange", "description": "Fires when the value for the configuration attribute 'stickY' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tickYArrayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tickYArrayChange", "description": "Fires when the value for the configuration attribute 'tickYArray' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stickXChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stickXChange", "description": "Fires when the value for the configuration attribute 'stickX' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "constrainChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "constrainChange", "description": "Fires when the value for the configuration attribute 'constrain' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tickYChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tickYChange", "description": "Fires when the value for the configuration attribute 'tickY' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "constrain2regionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "constrain2regionChange", "description": "Fires when the value for the configuration attribute 'constrain2region' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "cacheRegionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cacheRegionChange", "description": "Fires when the value for the configuration attribute 'cacheRegion' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drag:tickAlignY": {"type": "{Event.Custom}", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object"}], "description": "Fires when this node is aligned with the tickY value.", "guessedname": "EV_TICK_ALIGN_Y", "guessedtype": "property"}, "drag:tickAlignX": {"type": "{Event.Custom}", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object"}], "description": "Fires when this node is aligned with the tickX value.", "guessedname": "EV_TICK_ALIGN_X", "guessedtype": "property"}}, "description": "Plugin for the dd-drag module to add the constraining methods to it. It supports constraining to a node or viewport. It supports tick based moves and XY axis constraints."}, "AutoComplete": {"name": "AutoComplete", "namespace": "", "module": "autocomplete", "guessedname": "AutoComplete", "file": "autocomplete-list.js", "guessedtype": "property", "shortname": "AutoComplete", "description": "Alias for <a href=\"AutoCompleteList.html\"><code>AutoCompleteList</code></a>.\nSee that class for API docs."}, "ArrayList~add": {"name": "ArrayList~add", "namespace": "", "module": "collection", "methods": {"add": {"return": {"type": "ArrayList", "description": "the instance."}, "description": "Add a single item to the ArrayList.  Does not prevent duplicates.", "chainable": "", "params": [{"type": " mixed ", "name": "item", "description": " Item presumably of the same type as others in the\nArrayList."}, {"type": "Number", "name": "index", "description": " (Optional.)  Number representing the position at\nwhich the item should be inserted."}], "guessedname": "add", "guessedtype": "function"}, "itemsAreEqual": {"return": {"type": " Boolean ", "description": "true if items are deemed equivalent."}, "params": [{"type": " mixed ", "name": "a", "description": " item to test equivalence with."}, {"type": " mixed ", "name": "b", "description": " other item to test equivalance."}], "description": "Default comparator for items stored in this list.  Used by remove().", "guessedname": "itemsAreEqual", "guessedtype": "function"}, "remove": {"return": {"type": "ArrayList", "description": "the instance."}, "description": "Removes first or all occurrences of an item to the ArrayList.  If a\ncomparator is not provided, uses itemsAreEqual method to determine\nmatches.", "chainable": "", "params": [{"type": " mixed ", "name": "needle", "description": " Item to find and remove from the list."}, {"type": " Boolean ", "name": "all", "description": " If true, remove all occurrences."}, {"type": " Function ", "name": "comparator", "description": " optional a/b function to test equivalence."}], "guessedname": "remove", "guessedtype": "function"}}, "file": "arraylist-add.js", "shortname": "ArrayList~add", "description": "Adds methods add and remove to Y.ArrayList"}, "JSON": {"name": "JSON", "namespace": "", "module": "json", "methods": {"parse": {"return": {"type": "MIXED", "description": "the native JavaScript representation of the JSON string"}, "static": "", "params": [{"type": "string", "name": "s", "description": "  JSON string data"}, {"type": "function", "name": "reviver", "description": "  (optional) function(k,v) passed each key value\npair of object literals, allowing pruning or altering values"}], "description": "Parse a JSON string, returning the native JavaScript representation.", "throws": "SyntaxError"}, "stringify": {"return": {"type": "string", "description": "JSON string representation of the input"}, "description": "<p>Converts an arbitrary value to a JSON string representation.</p>\n<p>Objects with cyclical references will trigger an exception.</p>\n<p>If a whitelist is provided, only matching object keys will be\nincluded.  Alternately, a replacer function may be passed as the\nsecond parameter.  This function is executed on every value in the\ninput, and its return value will be used in place of the original value.\nThis is useful to serialize specialized objects or class instances.</p>\n<p>If a positive integer or non-empty string is passed as the third\nparameter, the output will be formatted with carriage returns and\nindentation for readability.  If a String is passed (such as \"\\t\") it\nwill be used once for each indentation level.  If a number is passed,\nthat number of spaces will be used.</p>", "static": "", "guessedname": "stringify", "guessedtype": "function", "params": [{"type": "MIXED", "name": "o", "description": "  any arbitrary value to convert to JSON string"}, {"type": "Array|Function", "name": "w", "description": "  (optional) whitelist of acceptable object\nkeys to include, or a replacer function to modify the\nraw value before serialization"}, {"type": "Number|String", "name": "ind", "description": "  (optional) indentation character or depth of\nspaces to format the output."}]}, "escapeException": {"return": {"type": "String", "description": "the \\unnnn escapement of the character"}, "description": "Replaces specific unicode characters with their appropriate \\unnnn\nformat. Some browsers ignore certain characters during eval.", "private": "", "params": [{"type": "String", "name": "c", "description": "  Unicode character"}], "guessedname": "_escapeException", "guessedtype": "function"}, "dateToString": {"return": {"type": "String", "description": "stringified Date in UTC format YYYY-MM-DDTHH:mm:SSZ"}, "description": "Serializes a Date instance as a UTC date string.  Used internally by\nstringify.  Override this method if you need Dates serialized in a\ndifferent format.", "deprecated": "Use a replacer function", "static": "", "guessedname": "dateToString", "guessedtype": "function", "params": [{"type": "Date", "name": "d", "description": "  The Date to serialize"}]}, "_revive": {"return": {"type": "MIXED", "description": "The results of the filtered data"}, "description": "Traverses nested objects, applying a reviver function to each (key,value)\nfrom the scope if the key:value's containing object.  The value returned\nfrom the function will replace the original value in the key:value pair.\nIf the value returned is undefined, the key will be omitted from the\nreturned object.", "private": "", "params": [{"type": "MIXED", "name": "data", "description": "  Any JavaScript data"}, {"type": "Function", "name": "reviver", "description": "  filter or mutation function"}], "guessedname": "_revive", "guessedtype": "function"}}, "static": "", "file": "parse.js", "shortname": "JSON", "properties": {"_BRACKETS": {"guessedname": "_BRACKETS", "type": "{RegExp}", "description": "Third step in the safety evaluation.  Regex used to remove all open\nsquare brackets following a colon, comma, or at the beginning of the\nstring.", "private": "", "guessedtype": "property"}, "_UNICODE_EXCEPTIONS": {"guessedname": "_UNICODE_EXCEPTIONS", "type": "{RegExp}", "description": "Replace certain Unicode characters that JavaScript may handle incorrectly\nduring eval--either by deleting them or treating them as line\nendings--with escape sequences.\nIMPORTANT NOTE: This regex will be used to modify the input if a match is\nfound.", "private": "", "guessedtype": "property"}, "useNativeParse": {"description": "Leverage native JSON parse if the browser has a native implementation.\nIn general, this is a good idea.  See the Known Issues section in the\nJSON user guide for caveats.  The default value is true for browsers with\nnative JSON support.", "default": "true", "static": "", "guessedname": "useNativeParse", "guessedtype": "property", "type": "Boolean"}, "JSON.useNativeStringify": {"description": "Leverage native JSON stringify if the browser has a native\nimplementation.  In general, this is a good idea.  See the Known Issues\nsection in the JSON user guide for caveats.  The default value is true\nfor browsers with native JSON support.", "default": "true", "static": "", "guessedname": "useNativeStringify", "guessedtype": "property", "type": "Boolean"}, "_UNSAFE": {"guessedname": "_UNSAFE", "type": "{RegExp}", "description": "Final step in the safety evaluation.  Regex used to test the string left\nafter all previous replacements for invalid characters.", "private": "", "guessedtype": "property"}, "_ESCAPES": {"guessedname": "_ESCAPES", "type": "{RegExp}", "description": "First step in the safety evaluation.  Regex used to replace all escape\nsequences (i.e. \"\\\\\", etc) with '@' characters (a non-JSON character).", "private": "", "guessedtype": "property"}, "_VALUES": {"guessedname": "_VALUES", "type": "{RegExp}", "description": "Second step in the safety evaluation.  Regex used to replace all simple\nvalues with ']' characters.", "private": "", "guessedtype": "property"}, "Native": {"guessedname": "_JSON", "type": "{Object}", "description": "Alias to native browser implementation of the JSON object if available.", "private": "", "guessedtype": "property"}}, "description": "<p>The JSON module adds support for serializing JavaScript objects into\nJSON strings and parsing JavaScript objects from strings in JSON format.</p>\n<p>The JSON namespace is added to your YUI instance including static methods\nY.JSON.parse(..) and Y.JSON.stringify(..).</p>\n<p>The functionality and method signatures follow the ECMAScript 5\nspecification.  In browsers with native JSON support, the native\nimplementation is used.</p>\n<p>The <code>json</code> module is a rollup of <code>json-parse</code> and\n<code>json-stringify</code>.</p>\n<p>As their names suggest, <code>json-parse</code> adds support for parsing\nJSON data (Y.JSON.parse) and <code>json-stringify</code> for serializing\nJavaScript data into JSON strings (Y.JSON.stringify).  You may choose to\ninclude either of the submodules individually if you don't need the\ncomplementary functionality, or include the rollup for both.</p>"}, "Test.Manager": {"name": "Test.Manager", "namespace": "Test", "module": "test", "events": {"testmanagerbegin": {"static": "", "description": "Fires when the test manager starts running all test pages"}, "testmanagercomplete": {"static": "", "params": [{"type": " pages_passed: int, pages_failed: int, tests_passed: int\ntests_failed: int, passed: string[], failed: string[],\npage_results: {} ", "name": "obj", "description": ""}], "description": "Fires when the test manager finishes running all test pages.  External\ntest runners should subscribe to this event in order to get the\naggregated test results."}, "testpagecomplete": {"static": "", "params": [{"type": "page: string, results: object", "name": "obj", "description": "  the name of the\npage that was loaded, and the test suite results"}], "description": "Fires when a test page is complete"}, "testpagebegin": {"static": "", "params": [{"type": "string", "name": "curPage", "description": "  the page being loaded"}], "description": "Fires when loading a test page"}}, "guessedname": "Manager", "methods": {"load": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Signals that a test page has been loaded. This should be called from\nwithin the test page itself to notify the TestManager that it is ready.", "guessedname": "load", "guessedtype": "function"}, "_run": {"return": {"type": "Void", "description": ""}, "description": "Loads the next test page into the iframe.", "private": "", "static": "", "guessedname": "_run", "guessedtype": "function"}, "stop": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Stops the execution of tests.", "guessedname": "stop", "guessedtype": "function"}, "setPages": {"return": {"type": "Void", "description": ""}, "description": "Sets the pages to be loaded.", "static": "", "guessedname": "setPages", "guessedtype": "function", "params": [{"type": "String[]", "name": "pages", "description": " An array of URLs to load."}]}, "start": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Begins the process of running the tests.", "guessedname": "start", "guessedtype": "function"}, "_processResults": {"return": {"type": "Void", "description": ""}, "description": "Processes the results of a test page run, outputting log messages\nfor failed tests.", "private": "", "static": "", "guessedname": "_processResults", "guessedtype": "function"}, "_handleTestRunnerComplete": {"return": {"type": "Void", "description": ""}, "description": "Handles TestRunner.COMPLETE_EVENT, storing the results and beginning\nthe loop again.", "private": "", "static": "", "guessedname": "_handleTestRunnerComplete", "guessedtype": "function", "params": [{"type": "Object", "name": "data", "description": " Data about the event."}]}}, "static": "", "file": "TestManager.js", "guessedtype": "property", "shortname": "Manager", "properties": {"_pages": {"description": "Array of pages to load.", "private": "", "static": "", "guessedname": "_pages", "guessedtype": "property", "type": "String[]"}, "TEST_MANAGER_COMPLETE_EVENT": {"description": "Constant for the testmanagercomplete custom event", "static": "", "guessedname": "TEST_MANAGER_COMPLETE_EVENT", "guessedtype": "property", "type": "string", "final": ""}, "_timeoutId": {"description": "The timeout ID for the next iteration through the tests.", "private": "", "static": "", "guessedname": "_timeoutId", "guessedtype": "property", "type": "int"}, "_logger": {"description": "The logger used to output results from the various tests.", "private": "", "static": "", "guessedname": "_logger", "guessedtype": "property", "type": "YAHOO.tool.TestLogger"}, "TEST_PAGE_BEGIN_EVENT": {"description": "Constant for the testpagebegin custom event", "static": "", "guessedname": "TEST_PAGE_BEGIN_EVENT", "guessedtype": "property", "type": "string", "final": ""}, "TEST_PAGE_COMPLETE_EVENT": {"description": "Constant for the testpagecomplete custom event", "static": "", "guessedname": "TEST_PAGE_COMPLETE_EVENT", "guessedtype": "property", "type": "string", "final": ""}, "_curPage": {"description": "The URL of the page currently being executed.", "private": "", "static": "", "guessedname": "_curPage", "guessedtype": "property", "type": "String"}, "_results": {"description": "Aggregated results", "private": "", "static": "", "guessedname": "_results", "guessedtype": "property", "type": "Object"}, "TEST_MANAGER_BEGIN_EVENT": {"description": "Constant for the testmanagerbegin custom event", "static": "", "guessedname": "TEST_MANAGER_BEGIN_EVENT", "guessedtype": "property", "type": "string", "final": ""}, "_frame": {"description": "The frame used to load and run tests.", "private": "", "static": "", "guessedname": "_frame", "guessedtype": "property", "type": "Window"}}, "description": "Runs pages containing test suite definitions."}, "Cookie": {"name": "Cookie", "namespace": "", "module": "cookie", "guessedname": "Cookie", "methods": {"setSub": {"return": {"type": "String", "description": "The created cookie string."}, "description": "Sets a sub cookie with a given name to a particular value.", "static": "", "guessedname": "setSub", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to set."}, {"type": "String", "name": "subName", "description": " The name of the subcookie to set."}, {"type": "Variant", "name": "value", "description": " The value to set."}, {"type": "Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nand secure (true/false)."}]}, "_parseCookieHash": {"return": {"type": "Object", "description": "An object containing entries for each cookie value."}, "description": "Parses a cookie hash string into an object.", "private": "", "static": "", "guessedname": "_parseCookieHash", "guessedtype": "function", "params": [{"type": "String", "name": "text", "description": " The cookie hash string to parse (format: n1=v1&n2=v2)."}]}, "set": {"return": {"type": "String", "description": "The created cookie string."}, "description": "Sets a cookie with a given name and value.", "static": "", "guessedname": "set", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to set."}, {"type": "Variant", "name": "value", "description": " The value to set for the cookie."}, {"type": "Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nsecure (true/false), and raw (true/false). Setting raw to true indicates\nthat the cookie should not be URI encoded before being set."}]}, "setSubs": {"return": {"type": "String", "description": "The created cookie string."}, "description": "Sets a cookie with a given name to contain a hash of name-value pairs.", "static": "", "guessedname": "setSubs", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to set."}, {"type": "Object", "name": "value", "description": " An object containing name-value pairs."}, {"type": "Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nand secure (true/false)."}]}, "exists": {"return": {"type": "Boolean", "description": "True if the cookie exists, false if not."}, "description": "Determines if the cookie with the given name exists. This is useful for\nBoolean cookies (those that do not follow the name=value convention).", "static": "", "guessedname": "exists", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to check."}]}, "get": {"return": {"type": "Variant", "description": "If no converter is specified, returns a string or null if\nthe cookie doesn't exist. If the converter is specified, returns the value\nreturned from the converter or null if the cookie doesn't exist."}, "description": "Returns the cookie value for the given name.", "static": "", "guessedname": "get", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to retrieve."}, {"type": "Function|Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: raw (true/false) and converter (a function).\nThe converter function is run on the value before returning it. The\nfunction is not used if the cookie doesn't exist. The function can be\npassed instead of the options object for backwards compatibility. When\nraw is set to true, the cookie value is not URI decoded."}]}, "_parseCookieString": {"return": {"type": "Object", "description": "An object containing entries for each accessible cookie."}, "description": "Parses a cookie string into an object representing all accessible cookies.", "private": "", "static": "", "guessedname": "_parseCookieString", "guessedtype": "function", "params": [{"type": "String", "name": "text", "description": " The cookie string to parse."}, {"type": "Boolean", "name": "shouldDecode", "description": " (Optional) Indicates if the cookie values should be decoded or not. Default is true."}]}, "_setDoc": {"return": {"type": "void", "description": ""}, "description": "Sets the document object that the cookie utility uses for setting\ncookies. This method is necessary to ensure that the cookie utility\nunit tests can pass even when run on a domain instead of locally.\nThis method should not be used otherwise; you should use \n<code>Y.config.doc</code> to change the document that the cookie\nutility uses for everyday purposes.", "private": "", "params": [{"type": "Object", "name": "newDoc", "description": " The object to use as the document."}], "guessedname": "_setDoc", "guessedtype": "function"}, "remove": {"return": {"type": "String", "description": "The created cookie string."}, "description": "Removes a cookie from the machine by setting its expiration date to\nsometime in the past.", "static": "", "guessedname": "remove", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to remove."}, {"type": "Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), \nand secure (true/false). The expires option will be overwritten\nby the method."}]}, "removeSub": {"return": {"type": "String", "description": "The created cookie string."}, "description": "Removes a sub cookie with a given name.", "static": "", "guessedname": "removeSub", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie in which the subcookie exists."}, {"type": "String", "name": "subName", "description": " The name of the subcookie to remove."}, {"type": "Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nremoveIfEmpty (true/false), and secure (true/false). This must be the same\nsettings as the original subcookie."}]}, "_createCookieHashString": {"return": {"type": "String", "description": "A string suitable for use as a cookie value."}, "description": "Formats a cookie value for an object containing multiple values.", "private": "", "static": "", "guessedname": "_createCookieHashString", "guessedtype": "function", "params": [{"type": "Object", "name": "hash", "description": " An object of key-value pairs to create a string for."}]}, "getSubs": {"return": {"type": "Object", "description": "An object of name-value pairs if the cookie with the given name\nexists, null if it does not."}, "description": "Returns an object containing name-value pairs stored in the cookie with the given name.", "static": "", "guessedname": "getSubs", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to retrieve."}]}, "getSub": {"return": {"type": "Variant", "description": "If the cookie doesn't exist, null is returned. If the subcookie\ndoesn't exist, null if also returned. If no converter is specified and the\nsubcookie exists, a string is returned. If a converter is specified and the\nsubcookie exists, the value returned from the converter is returned."}, "description": "Returns the value of a subcookie.", "static": "", "guessedname": "getSub", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to retrieve."}, {"type": "String", "name": "subName", "description": " The name of the subcookie to retrieve."}, {"type": "Function", "name": "converter", "description": " (Optional) A function to run on the value before returning\nit. The function is not used if the cookie doesn't exist."}]}, "_createCookieString": {"return": {"type": "String", "description": "The formatted cookie string."}, "description": "Creates a cookie string that can be assigned into document.cookie.", "private": "", "static": "", "guessedname": "_createCookieString", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie."}, {"type": "String", "name": "value", "description": " The value of the cookie."}, {"type": "Boolean", "name": "encodeValue", "description": " True to encode the value, false to leave as-is."}, {"type": "Object", "name": "options", "description": " (Optional) Options for the cookie."}]}}, "static": "", "file": "Cookie.js", "guessedtype": "property", "shortname": "Cookie", "description": "Cookie utility."}, "Mock.Value.ObjectAssert": {"name": "Mock.Value.ObjectAssert", "namespace": "Mock.Value", "module": "test", "guessedname": "ObjectAssert", "methods": {"hasKeys": {"static": "", "params": [{"type": "Array", "name": "properties", "description": " An array of property names that should be on the object."}, {"type": "Object", "name": "object", "description": " The object to search."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that an object has all properties of a reference object. The properties may exist either\non the object instance or in its prototype chain. The same as testing \n\"property\" in object.", "guessedname": "hasKeys", "guessedtype": "function"}, "ownsKeys": {"static": "", "params": [{"type": "Array", "name": "properties", "description": " An array of property names that should be on the object."}, {"type": "Object", "name": "object", "description": " The object to search."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that all properties exist on an object instance (not on its prototype).", "guessedname": "ownsKeys", "guessedtype": "function"}, "hasKey": {"static": "", "params": [{"type": "String", "name": "propertyName", "description": " The name of the property to test."}, {"type": "Object", "name": "object", "description": " The object to search."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that an object has a property with the given name. The property may exist either\non the object instance or in its prototype chain. The same as testing \n\"property\" in object.", "guessedname": "hasKey", "guessedtype": "function"}, "ownsNoKeys": {"static": "", "params": [{"type": "Object", "name": "object", "description": " The object to check."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that an object owns no properties.", "guessedname": "ownsNoKeys", "guessedtype": "function"}, "ownsKey": {"static": "", "params": [{"type": "String", "name": "propertyName", "description": " The name of the property to test."}, {"type": "Object", "name": "object", "description": " The object to search."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a property with the given name exists on an object instance (not on its prototype).", "guessedname": "ownsKey", "guessedtype": "function"}}, "static": "", "file": "ObjectAssert.js", "guessedtype": "property", "shortname": "ObjectAssert", "description": "The ObjectAssert object provides functions to test JavaScript objects\nfor a variety of cases."}, "DataType.Date": {"name": "DataType.Date", "namespace": "", "module": "datatype", "methods": {"parse": {"return": {"type": "Date", "description": "A Date, or null."}, "params": [{"type": "String | Number", "name": "data", "description": "  Data to convert. Values supported by the Date constructor are supported."}], "description": "Converts data to type Date.", "guessedname": "parse", "guessedtype": "function"}, "xPad": {"guessedname": "xPad", "params": [{"type": "Number", "name": "x", "description": " \tThe number to be padded"}, {"type": "String", "name": "pad", "description": "   The character to pad the number with"}, {"type": "Number", "name": "r", "description": " \t(optional) The base of the pad, eg, 10 implies to two digits, 100 implies to 3 digits."}], "description": "Pad a number with leading spaces, zeroes or something else", "private": "", "guessedtype": "function"}, "format": {"return": {"type": "String", "description": "Formatted date for display."}, "params": [{"type": "Date", "name": "oDate", "description": "  Date."}, {"type": "Object} (Optional) Object literal of configuration values:\n<dl>\n<dt>format {String} (Optional)</dt>\n<dd>\n<p>\nAny strftime string is supported, such as \"%I:%M:%S %p\". strftime has several format specifiers defined by the Open group at \n<a href=\"http://www.opengroup.org/onlinepubs/007908799/xsh/strftime.html\">http://www.opengroup.org/onlinepubs/007908799/xsh/strftime.html</a>\nPHP added a few of its own, defined at <a href=\"http://www.php.net/strftime\">http://www.php.net/strftime</a>\n</p>\n<p>\nThis javascript implementation supports all the PHP specifiers and a few more.  The full list is below.\n</p>\n<p>\nIf not specified, it defaults to the ISO 8601 standard date format: %Y-%m-%d.\nThis may be overridden by the deprecated Y.config.dateFormat property.\n</p>\n<dl>\n<dt>%a</dt> <dd>abbreviated weekday name according to the current locale</dd>\n<dt>%A</dt> <dd>full weekday name according to the current locale</dd>\n<dt>%b</dt> <dd>abbreviated month name according to the current locale</dd>\n<dt>%B</dt> <dd>full month name according to the current locale</dd>\n<dt>%c</dt> <dd>preferred date and time representation for the current locale</dd>\n<dt>%C</dt> <dd>century number (the year divided by 100 and truncated to an integer, range 00 to 99)</dd>\n<dt>%d</dt> <dd>day of the month as a decimal number (range 01 to 31)</dd>\n<dt>%D</dt> <dd>same as %m/%d/%y</dd>\n<dt>%e</dt> <dd>day of the month as a decimal number, a single digit is preceded by a space (range \" 1\" to \"31\")</dd>\n<dt>%F</dt> <dd>same as %Y-%m-%d (ISO 8601 date format)</dd>\n<dt>%g</dt> <dd>like %G, but without the century</dd>\n<dt>%G</dt> <dd>The 4-digit year corresponding to the ISO week number</dd>\n<dt>%h</dt> <dd>same as %b</dd>\n<dt>%H</dt> <dd>hour as a decimal number using a 24-hour clock (range 00 to 23)</dd>\n<dt>%I</dt> <dd>hour as a decimal number using a 12-hour clock (range 01 to 12)</dd>\n<dt>%j</dt> <dd>day of the year as a decimal number (range 001 to 366)</dd>\n<dt>%k</dt> <dd>hour as a decimal number using a 24-hour clock (range 0 to 23); single digits are preceded by a blank. (See also %H.)</dd>\n<dt>%l</dt> <dd>hour as a decimal number using a 12-hour clock (range 1 to 12); single digits are preceded by a blank. (See also %I.) </dd>\n<dt>%m</dt> <dd>month as a decimal number (range 01 to 12)</dd>\n<dt>%M</dt> <dd>minute as a decimal number</dd>\n<dt>%n</dt> <dd>newline character</dd>\n<dt>%p</dt> <dd>either \"AM\" or \"PM\" according to the given time value, or the corresponding strings for the current locale</dd>\n<dt>%P</dt> <dd>like %p, but lower case</dd>\n<dt>%r</dt> <dd>time in a.m. and p.m. notation equal to %I:%M:%S %p</dd>\n<dt>%R</dt> <dd>time in 24 hour notation equal to %H:%M</dd>\n<dt>%s</dt> <dd>number of seconds since the Epoch, ie, since 1970-01-01 00:00:00 UTC</dd>\n<dt>%S</dt> <dd>second as a decimal number</dd>\n<dt>%t</dt> <dd>tab character</dd>\n<dt>%T</dt> <dd>current time, equal to %H:%M:%S</dd>\n<dt>%u</dt> <dd>weekday as a decimal number [1,7], with 1 representing Monday</dd>\n<dt>%U</dt> <dd>week number of the current year as a decimal number, starting with the\nfirst Sunday as the first day of the first week</dd>\n<dt>%V</dt> <dd>The ISO 8601:1988 week number of the current year as a decimal number,\nrange 01 to 53, where week 1 is the first week that has at least 4 days\nin the current year, and with Monday as the first day of the week.</dd>\n<dt>%w</dt> <dd>day of the week as a decimal, Sunday being 0</dd>\n<dt>%W</dt> <dd>week number of the current year as a decimal number, starting with the\nfirst Monday as the first day of the first week</dd>\n<dt>%x</dt> <dd>preferred date representation for the current locale without the time</dd>\n<dt>%X</dt> <dd>preferred time representation for the current locale without the date</dd>\n<dt>%y</dt> <dd>year as a decimal number without a century (range 00 to 99)</dd>\n<dt>%Y</dt> <dd>year as a decimal number including the century</dd>\n<dt>%z</dt> <dd>numerical time zone representation</dd>\n<dt>%Z</dt> <dd>time zone name or abbreviation</dd>\n<dt>%%</dt> <dd>a literal \"%\" character</dd>\n</dl>\n</dd>\n<dt>locale {String", "name": "oConfig", "description": "  (Deprecated, optional)</dt>\n<dd>\n<b>Deprecated - use Y.config.lang instead, which provides access to a much larger set of built-in languages.</b>\nThe locale to use when displaying days of week, months of the year, and other locale specific\nstrings. If not specified, this defaults to \"en\" (though this may be overridden by the deprecated Y.config.locale).\nThe following locales are built in:\n<dl>\n<dt>en</dt>\n<dd>English</dd>\n<dt>en-US</dt>\n<dd>US English</dd>\n<dt>en-GB</dt>\n<dd>British English</dd>\n<dt>en-AU</dt>\n<dd>Australian English (identical to British English)</dd>\n</dl>\nMore locales may be added by subclassing of the deprecated Y.DataType.Date.Locale[\"en\"].\nSee Y.DataType.Date.Locale for more information.\n</dd>\n</dl>"}], "description": "Takes a native JavaScript Date and formats it as a string for display to user.", "guessedname": "format", "guessedtype": "function"}}, "static": "", "file": "datatype-date-format.js", "shortname": "DataType.Date", "description": "DataType.Date provides a set of utility functions to operate against Date objects."}, "DataSchema.Array": {"name": "DataSchema.Array", "namespace": "", "module": "dataschema", "guessedname": "LANG", "methods": {"apply": {"return": {"type": "Object", "description": "Schema-parsed data."}, "description": "Applies a given schema to given Array data.", "static": "", "guessedname": "apply", "guessedtype": "function", "params": [{"type": "Object", "name": "schema", "description": "  Schema to apply."}, {"type": "Object", "name": "data", "description": "  Array data."}]}, "_parseResults": {"return": {"type": "Object", "description": "Parsed data object."}, "description": "Schema-parsed list of results from full data", "protected": "", "static": "", "guessedname": "_parseResults", "guessedtype": "function", "params": [{"type": "Array", "name": "fields", "description": "  Schema to parse against."}, {"type": "Array", "name": "array_in", "description": "  Array to parse."}, {"type": "Object", "name": "data_out", "description": "  In-progress parsed data to update."}]}}, "static": "", "superclass": "DataSchema.Base", "file": "dataschema-array.js", "guessedtype": "property", "extends": "DataSchema.Base", "shortname": "DataSchema.Array", "description": "Array subclass for the DataSchema Utility."}, "WidgetPositionConstrain": {"name": "WidgetPositionConstrain", "namespace": "", "module": "widget-position-constrain", "events": {"preventOverlapChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "preventOverlapChange", "description": "Fires when the value for the configuration attribute 'preventOverlap' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "constrainChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "constrainChange", "description": "Fires when the value for the configuration attribute 'constrain' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"preventOverlap": {"type": "boolean", "description": "If set to true, and WidgetPositionAlign is also added to the Widget, \nconstrained positioning will attempt to prevent the widget's bounding box from overlapping \nthe element to which it has been aligned, by flipping the orientation of the alignment\nfor corner based alignments", "guessedname": "preventOverlap", "guessedtype": "property"}, "constrain": {"default": "null", "type": "boolean | Node", "description": "The node to constrain the widget's bounding box to, when setting xy. Can also be\nset to true, to constrain to the viewport.", "guessedname": "constrain", "guessedtype": "property"}}, "methods": {"_bindUIPosConstrained": {"protected": "", "description": "Binds event listeners responsible for updating the UI state in response to \nWidget constrained positioning related state changes.\n<p>\nThis method is invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_bindUIPosConstrained", "guessedtype": "function"}, "_constrainOnXYChange": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade for the attribute change"}], "description": "The on change listener for the \"xy\" attribute. Modifies the event facade's\nnewVal property with the constrained XY value.", "guessedname": "_constrainOnXYChange", "guessedtype": "function"}, "_afterConstrainChange": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade"}], "description": "After change listener for the \"constrain\" attribute, responsible\nfor updating the UI, in response to attribute changes.", "guessedname": "_afterConstrainChange", "guessedtype": "function"}, "enable or disable constraints listeners": {"guessedname": "_enableConstraints", "params": [{"type": "boolean", "name": "enable", "description": " Enable or disable constraints"}], "description": "Updates the UI if enabling constraints, and sets up the xyChange event listeners\nto constrain whenever the widget is moved. Disabling constraints removes the listeners.", "private": "", "guessedtype": "function"}, "_getRegion": {"guessedname": "_getRegion", "params": [{"type": "Node", "name": "node", "description": " Optional."}], "description": "Utility method to normalize region retrieval from a node instance, \nor the viewport, if no node is provided.", "private": "", "guessedtype": "function"}, "_setConstrain": {"protected": "", "params": [{"type": "Node | boolean", "name": "val", "description": " The attribute value"}], "description": "The setter implementation for the \"constrain\" attribute.", "guessedname": "_setConstrain", "guessedtype": "function"}, "constrain": {"params": [{"type": "Array", "name": "xy", "description": " Optional. The xy values to constrain"}, {"type": "Node | boolean", "name": "node", "description": " Optional. The node to constrain to, or true for the viewport"}], "description": "Constrains the widget's bounding box to a node (or the viewport). If xy or node are not \npassed in, the current position and the value of \"constrain\" will be used respectively.\nThe widget's position will be changed to the constrained position.", "guessedname": "constrain", "guessedtype": "function"}, "_constrain": {"return": {"type": "Number", "description": "The constrained value"}, "description": "The method which performs the actual constrain calculations for a given axis (\"x\" or \"y\") based\non the regions provided.", "protected": "", "params": [{"type": "Number", "name": "val", "description": " The value to constrain"}, {"type": "String", "name": "axis", "description": " The axis to use for constrainment"}, {"type": "Region", "name": "nodeRegion", "description": " The region of the node to constrain"}, {"type": "Region", "name": "constrainingRegion", "description": " The region of the node (or viewport) to constrain to"}], "guessedname": "_constrain", "guessedtype": "function"}, "getConstrainedXY": {"return": {"type": "Array", "description": "The constrained xy values"}, "params": [{"type": "Array", "name": "xy", "description": " The xy values to constrain"}, {"type": "Node | boolean", "name": "node", "description": " Optional. The node to constrain to, or true for the viewport"}], "description": "Calculates the constrained positions for the XY positions provided, using\nthe provided node argument is passed in. If no node value is passed in, the value of \nthe \"constrain\" attribute is used.", "guessedname": "getConstrainedXY", "guessedtype": "function"}, "_preventOverlap": {"return": {"type": "Number", "description": "The constrained value"}, "description": "The method which performs the preventOverlap calculations for a given axis (\"x\" or \"y\") based\non the value and regions provided.", "protected": "", "params": [{"type": "Number", "name": "val", "description": " The value being constrain"}, {"type": "String", "name": "axis", "description": " The axis to being constrained"}, {"type": "Region", "name": "nodeRegion", "description": " The region of the node being constrained"}, {"type": "Region", "name": "constrainingRegion", "description": " The region of the node (or viewport) we need to constrain to"}], "guessedname": "_preventOverlap", "guessedtype": "function"}}, "param": "{Object} User configuration object", "file": "Widget-PositionConstrain.js", "shortname": "WidgetPositionConstrain", "properties": {"WidgetPositionConstrain._PREVENT_OVERLAP": {"description": "The set of positions for which to prevent\noverlap.", "protected": "", "static": "", "guessedname": "PREVENT_OVERLAP_MAP", "guessedtype": "property", "type": "Object"}, "WidgetPositionConstrain.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration introduced by WidgetPositionConstrain.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "A widget extension, which can be used to add constrained xy positioning support to the base Widget class,\nthrough the <a href=\"Base.html#method_build\">Base.build</a> method. This extension requires that \nthe WidgetPosition extension be added to the Widget (before WidgetPositionConstrain, if part of the same \nextension list passed to Base.build)."}, "Lang": {"name": "Lang", "namespace": "", "module": "yui", "guessedname": "Lang", "methods": {"isArray": {"return": {"type": "boolean", "description": "true if o is an array."}, "description": "Determines whether or not the provided item is an array.\nReturns false for array-like collections such as the\nfunction arguments collection or HTMLElement collection\nwill return false.  Use <code>Y.Array.test</code> if you\nwant to test for an array-like collection.", "static": "", "guessedname": "isArray", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test."}]}, "trim": {"return": {"type": "string", "description": "the trimmed string."}, "description": "Returns a string without any leading or trailing whitespace.  If\nthe input is not a string, the input will be returned untouched.", "static": "", "guessedname": "trim", "guessedtype": "function", "params": [{"type": "string", "name": "s", "description": "  the string to trim."}]}, "isDate": {"return": {"type": "boolean", "description": "true if o is a date."}, "description": "Determines whether or not the supplied item is a date instance.", "static": "", "guessedname": "isDate", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test."}]}, "isString": {"return": {"type": "boolean", "description": "true if o is a string."}, "description": "Determines whether or not the provided item is a string.", "static": "", "guessedname": "isString", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test."}]}, "isBoolean": {"return": {"type": "boolean", "description": "true if o is a boolean."}, "description": "Determines whether or not the provided item is a boolean.", "static": "", "guessedname": "isBoolean", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test."}]}, "trimLeft": {"return": {"type": "string", "description": "the trimmed string."}, "description": "Returns a string without any leading whitespace.", "static": "", "guessedname": "trimLeft", "guessedtype": "function", "params": [{"type": "string", "name": "s", "description": "  the string to trim."}]}, "sub": {"return": {"type": "string", "description": "the substitute result."}, "description": "Lightweight version of <code>Y.substitute</code>. Uses the same template\nstructure as <code>Y.substitute</code>, but doesn't support recursion,\nauto-object coersion, or formats.", "since": "3.2.0", "static": "", "guessedname": "sub", "guessedtype": "function", "params": [{"type": "string", "name": "s", "description": " String to be modified."}, {"type": "object", "name": "o", "description": " Object containing replacement values."}]}, "trimRight": {"return": {"type": "string", "description": "the trimmed string."}, "description": "Returns a string without any trailing whitespace.", "static": "", "guessedname": "trimRight", "guessedtype": "function", "params": [{"type": "string", "name": "s", "description": "  the string to trim."}]}, "isNull": {"return": {"type": "boolean", "description": "true if o is null."}, "description": "Determines whether or not the provided item is null.", "static": "", "guessedname": "isNull", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test."}]}, "isValue": {"return": {"type": "boolean", "description": "true if it is not null/undefined/NaN || false."}, "description": "A convenience method for detecting a legitimate non-null value.\nReturns false for null/undefined/NaN, true for other values,\nincluding 0/false/''", "static": "", "guessedname": "isValue", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The item to test."}]}, "now": {"since": "3.3.0", "return": {"type": "int", "description": "the current date"}, "description": "Returns the current time in milliseconds.", "guessedname": "now", "guessedtype": "function"}, "isFunction": {"return": {"type": "boolean", "description": "true if o is a function."}, "description": "<p>\nDetermines whether or not the provided item is a function.\nNote: Internet Explorer thinks certain functions are objects:\n</p>\n<pre>\nvar obj = document.createElement(\"object\");\nY.Lang.isFunction(obj.getAttribute) // reports false in IE\n&nbsp;\nvar input = document.createElement(\"input\"); // append to body\nY.Lang.isFunction(input.focus) // reports false in IE\n</pre>\n<p>\nYou will have to implement additional tests if these functions\nmatter to you.\n</p>", "static": "", "guessedname": "isFunction", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test."}]}, "isNumber": {"return": {"type": "boolean", "description": "true if o is a number."}, "description": "Determines whether or not the provided item is a legal number.", "static": "", "guessedname": "isNumber", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test."}]}, "type": {"return": {"type": "string", "description": "the detected type."}, "description": "<p>\nReturns a string representing the type of the item passed in.\n</p>\n<p>\nKnown issues:\n</p>\n<ul>\n<li>\n<code>typeof HTMLElementCollection</code> returns function in Safari, but\n<code>Y.type()</code> reports object, which could be a good thing --\nbut it actually caused the logic in <code>Y.Lang.isObject</code> to fail.\n</li>\n</ul>", "static": "", "guessedname": "type", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " the item to test."}]}, "isObject": {"return": {"type": "boolean", "description": "true if o is an object."}, "description": "Determines whether or not the provided item is of type object\nor function. Note that arrays are also objects, so\n<code>Y.Lang.isObject([]) === true</code>.", "static": "", "guessedname": "isObject", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test."}, {"type": "boolean", "name": "failfn", "description": "  fail if the input is a function."}]}, "isUndefined": {"return": {"type": "boolean", "description": "true if o is undefined."}, "description": "Determines whether or not the provided item is undefined.", "static": "", "guessedname": "isUndefined", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test."}]}}, "static": "", "file": "yui-lang.js", "guessedtype": "property", "shortname": "Lang", "description": "Provides the language utilites and extensions used by the library"}, "DD.Drag": {"name": "DD.Drag", "configs": {"node": {"type": "Node", "description": "Y.Node instance to use as the element to initiate a drag operation", "guessedname": "node", "guessedtype": "property"}, "activeHandle": {"type": "Node", "description": "This config option is set by Drag to inform you of which handle fired the drag event (in the case that there are several handles): default false.", "guessedname": "activeHandle", "guessedtype": "property"}, "dragNode": {"type": "Node", "description": "Y.Node instance to use as the draggable element, defaults to node", "guessedname": "dragNode", "guessedtype": "property"}, "move": {"type": "Boolean", "description": "If this is false, the drag element will not move with the cursor: default true. Can be used to \"resize\" the element.", "guessedname": "move", "guessedtype": "property"}, "target": {"type": "Boolean", "description": "This attribute only works if the dd-drop module has been loaded. It will make this node a drop target as well as draggable.", "guessedname": "target", "guessedtype": "property"}, "startCentered": {"type": "Boolean", "description": "Center the dragNode to the mouse position on drag:start: default false", "guessedname": "startCentered", "guessedtype": "property"}, "offsetNode": {"type": "Boolean", "description": "Offset the drag element by the difference in cursor position: default true", "guessedname": "offsetNode", "guessedtype": "property"}, "handles": {"type": "Array", "description": "Array of valid handles to add. Adding something here will set all handles, even if previously added with addHandle", "guessedname": "handles", "guessedtype": "property"}, "haltDown": {"type": "Boolean", "description": "Should the mousedown event be halted. Default: true", "guessedname": "haltDown", "guessedtype": "property"}, "clickPixelThresh": {"type": "Number", "description": "The number of pixels to move to start a drag operation, default is 3.", "guessedname": "clickPixelThresh", "guessedtype": "property"}, "bubbles": {"deprecated": "", "type": "Object", "description": "Controls the default bubble parent for this Drag instance. Default: Y.DD.DDM. Set to false to disable bubbling. Use bubbleTargets in config", "guessedname": "bubbles", "guessedtype": "property"}, "groups": {"type": "Array", "description": "Array of groups to add this drag into.", "guessedname": "groups", "guessedtype": "property"}, "lock": {"type": "Boolean", "description": "Set to lock this drag element so that it can't be dragged: default false.", "guessedname": "lock", "guessedtype": "property"}, "dragMode": {"type": "String", "description": "This attribute only works if the dd-drop module is active. It will set the dragMode (point, intersect, strict) of this Drag instance.", "guessedname": "dragMode", "guessedtype": "property"}, "useShim": {"type": "Boolean", "description": "Use the protective shim on all drag operations: default true. Only works with dd-ddm, not dd-ddm-base.", "guessedname": "useShim", "guessedtype": "property"}, "dragging": {"type": "Boolean", "description": "This attribute is not meant to be used by the implementor, it is meant to be used as an Event tracker so you can listen for it to change.", "guessedname": "dragging", "guessedtype": "property"}, "data": {"type": "Mixed", "description": "A payload holder to store arbitrary data about this drag object, can be used to store any value.", "guessedname": "data", "guessedtype": "property"}, "primaryButtonOnly": {"type": "Boolean", "description": "By default a drag operation will only begin if the mousedown occurred with the primary mouse button. Setting this to false will allow for all mousedown events to trigger a drag.", "guessedname": "primaryButtonOnly", "guessedtype": "property"}, "clickTimeThresh": {"type": "Number", "description": "The number of milliseconds a mousedown has to pass to start a drag operation, default is 1000.", "guessedname": "clickTimeThresh", "guessedtype": "property"}}, "constructors": [{"description": "Provides the ability to drag a Node."}], "namespace": "DD", "module": "dd", "properties": {"startXY": {"type": "{Array}", "description": "The initial mouse position", "guessedname": "startXY", "guessedtype": "property"}, "START_EVENT": {"static": "", "description": "This property defaults to \"mousedown\", but when drag-gestures is loaded, it is changed to \"gesturemovestart\"", "guessedname": "START_EVENT", "guessedtype": "property"}, "_fromTimeout": {"guessedname": "_fromTimeout", "type": "{Boolean}", "description": "Flag to determine if the drag operation came from a timeout", "private": "", "guessedtype": "property"}, "_handles": {"guessedname": "_handles", "type": "{Object}", "description": "A private hash of the valid drag handles", "private": "", "guessedtype": "property"}, "_ieSelectBack": {"private": "", "description": "We will hold a copy of the current \"onselectstart\" method on this property, and reset it after we are done using it.", "guessedname": "_ieSelectBack", "guessedtype": "property"}, "_invalidsDefault": {"guessedname": "_invalidsDefault", "type": "{Object}", "description": "A private hash of the default invalid selector strings: {'textarea': true, 'input': true, 'a': true, 'button': true, 'select': true}", "private": "", "guessedtype": "property"}, "lastXY": {"type": "{Array}", "description": "The position of the element as it's moving (for offset calculations)", "guessedname": "lastXY", "guessedtype": "property"}, "_groups": {"guessedname": "_groups", "type": "{Array}", "description": "Storage Array for the groups this drag belongs to.", "private": "", "guessedtype": "property"}, "_clickTimeout": {"guessedname": "_clickTimeout", "type": "{Boolean}", "description": "Holder for the setTimeout call", "private": "", "guessedtype": "property"}, "_ev_md": {"guessedname": "_ev_md", "type": "{Event.Facade}", "description": "A private reference to the mousedown DOM event", "private": "", "guessedtype": "property"}, "_bubbleTargets": {"private": "", "description": "The default bubbleTarget for this object. Default: Y.DD.DDM", "guessedname": "_bubbleTargets", "guessedtype": "property"}, "_startTime": {"guessedname": "_startTime", "type": "Date", "description": "The getTime of the mousedown event. Not used, just here in case someone wants/needs to use it.", "private": "", "guessedtype": "property"}, "_endTime": {"guessedname": "_endTime", "type": "Date", "description": "The getTime of the mouseup event. Not used, just here in case someone wants/needs to use it.", "private": "", "guessedtype": "property"}, "_dragThreshMet": {"guessedname": "_dragThreshMet", "type": "{Boolean}", "description": "Private flag to see if the drag threshhold was met", "private": "", "guessedtype": "property"}, "actXY": {"type": "{Array}", "description": "The xy that the node will be set to. Changing this will alter the position as it's dragged.", "guessedname": "actXY", "guessedtype": "property"}, "realXY": {"type": "{Array}", "description": "The real xy position of the node.", "guessedname": "realXY", "guessedtype": "property"}, "deltaXY": {"type": "{Array}", "description": "The offset of the mouse position to the element's position", "guessedname": "deltaXY", "guessedtype": "property"}, "_invalids": {"guessedname": "_invalids", "type": "{Object}", "description": "A private hash of the invalid selector strings", "private": "", "guessedtype": "property"}, "nodeXY": {"type": "{Array}", "description": "The initial element position", "guessedname": "nodeXY", "guessedtype": "property"}, "target": {"type": "{Object}", "description": "This will be a reference to the Drop instance associated with this drag if the target: true config attribute is set..", "guessedname": "target", "guessedtype": "property"}, "mouseXY": {"type": "{Array}", "description": "The XY coords of the mousemove", "guessedname": "mouseXY", "guessedtype": "property"}, "region": {"type": "Object", "description": "A region object associated with this drag, used for checking regions while dragging.", "guessedname": "region", "guessedtype": "property"}}, "guessedname": "DDM", "methods": {"addToGroup": {"return": {"type": "Self", "description": ""}, "description": "Add this Drag instance to a group, this should be used for on-the-fly group additions.", "chainable": "", "params": [{"type": "String", "name": "g", "description": " The group to add this Drag Instance to."}], "guessedname": "addToGroup", "guessedtype": "function"}, "_setStartPosition": {"guessedname": "_setStartPosition", "params": [{"type": "Array", "name": "xy", "description": " The XY coords to set the position to."}], "description": "Sets the current position of the Element and calculates the offset", "private": "", "guessedtype": "function"}, "_fixDragStart": {"description": "The function we use as the ondragstart handler when we start a drag in Internet Explorer. This keeps IE from blowing up on images as drag handles.", "private": "", "guessedname": "_fixDragStart", "guessedtype": "function"}, "_defDragFn": {"guessedname": "_defDragFn", "params": [{"type": "Event.Facade", "name": "ev", "description": " The drag:drag event"}], "description": "Default function for drag:drag. Fired from _moveNode.", "private": "", "guessedtype": "function"}, "stopDrag": {"chainable": "", "return": {"type": "Self", "description": ""}, "description": "Method will forcefully stop a drag operation. For example calling this from inside an ESC keypress handler will stop this drag.", "guessedname": "stopDrag", "guessedtype": "function"}, "_move": {"guessedname": "_move", "params": [{"type": "Event.Facade", "name": "ev", "description": " The mousemove DOM event"}], "description": "Fired from DragDropMgr (DDM) on mousemove.", "private": "", "guessedtype": "function"}, "validClick": {"return": {"type": "Boolean", "description": ""}, "params": [], "description": "Method first checks to see if we have handles, if so it validates the click against the handle. Then if it finds a valid handle, it checks it against the invalid handles list. Returns true if a good handle was used, false otherwise.", "guessedname": "validClick", "guessedtype": "function"}, "removeInvalid": {"return": {"type": "Self", "description": ""}, "description": "Remove an invalid handle added by addInvalid", "chainable": "", "params": [{"type": "String", "name": "str", "description": " The invalid handle to remove from the internal list."}], "guessedname": "removeInvalid", "guessedtype": "function"}, "addHandle": {"return": {"type": "Self", "description": ""}, "description": "Add a handle to a drag element. Drag only initiates when a mousedown happens on this element.", "chainable": "", "params": [{"type": "String", "name": "str", "description": " The selector to test for a valid handle. Must be a child of the element."}], "guessedname": "addHandle", "guessedtype": "function"}, "initializer": {"description": "Internal init handler", "private": "", "guessedname": "initializer", "guessedtype": "function"}, "removeHandle": {"return": {"type": "Self", "description": ""}, "description": "Remove a Selector added by addHandle", "chainable": "", "params": [{"type": "String", "name": "str", "description": " The selector for the handle to be removed."}], "guessedname": "removeHandle", "guessedtype": "function"}, "_handleMouseDownEvent": {"guessedname": "_handleMouseDownEvent", "params": [], "description": "Handler for the mousedown DOM event", "private": "", "guessedtype": "function"}, "end": {"chainable": "", "return": {"type": "Self", "description": ""}, "description": "Ends the drag operation", "guessedname": "end", "guessedtype": "function"}, "_moveNode": {"description": "This method performs the actual element move.", "private": "", "guessedname": "_moveNode", "guessedtype": "function"}, "destructor": {"description": "Lifecycle destructor, unreg the drag from the DDM and remove listeners", "private": "", "guessedname": "destructor", "guessedtype": "function"}, "start": {"chainable": "", "return": {"type": "Self", "description": ""}, "description": "Starts the drag operation", "guessedname": "start", "guessedtype": "function"}, "_ieSelectFix": {"description": "The function we use as the onselectstart handler when we start a drag in Internet Explorer", "private": "", "guessedname": "_ieSelectFix", "guessedtype": "function"}, "_defAlignFn": {"guessedname": "_defAlignFn", "params": [{"type": "Event.Facade", "name": "e", "description": " The drag:align event."}], "description": "Calculates the offsets and set's the XY that the element will move to.", "private": "", "guessedtype": "function"}, "_createEvents": {"description": "This method creates all the events for this Event Target and publishes them so we get Event Bubbling.", "private": "", "guessedname": "_createEvents", "guessedtype": "function"}, "_timeoutCheck": {"description": "The method passed to setTimeout to determine if the clickTimeThreshold was met.", "private": "", "guessedname": "_timeoutCheck", "guessedtype": "function"}, "removeFromGroup": {"return": {"type": "Self", "description": ""}, "description": "Remove this Drag instance from a group, this should be used for on-the-fly group removals.", "chainable": "", "params": [{"type": "String", "name": "g", "description": " The group to remove this Drag Instance from."}], "guessedname": "removeFromGroup", "guessedtype": "function"}, "_fixIEMouseUp": {"description": "This method copies the _ieSelectFix property back to the onselectstart listner on the document.", "private": "", "guessedname": "_fixIEMouseUp", "guessedtype": "function"}, "_defEndFn": {"description": "Handler for fixing the selection in IE", "private": "", "guessedname": "_defEndFn", "guessedtype": "function"}, "_alignNode": {"guessedname": "_alignNode", "params": [{"type": "Array", "name": "eXY", "description": " The XY to move the element to, usually comes from the mousemove DOM event."}], "description": "This method performs the alignment before the element move.", "private": "", "guessedtype": "function"}, "_prevEndFn": {"description": "Handler for preventing the drag:end event. It will reset the node back to it's start position", "private": "", "guessedname": "_prevEndFn", "guessedtype": "function"}, "_prep": {"description": "Attach event listners and add classname", "private": "", "guessedname": "_prep", "guessedtype": "function"}, "addInvalid": {"return": {"type": "Self", "description": ""}, "description": "Add a selector string to test the handle against. If the test passes the drag operation will not continue.", "chainable": "", "params": [{"type": "String", "name": "str", "description": " The selector to test against to determine if this is an invalid drag handle."}], "guessedname": "addInvalid", "guessedtype": "function"}, "_defMouseDownFn": {"guessedname": "_defMouseDownFn", "params": [], "description": "Handler for the mousedown DOM event", "private": "", "guessedtype": "function"}, "_handleMouseUp": {"guessedname": "_handleMouseUp", "params": [], "description": "Handler for the mouseup DOM event", "private": "", "guessedtype": "function"}, "_align": {"guessedname": "_align", "params": [{"type": "Array", "name": "xy", "description": " The xy coords to align with."}], "description": "Calculates the offsets and set's the XY that the element will move to.", "private": "", "guessedtype": "function"}, "_handleTarget": {"return": {"type": "Boolean/Object", "description": ""}, "description": "Attribute handler for the target config attribute.", "private": "", "params": [], "guessedname": "_handleTarget", "guessedtype": "function"}, "_unprep": {"description": "Detach event listeners and remove classname", "private": "", "guessedname": "_unprep", "guessedtype": "function"}, "_fixIEMouseDown": {"description": "This method copies the onselectstart listner on the document to the _ieSelectFix property", "private": "", "guessedname": "_fixIEMouseDown", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "drag.js", "guessedtype": "property", "shortname": "Drag", "events": {"clickPixelThreshChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "clickPixelThreshChange", "description": "Fires when the value for the configuration attribute 'clickPixelThresh' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "groupsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "groupsChange", "description": "Fires when the value for the configuration attribute 'groups' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drag:afterMouseDown": {"description": "Fires after the mousedown event has been cleared.", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl><dt>ev</dt><dd>The original mousedown event.</dd></dl>"}], "guessedname": "EV_AFTER_MOUSE_DOWN", "guessedtype": "property", "bubbles": "DDM", "type": "{Event.Custom}"}, "bubblesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "bubblesChange", "description": "Fires when the value for the configuration attribute 'bubbles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "offsetNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "offsetNodeChange", "description": "Fires when the value for the configuration attribute 'offsetNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "draggingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "draggingChange", "description": "Fires when the value for the configuration attribute 'dragging' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "handlesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "handlesChange", "description": "Fires when the value for the configuration attribute 'handles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dataChange", "description": "Fires when the value for the configuration attribute 'data' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drag:removeInvalid": {"description": "Fires after an invalid selector is removed.", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl><dt>handle</dt><dd>The handle that was removed.</dd></dl>"}], "guessedname": "EV_REMOVE_INVALID", "guessedtype": "property", "bubbles": "DDM", "type": "{Event.Custom}"}, "dragModeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dragModeChange", "description": "Fires when the value for the configuration attribute 'dragMode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "primaryButtonOnlyChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "primaryButtonOnlyChange", "description": "Fires when the value for the configuration attribute 'primaryButtonOnly' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drag:mouseDown": {"description": "Handles the mousedown DOM event, checks to see if you have a valid handle then starts the drag timers.", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl><dt>ev</dt><dd>The original mousedown event.</dd></dl>"}], "guessedname": "EV_MOUSE_DOWN", "guessedtype": "property", "preventable": "_defMouseDownFn", "bubbles": "DDM", "type": "{Event.Custom}"}, "drag:align": {"description": "Fires when this node is aligned.", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>pageX</dt><dd>The current node position X.</dd>\n<dt>pageY</dt><dd>The current node position Y.</dd>\n</dl>"}], "guessedname": "EV_ALIGN", "guessedtype": "property", "preventable": "_defAlignFn", "bubbles": "DDM", "type": "{Event.Custom}"}, "drag:addHandle": {"description": "Fires after a handle is added.", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl><dt>handle</dt><dd>The handle that was added.</dd></dl>"}], "guessedname": "EV_ADD_HANDLE", "guessedtype": "property", "bubbles": "DDM", "type": "{Event.Custom}"}, "drag:removeHandle": {"description": "Fires after a handle is removed.", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl><dt>handle</dt><dd>The handle that was removed.</dd></dl>"}], "guessedname": "EV_REMOVE_HANDLE", "guessedtype": "property", "bubbles": "DDM", "type": "{Event.Custom}"}, "activeHandleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeHandleChange", "description": "Fires when the value for the configuration attribute 'activeHandle' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drag:start": {"description": "Fires at the start of a drag operation.", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>pageX</dt><dd>The original node position X.</dd>\n<dt>pageY</dt><dd>The original node position Y.</dd>\n<dt>startTime</dt><dd>The startTime of the event. getTime on the current Date object.</dd>\n</dl>"}], "guessedname": "EV_START", "guessedtype": "property", "bubbles": "DDM", "type": "{Event.Custom}"}, "useShimChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "useShimChange", "description": "Fires when the value for the configuration attribute 'useShim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "clickTimeThreshChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "clickTimeThreshChange", "description": "Fires when the value for the configuration attribute 'clickTimeThresh' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "lockChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lockChange", "description": "Fires when the value for the configuration attribute 'lock' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "haltDownChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "haltDownChange", "description": "Fires when the value for the configuration attribute 'haltDown' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "targetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "targetChange", "description": "Fires when the value for the configuration attribute 'target' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drag:enter": {"type": "{Event.Custom}", "bubbles": "DDM", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The drop object at the time of the event.</dd>\n<dt>drag</dt><dd>The drag object at the time of the event.</dd>\n</dl>"}], "description": "Fires when this node enters a Drop Target. (Fired from dd-drop)"}, "drag:addInvalid": {"description": "Fires after an invalid selector is added.", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl><dt>handle</dt><dd>The handle that was added.</dd></dl>"}], "guessedname": "EV_ADD_INVALID", "guessedtype": "property", "bubbles": "DDM", "type": "{Event.Custom}"}, "drag:drag": {"description": "Fires every mousemove during a drag operation.", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>pageX</dt><dd>The current node position X.</dd>\n<dt>pageY</dt><dd>The current node position Y.</dd>\n<dt>scroll</dt><dd>Should a scroll action occur.</dd>\n<dt>info</dt><dd>Object hash containing calculated XY arrays: start, xy, delta, offset</dd>\n</dl>"}], "guessedname": "EV_DRAG", "guessedtype": "property", "bubbles": "DDM", "type": "{Event.Custom}"}, "drag:end": {"description": "Fires at the end of a drag operation.", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>pageX</dt><dd>The current node position X.</dd>\n<dt>pageY</dt><dd>The current node position Y.</dd>\n<dt>startTime</dt><dd>The startTime of the event, from the start event.</dd>\n<dt>endTime</dt><dd>The endTime of the event. getTime on the current Date object.</dd>\n</dl>"}], "guessedname": "EV_END", "guessedtype": "property", "bubbles": "DDM", "type": "{Event.Custom}"}, "nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dragNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dragNodeChange", "description": "Fires when the value for the configuration attribute 'dragNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "drag:drophit": {"type": "{Event.Custom}", "bubbles": "DDM", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The best guess on what was dropped on.</dd>\n<dt>drag</dt><dd>The drag object at the time of the event.</dd>\n<dt>others</dt><dd>An array of all the other drop targets that was dropped on.</dd>\n</dl>"}], "description": "Fires when this node is dropped on a valid Drop Target. (Fired from dd-ddm-drop)"}, "drag:dropmiss": {"description": "Fires when this node is dropped on an invalid Drop Target. (Fired from dd-ddm-drop)", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>pageX</dt><dd>The current node position X.</dd>\n<dt>pageY</dt><dd>The current node position Y.</dd>\n</dl>"}], "guessedname": "Drag", "guessedtype": "function", "bubbles": "DDM", "type": "{Event.Custom}"}, "drag:over": {"type": "{Event.Custom}", "bubbles": "DDM", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The drop object at the time of the event.</dd>\n<dt>drag</dt><dd>The drag object at the time of the event.</dd>\n</dl>"}], "description": "Fires when this node is over a Drop Target. (Fired from dd-drop)"}, "drag:exit": {"type": "{Event.Custom}", "bubbles": "DDM", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>drop</dt><dd>The drop object at the time of the event.</dd>\n</dl>"}], "description": "Fires when this node exits a Drop Target. (Fired from dd-drop)"}, "moveChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "moveChange", "description": "Fires when the value for the configuration attribute 'move' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "startCenteredChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "startCenteredChange", "description": "Fires when the value for the configuration attribute 'startCentered' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "description": "Provides the ability to drag a Node."}, "DataSchema.JSON": {"name": "DataSchema.JSON", "namespace": "", "module": "dataschema", "guessedname": "LANG", "methods": {"DataSchema.JSON.getPath": {"return": {"type": "String[]", "description": "Walkable path to data value."}, "description": "Utility function converts JSON locator strings into walkable paths", "static": "", "guessedname": "getPath", "guessedtype": "function", "params": [{"type": "String", "name": "locator", "description": "  JSON value locator."}]}, "DataSchema.JSON.getLocationValue": {"return": {"type": "Object", "description": "Data value at location."}, "description": "Utility function to walk a path and return the value located there.", "static": "", "guessedname": "getLocationValue", "guessedtype": "function", "params": [{"type": "String[]", "name": "path", "description": "  Locator path."}, {"type": "String", "name": "data", "description": "  Data to traverse."}]}, "_parseMeta": {"return": {"type": "Object", "description": "Schema-parsed meta data."}, "description": "Parses results data according to schema", "protected": "", "static": "", "guessedname": "_parseMeta", "guessedtype": "function", "params": [{"type": "Object", "name": "metaFields", "description": "  Metafields definitions."}, {"type": "Object", "name": "json_in", "description": "  JSON to parse."}, {"type": "Object", "name": "data_out", "description": "  In-progress parsed data to update."}]}, "_getFieldValues": {"return": {"type": "Object", "description": "Parsed data object."}, "description": "Get field data values out of list of full results", "protected": "", "static": "", "guessedname": "_getFieldValues", "guessedtype": "function", "params": [{"type": "Array", "name": "fields", "description": "  Fields to find."}, {"type": "Array", "name": "array_in", "description": "  Results to parse."}, {"type": "Object", "name": "data_out", "description": "  In-progress parsed data to update."}]}, "_parseResults": {"return": {"type": "Object", "description": "Parsed data object."}, "description": "Schema-parsed list of results from full data", "protected": "", "static": "", "guessedname": "_parseResults", "guessedtype": "function", "params": [{"type": "Object", "name": "schema", "description": "  Schema to parse against."}, {"type": "Object", "name": "json_in", "description": "  JSON to parse."}, {"type": "Object", "name": "data_out", "description": "  In-progress parsed data to update."}]}, "apply": {"return": {"type": "Object", "description": "Schema-parsed data."}, "description": "Applies a given schema to given JSON data.", "static": "", "guessedname": "apply", "guessedtype": "function", "params": [{"type": "Object", "name": "schema", "description": "  Schema to apply."}, {"type": "Object", "name": "data", "description": "  JSON data."}]}}, "static": "", "superclass": "DataSchema.Base", "file": "dataschema-json.js", "guessedtype": "property", "extends": "DataSchema.Base", "shortname": "DataSchema.JSON", "description": "JSON subclass for the DataSchema Utility."}, "Transition": {"name": "Transition", "constructors": [{"description": "A class for constructing transition instances.\nAdds the \"transition\" method to Node."}], "namespace": "", "module": "transition", "guessedname": "Transition", "methods": {"run": {"guessedname": "run", "chainable": "", "description": "Starts or an animation.", "private": "", "guessedtype": "function"}}, "file": "transition-native.js", "guessedtype": "function", "shortname": "Transition", "description": "A class for constructing transition instances.\nAdds the \"transition\" method to Node."}, "AsyncQueue": {"name": "AsyncQueue", "constructors": [{"params": [{"type": "Function|Object", "name": "callback*", "description": "  0..n callbacks to seed the queue"}], "description": "<p>A specialized queue class that supports scheduling callbacks to execute\nsequentially, iteratively, even asynchronously.</p>\n<p>Callbacks can be function refs or objects with the following keys.  Only\nthe <code>fn</code> key is required.</p>\n<ul>\n<li><code>fn</code> -- The callback function</li>\n<li><code>context</code> -- The execution context for the callbackFn.</li>\n<li><code>args</code> -- Arguments to pass to callbackFn.</li>\n<li><code>timeout</code> -- Millisecond delay before executing callbackFn.\n(Applies to each iterative execution of callback)</li>\n<li><code>iterations</code> -- Number of times to repeat the callback.\n<li><code>until</code> -- Repeat the callback until this function returns\ntrue.  This setting trumps iterations.</li>\n<li><code>autoContinue</code> -- Set to false to prevent the AsyncQueue from\nexecuting the next callback in the Queue after\nthe callback completes.</li>\n<li><code>id</code> -- Name that can be used to get, promote, get the\nindexOf, or delete this callback.</li>\n</ul>"}], "namespace": "", "module": "async-queue", "events": {"complete": {"description": "Event fired after the last queued callback is executed."}}, "guessedname": "AsyncQueue", "methods": {"_initEvents": {"protected": "", "description": "Initializes the instance events.", "guessedname": "_initEvents", "guessedtype": "function"}, "_defRemoveFn": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the custom event"}], "description": "<p>Default functionality for the &quot;remove&quot; event.  Removes the\ncallback from the queue.</p>\n<p>The event object will contain a property &quot;callback&quot;, which\nholds the id of a callback or the callback object itself.</p>", "guessedname": "_defRemoveFn", "guessedtype": "function"}, "pause": {"chainable": "", "return": {"type": "AsyncQueue", "description": "the AsyncQueue instance"}, "description": "Pause the execution of the queue after the execution of the current\ncallback completes.  If called from code outside of a queued callback,\nclears the timeout for the pending callback. Paused queue can be\nrestarted with q.run()", "guessedname": "pause", "guessedtype": "function"}, "run": {"chainable": "", "return": {"type": "AsyncQueue", "description": "the AsyncQueue instance"}, "description": "Sets the queue in motion.  All queued callbacks will be executed in\norder unless pause() or stop() is called or if one of the callbacks is\nconfigured with autoContinue: false.", "guessedname": "run", "guessedtype": "function"}, "_schedule": {"return": {"type": "Boolean", "description": "whether the run loop should continue"}, "description": "Schedules the execution of asynchronous callbacks.", "protected": "", "params": [{"type": "Object", "name": "callback", "description": "  the callback object to execute"}], "guessedname": "_schedule", "guessedtype": "function"}, "_defShiftFn": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  The event object"}], "description": "Default functionality for the &quot;shift&quot; event.  Shifts the\ncallback stored in the event object's <em>callback</em> property from\nthe queue if it is the first item.", "guessedname": "_defShiftFn", "guessedtype": "function"}, "_execute": {"return": {"type": "Boolean", "description": "whether the run loop should continue"}, "description": "Handles the execution of callbacks. Returns a boolean indicating\nwhether it is appropriate to continue running.", "protected": "", "params": [{"type": "Object", "name": "callback", "description": "  the callback object to execute"}], "guessedname": "_execute", "guessedtype": "function"}, "stop": {"chainable": "", "return": {"type": "AsyncQueue", "description": "the AsyncQueue instance"}, "description": "Stop and clear the queue after the current execution of the\ncurrent callback completes.", "guessedname": "stop", "guessedtype": "function"}, "_init": {"protected": "", "description": "Initializes the AsyncQueue instance properties and events.", "guessedname": "_init", "guessedtype": "function"}, "remove": {"return": {"type": "AsyncQueue", "description": "the AsyncQueue instance"}, "description": "Removes the callback from the queue.  If the queue is active, the\nremoval is scheduled to occur after the current callback has completed.", "chainable": "", "params": [{"type": "String|Object", "name": "callback", "description": "  the callback object or a callback's id"}], "guessedname": "remove", "guessedtype": "function"}, "next": {"return": {"type": "Function", "description": "the callback to execute"}, "description": "Returns the next callback needing execution.  If a callback is\nconfigured to repeat via iterations or until, it will be returned until\nthe completion criteria is met.\nWhen the queue is empty, null is returned.", "guessedname": "next", "guessedtype": "function"}, "indexOf": {"return": {"type": "Number", "description": "index of the callback or -1 if not found"}, "params": [{"type": "String|Function", "name": "callback", "description": "  the callback or its specified id"}], "description": "Returns the current index of a callback.  Pass in either the id or\ncallback function from getCallback.", "guessedname": "indexOf", "guessedtype": "function"}, "add": {"return": {"type": "AsyncQueue", "description": "the AsyncQueue instance"}, "description": "Add any number of callbacks to the end of the queue. Callbacks may be\nprovided as functions or objects.", "chainable": "", "params": [{"type": "Function|Object", "name": "callback*", "description": "  0..n callbacks"}], "guessedname": "add", "guessedtype": "function"}, "_defExecFn": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the event object"}], "description": "Default functionality for the &quot;execute&quot; event.  Executes the\ncallback function", "guessedname": "_defExecFn", "guessedtype": "function"}, "getCallback": {"return": {"type": "Object", "description": "the callback object"}, "params": [{"type": "String", "name": "id", "description": "  the id assigned to the callback"}], "description": "Retrieve a callback by its id.  Useful to modify the configuration\nwhile the queue is running.", "guessedname": "getCallback", "guessedtype": "function"}, "_defPromoteFn": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the custom event"}], "description": "<p>Default functionality for the &quot;promote&quot; event.  Promotes the\nnamed callback to the head of the queue.</p>\n<p>The event object will contain a property &quot;callback&quot;, which\nholds the id of a callback or the callback object itself.</p>", "guessedname": "_defPromoteFn", "guessedtype": "function"}, "_prepare": {"return": {"type": "Function", "description": "a decorated function wrapper to execute the callback"}, "description": "Creates a wrapper function to execute the callback using the aggregated \nconfiguration generated by combining the static AsyncQueue.defaults, the\ninstance defaults, and the specified callback settings.\nThe wrapper function is decorated with the callback configuration as\nproperties for runtime modification.", "protected": "", "params": [{"type": "Object|Function", "name": "callback", "description": "  the raw callback"}], "guessedname": "_prepare", "guessedtype": "function"}, "promote": {"return": {"type": "AsyncQueue", "description": "the AsyncQueue instance"}, "description": "Promotes the named callback to the top of the queue. If a callback is\ncurrently executing or looping (via until or iterations), the promotion\nis scheduled to occur after the current callback has completed.", "chainable": "", "params": [{"type": "String|Object", "name": "callback", "description": "  the callback object or a callback's id"}], "guessedname": "promote", "guessedtype": "function"}, "_defAddFn": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the event object"}], "description": "Default functionality for the &quot;add&quot; event.  Adds the callbacks\nin the event facade to the queue. Callbacks successfully added to the\nqueue are present in the event's <code>added</code> property in the\nafter phase.", "guessedname": "_defAddFn", "guessedtype": "function"}, "isRunning": {"return": {"type": "Boolean", "description": "true if queue is waiting for a \nfrom any initiated transactions"}, "description": "Determines if the queue is waiting for a callback to complete execution.", "guessedname": "isRunning", "guessedtype": "function"}, "size": {"return": {"type": "Number", "description": ""}, "description": "Returns the number of callbacks in the queue.", "guessedname": "size", "guessedtype": "function"}}, "extends": "EventTarget", "superclass": "EventTarget", "file": "async-queue.js", "guessedtype": "function", "shortname": "AsyncQueue", "properties": {"AsyncQueue.defaults": {"type": "{Object}", "static": "", "description": "<p>Static default values used to populate callback configuration properties.\nPreconfigured defaults include:</p>\n<ul>\n<li><code>autoContinue</code>: <code>true</code></li>\n<li><code>iterations</code>: 1</li>\n<li><code>timeout</code>: 10 (10ms between callbacks)</li>\n<li><code>until</code>: (function to run until iterations &lt;= 0)</li>\n</ul>", "guessedname": "defaults", "guessedtype": "property"}, "_running": {"protected": "", "type": "{Boolean|Object} true for synchronous callback execution, the\nreturn handle from Y.later for async callbacks.\nOtherwise false.", "description": "Used to indicate the queue is currently executing a callback.", "guessedname": "_running", "guessedtype": "property"}, "defaults": {"type": "{Object}", "description": "Callback defaults for this instance.  Static defaults that are not\noverridden are also included.", "guessedname": "defaults", "guessedtype": "property"}}, "description": "<p>A specialized queue class that supports scheduling callbacks to execute\nsequentially, iteratively, even asynchronously.</p>\n<p>Callbacks can be function refs or objects with the following keys.  Only\nthe <code>fn</code> key is required.</p>\n<ul>\n<li><code>fn</code> -- The callback function</li>\n<li><code>context</code> -- The execution context for the callbackFn.</li>\n<li><code>args</code> -- Arguments to pass to callbackFn.</li>\n<li><code>timeout</code> -- Millisecond delay before executing callbackFn.\n(Applies to each iterative execution of callback)</li>\n<li><code>iterations</code> -- Number of times to repeat the callback.\n<li><code>until</code> -- Repeat the callback until this function returns\ntrue.  This setting trumps iterations.</li>\n<li><code>autoContinue</code> -- Set to false to prevent the AsyncQueue from\nexecuting the next callback in the Queue after\nthe callback completes.</li>\n<li><code>id</code> -- Name that can be used to get, promote, get the\nindexOf, or delete this callback.</li>\n</ul>"}, "Easing": {"name": "Easing", "namespace": "", "module": "anim", "guessedname": "Easing", "methods": {"easeIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and accelerates towards end. (quadratic)", "guessedname": "easeIn", "guessedtype": "function"}, "easeInStrong": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and accelerates towards end. (quartic)", "guessedname": "easeInStrong", "guessedtype": "function"}, "bounceBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Bounces off start and end.", "guessedname": "bounceBoth", "guessedtype": "function"}, "backOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "s", "description": " Overshoot (optional)"}], "description": "Overshoots end, then reverses and comes back to end.", "guessedname": "backOut", "guessedtype": "function"}, "elasticBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "a", "description": " Amplitude (optional)"}, {"type": "Number", "name": "p", "description": " Period (optional)"}], "description": "Snap both elastic effect.", "guessedname": "elasticBoth", "guessedtype": "function"}, "elasticOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "a", "description": " Amplitude (optional)"}, {"type": "Number", "name": "p", "description": " Period (optional)"}], "description": "Snap out elastic effect.", "guessedname": "elasticOut", "guessedtype": "function"}, "bounceOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Bounces off end.", "guessedname": "bounceOut", "guessedtype": "function"}, "backBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "s", "description": " Overshoot (optional)"}], "description": "Backtracks slightly, then reverses direction, overshoots end, \nthen reverses and comes back to end.", "guessedname": "backBoth", "guessedtype": "function"}, "easeBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and decelerates towards end. (quadratic)", "guessedname": "easeBoth", "guessedtype": "function"}, "bounceIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Bounce off of start.", "guessedname": "bounceIn", "guessedtype": "function"}, "easeOutStrong": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins quickly and decelerates towards end.  (quartic)", "guessedname": "easeOutStrong", "guessedtype": "function"}, "easeNone": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Uniform speed between points.", "guessedname": "easeNone", "guessedtype": "function"}, "elasticIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "a", "description": " Amplitude (optional)"}, {"type": "Number", "name": "p", "description": " Period (optional)"}], "description": "Snap in elastic effect.", "guessedname": "elasticIn", "guessedtype": "function"}, "easeBothStrong": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and decelerates towards end. (quartic)", "guessedname": "easeBothStrong", "guessedtype": "function"}, "easeOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins quickly and decelerates towards end.  (quadratic)", "guessedname": "easeOut", "guessedtype": "function"}, "backIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "s", "description": " Overshoot (optional)"}], "description": "Backtracks slightly, then reverses direction and moves to end.", "guessedname": "backIn", "guessedtype": "function"}}, "file": "anim-easing.js", "guessedtype": "property", "shortname": "Easing", "description": "The easing module provides methods for customizing\nhow an animation behaves during each run."}, "Plugin.AutoComplete": {"name": "Plugin.AutoComplete", "namespace": "", "module": "autocomplete", "guessedname": "Plugin", "extends": "AutoCompleteList", "superclass": "AutoCompleteList", "file": "autocomplete-plugin.js", "guessedtype": "property", "shortname": "Plugin.AutoComplete", "description": "<p>\nBinds an AutoCompleteList instance to a Node instance.\n</p>\n<p>\nExample:\n</p>\n<pre>\nY.one('#my-input').plug(Y.Plugin.AutoComplete, {\n&nbsp;&nbsp;source: 'select * from search.suggest where query=\"{query}\"'\n});\n&nbsp;\n// You can now access the AutoCompleteList instance at Y.one('#my-input').ac\n</pre>"}, "Plugin.ExecCommand": {"name": "Plugin.ExecCommand", "constructors": [{"description": "Plugin for the frame module to handle execCommands for Editor"}], "namespace": "", "module": "editor", "guessedname": "ExecCommand", "methods": {"COMMANDS.wrap": {"return": {"type": "NodeList", "description": "NodeList of the items touched by this command."}, "description": "Wraps the content with a new element of type (tag)", "static": "", "guessedname": "wrap", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: wrap"}, {"type": "String", "name": "tag", "description": " The tag to wrap the selection with"}]}, "COMMANDS.inserthtml": {"return": {"type": "Node", "description": "Node instance of the item touched by this command."}, "description": "Inserts the provided HTML at the cursor, should be a single element.", "static": "", "guessedname": "inserthtml", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: inserthtml"}, {"type": "String", "name": "html", "description": " The html to insert"}]}, "COMMANDS.removeclass": {"return": {"type": "NodeList", "description": "NodeList of the items touched by this command."}, "description": "Remove a class from all of the elements in the selection", "static": "", "guessedname": "removeclass", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: removeclass"}, {"type": "String", "name": "cls", "description": " The className to remove"}]}, "COMMANDS.insertbr": {"static": "", "params": [{"type": "String", "name": "cmd", "description": " The command executed: insertbr"}], "description": "Inserts a BR at the current cursor position", "guessedname": "insertbr", "guessedtype": "function"}, "getInstance": {"return": {"type": "YUI", "description": "The YUI instance bound to the parent frame"}, "description": "Get's the instance of YUI bound to the parent frame", "guessedname": "getInstance", "guessedtype": "function"}, "COMMANDS.addclass": {"return": {"type": "NodeList", "description": "NodeList of the items touched by this command."}, "description": "Add a class to all of the elements in the selection", "static": "", "guessedname": "addclass", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: addclass"}, {"type": "String", "name": "cls", "description": " The className to add"}]}, "COMMANDS.insertimage": {"return": {"type": "Node", "description": "Node instance of the item touched by this command."}, "description": "Inserts an image at the cursor position", "static": "", "guessedname": "insertimage", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: insertimage"}, {"type": "String", "name": "img", "description": " The url of the image to be inserted"}]}, "COMMANDS.fontname": {"return": {"type": "NodeList", "description": "NodeList of the items touched by this command."}, "description": "Adds a font name to the current selection, or creates a new element and applies it", "static": "", "guessedname": "fontname", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: fontname"}, {"type": "String", "name": "val", "description": " The font name to apply"}]}, "COMMANDS.hilitecolor": {"return": {"type": "NodeList", "description": "NodeList of the items touched by this command."}, "description": "Sugar method, calles backcolor", "static": "", "guessedname": "hilitecolor", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: backcolor"}, {"type": "String", "name": "val", "description": " The color value to apply"}]}, "command": {"return": {"type": "Node/NodeList", "description": "Should return the Node/Nodelist affected"}, "params": [{"type": "String", "name": "action", "description": " The action to perform (bold, italic, fontname)"}, {"type": "String", "name": "value", "description": " The optional value (helvetica)"}], "description": "Execute a command on the frame's document.", "guessedname": "command", "guessedtype": "function"}, "_command": {"guessedname": "_command", "params": [{"type": "String", "name": "action", "description": " The action to perform (bold, italic, fontname)"}, {"type": "String", "name": "value", "description": " The optional value (helvetica)"}], "description": "The private version of execCommand that doesn't filter for overrides.", "private": "", "guessedtype": "function"}, "COMMANDS.forecolor": {"return": {"type": "NodeList", "description": "NodeList of the items touched by this command."}, "description": "Adds a forecolor to the current selection, or creates a new element and applies it", "static": "", "guessedname": "forecolor", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: forecolor"}, {"type": "String", "name": "val", "description": " The color value to apply"}]}, "COMMANDS.insertandfocus": {"return": {"type": "Node", "description": "Node instance of the item touched by this command."}, "description": "Inserts the provided HTML at the cursor, and focuses the cursor afterwards.", "static": "", "guessedname": "insertandfocus", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: insertandfocus"}, {"type": "String", "name": "html", "description": " The html to insert"}]}, "COMMANDS.backcolor": {"return": {"type": "NodeList", "description": "NodeList of the items touched by this command."}, "description": "Adds a background color to the current selection, or creates a new element and applies it", "static": "", "guessedname": "backcolor", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: backcolor"}, {"type": "String", "name": "val", "description": " The color value to apply"}]}, "COMMANDS.fontsize": {"return": {"type": "NodeList", "description": "NodeList of the items touched by this command."}, "description": "Adds a fontsize to the current selection, or creates a new element and applies it", "static": "", "guessedname": "fontsize", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: fontsize"}, {"type": "String", "name": "val", "description": " The font size to apply"}]}}, "extends": "Base", "superclass": "Base", "file": "exec-command.js", "guessedtype": "function", "shortname": "Plugin.ExecCommand", "properties": {"COMMANDS": {"static": "", "description": "Static object literal of execCommand overrides", "guessedname": "COMMANDS", "guessedtype": "property"}, "NAME": {"static": "", "description": "execCommand", "guessedname": "NAME", "guessedtype": "property"}, "COMMANDS.bidi": {"description": "bidi execCommand override for setting the text direction of a node.", "guessedname": "bidi", "guessedtype": "function"}, "_lastKey": {"private": "", "description": "An internal reference to the keyCode of the last key that was pressed.", "guessedname": "_lastKey", "guessedtype": "property"}, "NS": {"static": "", "description": "exec", "guessedname": "NS", "guessedtype": "property"}, "_inst": {"private": "", "description": "An internal reference to the instance of the frame plugged into.", "guessedname": "_inst", "guessedtype": "property"}}, "description": "Plugin for the frame module to handle execCommands for Editor"}, "Plugin.Drag": {"name": "Plugin.Drag", "constructors": [{"description": "Simple Drag plugin that can be attached to a Node via the plug method."}], "namespace": "Plugin", "module": "dd", "guessedname": "Drag", "extends": "DD.Drag", "superclass": "DD.Drag", "file": "dd-plugin.js", "guessedtype": "function", "shortname": "Drag", "properties": {"NS": {"type": "{String}", "description": "The Drag instance will be placed on the Node instance under the dd namespace. It can be accessed via Node.dd;", "guessedname": "NS", "guessedtype": "property"}, "NAME": {"type": "{String}", "description": "dd-plugin", "guessedname": "NAME", "guessedtype": "property"}}, "description": "Simple Drag plugin that can be attached to a Node via the plug method."}, "History": {"name": "History", "deprecated": "Please use the new \"history\" module instead.", "constructors": [{"description": "This class represents an instance of the browser history utility."}], "namespace": "", "module": "history-deprecated", "methods": {"getBookmarkedState": {"return": {"type": "string", "description": "The bookmarked state of the specified module."}, "description": "Returns the state of a module according to the URL fragment\nidentifier. This method is useful to initialize your modules\nif your application was bookmarked from a particular state.", "params": [{"type": "string", "name": "moduleId", "description": " Non-empty string representing your module."}], "guessedname": "getBookmarkedState", "guessedtype": "function", "public": ""}, "_updateIFrame": {"return": {"type": "boolean", "description": "true if successful. false otherwise."}, "description": "Update the IFrame with our new state.", "private": ""}, "_handleFQStateChange": {"params": [{"type": "string", "name": "fqstate", "description": " fully qualified state"}], "description": "Sets the new currentState attribute of all modules depending on the new fully\nqualified state. Also notifies the modules which current state has changed.", "private": ""}, "getCurrentState": {"return": {"type": "string", "description": "The current state of the specified module."}, "description": "Returns the current state of the specified module.", "params": [{"type": "string", "name": "moduleId", "description": " Non-empty string representing your module."}], "guessedname": "getCurrentState", "guessedtype": "function", "public": ""}, "navigate": {"return": {"type": "boolean", "description": "Indicates whether the new state was successfully added to the history."}, "description": "Stores a new entry in the browser history by changing the state of a registered module.", "params": [{"type": "string", "name": "module", "description": " Non-empty string representing your module."}, {"type": "string", "name": "state", "description": " String representing the new state of the specified module."}], "guessedname": "navigate", "guessedtype": "function", "public": ""}, "_initialize": {"description": "Finish up the initialization of the browser utility library.", "private": ""}, "register": {"return": {"type": "History.Module", "description": "The newly registered module"}, "params": [{"type": "string", "name": "moduleId", "description": " Non-empty string uniquely identifying the\nmodule you wish to register."}, {"type": "string", "name": "initialState", "description": " The initial state of the specified\nmodule corresponding to its earliest history entry."}], "description": "Registers a new module.", "guessedname": "register", "guessedtype": "function"}, "_checkIframeLoaded": {"description": "Periodically checks whether our internal IFrame is ready to be used", "private": ""}, "initialize": {"public": "", "params": [{"type": "string|HTML Element", "name": "stateField", "description": " <input type=\"hidden\"> used\nto store application states. Must be in the static markup."}, {"type": "string|HTML Element", "name": "historyIFrame", "description": " IFrame used to store\nthe history (only required for IE6/7)"}], "description": "Initializes the Browser History Manager. Call this method\nfrom a script block located right after the opening body tag.", "guessedname": "initialize", "guessedtype": "function"}, "_storeStates": {"description": "Stores the initial state and current state for all registered modules\nin the (hidden) form field specified during initialization.", "private": ""}, "getQueryStringParameter": {"return": {"type": "string", "description": "The value of the specified parameter, or null."}, "description": "Returns the value of the specified query string parameter.\nThis method is not used internally by the Browser History Manager.\nHowever, it is provided here as a helper since many applications\nusing the Browser History Manager will want to read the value of\nurl parameters to initialize themselves.", "deprecated": "Use Y.QueryString.parse() in the querystring module.\nThis will be removed in 3.2.0.", "params": [{"type": "string", "name": "paramName", "description": " Name of the parameter we want to look up."}, {"type": "string", "name": "queryString", "description": " Optional URL to look at. If not specified,\nthis method uses the URL in the address bar."}], "guessedname": "getQueryStringParameter", "guessedtype": "function", "public": ""}, "_getHash": {"return": {"type": "string", "description": "The hash portion of the document's location"}, "description": "Returns the portion of the hash after the '#' symbol.", "private": ""}, "multiNavigate": {"return": {"type": "boolean", "description": "Indicates whether the new state was successfully added to the history."}, "description": "Stores a new entry in the browser history by changing the state\nof several registered modules in one atomic operation.", "params": [{"type": "object", "name": "states", "description": " Associative array of module-state pairs to set simultaneously."}], "guessedname": "multiNavigate", "guessedtype": "function", "public": ""}}, "file": "history.js", "shortname": "History", "events": {"history:moduleStateChange": {"type": "Event.Custom", "description": "Fires when the state of a history module object has changed", "guessedname": "EV_HISTORY_MODULE_STATE_CHANGE", "guessedtype": "property"}, "history:ready": {"type": "Event.Custom", "description": "Fires when the browser history utility is ready", "guessedname": "EV_HISTORY_READY", "guessedtype": "property"}, "history:globalStateChange": {"type": "Event.Custom", "description": "Fires when the global state of the page has changed (that is,\nwhen the state of at least one browser history module has changed)", "guessedname": "EV_HISTORY_GLOBAL_STATE_CHANGE", "guessedtype": "property"}}, "description": "This class represents an instance of the browser history utility."}, "Plugin.Host": {"name": "Plugin.Host", "namespace": "", "module": "pluginhost-base", "guessedname": "L", "methods": {"plug": {"return": {"type": "Base", "description": "A reference to the host object"}, "description": "Adds a plugin to the host object. This will instantiate the \nplugin and attach it to the configured namespace on the host object.", "chainable": "", "params": [{"type": "Function | Object |Array", "name": "P", "description": "  Accepts the plugin class, or an \nobject with a \"fn\" property specifying the plugin class and \na \"cfg\" property specifying the configuration for the Plugin.\n<p>\nAdditionally an Array can also be passed in, with the above function or \nobject values, allowing the user to add multiple plugins in a single call.\n</p>"}, {"type": "", "name": "config", "description": " (Optional) If the first argument is the plugin class, the second argument\ncan be the configuration for the plugin."}], "guessedname": "plug", "guessedtype": "function"}, "hasPlugin": {"return": {"type": "boolean", "description": "returns true, if the plugin has been plugged into this host, false otherwise."}, "params": [{"type": "String", "name": "ns", "description": " The plugin's namespace"}], "description": "Determines if a plugin has plugged into this host.", "guessedname": "hasPlugin", "guessedtype": "function"}, "_destroyPlugins": {"private": "", "description": "Unplugs and destroys all plugins on the host", "guessedname": "_destroyPlugins", "guessedtype": "function"}, "unplug": {"return": {"type": "Base", "description": "A reference to the host object"}, "description": "Removes a plugin from the host object. This will destroy the \nplugin instance and delete the namepsace from the host object.", "chainable": "", "params": [{"type": "String | Function", "name": "plugin", "description": " The namespace of the plugin, or the plugin class with the static NS namespace property defined. If not provided,\nall registered plugins are unplugged."}], "guessedname": "unplug", "guessedtype": "function"}, "Plugin.Host.unplug": {"static": "", "params": [{"type": "Function", "name": "hostClass", "description": " The host class from which to unregister the plugins"}, {"type": "Function | Array", "name": "plugin", "description": " The plugin class, or an array of plugin classes"}], "description": "Unregisters any class level plugins which have been registered by the host class, or any\nother class in the hierarchy.", "guessedname": "unplug", "guessedtype": "function"}, "Plugin.Host.plug": {"static": "", "params": [{"type": "Function", "name": "hostClass", "description": " The host class on which to register the plugins"}, {"type": "Function | Array", "name": "plugin", "description": " Either the plugin class, an array of plugin classes or an array of objects (with fn and cfg properties defined)"}, {"type": "Object", "name": "config", "description": " (Optional) If plugin is the plugin class, the configuration for the plugin"}], "description": "Registers plugins to be instantiated at the class level (plugins \nwhich should be plugged into every instance of the class by default).", "guessedname": "plug", "guessedtype": "function"}, "_initPlugins": {"guessedname": "_initPlugins", "params": [{"type": "Config", "name": "config", "description": " The configuration object with property name/value pairs."}], "description": "Initializes static plugins registered on the host (using the\nBase.plug static method) and any plugins passed to the \ninstance through the \"plugins\" configuration property.", "private": "", "guessedtype": "function"}}, "file": "PluginHost.js", "guessedtype": "property", "shortname": "Plugin.Host", "properties": {"PluginHost": {"description": "Constructor and static configuration support for plugins", "guessedname": "PluginHost", "guessedtype": "property"}}, "description": "<p>\nAn augmentable class, which provides the augmented class with the ability to host plugins.\nIt adds <a href=\"#method_plug\">plug</a> and <a href=\"#method_unplug\">unplug</a> methods to the augmented class, which can \nbe used to add or remove plugins from instances of the class.\n</p>\n<p>Plugins can also be added through the constructor configuration object passed to the host class' constructor using\nthe \"plugins\" property. Supported values for the \"plugins\" property are those defined by the <a href=\"#method_plug\">plug</a> method. \nFor example the following code would add the AnimPlugin and IOPlugin to Overlay (the plugin host):\n<xmp>\nvar o = new Overlay({plugins: [ AnimPlugin, {fn:IOPlugin, cfg:{section:\"header\"}}]});\n</xmp>\n</p>\n<p>\nPlug.Host's protected <a href=\"#method_initPlugins\">_initPlugins</a> and <a href=\"#method_destroyPlugins\">_destroyPlugins</a> \nmethods should be invoked by the host class at the appropriate point in the host's lifecyle.  \n</p>"}, "Plugin.DDNodeScroll": {"properties": {"NS": {"description": "The NodeScroll instance will be placed on the Drag instance under the nodescroll namespace.", "default": "nodescroll", "readonly": "", "protected": "", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "{String}"}}, "name": "Plugin.DDNodeScroll", "constructors": [{"description": "Extends the Scroll class to make a parent node scroll while dragging."}], "namespace": "Plugin", "module": "dd", "events": {"nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "NS", "extends": "DD.Scroll", "superclass": "DD.Scroll", "file": "scroll.js", "guessedtype": "function", "shortname": "DDNodeScroll", "configs": {"node": {"type": "Node", "description": "The node we want to scroll. Used to set the internal parentScroll attribute.", "guessedname": "node", "guessedtype": "property"}}, "description": "Extends the Scroll class to make a parent node scroll while dragging."}, "Plugin.Sortable": {"name": "Plugin.Sortable", "configs": {"opacity": {"type": "String", "description": "The opacity to change the proxy item to when dragging.", "guessedname": "opacity", "guessedtype": "property"}, "container": {"type": "String", "description": "A selector query to get the container to listen for mousedown events on. All \"nodes\" should be a child of this container.", "guessedname": "container", "guessedtype": "property"}, "invalid": {"type": "String", "description": "A selector string to test if a list item is invalid and not sortable", "guessedname": "invalid", "guessedtype": "property"}, "handles": {"type": "Array", "description": "Drag handles to pass on to the internal DD.Delegate instance.", "guessedname": "handles", "guessedtype": "property"}, "opacityNode": {"type": "String", "description": "The node to set opacity on when dragging (dragNode or currentNode). Default: currentNode.", "guessedname": "opacityNode", "guessedtype": "property"}, "nodes": {"type": "String", "description": "A selector query to get the children of the \"container\" to make draggable elements from.", "guessedname": "nodes", "guessedtype": "property"}, "id": {"type": "String", "description": "The id of this Sortable, used to get a reference to this Sortable list from another list.", "guessedname": "id", "guessedtype": "property"}, "moveType": {"type": "String", "description": "How should an item move to another list: insert, swap, move, copy. Default: insert", "guessedname": "moveType", "guessedtype": "property"}}, "constructors": [{"description": "The class allows you to create a Drag & Drop reordered list."}], "namespace": "Plugin", "module": "sortable", "events": {"moveTypeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "moveTypeChange", "description": "Fires when the value for the configuration attribute 'moveType' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "opacityNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "opacityNodeChange", "description": "Fires when the value for the configuration attribute 'opacityNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "invalidChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "invalidChange", "description": "Fires when the value for the configuration attribute 'invalid' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "opacityChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "opacityChange", "description": "Fires when the value for the configuration attribute 'opacity' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "handlesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "handlesChange", "description": "Fires when the value for the configuration attribute 'handles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "copy": {"type": "{Event.Custom}", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>same</dt><dd>Moved to the same list.</dd>\n<dt>drag</dt><dd>The Drag Object</dd>\n<dt>drop</dt><dd>The Drop Object</dd>\n</dl>"}, {"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>same</dt><dd>Moved to the same list.</dd>\n<dt>drag</dt><dd>The Drag Object</dd>\n<dt>drop</dt><dd>The Drop Object</dd>\n</dl>"}, {"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>same</dt><dd>Moved to the same list.</dd>\n<dt>drag</dt><dd>The Drag Object</dd>\n<dt>drop</dt><dd>The Drop Object</dd>\n</dl>"}, {"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>same</dt><dd>Moved to the same list.</dd>\n<dt>drag</dt><dd>The Drag Object</dd>\n<dt>drop</dt><dd>The Drop Object</dd>\n</dl>"}, {"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl>\n<dt>same</dt><dd>Moved to the same list.</dd>\n<dt>drag</dt><dd>The Drag Object</dd>\n<dt>drop</dt><dd>The Drop Object</dd>\n</dl>"}], "description": "A Sortable node was moved."}, "nodesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodesChange", "description": "Fires when the value for the configuration attribute 'nodes' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "containerChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "containerChange", "description": "Fires when the value for the configuration attribute 'container' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "idChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "idChange", "description": "Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Sortable", "methods": {"plug": {"chainable": "", "params": [{"type": "", "name": "Class", "description": " cls The class to plug"}, {"type": "", "name": "Object", "description": " config The class config"}], "description": "Passthrough to the DD.Delegate.ddplug method", "guessedname": "plug", "guessedtype": "function"}, "join": {"chainable": "", "params": [{"type": "", "name": "Sortable", "description": " sel The Sortable list to join with"}, {"type": "", "name": "String", "description": " type The type of join to do: full, inner, outer, none. Default: full"}], "description": "Join this Sortable with another Sortable instance.\n<ul>\n<li>full: Exchange nodes with both lists.</li>\n<li>inner: Items can go into this list from the joined list.</li>\n<li>outer: Items can go out of the joined list into this list.</li>\n<li>none: Removes the join.</li>\n</ul>", "guessedname": "join", "guessedtype": "function"}, "_onDragEnd": {"guessedname": "_onDragEnd", "params": [{"type": "", "name": "Event", "description": " e The Event Object"}], "description": "Handles the DragEnd event that cleans up the settings in the drag:start event.", "private": "", "guessedtype": "function"}, "_join_outer": {"guessedname": "_join_outer", "params": [{"type": "", "name": "Sortable", "description": " sel The Sortable list to join with"}], "description": "Allows this Sortable to accept items from the passed Sortable.", "private": "", "guessedtype": "function"}, "_onDragStart": {"guessedname": "_onDragStart", "params": [{"type": "", "name": "Event", "description": " e The Event Object"}], "description": "Handles the DragStart event and initializes some settings.", "private": "", "guessedtype": "function"}, "_join_full": {"guessedname": "_join_full", "params": [{"type": "", "name": "Sortable", "description": " sel The Sortable list to join with"}], "description": "Joins both of the Sortables together.", "private": "", "guessedtype": "function"}, "getOrdering": {"returns": "Array", "params": [{"type": "", "name": "Function", "description": " callback"}], "description": "A custom callback to allow a user to extract some sort of id or any other data from the node to use in the \"ordering list\" and then that data should be returned from the callback.", "guessedname": "getOrdering", "guessedtype": "function"}, "_onDropOver": {"guessedname": "_onDropOver", "params": [{"type": "", "name": "Event", "description": " e The Event Object"}], "description": "Handles the DropOver event to append a drop node to an empty target", "private": "", "guessedtype": "function"}, "reg": {"static": "", "params": [{"type": "", "name": "Sortable", "description": " s A Sortable instance."}], "description": "Register a Sortable instance with the singleton to allow lookups later.", "guessedname": "reg", "guessedtype": "function"}, "unreg": {"static": "", "params": [{"type": "", "name": "Sortable", "description": " s A Sortable instance."}], "description": "Unregister a Sortable instance with the singleton.", "guessedname": "unreg", "guessedtype": "function"}, "_onDragOver": {"guessedname": "_onDragOver", "params": [{"type": "", "name": "Event", "description": " e The Event Object"}], "description": "Handles the DragOver event that moves the object in the list or to another list.", "private": "", "guessedtype": "function"}, "_join_inner": {"guessedname": "_join_inner", "params": [{"type": "", "name": "Sortable", "description": " sel The Sortable list to join with"}], "description": "Allows this Sortable to give items to the passed Sortable.", "private": "", "guessedtype": "function"}, "_test": {"static": "", "params": [{"type": "Node", "name": "node", "description": " The node instance to test."}, {"type": "String|Node", "name": "test", "description": " The node instance or selector string to test against."}], "description": "Test a Node or a selector for the container", "guessedname": "_test", "guessedtype": "function"}, "getSortable": {"static": "", "params": [{"type": "String|Node", "name": "node", "description": " The node instance or selector string to use to find a Sortable instance."}], "description": "Get a Sortable instance back from a node reference or a selector string.", "guessedname": "getSortable", "guessedtype": "function"}, "_join_none": {"guessedname": "_join_none", "params": [{"type": "", "name": "Sortable", "description": " sel The Sortable to remove the join from"}], "description": "Removes the join with the passed Sortable.", "private": "", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "sortable.js", "guessedtype": "function", "shortname": "Sortable", "properties": {"_sortables": {"description": "Hash map of all Sortables on the page.", "private": "", "static": "", "guessedname": "_sortables", "guessedtype": "property", "type": "Array"}, "delegate": {"type": "DD.Delegate", "description": "A reference to the DD.Delegate instance.", "guessedname": "delegate", "guessedtype": "property"}}, "description": "The class allows you to create a Drag & Drop reordered list."}, "Intl": {"name": "Intl", "namespace": "", "module": "intl", "guessedname": "SPLIT_REGEX", "methods": {"setLang": {"return": {"type": "", "description": "boolean true if successful, false if not."}, "params": [{"type": "String", "name": "module", "description": " The module name."}, {"type": "String", "name": "lang", "description": " The BCP 47 language tag."}], "description": "Sets the active language for the given module.\nReturns false on failure, which would happen if the language had not been registered through the <a href=\"#method_add\">add()</a> method.", "guessedname": "setLang", "guessedtype": "function"}, "get": {"return": {"type": "", "description": "String | Object A copy of the module's localized resources, or a single value if key is provided."}, "params": [{"type": "String", "name": "module", "description": " The module name."}, {"type": "String", "name": "key", "description": " Optional. A single resource key. If not provided, returns a copy (shallow clone) of all resources."}, {"type": "String", "name": "lang", "description": " Optional. The BCP 47 language tag. If not provided, the module's currently active language is used."}], "description": "Gets the module's localized resources for the currently active language (as provided by the <a href=\"#method_getLang\">getLang</a> method).\n<p>\nOptionally, the localized resources for alternate languages which have been added to Intl (see the <a href=\"#method_add\">add</a> method) can\nbe retrieved by providing the BCP 47 language tag as the lang parameter.\n</p>", "guessedname": "get", "guessedtype": "function"}, "getLang": {"return": {"type": "String", "description": "The BCP 47 language tag."}, "params": [{"type": "String", "name": "module", "description": " The module name."}], "description": "Get the currently active language for the given module.", "guessedname": "getLang", "guessedtype": "function"}, "getAvailableLangs": {"return": {"type": "Array", "description": "The array of languages available."}, "params": [{"type": "String", "name": "module", "description": " The name of the module"}], "description": "Gets the list of languages for which localized resources are available for a given module, based on the module\nmeta-data (part of loader). If loader is not on the page, returns an empty array.", "guessedname": "getAvailableLangs", "guessedtype": "function"}, "add": {"params": [{"type": "String", "name": "module", "description": " The module name."}, {"type": "String", "name": "lang", "description": " The BCP 47 language tag."}, {"type": "Object", "name": "strings", "description": " The hash of localized values, keyed by the string name."}], "description": "Register a hash of localized resources for the given module and language", "guessedname": "add", "guessedtype": "function"}, "lookupBestLang": {"return": {"type": "String", "description": "The available language that best matches the\npreferred language list, or \"\"."}, "description": "Returns the language among those available that\nbest matches the preferred language list, using the Lookup\nalgorithm of BCP 47.\nIf none of the available languages meets the user's preferences,\nthen \"\" is returned.\nExtended language ranges are not supported.", "since": "3.1.0", "params": [{"type": "String[] | String", "name": "preferredLanguages", "description": " The list of preferred\nlanguages in descending preference order, represented as BCP 47\nlanguage tags. A string array or a comma-separated list."}, {"type": "String[]", "name": "availableLanguages", "description": " The list of languages\nthat the application supports, represented as BCP 47 language\ntags."}], "guessedname": "lookupBestLang", "guessedtype": "function"}, "_mod": {"return": {"type": "Object", "description": "The hash of localized resources for the module, keyed by BCP language tag"}, "description": "Private method to retrieve the language hash for a given module.", "private": "", "params": [{"type": "String", "name": "module", "description": " The name of the module"}], "guessedname": "_mod", "guessedtype": "function"}}, "uses": ["EventTarget"], "file": "_mods", "guessedtype": "property", "static": "", "shortname": "Intl", "events": {"intl:langChange": {"params": [{"type": "EventFacade", "name": "e", "description": " The event facade\n<p>The event facade contains:</p>\n<dl>\n<dt>module</dt><dd>The name of the module for which the language changed</dd>\n<dt>newVal</dt><dd>The new language tag</dd>\n<dt>prevVal</dt><dd>The current language tag</dd>\n</dl>"}], "description": "Notification event to indicate when the lang for a module has changed. There is no default behavior associated with this event,\nso the on and after moments are equivalent.", "guessedname": "emitFacade", "guessedtype": "property"}}, "description": "The Intl utility provides a central location for managing sets of\nlocalized resources (strings and formatting patterns)."}, "Frame": {"name": "Frame", "for": "Frame", "configs": {"lang": {"type": "String", "description": "The default language. Default: en-US", "guessedname": "lang", "guessedtype": "property"}, "src": {"type": "String", "description": "The src of the iframe/window. Defaults to javascript:;", "guessedname": "src", "guessedtype": "property"}, "use": {"guessedtype": "property", "type": "Array", "description": "Array of modules to include in the scoped YUI instance at render time. Default: ['none', 'selector-css2']", "guessedname": "use", "writeonce": ""}, "container": {"type": "String/HTMLElement/Node", "description": "The container to append the iFrame to on render.", "guessedname": "container", "guessedtype": "property"}, "title": {"type": "String", "description": "The title to give the blank page.", "guessedname": "title", "guessedtype": "property"}, "defaultblock": {"type": "String", "description": "The default tag to use for block level items, defaults to: p", "guessedname": "defaultblock", "guessedtype": "property"}, "extracss": {"type": "String", "description": "A string of CSS to add to the Head of the Editor", "guessedname": "extracss", "guessedtype": "property"}, "content": {"type": "String", "description": "The string to inject into the body of the new frame/window.", "guessedname": "content", "guessedtype": "property"}, "host": {"type": "Object", "description": "A reference to the Editor instance", "guessedname": "host", "guessedtype": "property"}, "designMode": {"guessedtype": "property", "type": "Boolean", "description": "Should designMode be turned on after creation.", "guessedname": "designMode", "writeonce": ""}, "basehref": {"type": "String", "description": "The base href to use in the iframe.", "guessedname": "basehref", "guessedtype": "property"}, "id": {"guessedtype": "property", "type": "String", "description": "Set the id of the new Node. (optional)", "guessedname": "id", "writeonce": ""}, "dir": {"type": "String", "description": "The default text direction for this new frame. Default: ltr", "guessedname": "dir", "guessedtype": "property"}, "linkedcss": {"type": "String", "description": "An array of url's to external linked style sheets", "guessedname": "linkedcss", "guessedtype": "property"}}, "constructors": [{"description": "Creates a wrapper around an iframe. It loads the content either from a local\nfile or from script and creates a local YUI instance bound to that new window and document."}], "namespace": "", "module": "editor", "events": {"contentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "contentChange", "description": "Fires when the value for the configuration attribute 'content' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hostChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hostChange", "description": "Fires when the value for the configuration attribute 'host' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "designModeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "designModeChange", "description": "Fires when the value for the configuration attribute 'designMode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dirChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dirChange", "description": "Fires when the value for the configuration attribute 'dir' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "langChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "langChange", "description": "Fires when the value for the configuration attribute 'lang' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "extracssChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "extracssChange", "description": "Fires when the value for the configuration attribute 'extracss' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "linkedcssChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "linkedcssChange", "description": "Fires when the value for the configuration attribute 'linkedcss' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "useChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "useChange", "description": "Fires when the value for the configuration attribute 'use' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "basehrefChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "basehrefChange", "description": "Fires when the value for the configuration attribute 'basehref' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "defaultblockChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultblockChange", "description": "Fires when the value for the configuration attribute 'defaultblock' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "idChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "idChange", "description": "Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "titleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "titleChange", "description": "Fires when the value for the configuration attribute 'title' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "containerChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "containerChange", "description": "Fires when the value for the configuration attribute 'container' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "srcChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "srcChange", "description": "Fires when the value for the configuration attribute 'src' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Frame", "methods": {"_create": {"guessedname": "_create", "return": {"type": "Object", "description": "Hash table containing references to the new Document & Window"}, "description": "Create the iframe or Window and get references to the Document & Window", "private": "", "guessedtype": "function"}, "_setLinkedCSS": {"description": "Set's the linked CSS on the instance..", "private": "", "guessedname": "_getLinkedCSS", "guessedtype": "function"}, "_DOMPaste": {"guessedname": "_DOMPaste", "params": [{"type": "Event.Facade", "name": "e", "description": ""}], "description": "Simple pass thru handler for the paste event so we can do content cleanup", "private": "", "guessedtype": "function"}, "hide": {"chainable": "", "return": {"type": "Frame", "description": ""}, "description": "Hide the iframe instance", "guessedname": "hide", "guessedtype": "function"}, "render": {"return": {"type": "Y.Frame", "description": ""}, "description": "Render the iframe into the container config option or open the window.", "chainable": "", "params": [{"type": "String/HTMLElement/Node", "name": "node", "description": " The node to render to"}], "guessedname": "render", "guessedtype": "function"}, "getInstance": {"return": {"type": "YUI", "description": "The internal YUI instance"}, "description": "Get a reference to the internal YUI instance.", "guessedname": "getInstance", "guessedtype": "function"}, "show": {"chainable": "", "return": {"type": "Frame", "description": ""}, "description": "Show the iframe instance", "guessedname": "show", "guessedtype": "function"}, "_setHTML": {"return": {"type": "String", "description": ""}, "description": "Set the content of the iframe", "private": "", "params": [{"type": "String", "name": "html", "description": " The raw HTML to set the body of the iframe to."}], "guessedname": "_setHTML", "guessedtype": "function"}, "_onContentReady": {"description": "Called once the content is available in the frame/window and calls the final use call\non the internal instance so that the modules are loaded properly.", "private": "", "guessedname": "_onContentReady", "guessedtype": "function"}, "use": {"description": "This is a scoped version of the normal YUI.use method & is bound to this frame/window.\nAt setup, the inst.use method is mapped to this method.", "guessedname": "use", "guessedtype": "function"}, "_instanceLoaded": {"guessedname": "_instanceLoaded", "params": [{"type": "YUI", "name": "inst", "description": " The internal YUI instance bound to the frame/window"}], "description": "Called from the first YUI instance that sets up the internal instance.\nThis loads the content into the window/frame and attaches the contentready event.", "private": "", "guessedtype": "function"}, "focus": {"return": {"type": "Frame", "description": ""}, "description": "Set the focus to the iframe", "chainable": "", "params": [{"type": "Function", "name": "fn", "description": " Callback function to execute after focus happens"}], "guessedname": "focus", "guessedtype": "function"}, "_resolveBaseHref": {"return": {"type": "String", "description": ""}, "description": "Resolves the basehref of the page the frame is created on. Only applies to dynamic content.", "private": "", "params": [{"type": "String", "name": "href", "description": " The new value to use, if empty it will be resolved from the current url."}], "guessedname": "_resolveBaseHref", "guessedtype": "function"}, "_setExtraCSS": {"description": "Set's the extra CSS on the instance..", "private": "", "guessedname": "_setExtraCSS", "guessedtype": "function"}, "_handleFocus": {"description": "Does some tricks on focus to set the proper cursor position.", "private": "", "guessedname": "_handleFocus", "guessedtype": "function"}, "delegate": {"return": {"type": "EventHandle", "description": "The Event handle returned from Y.delegate"}, "params": [{"type": "String", "name": "type", "description": " The type of event to listen for"}, {"type": "Function", "name": "fn", "description": " The method to attach"}, {"type": "String", "name": "cont", "description": " The container to act as a delegate, if no \"sel\" passed, the body is assumed as the container."}, {"type": "String", "name": "sel", "description": " The selector to match in the event (optional)"}], "description": "A delegate method passed to the instance's delegate method", "guessedname": "delegate", "guessedtype": "function"}, "_defReadyFn": {"description": "Binds DOM events, sets the iframe to visible and fires the ready event", "private": "", "guessedname": "_defReadyFn", "guessedtype": "function"}, "_resolveWinDoc": {"return": {"type": "Object", "description": "Object hash of window and document references, if a YUI config was passed, it is returned."}, "description": "Resolves the document and window from an iframe or window instance", "private": "", "params": [{"type": "Object", "name": "c", "description": " The YUI Config to add the window and document to"}], "guessedname": "_resolveWinDoc", "guessedtype": "function"}, "_getHTML": {"return": {"type": "String", "description": ""}, "description": "Get the content from the iframe", "private": "", "params": [{"type": "String", "name": "html", "description": " The raw HTML from the body of the iframe."}], "guessedname": "_getHTML", "guessedtype": "function"}, "_onDomEvent": {"guessedname": "_onDomEvent", "params": [{"type": "Event.Facade", "name": "e", "description": ""}], "description": "Generic handler for all DOM events fired by the iframe or window. This handler\ntakes the current EventFacade and augments it to fire on the Frame host. It adds two new properties\nto the EventFacade called frameX and frameY which adds the scroll and xy position of the iframe\nto the original pageX and pageY of the event so external nodes can be positioned over the frame.", "private": "", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "frame.js", "guessedtype": "function", "shortname": "Frame", "properties": {"DOC_TYPE": {"type": "String", "static": "", "description": "The DOCTYPE to prepend to the new document when created. Should match the one on the page being served.", "guessedname": "DOC_TYPE", "guessedtype": "property"}, "NAME": {"type": "String", "static": "", "description": "The name of the class (frame)", "guessedname": "NAME", "guessedtype": "property"}, "META": {"static": "", "type": "String", "description": "The meta-tag for Content-Type to add to the dynamic document"}, "_instance": {"guessedname": "_instance", "type": "YUI", "description": "Internal reference to the YUI instance bound to the iFrame or window", "private": "", "guessedtype": "property"}, "_rendered": {"guessedname": "_rendered", "type": "Boolean", "description": "Internal reference set when render is called.", "private": "", "guessedtype": "property"}, "_ready": {"guessedname": "_ready", "type": "Boolean", "description": "Internal reference set when the content is ready.", "private": "", "guessedtype": "property"}, "HTML": {"static": "", "type": "String", "description": "The template string used to create the iframe"}, "_iframe": {"guessedname": "_iframe", "type": "Node", "description": "Internal Node reference to the iFrame or the window", "private": "", "guessedtype": "property"}, "DOM_EVENTS": {"type": "Object", "static": "", "description": "The DomEvents that the frame automatically attaches and bubbles", "guessedname": "DOM_EVENTS", "guessedtype": "property"}, "DEFAULT_CSS": {"static": "", "type": "String", "description": "The default css used when creating the document."}, "PAGE_HTML": {"type": "String", "static": "", "description": "The template used to create the page when created dynamically.", "guessedname": "PAGE_HTML", "guessedtype": "property"}}, "description": "Creates a wrapper around an iframe. It loads the content either from a local\nfile or from script and creates a local YUI instance bound to that new window and document."}, "YQLRequest": {"name": "YQLRequest", "constructors": [{"params": [{"type": "String", "name": "sql", "description": " The SQL statement to execute"}, {"type": "Function/Object", "name": "callback", "description": " The callback to execute after the query (Falls through to JSONP)."}, {"type": "Object", "name": "params", "description": " An object literal of extra parameters to pass along (optional)."}, {"type": "Object", "name": "params", "description": " An object literal of configuration options (optional): proto (http|https), base (url)"}], "description": "Utility Class used under the hood my the YQL class"}], "namespace": "", "module": "yql", "guessedname": "YQLRequest", "methods": {"send": {"chainable": "", "returns": "{YQLRequest}", "description": "The method that executes the YQL Request.", "guessedname": "send", "guessedtype": "function"}}, "file": "yql.js", "guessedtype": "function", "shortname": "YQLRequest", "properties": {"_callback": {"private": "", "description": "Holder for the callback argument", "guessedname": "_callback", "guessedtype": "property"}, "_opts": {"private": "", "description": "Holder for the opts argument", "guessedname": "_opts", "guessedtype": "property"}, "PROTO": {"static": "", "description": "Default protocol to use: http", "guessedname": "PROTO", "guessedtype": "property"}, "FORMAT": {"static": "", "description": "Default format to use: json", "guessedname": "FORMAT", "guessedtype": "property"}, "BASE_URL": {"static": "", "description": "The base URL to query: query.yahooapis.com/v1/public/yql?", "guessedname": "BASE_URL", "guessedtype": "property"}, "ENV": {"static": "", "description": "The environment file to load: http://datatables.org/alltables.env", "guessedname": "ENV", "guessedtype": "property"}, "_params": {"private": "", "description": "Holder for the params argument", "guessedname": "_params", "guessedtype": "property"}}, "description": "Utility Class used under the hood my the YQL class"}, "StyleSheet": {"name": "StyleSheet", "constructors": [{"params": [{"type": "String|HTMLElement|Node", "name": "seed", "description": "  a style or link node, its id, or a\nname or guid of a StyleSheet, or a string of css text"}, {"type": "String", "name": "name", "description": "  (optional) name to register instance for future static\naccess"}], "description": "Create an instance of StyleSheet to encapsulate a css stylesheet.\nThe constructor can be called using function or constructor syntax.\n<pre><code>var sheet = Y.StyleSheet(..);</pre></code>\nor\n<pre><code>var sheet = new Y.StyleSheet(..);</pre></code>\nThe first parameter passed can be any of the following things:\n<ul>\n<li>The desired string name to register a new empty sheet</li>\n<li>The string name of an existing StyleSheet instance</li>\n<li>The unique guid generated for an existing StyleSheet instance</li>\n<li>The id of an existing <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> node</li>\n<li>The node reference for an existing <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> node</li>\n<li>The Y.Node instance wrapping an existing <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> node</li>\n<li>A chunk of css text to create a new stylesheet from</li>\n</ul>\n<p>If a string is passed, StyleSheet will first look in its static name\nregistry for an existing sheet, then in the DOM for an element with that id.\nIf neither are found and the string contains the { character, it will be\nused as a the initial cssText for a new StyleSheet.  Otherwise, a new empty\nStyleSheet is created, assigned the string value as a name, and registered\nstatically by that name.</p>\n<p>The optional second parameter is a string name to register the sheet as.\nThis param is largely useful when providing a node id/ref or chunk of css\ntext to create a populated instance.</p>"}], "namespace": "", "module": "stylesheet", "methods": {"enable": {"chainable": "", "return": {"type": "StyleSheet", "description": ""}, "description": "Enable all the rules in the sheet", "guessedname": "enable", "guessedtype": "function"}, "StyleSheet.isValidSelector": {"return": {"type": "Boolean", "description": ""}, "description": "<p>Determines if a selector string is safe to use.  Used internally\nin set to prevent IE from locking up when attempting to add a rule for a\n&quot;bad selector&quot;.</p>\n<p>Bad selectors are considered to be any string containing unescaped\n`~!@$%^&()+=|{}[];'\"?< or space. Also forbidden are . or # followed by\nanything other than an alphanumeric.  Additionally -abc or .-abc or\n#_abc or '# ' all fail.  There are likely more failure cases, so\nplease file a bug if you encounter one.</p>", "static": "", "guessedname": "isValidSelector", "guessedtype": "function", "params": [{"type": "String", "name": "sel", "description": "  the selector string"}]}, "getCssText": {"return": {"type": "String", "description": ""}, "params": [{"type": "String", "name": "sel", "description": "  Selector string"}], "description": "Get the current cssText for a rule or the entire sheet.  If the\nselector param is supplied, only the cssText for that rule will be\nreturned, if found.  If the selector string targets multiple\nselectors separated by commas, the cssText of the first rule only\nwill be returned.  If no selector string, the stylesheet's full\ncssText will be returned.", "guessedname": "getCssText", "guessedtype": "function"}, "isEnabled": {"return": {"type": "Boolean", "description": ""}, "description": "Returns false if the StyleSheet is disabled.  Otherwise true.", "guessedname": "isEnabled", "guessedtype": "function"}, "disable": {"chainable": "", "return": {"type": "StyleSheet", "description": ""}, "description": "Disable all the rules in the sheet.  Rules may be changed while the\nStyleSheet is disabled.", "guessedname": "disable", "guessedtype": "function"}, "set": {"return": {"type": "StyleSheet", "description": ""}, "description": "<p>Set style properties for a provided selector string.\nIf the selector includes commas, it will be split into individual\nselectors and applied accordingly.  If the selector string does not\nhave a corresponding rule in the sheet, it will be added.</p>\n<p>The object properties in the second parameter must be the JavaScript\nnames of style properties.  E.g. fontSize rather than font-size.</p>\n<p>The float style property will be set by any of &quot;float&quot;,\n&quot;styleFloat&quot;, or &quot;cssFloat&quot;.</p>", "chainable": "", "params": [{"type": "String", "name": "sel", "description": "  the selector string to apply the changes to"}, {"type": "Object", "name": "css", "description": "  Object literal of style properties and new values"}], "guessedname": "set", "guessedtype": "function"}, "getId": {"return": {"type": "Number", "description": "the static id"}, "description": "Get the unique stamp for this StyleSheet instance", "guessedname": "getId", "guessedtype": "function"}, "StyleSheet.register": {"return": {"type": "Boolean", "description": "false if no name or sheet is not a StyleSheet\ninstance. true otherwise."}, "description": "Registers a StyleSheet instance in the static registry by the given name", "static": "", "guessedname": "register", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": "  the name to assign the StyleSheet in the registry"}, {"type": "StyleSheet", "name": "sheet", "description": "  The StyleSheet instance"}]}, "unset": {"return": {"type": "StyleSheet", "description": ""}, "description": "<p>Unset style properties for a provided selector string, removing\ntheir effect from the style cascade.</p>\n<p>If the selector includes commas, it will be split into individual\nselectors and applied accordingly.  If there are no properties\nremaining in the rule after unsetting, the rule is removed.</p>\n<p>The style property or properties in the second parameter must be the\nJavaScript style property names. E.g. fontSize rather than font-size.</p>\n<p>The float style property will be unset by any of &quot;float&quot;,\n&quot;styleFloat&quot;, or &quot;cssFloat&quot;.</p>", "chainable": "", "params": [{"type": "String", "name": "sel", "description": "  the selector string to apply the changes to"}, {"type": "String|Array", "name": "css", "description": "  style property name or Array of names"}], "guessedname": "unset", "guessedtype": "function"}, "StyleSheet.toCssText": {"return": {"type": "String", "description": "the resulting cssText string"}, "description": "<p>Converts an object literal of style properties and values into a string\nof css text.  This can then be assigned to el.style.cssText.</p>\n<p>The optional second parameter is a cssText string representing the\nstarting state of the style prior to alterations.  This is most often\nextracted from the eventual target's current el.style.cssText.</p>", "static": "", "guessedname": "toCssText", "guessedtype": "property", "params": [{"type": "Object", "name": "css", "description": "  object literal of style properties and values"}, {"type": "String", "name": "cssText", "description": "  (optional) starting cssText value"}]}}, "file": "stylesheet.js", "shortname": "StyleSheet", "description": "Create an instance of StyleSheet to encapsulate a css stylesheet.\nThe constructor can be called using function or constructor syntax.\n<pre><code>var sheet = Y.StyleSheet(..);</pre></code>\nor\n<pre><code>var sheet = new Y.StyleSheet(..);</pre></code>\nThe first parameter passed can be any of the following things:\n<ul>\n<li>The desired string name to register a new empty sheet</li>\n<li>The string name of an existing StyleSheet instance</li>\n<li>The unique guid generated for an existing StyleSheet instance</li>\n<li>The id of an existing <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> node</li>\n<li>The node reference for an existing <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> node</li>\n<li>The Y.Node instance wrapping an existing <code>&lt;link&gt;</code> or <code>&lt;style&gt;</code> node</li>\n<li>A chunk of css text to create a new stylesheet from</li>\n</ul>\n<p>If a string is passed, StyleSheet will first look in its static name\nregistry for an existing sheet, then in the DOM for an element with that id.\nIf neither are found and the string contains the { character, it will be\nused as a the initial cssText for a new StyleSheet.  Otherwise, a new empty\nStyleSheet is created, assigned the string value as a name, and registered\nstatically by that name.</p>\n<p>The optional second parameter is a string name to register the sheet as.\nThis param is largely useful when providing a node id/ref or chunk of css\ntext to create a populated instance.</p>"}, "Plugin.WidgetAnim": {"name": "Plugin.WidgetAnim", "namespace": "Plugin", "module": "widget-anim", "events": {"animHideChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "animHideChange", "description": "Fires when the value for the configuration attribute 'animHide' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "animShowChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "animShowChange", "description": "Fires when the value for the configuration attribute 'animShow' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "durationChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "durationChange", "description": "Fires when the value for the configuration attribute 'duration' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"duration": {"default": "0.2 (seconds", "type": "Number", "description": "Default duration in seconds. Used as the default duration for the default animation implementations", "guessedname": "duration", "guessedtype": "property"}, "animShow": {"default": "WidgetAnim.ANIMATIONS.fadeIn", "type": "Anim", "description": "Default animation instance used for showing the widget (opacity fade-in)", "guessedname": "animShow", "guessedtype": "property"}, "animHide": {"default": "WidgetAnim.ANIMATIONS.fadeOut", "type": "Anim", "description": "Default animation instance used for hiding the widget (opacity fade-out)", "guessedname": "animHide", "guessedtype": "property"}}, "methods": {"_uiSetVisible": {"guessedname": "_uiSetVisible", "params": [{"type": "boolean", "name": "val", "description": " true, if making the widget visible. false, if hiding it."}], "description": "The original Widget _uiSetVisible implementation. This currently needs to be replicated,\nso it can be invoked before or after the animation starts or stops, since the original\nmethods is not available to the AOP implementation.", "private": "", "guessedtype": "function"}, "_uiAnimSetVisible": {"protected": "", "params": [{"type": "boolean", "name": "val", "description": " true, if making the widget visible. false, if hiding it."}], "description": "The injected method used to override the host widget's _uiSetVisible implementation with\nan animated version of the same.\n<p>This method replaces the default _uiSetVisible handler\nWidget provides, by injecting itself before _uiSetVisible,\nand preventing the default behavior. </p>", "guessedname": "_uiAnimSetVisible", "guessedtype": "function"}, "_bindAnimHide": {"private": "", "description": "Binds a listener to invoke the original visibility handling when the animHide animation is complete", "guessedname": "_bindAnimHide", "guessedtype": "function"}, "initializer": {"params": [{"type": "Object", "name": "config", "description": " The user configuration for the plugin"}], "description": "The initializer lifecycle implementation. Modifies the host widget's \nvisibililty implementation to add animation.", "guessedname": "initializer", "guessedtype": "function"}, "destructor": {"description": "The initializer destructor implementation. Responsible for destroying the configured\nanimation instances.", "guessedname": "destructor", "guessedtype": "function"}, "_bindAnimShow": {"private": "", "description": "Binds a listener to invoke the original visibility handling when the animShow animation is started", "guessedname": "_bindAnimShow", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "WidgetAnim.js", "shortname": "WidgetAnim", "properties": {"WidgetAnim.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration for the plugin.", "guessedname": "ATTRS", "guessedtype": "property"}, "WidgetAnim.ANIMATIONS": {"description": "Pre-Packaged Animation implementations, which can be used for animShow and animHide attribute \nvalues.", "default": "\"pluginWidgetAnim\"", "static": "", "guessedname": "ANIMATIONS", "guessedtype": "property", "type": "Object"}, "WidgetAnim.NAME": {"description": "The NAME of the WidgetAnim class. Used to prefix events generated\nby the plugin class.", "default": "\"pluginWidgetAnim\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String"}, "WidgetAnim.NS": {"description": "The namespace for the plugin. This will be the property on the widget, which will \nreference the plugin instance, when it's plugged in.", "default": "\"anim\"", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String"}}, "description": "A plugin class which can be used to animate widget visibility changes."}, "AutoCompleteList": {"name": "AutoCompleteList", "configs": {"activeItem": {"type": "Node", "description": "Item that's currently active, if any. When the user presses enter,\nthis is the item that will be selected.", "guessedname": "activeItem", "guessedtype": "property"}, "activateFirstItem": {"default": "false", "type": "Boolean", "description": "If <code>true</code>, the first item in the list will be activated by\ndefault when the list is initially displayed and when results change.", "guessedname": "activateFirstItem", "guessedtype": "property"}, "listNode": {"readonly": "", "type": "Node|null", "description": "Node that will contain result items.", "guessedname": "listNode", "guessedtype": "function"}, "alwaysShowList": {"default": "false", "type": "Boolean", "description": "If <code>true</code>, the list will remain visible even when there\nare no results to display.", "guessedname": "alwaysShowList", "guessedtype": "property"}, "tabSelect": {"default": "true", "type": "Boolean", "description": "If <code>true</code>, pressing the tab key while the list is visible\nwill select the active item, if any.", "guessedname": "tabSelect", "guessedtype": "property"}, "hoveredItem": {"readonly": "", "type": "Node|null", "description": "Item currently being hovered over by the mouse, if any.", "guessedname": "hoveredItem", "guessedtype": "property"}, "strings": {"type": "Object", "description": "Translatable strings used by the AutoCompleteList widget.", "guessedname": "strings", "guessedtype": "property"}, "circular": {"default": "true", "type": "Boolean", "description": "If <code>true</code>, keyboard navigation will wrap around to the\nopposite end of the list when navigating past the first or last item.", "guessedname": "circular", "guessedtype": "property"}}, "description": "Traditional autocomplete dropdown list widget, just like Mom used to make.", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Configuration object."}], "description": "Traditional autocomplete dropdown list widget, just like Mom used to make."}], "namespace": "", "module": "autocomplete", "guessedname": "Lang", "uses": ["AutoCompleteBase", "WidgetPosition", "WidgetPositionAlign", "WidgetStack"], "superclass": "Widget", "file": "autocomplete-list.js", "guessedtype": "property", "extends": "Widget", "shortname": "AutoCompleteList", "events": {"circularChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "circularChange", "description": "Fires when the value for the configuration attribute 'circular' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "listNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "listNodeChange", "description": "Fires when the value for the configuration attribute 'listNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stringsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stringsChange", "description": "Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tabSelectChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tabSelectChange", "description": "Fires when the value for the configuration attribute 'tabSelect' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "activeItemChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeItemChange", "description": "Fires when the value for the configuration attribute 'activeItem' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hoveredItemChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hoveredItemChange", "description": "Fires when the value for the configuration attribute 'hoveredItem' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "alwaysShowListChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "alwaysShowListChange", "description": "Fires when the value for the configuration attribute 'alwaysShowList' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "activateFirstItemChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activateFirstItemChange", "description": "Fires when the value for the configuration attribute 'activateFirstItem' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "select": {"preventable": "_defSelectFn", "params": [{"type": "EventFacade", "name": "e", "description": " Event facade with the following additional\nproperties:\n<dl>\n<dt>itemNode (Node)</dt>\n<dd>\nList item node that was selected.\n</dd>\n<dt>result (Object)</dt>\n<dd>\nAutoComplete result object.\n</dd>\n</dl>"}], "description": "Fires when an autocomplete suggestion is selected from the list by\na keyboard action or mouse click."}}, "methods": {"_keyUp": {"protected": "", "description": "Called when the up arrow key is pressed.", "guessedname": "_keyUp", "guessedtype": "function"}, "_keyDown": {"protected": "", "description": "Called when the down arrow key is pressed.", "guessedname": "_keyDown", "guessedtype": "function"}, "_defSelectFn": {"protected": "", "params": [{"type": "EventTarget", "name": "e", "description": ""}], "description": "Default <code>select</code> event handler.", "guessedname": "_defSelectFn", "guessedtype": "function"}, "_bindList": {"protected": "", "description": "Binds list events.", "guessedname": "_bindList", "guessedtype": "function"}, "_add": {"return": {"type": "NodeList", "description": "Added nodes."}, "description": "Appends the specified result <i>items</i> to the list inside a new item\nnode.", "protected": "", "params": [{"type": "Array|Node|HTMLElement|String", "name": "items", "description": " Result item or array of\nresult items."}], "guessedname": "_add", "guessedtype": "function"}, "_bindKeys": {"protected": "", "description": "Binds keyboard events.", "guessedname": "_bindKeys", "guessedtype": "function"}, "_getFirstItemNode": {"protected": "", "return": {"type": "Node|null", "description": ""}, "description": "Gets the first item node in the list, or <code>null</code> if the list is\nempty.", "guessedname": "_getFirstItemNode", "guessedtype": "function"}, "_afterMouseOut": {"protected": "", "params": [{"type": "EventTarget", "name": "e", "description": ""}], "description": "Handles <code>mouseout</code> events.", "guessedname": "_afterMouseOut", "guessedtype": "function"}, "_createAriaNode": {"protected": "", "return": {"type": "Node", "description": "ARIA node."}, "description": "Creates and returns an ARIA live region node.", "guessedname": "_createAriaNode", "guessedtype": "function"}, "hide": {"guessedname": "hide", "chainable": "", "description": "Hides the list, unless the <code>alwaysShowList</code> attribute is\n<code>true</code>.", "see": "show", "guessedtype": "function"}, "_initKeys": {"protected": "", "description": "Initializes keyboard command mappings.", "guessedname": "_initKeys", "guessedtype": "function"}, "_onInputBlur": {"protected": "", "params": [{"type": "EventTarget", "name": "e", "description": ""}], "description": "Handles <code>inputNode</code> <code>blur</code> events.", "guessedname": "_onInputBlur", "guessedtype": "function"}, "_onItemClick": {"protected": "", "params": [{"type": "EventTarget", "name": "e", "description": ""}], "description": "Delegated event handler for item <code>click</code> events.", "guessedname": "_onItemClick", "guessedtype": "function"}, "_afterResultsChange": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "description": "Handles <code>resultsChange</code> events.", "guessedname": "_afterResultsChange", "guessedtype": "function"}, "_bindInput": {"protected": "", "description": "Binds <code>inputNode</code> events and behavior.", "guessedname": "_bindInput", "guessedtype": "function"}, "_syncResults": {"protected": "", "params": [{"type": "Array", "name": "results", "description": " (optional) Results."}], "description": "Synchronizes the results displayed in the list with those in the\n<i>results</i> argument, or with the <code>results</code> attribute if an\nargument is not provided.", "guessedname": "_syncResults", "guessedtype": "function"}, "_afterHoveredItemChange": {"protected": "", "params": [{"type": "EventTarget", "name": "e", "description": ""}], "description": "Handles <code>hoveredItemChange</code> events.", "guessedname": "_afterHoveredItemChange", "guessedtype": "function"}, "_onInputKey": {"protected": "", "params": [{"type": "EventTarget", "name": "e", "description": ""}], "description": "Handles <code>inputNode</code> key events.", "guessedname": "_onInputKey", "guessedtype": "function"}, "_clear": {"protected": "", "description": "Clears the contents of the tray.", "guessedname": "_clear", "guessedtype": "function"}, "_createItemNode": {"return": {"type": "Node", "description": "Item node."}, "description": "Creates and returns an item node with the specified <i>content</i>.", "protected": "", "params": [{"type": "Object", "name": "result", "description": " Result object."}], "guessedname": "_createItemNode", "guessedtype": "function"}, "_afterMouseOver": {"protected": "", "params": [{"type": "EventTarget", "name": "e", "description": ""}], "description": "Handles <code>mouseover</code> events.", "guessedname": "_afterMouseOver", "guessedtype": "function"}, "_keyEnter": {"protected": "", "description": "Called when the enter key is pressed.", "guessedname": "_keyEnter", "guessedtype": "function"}, "_activatePrevItem": {"chainable": "", "protected": "", "description": "Activates the item previous to the currently active item. If there is no\nprevious item and the <code>circular</code> attribute is\n<code>true</code>, focus will wrap back to the input node.", "guessedname": "_activatePrevItem", "guessedtype": "function"}, "_afterVisibleChange": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "description": "Handles <code>visibleChange</code> events.", "guessedname": "_afterVisibleChange", "guessedtype": "function"}, "_keyTab": {"protected": "", "description": "Called when the tab key is pressed.", "guessedname": "_keyTab", "guessedtype": "function"}, "_getLastItemNode": {"protected": "", "return": {"type": "Node|null", "description": ""}, "description": "Gets the last item node in the list, or <code>null</code> if the list is\nempty.", "guessedname": "_getLastItemNode", "guessedtype": "function"}, "_syncVisibility": {"protected": "", "params": [{"type": "Boolean", "name": "visible", "description": " (optional) Visibility."}], "description": "Synchronizes the visibility of the tray with the <i>visible</i> argument,\nor with the <code>visible</code> attribute if an argument is not\nprovided.", "guessedname": "_syncVisibility", "guessedtype": "function"}, "_afterAlwaysShowListChange": {"protected": "", "params": [{"type": "EventTarget", "name": "e", "description": ""}], "description": "Handles <code>alwaysShowListChange</code> events.", "guessedname": "_afterAlwaysShowListChange", "guessedtype": "function"}, "selectItem": {"chainable": "", "params": [{"type": "Node", "name": "itemNode", "description": " (optional) Item node to select."}], "description": "Selects the specified <i>itemNode</i>, or the current\n<code>activeItem</code> if <i>itemNode</i> is not specified.", "guessedname": "selectItem", "guessedtype": "function"}, "_ariaSay": {"protected": "", "params": [{"type": "String", "name": "stringId", "description": " String id (from the <code>strings</code>\nattribute) of the message to speak."}, {"type": "Object", "name": "subs", "description": " (optional) Substitutions for placeholders in the\nstring."}], "description": "Updates the ARIA live region with the specified message.", "guessedname": "_ariaSay", "guessedtype": "function"}, "_activateNextItem": {"chainable": "", "protected": "", "description": "Activates the next item after the currently active item. If there is no\nnext item and the <code>circular</code> attribute is <code>true</code>,\nfocus will wrap back to the input node.", "guessedname": "_activateNextItem", "guessedtype": "function"}, "_createListNode": {"protected": "", "return": {"type": "Node", "description": "List node."}, "description": "Creates and returns a list node.", "guessedname": "_createListNode", "guessedtype": "function"}, "_unbindKeys": {"protected": "", "description": "Unbinds keyboard events.", "guessedname": "_unbindKeys", "guessedtype": "function"}, "_keyEsc": {"protected": "", "description": "Called when the escape key is pressed.", "guessedname": "_keyEsc", "guessedtype": "function"}, "_afterActiveItemChange": {"protected": "", "params": [{"type": "EventTarget", "name": "e", "description": ""}], "description": "Handles <code>activeItemChange</code> events.", "guessedname": "_afterActiveItemChange", "guessedtype": "function"}}}, "Assert.Error": {"name": "Assert.Error", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}], "description": "Error is thrown whenever an assertion fails. It provides methods\nto more easily get at error information and also provides a base class\nfrom which more specific assertion errors can be derived."}], "namespace": "Assert", "module": "test", "guessedname": "Error", "methods": {"valueOf": {"return": {"type": "String", "description": "A primitive value version of the error."}, "description": "Returns a primitive value version of the error. Same as toString().", "guessedname": "valueOf", "guessedtype": "function"}, "getMessage": {"return": {"type": "String", "description": "A string describing the error."}, "description": "Returns a fully formatted error for an assertion failure. This should\nbe overridden by all subclasses to provide specific information.", "guessedname": "getMessage", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "A string representation of the error."}, "description": "Returns a string representation of the error.", "guessedname": "toString", "guessedtype": "function"}}, "file": "Assert.js", "guessedtype": "function", "shortname": "Error", "properties": {"name": {"type": "String", "description": "The name of the error that occurred.", "guessedname": "name", "guessedtype": "property"}}, "description": "Error is thrown whenever an assertion fails. It provides methods\nto more easily get at error information and also provides a base class\nfrom which more specific assertion errors can be derived."}, "ArrayList~filter": {"name": "ArrayList~filter", "namespace": "", "module": "collection", "methods": {"filter": {"return": {"type": " ArrayList ", "description": "New instance based on who passed the validator."}, "params": [{"type": " Function ", "name": "validator", "description": " Boolean function to determine in or out."}], "description": "<p>Create a new ArrayList (or augmenting class instance) from a subset\nof items as determined by the boolean function passed as the\nargument.  The original ArrayList is unchanged.</p>\n<p>The validator signature is <code>validator( item )</code>.</p>", "guessedname": "filter", "guessedtype": "function"}}, "file": "arraylist-filter.js", "shortname": "ArrayList~filter", "description": "Adds filter method to ArrayList prototype"}, "YUI~substitute": {"name": "YUI~substitute", "namespace": "", "module": "substitute", "methods": {"substitute": {"return": {"type": "string", "description": "the substituted string."}, "params": [{"type": "string", "name": "s", "description": " The string that will be modified."}, {"type": "object", "name": "o", "description": " An object containing the replacement values."}, {"type": "function", "name": "f", "description": " An optional function that can be used to\nprocess each match.  It receives the key,\nvalue, and any extra metadata included with\nthe key inside of the braces."}, {"type": "boolean", "name": "recurse", "description": " if true, the replacement will be recursive,\nletting you have replacement tokens in replacement text.  The\ndefault is false."}], "description": "Does variable substitution on a string. It scans through the string\nlooking for expressions enclosed in { } braces. If an expression\nis found, it is used a key on the object.  If there is a space in\nthe key, the first word is used for the key and the rest is provided\nto an optional function to be used to programatically determine the\nvalue (the extra information might be used for this decision). If\nthe value for the key in the object, or what is returned from the\nfunction has a string value, number value, or object value, it is\nsubstituted for the bracket expression and it repeats.  If this\nvalue is an object, it uses the Object's toString() if this has\nbeen overridden, otherwise it does a shallow dump of the key/value\npairs if Y.dump is available (if dump isn't available, toString()\nis used).\nThis method is included in the 'substitute' module.  It is not included\nin the YUI module.", "guessedname": "substitute", "guessedtype": "function"}}, "file": "substitute.js", "shortname": "YUI~substitute", "description": "The following methods are added to the YUI instance"}, "DD.Scroll": {"properties": {"_scrollTimer": {"guessedname": "_scrollTimer", "type": "{Y.later}", "description": "Holder for the Timer object returned from Y.later.", "private": "", "guessedtype": "property"}, "_dimCache": {"guessedname": "_dimCache", "type": "Object", "description": "Cache of the dragNode dims.", "private": "", "guessedtype": "property"}, "_vpRegionCache": {"guessedname": "_vpRegionCache", "type": "Object", "description": "Cache of the Viewport dims.", "private": "", "guessedtype": "property"}, "_scrolling": {"guessedname": "_scrolling", "type": "Boolean", "description": "Tells if we are actively scrolling or not.", "private": "", "guessedtype": "property"}}, "name": "DD.Scroll", "constructors": [{"description": "Base scroller class used to create the Plugin.DDNodeScroll and Plugin.DDWinScroll.\nThis class should not be called on it's own, it's designed to be a plugin."}], "namespace": "DD", "module": "dd", "events": {"hostChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hostChange", "description": "Fires when the value for the configuration attribute 'host' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "windowScrollChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "windowScrollChange", "description": "Fires when the value for the configuration attribute 'windowScroll' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "verticalChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "verticalChange", "description": "Fires when the value for the configuration attribute 'vertical' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "bufferChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "bufferChange", "description": "Fires when the value for the configuration attribute 'buffer' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "horizontalChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "horizontalChange", "description": "Fires when the value for the configuration attribute 'horizontal' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "parentScrollChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "parentScrollChange", "description": "Fires when the value for the configuration attribute 'parentScroll' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "scrollDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "scrollDelayChange", "description": "Fires when the value for the configuration attribute 'scrollDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "S", "methods": {"_cancelScroll": {"description": "Cancel a currently running scroll timer.", "private": "", "guessedname": "_cancelScroll", "guessedtype": "function"}, "end": {"description": "Called from the drag:end event", "guessedname": "end", "guessedtype": "function"}, "start": {"description": "Called from the drag:start event", "guessedname": "start", "guessedtype": "function"}, "align": {"description": "Called from the drag:align event to determine if we need to scroll.", "guessedname": "align", "guessedtype": "function"}, "_checkWinScroll": {"guessedname": "_checkWinScroll", "params": [{"type": "Boolean", "name": "move", "description": " Should we move the window. From Y.later"}], "description": "Check to see if we need to fire the scroll timer. If scroll timer is running this will scroll the window.", "private": "", "guessedtype": "function"}, "_setDimCache": {"description": "Set the cache of the dragNode dims.", "private": "", "guessedname": "_setDimCache", "guessedtype": "function"}, "toString": {"return": {"type": "", "description": "String name for the object"}, "description": "General toString method for logging", "guessedname": "toString", "guessedtype": "function"}, "_initScroll": {"description": "Cancel a previous scroll timer and init a new one.", "private": "", "guessedname": "_initScroll", "guessedtype": "function"}, "_getVPRegion": {"description": "Sets the _vpRegionCache property with an Object containing the dims from the viewport.", "private": "", "guessedname": "_getVPRegion", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "scroll.js", "guessedtype": "function", "shortname": "Scroll", "configs": {"vertical": {"type": "Boolean", "description": "Allow vertical scrolling, default: true.", "guessedname": "vertical", "guessedtype": "property"}, "scrollDelay": {"type": "Number", "description": "The number of milliseconds delay to pass to the auto scroller. Default: 235", "guessedname": "scrollDelay", "guessedtype": "property"}, "buffer": {"type": "Number", "description": "The number of pixels from the edge of the screen to turn on scrolling. Default: 30", "guessedname": "buffer", "guessedtype": "property"}, "windowScroll": {"type": "Boolean", "description": "Turn on window scroll support, default: false", "guessedname": "windowScroll", "guessedtype": "property"}, "host": {"type": "Object", "description": "The host we are plugged into.", "guessedname": "host", "guessedtype": "property"}, "parentScroll": {"type": "Node", "description": "Internal config option to hold the node that we are scrolling. Should not be set by the developer.", "guessedname": "parentScroll", "guessedtype": "property"}, "horizontal": {"type": "Boolean", "description": "Allow horizontal scrolling, default: true.", "guessedname": "horizontal", "guessedtype": "property"}}, "description": "Base scroller class used to create the Plugin.DDNodeScroll and Plugin.DDWinScroll.\nThis class should not be called on it's own, it's designed to be a plugin."}, "SliderBase": {"name": "SliderBase", "configs": {"length": {"default": "150px", "type": "{String | Number} e.g. \"200px\", \"6em\", or 200 (defaults to px)", "description": "The length of the rail (exclusive of the end caps if positioned by\nCSS).  This corresponds to the movable range of the thumb.", "guessedname": "length", "guessedtype": "property"}, "thumbUrl": {"default": "thumb-x.png or thumb-y.png in the sam skin directory of the\ncurrent build path for Slider", "type": "{String}", "description": "Path to the thumb image.  This will be used as both the thumb and\nshadow as a sprite.  Defaults at render() to thumb-x.png or\nthumb-y.png in the skin directory of the current skin.", "guessedname": "thumbUrl", "guessedtype": "property"}, "axis": {"description": "Axis upon which the Slider's thumb moves.  &quot;x&quot; for\nhorizontal, &quot;y&quot; for vertical.", "writeonce": "", "default": "&quot;x&quot;", "guessedname": "axis", "guessedtype": "property", "type": "{String}"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Configuration object"}], "description": "Create a slider to represent an input control capable of representing a\nseries of intermediate states based on the position of the slider's thumb.\nThese states are typically aligned to a value algorithm whereby the thumb\nposition corresponds to a given value. Sliders may be oriented vertically or\nhorizontally, based on the <code>axis</code> configuration."}], "namespace": "", "module": "slider", "events": {"axisChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "axisChange", "description": "Fires when the value for the configuration attribute 'axis' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "thumbMove": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the thumbMove with the\nfollowing extra properties:\n<dl>\n<dt>offset</dt>\n<dd>Pixel offset from top/left of the slider to the new\nthumb position</dd>\n<dt>ddEvent</dt>\n<dd><code>drag:drag</code> event from the thumb</dd>\n</dl>"}], "description": "Signals that the thumb has moved.  Payload includes the thumb's\npixel offset from the top/left edge of the rail, and if triggered by\ndragging the thumb, the <code>drag:drag</code> event."}, "slideEnd": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the slideEnd with the\nfollowing extra properties:\n<dl>\n<dt>ddEvent</dt>\n<dd><code>drag:end</code> event from the thumb</dd>\n</dl>"}], "description": "Signals the end of a thumb drag operation.  Payload includes\nthe thumb's drag:end event.", "guessedname": "ddEvent", "guessedtype": "property"}, "slideStart": {"params": [{"type": "Event", "name": "event", "description": "  The event object for the slideStart with the\nfollowing extra properties:\n<dl>\n<dt>ddEvent</dt>\n<dd><code>drag:start</code> event from the thumb</dd>\n</dl>"}], "description": "Signals the beginning of a thumb drag operation.  Payload includes\nthe thumb's drag:start event.", "guessedname": "ddEvent", "guessedtype": "property"}, "thumbUrlChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "thumbUrlChange", "description": "Fires when the value for the configuration attribute 'thumbUrl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "lengthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lengthChange", "description": "Fires when the value for the configuration attribute 'length' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"_afterLengthChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  The lengthChange event object"}], "description": "Handles changes to the <code>length</code> attribute.  By default, it\ntriggers an update to the UI.", "guessedname": "_afterLengthChange", "guessedtype": "function"}, "renderRail": {"return": {"type": "Node", "description": "the rail node subtree"}, "description": "Creates the Slider rail DOM subtree for insertion into the Slider's\n<code>contentBox</code>.  Override this method if you want to provide\nthe rail element (presumably from existing markup).", "guessedname": "renderRail", "guessedtype": "function"}, "_setLength": {"return": {"type": "String", "description": "the sanitized value"}, "description": "Ensures the stored length value is a string with a quantity and unit.\nUnit will be defaulted to &quot;px&quot; if not included.  Rejects\nvalues less than or equal to 0 and those that don't at least start with\na number.", "protected": "", "params": [{"type": "String", "name": "v", "description": "  proposed value for the length attribute"}], "guessedname": "_setLength", "guessedtype": "function"}, "syncUI": {"description": "Synchronizes the DOM state with the attribute settings.", "guessedname": "syncUI", "guessedtype": "function"}, "_bindValueLogic": {"protected": "", "description": "Stub implementation.  Override this (presumably in a class extension) to\ninitialize any value logic that depends on the presence of the Drag\ninstance.", "guessedname": "_bindValueLogic", "guessedtype": "function"}, "_onDragEnd": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the <code>drag:end</code> event from the thumb"}], "description": "Dispatches the <code>slideEnd</code> event.", "guessedname": "_afterDragEnd", "guessedtype": "function"}, "_setAxis": {"return": {"type": "String", "description": "lowercased first character of the input string"}, "description": "Validates the axis is &quot;x&quot; or &quot;y&quot; (case insensitive).\nConverts to lower case for storage.", "protected": "", "params": [{"type": "String", "name": "v", "description": "  proposed value for the axis attribute"}], "guessedname": "_setAxis", "guessedtype": "function"}, "_onDragStart": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the <code>drag:start</code> event from the thumb"}], "description": "Dispatches the <code>slideStart</code> event.", "guessedname": "_onDragStart", "guessedtype": "function"}, "renderThumb": {"return": {"type": "Node", "description": "the thumb node subtree"}, "description": "Creates the Slider thumb DOM subtree for insertion into the Slider's\nrail.  Override this method if you want to provide the thumb element\n(presumably from existing markup).", "guessedname": "renderThumb", "guessedtype": "function"}, "_initThumbUrl": {"protected": "", "description": "<p>Defaults the thumbURL attribute according to the current skin, or\n&quot;sam&quot; if none can be determined.  Horizontal Sliders will have\ntheir <code>thumbUrl</code> attribute set to</p>\n<p><code>&quot;/<em>configured</em>/<em>yu</em>i/<em>builddi</em>r/slider/assets/skins/sam/thumb-x.png&quot;</code></p>\n<p>And vertical thumbs will get</p>\n<p><code>&quot;/<em>configured</em>/<em>yui</em>/<em>builddir</em>/slider/assets/skins/sam/thumb-y.png&quot;</code></p>", "guessedname": "_initThumbUrl", "guessedtype": "function"}, "_uiSetRailLength": {"protected": "", "params": [{"type": "String", "name": "length", "description": "  the length to apply to the rail style"}], "description": "Sets the rail length according to the <code>length</code> attribute.", "guessedname": "_uiSetRailLength", "guessedtype": "function"}, "_uiMoveThumb": {"protected": "", "params": [{"type": "Number", "name": "offset", "description": "  the pixel offset to set as left or top style"}], "description": "Moves the thumb to pixel offset position along the rail.", "guessedname": "_uiMoveThumb", "guessedtype": "function"}, "_bindThumbDD": {"protected": "", "description": "Makes the thumb draggable and constrains it to the rail.", "guessedname": "_bindThumbDD", "guessedtype": "function"}, "_afterDisabledChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  The disabledChange event object"}], "description": "Locks or unlocks the thumb.", "guessedname": "_afterDisabledChange", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Creates the Y.DD.Drag instance used to handle the thumb movement and\nbinds Slider interaction to the configured value model.", "guessedname": "bindUI", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Slider instantiation.", "guessedname": "initializer", "guessedtype": "function"}, "_syncThumbPosition": {"protected": "", "description": "Stub implementation.  Override this (presumably in a class extension) to\nensure the thumb is in the correct position according to the value\nalogorithm.\ninstance.", "guessedname": "_syncThumbPosition", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the Slider.", "guessedname": "renderUI", "guessedtype": "function"}, "_afterDrag": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the <code>drag:drag</code> event from the thumb"}], "description": "Dispatches the <code>thumbMove</code> event.", "guessedname": "_afterDrag", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "slider-base.js", "shortname": "SliderBase", "properties": {"CONTENT_TEMPLATE": {"default": "&lt;span>&lt;/span>", "type": "{String}", "description": "Content box template that will contain the Slider's rail and thumb.", "guessedname": "CONTENT_TEMPLATE", "guessedtype": "property"}, "thumb": {"type": "{Node}", "description": "The Node instance of the Slider's thumb element.  Do not write to\nthis property.", "guessedname": "thumb", "guessedtype": "property"}, "SliderBase.NAME": {"description": "The identity of the widget.", "default": "'sliderBase'", "readonly": "", "protected": "", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String"}, "_key": {"protected": "", "type": "{Object}", "description": "Cached fast access map for DOM properties and attributes that\npertain to accessing dimensional or positioning information\naccording to the Slider's axis (e.g. &quot;height&quot; vs.\n&quot;width&quot;).  Extension classes should add to this collection\nfor axis related strings if necessary.", "guessedname": "_key", "guessedtype": "property"}, "rail": {"type": "{Node}", "description": "The Node instance of the Slider's rail element.  Do not write to\nthis property.", "guessedname": "rail", "guessedtype": "property"}, "_dd": {"protected": "", "type": "{DD.Drag}", "description": "The DD.Drag instance linked to the thumb node.", "guessedname": "_dd", "guessedtype": "property"}, "BOUNDING_TEMPLATE": {"default": "&lt;span>&lt;/span>", "type": "{String}", "description": "Bounding box template that will contain the Slider's DOM subtree.  &lt;span&gt;s are used to support inline-block styling.", "guessedname": "BOUNDING_TEMPLATE", "guessedtype": "property"}, "SliderBase.ATTRS": {"description": "Static property used to define the default attribute configuration of\nthe Widget.", "protected": "", "static": "", "guessedname": "ATTRS", "guessedtype": "property", "type": "{Object}"}, "RAIL_TEMPLATE": {"default": "&lt;span class=\"{railClass}\">&lt;span class=\"{railMinCapClass}\">&lt;/span>&lt;span class=\"{railMaxCapClass}\">&lt;/span>&lt;/span>", "type": "{String}", "description": "Rail template that will contain the end caps and the thumb.\n{placeholder}s are used for template substitution at render time.", "guessedname": "RAIL_TEMPLATE", "guessedtype": "property"}, "THUMB_TEMPLATE": {"default": "&lt;span class=\"{thumbClass}\" tabindex=\"-1\">&lt;img src=\"{thumbShadowUrl}\" alt=\"Slider thumb shadow\" class=\"{thumbShadowClass}\">&lt;img src=\"{thumbImageUrl}\" alt=\"Slider thumb\" class=\"{thumbImageClass}\">&lt;/span>", "type": "{String}", "description": "Thumb template that will contain the thumb image and shadow. &lt;img>\ntags are used instead of background images to avoid a flicker bug in IE.\n{placeholder}s are used for template substitution at render time.", "guessedname": "THUMB_TEMPLATE", "guessedtype": "property"}, "axis": {"protected": "", "type": "{String}", "description": "The configured axis, stored for fast lookup since it's a writeOnce\nattribute.  This is for use by extension classes.  For\nimplementation code, use <code>get( &quot;axis&quot; )</code> for\nauthoritative source.  Never write to this property.", "guessedname": "axis", "guessedtype": "property"}}, "description": "Create a slider to represent an input control capable of representing a\nseries of intermediate states based on the position of the slider's thumb.\nThese states are typically aligned to a value algorithm whereby the thumb\nposition corresponds to a given value. Sliders may be oriented vertically or\nhorizontally, based on the <code>axis</code> configuration."}, "Overlay": {"name": "Overlay", "constructors": [{"params": [{"type": "Object", "name": "object", "description": " The user configuration for the instance."}], "description": "A basic Overlay Widget, which can be positioned based on Page XY co-ordinates and is stackable (z-index support).\nIt also provides alignment and centering support and uses a standard module format for it's content, with header,\nbody and footer section support."}], "namespace": "", "module": "overlay", "guessedname": "Overlay", "uses": ["WidgetStdMod", "WidgetPosition", "WidgetStack", "WidgetPositionAlign", "WidgetPositionConstrain"], "superclass": "Widget", "file": "Overlay.js", "guessedtype": "property", "extends": "Widget", "shortname": "Overlay", "description": "A basic Overlay Widget, which can be positioned based on Page XY co-ordinates and is stackable (z-index support).\nIt also provides alignment and centering support and uses a standard module format for it's content, with header,\nbody and footer section support."}, "SWF": {"name": "SWF", "constructors": [{"params": [{"type": "String|HTMLElement", "name": "id", "description": " The id of the element, or the element itself that the SWF will be inserted into.  \nThe width and height of the SWF will be set to the width and height of this container element."}, {"type": "String", "name": "swfURL", "description": " The URL of the SWF to be embedded into the page."}, {"type": "Object", "name": "p_oAttributes", "description": " (optional) Configuration parameters for the Flash application and values for Flashvars\nto be passed to the SWF. The p_oAttributes object allows the following additional properties:\n<dl>\n<dt>version : String</dt>\n<dd>The minimum version of Flash required on the user's machine.</dd>\n<dt>fixedAttributes : Object</dt>\n<dd>An object literal containing one or more of the following String keys and their values: <code>align, \nallowFullScreen, allowNetworking, allowScriptAccess, base, bgcolor, menu, name, quality, salign, scale,\ntabindex, wmode.</code> event from the thumb</dd>\n</dl>"}], "description": "Creates the SWF instance and keeps the configuration data"}], "namespace": "", "module": "swf", "properties": {"_instances": {"guessedname": "_instances", "type": "Object", "description": "The static collection of all instances of the SWFs on the page.", "private": "", "guessedtype": "property"}}, "methods": {"eventHandler": {"guessedname": "eventHandler", "params": [{"type": "String", "name": "swfid", "description": "  the id of the SWF dispatching the event"}, {"type": "Object", "name": "event", "description": "  the event being transmitted."}], "description": "Handles an event coming from within the SWF and delegate it\nto a specific instance of SWF.", "private": "", "guessedtype": "function"}, "callSWF": {"params": [{"type": "String", "name": "func", "description": "  the name of the function to call"}, {"type": "Object", "name": "args", "description": "  the set of arguments to pass to the function."}], "description": "Calls a specific function exposed by the SWF's\nExternalInterface.", "guessedname": "callSWF", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "Unique name of the SWF instance."}, "description": "Public accessor to the unique name of the SWF instance.", "guessedname": "toString", "guessedtype": "function"}, "_eventHandler": {"guessedname": "_eventHandler", "params": [{"type": "Object", "name": "event", "description": "  The event to be propagated from Flash."}], "description": "Propagates a specific event from Flash to JS.", "private": "", "guessedtype": "function"}}, "file": "swf.js", "augments": "Y.Event.Target", "shortname": "SWF", "events": {"wrongflashversion": {"description": "Fired when the Flash player version on the user's machine is below the required value."}}, "description": "Creates the SWF instance and keeps the configuration data"}, "Subscriber": {"name": "Subscriber", "constructors": [{"params": [{"type": "Function", "name": "fn", "description": "       The wrapped function to execute."}, {"type": "Object", "name": "context", "description": "  The value of the keyword 'this' in the listener."}, {"type": "Array", "name": "args*", "description": "       0..n additional arguments to supply the listener."}], "description": "Stores the subscriber information to be used when the event fires."}], "namespace": "", "module": "event-custom", "guessedname": "Subscriber", "methods": {"contains": {"return": {"type": "boolean", "description": "true if the supplied arguments match this\nsubscriber's signature."}, "params": [{"type": "Function", "name": "fn", "description": " the function to execute."}, {"type": "Object", "name": "context", "description": " optional 'this' keyword for the listener."}], "description": "Returns true if the fn and obj match this objects properties.\nUsed by the unsubscribe method to match the right subscriber.", "guessedname": "contains", "guessedtype": "function"}, "notify": {"params": [{"type": "Array", "name": "args", "description": "  Arguments array for the subscriber."}, {"type": "CustomEvent", "name": "ce", "description": "  The custom event that sent the notification."}], "description": "Executes the subscriber.", "guessedname": "notify", "guessedtype": "function"}}, "file": "event-custom.js", "guessedtype": "function", "shortname": "Subscriber", "properties": {"args": {"type": "Array", "description": "Additional arguments to propagate to the subscriber", "guessedname": "args", "guessedtype": "property"}, "id": {"type": "String", "description": "Unique subscriber id", "guessedname": "id", "guessedtype": "property"}, "context": {"type": "Object", "description": "Optional 'this' keyword for the listener", "guessedname": "context", "guessedtype": "property"}, "events": {"type": "{EventTarget}", "description": "Custom events for a given fire transaction."}, "fn": {"type": "Function", "description": "The callback that will be execute when the event fires\nThis is wrapped by Y.rbind if obj was supplied.", "guessedname": "fn", "guessedtype": "property"}, "once": {"description": "This listener only reacts to the event once"}}, "description": "Stores the subscriber information to be used when the event fires."}, "Plugin.EditorBR": {"name": "Plugin.EditorBR", "constructors": [{"description": "Plugin for Editor to normalize BR's."}], "namespace": "", "module": "editor", "guessedname": "EditorBR", "methods": {"_afterEditorReady": {"private": "", "description": "Adds listeners for keydown in IE and Webkit. Also fires insertbeonreturn for supporting browsers.", "guessedname": "_afterEditorReady", "guessedtype": "function"}, "_onKeyDown": {"private": "", "description": "Frame keyDown handler that normalizes BR's when pressing ENTER.", "guessedname": "_onKeyDown", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "editor-br.js", "guessedtype": "function", "shortname": "Plugin.EditorBR", "properties": {"NS": {"static": "", "description": "editorBR", "guessedname": "NS", "guessedtype": "property"}, "NAME": {"static": "", "description": "editorBR", "guessedname": "NAME", "guessedtype": "property"}}, "description": "Plugin for Editor to normalize BR's."}, "io": {"name": "io", "namespace": "", "module": "io", "properties": {"_headers": {"description": "Object of default HTTP headers to be initialized and sent\nfor all transactions.", "private": "", "static": "", "guessedname": "_headers", "guessedtype": "property", "type": "object"}, "_qState": {"description": "Property to determine whether the queue is set to\n1 (active) or 0 (inactive).  When inactive, transactions\nwill be stored in the queue until the queue is set to active.", "private": "", "static": "", "guessedname": "_qState", "guessedtype": "property", "type": "int"}, "_delay": {"description": "Delay value to calling the Flash transport, in the\nevent io.swf has not finished loading.  Once the E_XDR_READY\nevent is fired, this value will be set to 0.", "static": "", "guessedname": "delay", "guessedtype": "property", "type": "number", "public": ""}, "_transport": {"description": "Map of io transports.", "private": "", "static": "", "guessedname": "_transport", "guessedtype": "property", "type": "object"}, "_timeout": {"description": "Object that stores timeout values for any transaction with\na defined \"timeout\" configuration property.", "private": "", "static": "", "guessedname": "_timeout", "guessedtype": "property", "type": "object"}, "transactionId": {"description": "A transaction counter that increments for each transaction.", "private": "", "static": "", "guessedname": "transactionId", "guessedtype": "property", "type": "int"}, "_cB": {"description": "Object that stores callback handlers for cross-domain requests\nwhen using Flash as the transport.", "private": "", "static": "", "guessedname": "_cB", "guessedtype": "property", "type": "object"}, "_rS": {"description": "Map of transaction readyState values used when\nXDomainRequest is the XDR transport.", "private": "", "static": "", "guessedname": "_rS", "guessedtype": "property", "type": "object"}, "_yQ": {"description": "Array of transactions queued for processing", "private": "", "static": "", "guessedname": "_q", "guessedtype": "property", "type": "Object"}}, "methods": {"_concat": {"return": {"type": "", "description": "int"}, "static": "", "params": [{"type": "string", "name": "s", "description": " - URI or root data."}, {"type": "string", "name": "d", "description": " - data to be concatenated onto URI."}], "description": "Method that concatenates string data for HTTP GET transactions.", "private": ""}, "_stop": {"static": "", "return": {"type": "", "description": "void"}, "description": "Method for setting queue processing to inactive.\nTransaction requests to YUI.io.queue() will be stored in the queue, but\nnot processed until the queue is reset to \"active\".", "private": ""}, "_ioEnd": {"return": {"type": "", "description": "void"}, "static": "", "params": [{"type": "object", "name": "o", "description": " - transaction object."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}], "description": "Fires event \"io:end\" and creates, fires a\ntransaction-specific \"end\" event, if config.on.end is\ndefined.", "private": ""}, "_handle": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "o", "name": "o", "description": " The transaction object"}, {"type": "object", "name": "c", "description": " Configuration object for the transaction."}], "description": "Bound to the iframe's Load event and processes\nthe response data.", "private": ""}, "header": {"return": {"type": "", "description": "int"}, "description": "Method that stores default client headers for all transactions.\nIf a label is passed with no value argument, the header will be deleted.\nThis is the interface for _setHeader().", "static": "", "guessedname": "header", "guessedtype": "property", "params": [{"type": "string", "name": "l", "description": " - HTTP header"}, {"type": "string", "name": "v", "description": " - HTTP header value"}], "public": ""}, "_startTimeout": {"return": {"type": "", "description": "void"}, "description": "Starts timeout count if the configuration object\nhas a defined timeout property.", "param": "{object} o Transaction object generated by _create().", "static": "", "private": "", "params": [{"type": "object", "name": "o", "description": " - Transaction object generated by _create()."}, {"type": "object", "name": "t", "description": " - Timeout in milliseconds."}]}, "_ioFailure": {"return": {"type": "", "description": "void"}, "static": "", "params": [{"type": "object", "name": "o", "description": " - transaction object."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}], "description": "Fires event \"io:failure\" and creates, fires a\ntransaction-specific \"failure\" event, if config.on.failure is\ndefined.", "private": ""}, "io": {"return": {"type": "", "description": "object"}, "description": "Method for requesting a transaction. This\nis the interface for _io().", "static": "", "guessedname": "io", "guessedtype": "property", "params": [{"type": "string", "name": "uri", "description": " - qualified path to transaction resource."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}], "public": ""}, "_isInProgress.": {"static": "", "params": [{"type": "object", "name": "o", "description": " - Transaction object generated by _create() in io-base."}], "description": "Method for determining if an XDR transaction has completed\nand all data are received.", "private": ""}, "_size": {"static": "", "return": {"type": "", "description": "int"}, "description": "Method to query the current size of the queue.", "private": ""}, "_data": {"return": {"type": "", "description": "object"}, "static": "", "params": [{"type": "object", "name": "o", "description": " - Transaction object generated by _create() in io-base."}, {"type": "boolean", "name": "f", "description": " - True if Flash was used as the transport."}, {"type": "boolean", "name": "t", "description": " - DataType value, as defined in the configuration."}], "description": "Creates a response object for XDR transactions, for success\nand failure cases.", "private": ""}, "_ioSuccess": {"return": {"type": "", "description": "void"}, "static": "", "params": [{"type": "object", "name": "o", "description": " - transaction object."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}], "description": "Fires event \"io:success\" and creates, fires a\ntransaction-specific \"success\" event, if config.on.success is\ndefined.", "private": ""}, "size": {"return": {"type": "", "description": "number"}, "description": "Method to query the current size of the queue, or to\nset a maximum queue size.  This is the interface for _size().", "static": "", "guessedname": "size", "guessedtype": "property", "params": [{"type": "number", "name": "i", "description": " - Specified maximum size of queue."}], "public": ""}, "_remove": {"static": "", "return": {"type": "", "description": "void"}, "description": "Method for removing a specific, pending transaction from\nthe queue.", "private": ""}, "_readyState": {"return": {"type": "", "description": "void"}, "static": "", "params": [{"type": "object", "name": "o", "description": " - Transaction object generated by _create()."}, {"type": "object", "name": "c", "description": " - Configuration object passed to YUI.io()."}], "description": "Event handler bound to onreadystatechange.", "private": ""}, "start": {"return": {"type": "", "description": "void"}, "description": "Method for setting the queue to active. If there are\ntransactions pending in the queue, they will be processed from the\nqueue in FIFO order. This is the interface for _start().", "static": "", "guessedname": "start", "guessedtype": "property", "public": ""}, "_clearTimeout": {"return": {"type": "", "description": "void"}, "description": "Clears the timeout interval started by _startTimeout().", "param": "{number} id - Transaction ID.", "static": "", "private": "", "params": [{"type": "number", "name": "id", "description": " - Transaction id."}]}, "transport": {"return": {"type": "", "description": "void"}, "description": "Method to initialize the desired transport.", "static": "", "guessedname": "transport", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " - object of transport configurations."}], "public": ""}, "_serialize": {"return": {"type": "", "description": "string"}, "description": "Method to enumerate through an HTML form's elements collection\nand return a string comprised of key-value pairs.", "private": "", "static": "", "guessedname": "_serialize", "guessedtype": "function", "params": [{"type": "object", "name": "c", "description": " - YUI form node or HTML form id."}, {"type": "string", "name": "s", "description": " - Transaction data defined in the configuration."}]}, "_create": {"return": {"type": "", "description": "object"}, "description": "Method that creates a unique transaction object for each\nrequest.", "param": "{object} o Transaction object generated by _create().", "static": "", "private": "", "params": [{"type": "number", "name": "c", "description": " - configuration object subset to determine if\nthe transaction is an XDR or file upload,\nrequiring an alternate transport."}, {"type": "number", "name": "i", "description": " - transaction id"}]}, "_upload": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "o", "name": "o", "description": " The transaction object"}, {"type": "object", "name": "uri", "description": " Qualified path to transaction resource."}, {"type": "object", "name": "c", "description": " Configuration object for the transaction."}], "description": "Uploads HTML form data, inclusive of files/attachments,\nusing the iframe created in _create to facilitate the transaction.", "private": ""}, "_resend": {"return": {"type": "", "description": "void"}, "static": "", "params": [{"type": "object", "name": "o", "description": " - Transaction object generated by _create()."}, {"type": "string", "name": "uri", "description": " - qualified path to transaction resource."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}], "description": "Resends an XDR transaction, using the Flash tranport,\nif the native transport fails.", "private": ""}, "xdrResponse": {"return": {"type": "", "description": "object"}, "description": "Response controller for cross-domain requests when using the\nFlash transport or IE8's XDomainRequest object.", "private": "", "static": "", "guessedname": "xdrResponse", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " - Transaction object generated by _create() in io-base."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}, {"type": "string", "name": "e", "description": " - Event name"}]}, "_destroy": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "o", "name": "o", "description": " The transaction object"}, {"type": "object", "name": "uri", "description": " Qualified path to transaction resource."}, {"type": "object", "name": "c", "description": " Configuration object for the transaction."}], "description": "", "private": ""}, "stop": {"return": {"type": "", "description": "void"}, "description": "Method for setting queue processing to inactive.\nTransaction requests to YUI.io.queue() will be stored in the queue, but\nnot processed until the queue is restarted. This is the\ninterface for _stop().", "static": "", "guessedname": "stop", "guessedtype": "property", "public": ""}, "_shift": {"static": "", "return": {"type": "", "description": "void"}, "description": "Method Process the first transaction from the\nqueue in FIFO order.", "private": ""}, "_ioCancel": {"return": {"type": "", "description": "void"}, "static": "", "params": [{"type": "object", "name": "o", "description": " - Transaction object generated by _create()."}, {"type": "string", "name": "s", "description": " - Identifies timed out or aborted transaction."}], "description": "Terminates a transaction due to an explicit abort or\ntimeout.", "private": ""}, "_swf": {"return": {"type": "", "description": "void"}, "static": "", "params": [{"type": "string", "name": "uri", "description": " - location of io.swf."}, {"type": "string", "name": "yid", "description": " - YUI instance id."}], "description": "Method that creates the Flash transport swf.", "private": ""}, "_ioComplete": {"return": {"type": "", "description": "void"}, "static": "", "params": [{"type": "object", "name": "o", "description": " - transaction object."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}], "description": "Fires event \"io:complete\" and creates, fires a\ntransaction-specific \"complete\" event, if config.on.complete is\ndefined.", "private": ""}, "appendData": {"return": {"type": "array", "description": "e Array of created fields."}, "static": "", "params": [{"type": "object", "name": "f", "description": " HTML form object."}, {"type": "string", "name": "s", "description": " The key-value POST data."}], "description": "Parses the POST data object and creates hidden form elements\nfor each key-value, and appends them to the HTML form object.", "private": ""}, "promote": {"return": {"type": "", "description": "void"}, "description": "Method for promoting a transaction to the top of the queue.\nThis is the interface for _unshift().", "static": "", "guessedname": "promote", "guessedtype": "property", "params": [{"type": "Object", "name": "o", "description": " - Reference to queued transaction."}], "public": ""}, "_setAttrs": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "object", "name": "f", "description": " HTML form object."}, {"type": "object", "name": "id", "description": " The Transaction ID."}, {"type": "object", "name": "uri", "description": " Qualified path to transaction resource."}], "description": "Sets the appropriate attributes and values to the HTML\nform, in preparation of a file upload transaction.", "private": ""}, "_setHeaders": {"return": {"type": "", "description": "void"}, "static": "", "params": [{"type": "object", "name": "o", "description": " - XHR instance for the specific transaction."}, {"type": "object", "name": "h", "description": " - HTTP headers for the specific transaction, as defined\nin the configuration object passed to YUI.io()."}], "description": "Method that sets all HTTP headers to be sent in a transaction.", "private": ""}, "_xhr": {"static": "", "return": {"type": "", "description": "object"}, "description": "Method that creates the XMLHttpRequest transport", "private": ""}, "_queue": {"static": "", "return": {"type": "", "description": "Object"}, "description": "Method for requesting a transaction, and queueing the\nrequest before it is sent to the resource.", "private": ""}, "f": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "object", "name": "f", "description": " HTML form object."}, {"type": "object", "name": "o", "description": " HTML form fields created from configuration.data."}], "description": "Removes the custom fields created to pass additional POST\ndata, along with the HTML form fields.", "private": ""}, "_evt": {"return": {"type": "", "description": "void"}, "static": "", "params": [{"type": "object", "name": "o", "description": " - Transaction object generated by _create() in io-base."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}], "description": "Sets event handlers for XDomainRequest transactions.", "private": ""}, "_abort": {"static": "", "params": [{"type": "object", "name": "o", "description": " - Transaction object generated by _create() in io-base."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}], "description": "Method for intiating an XDR transaction abort.", "private": ""}, "remove": {"return": {"type": "", "description": "void"}, "description": "Method for removing a specific, pending transaction from\nthe queue. This is the interface for _remove().", "static": "", "guessedname": "remove", "guessedtype": "property", "params": [{"type": "Object", "name": "o", "description": " - Reference to queued transaction."}], "public": ""}, "_io": {"return": {"type": "", "description": "object"}, "static": "", "params": [{"type": "string", "name": "uri", "description": " - qualified path to transaction resource."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}, {"type": "number", "name": "i", "description": " - transaction id, if already set."}], "description": "Method for requesting a transaction. _io() is implemented as\nyui.io().  Each transaction may include a configuration object.  Its\nproperties are:\nmethod: HTTP method verb (e.g., GET or POST). If this property is not\nnot defined, the default value will be GET.\ndata: This is the name-value string that will be sent as the transaction\ndata.  If the request is HTTP GET, the data become part of\nquerystring. If HTTP POST, the data are sent in the message body.\nxdr: Defines the transport to be used for cross-domain requests.  By\nsetting this property, the transaction will use the specified\ntransport instead of XMLHttpRequest.\nThe properties are:\n{\nuse: Specify the transport to be used: 'flash' and 'native'\ndataType: Set the value to 'XML' if that is the expected\nresponse content type.\n}\nform: This is a defined object used to process HTML form as data.  The\nproperties are:\n{\nid: Node object or id of HTML form.\nuseDisabled: Boolean value to allow disabled HTML form field\nvalues to be sent as part of the data.\n}\non: This is a defined object used to create and handle specific\nevents during a transaction lifecycle.  These events will fire in\naddition to the global io events. The events are:\nstart - This event is fired when a request is sent to a resource.\ncomplete - This event fires when the transaction is complete.\nsuccess - This event fires when the response status resolves to\nHTTP 2xx.\nfailure - This event fires when the response status resolves to\nHTTP 4xx, 5xx; and, for all transaction exceptions,\nincluding aborted transactions and transaction timeouts.\nend -  This even is fired at the conclusion of the transaction\nlifecycle, after a success or failure resolution.\nThe properties are:\n{\nstart: function(id, arguments){},\ncomplete: function(id, responseobject, arguments){},\nsuccess: function(id, responseobject, arguments){},\nfailure: function(id, responseobject, arguments){},\nend: function(id, arguments){}\n}\nEach property can reference a function or be written as an\ninline function.\nsync: To enable synchronous transactions, set the configuration property\n\"sync\" to true; the default behavior is false.  Synchronous\ntransactions are limited to same-domain requests only.\ncontext: Object reference for all defined transaction event handlers\nwhen it is implemented as a method of a base object. Defining\n\"context\" will set the reference of \"this,\" used in the\nevent handlers, to the context value.  In the case where\ndifferent event handlers all have different contexts,\nuse Y.bind() to set the execution context, bypassing this\nconfiguration.\nheaders: This is a defined object of client headers, as many as.\ndesired for the transaction.  The object pattern is:\n{ 'header': 'value' }.\ntimeout: This value, defined as milliseconds, is a time threshold for the\ntransaction. When this threshold is reached, and the transaction's\nComplete event has not yet fired, the transaction will be aborted.\narguments: Object, array, string, or number passed to all registered\nevent handlers.  This value is available as the second\nargument in the \"start\" and \"abort\" event handlers; and, it is\nthe third argument in the \"complete\", \"success\", and \"failure\"\nevent handlers.", "private": ""}, "_ioStart": {"return": {"type": "", "description": "void"}, "static": "", "params": [{"type": "number", "name": "id", "description": " - transaction id"}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}], "description": "Fires event \"io:start\" and creates, fires a\ntransaction-specific start event, if config.on.start is\ndefined.", "private": ""}, "_resetAttrs": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "object", "name": "f", "description": " HTML form object."}, {"type": "object", "name": "a", "description": " Object of original attributes."}], "description": "Sets the appropriate attributes and values to the HTML\nform, in preparation of a file upload transaction.", "private": ""}, "_unshift": {"static": "", "return": {"type": "", "description": "void"}, "description": "Method for promoting a transaction to the top of the queue.", "private": ""}, "_handleResponse": {"return": {"type": "", "description": "void"}, "static": "", "params": [{"type": "object", "name": "o", "description": " - Transaction object generated by _create()."}, {"type": "object", "name": "c", "description": " - Configuration object passed to io()."}], "description": "Method that determines if a transaction response qualifies\nas success or failure, based on the response HTTP status code, and\nfires the appropriate success or failure events.", "private": ""}, "_setHeader": {"return": {"type": "", "description": "int"}, "static": "", "params": [{"type": "string", "name": "l", "description": " - HTTP header"}, {"type": "string", "name": "v", "description": " - HTTP header value"}], "description": "Method that stores default client headers for all transactions.\nIf a label is passed with no value argument, the header will be deleted.", "private": ""}, "_id": {"static": "", "return": {"type": "", "description": "int"}, "description": "Method that increments _transactionId for each transaction.", "private": ""}, "_tE": {"return": {"type": "", "description": "void"}, "static": "", "params": [{"type": "string", "name": "e", "description": " - event to be published"}, {"type": "object", "name": "c", "description": " - configuration data subset for event subscription."}], "description": "Method for creating and subscribing transaction events.", "private": ""}, "xdrReady": {"return": {"type": "", "description": "void"}, "description": "Fires event \"io:xdrReady\"", "private": "", "static": "", "guessedname": "xdrReady", "guessedtype": "function", "params": [{"type": "number", "name": "id", "description": " - transaction id"}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}]}, "xdr": {"description": "Method for accessing the transport's interface for making a\ncross-domain transaction.", "private": "", "static": "", "guessedname": "xdr", "guessedtype": "function", "params": [{"type": "string", "name": "uri", "description": " - qualified path to transaction resource."}, {"type": "object", "name": "o", "description": " - Transaction object generated by _create() in io-base."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}]}}, "file": "io-base.js", "shortname": "io", "events": {"io:end": {"type": "Event Custom", "description": "This event signifies the end of the transaction lifecycle.  The\ntransaction transport is destroyed.", "guessedname": "E_END", "guessedtype": "property"}, "io:start": {"type": "Event Custom", "description": "This event is fired by YUI.io when a transaction is initiated.", "guessedname": "E_START", "guessedtype": "property"}, "io:complete": {"type": "Event Custom", "description": "This event is fired by YUI.io when a transaction is complete.\nResponse status and data are accessible, if available.", "guessedname": "E_COMPLETE", "guessedtype": "property"}, "io:failure": {"type": "Event Custom", "description": "This event is fired by YUI.io when a transaction is complete, and\nthe HTTP status resolves to HTTP4xx, 5xx and above.", "guessedname": "E_FAILURE", "guessedtype": "property"}, "io:success": {"type": "Event Custom", "description": "This event is fired by YUI.io when a transaction is complete, and\nthe HTTP status resolves to HTTP2xx.", "guessedname": "E_SUCCESS", "guessedtype": "property"}, "io:xdrReady": {"type": "Event Custom", "description": "This event is fired by YUI.io when the specified transport is\nready for use.", "guessedname": "E_XDR_READY", "guessedtype": "property"}}, "description": "The io class is a utility that brokers HTTP requests through a simplified\ninterface.  Specifically, it allows JavaScript to make HTTP requests to\na resource without a page reload.  The underlying transport for making\nsame-domain requests is the XMLHttpRequest object.  YUI.io can also use\nFlash, if specified as a transport, for cross-domain requests."}, "Test.Suite": {"name": "Test.Suite", "constructors": [{"params": [{"type": "String||Object", "name": "data", "description": " The name of the test suite or an object containing\na name property as well as setUp and tearDown methods."}], "description": "A test suite that can contain a collection of TestCase and TestSuite objects."}], "namespace": "Test", "module": "test", "guessedname": "Suite", "methods": {"tearDown": {"return": {"type": "Void", "description": ""}, "description": "Function to run after each test is executed.", "guessedname": "tearDown", "guessedtype": "function"}, "add": {"return": {"type": "Void", "description": ""}, "params": [{"type": "Y.Test.Suite||Y.Test.Case", "name": "testObject", "description": " The test suite or test case to add."}], "description": "Adds a test suite or test case to the test suite.", "guessedname": "add", "guessedtype": "function"}, "setUp": {"return": {"type": "Void", "description": ""}, "description": "Function to run before each test is executed.", "guessedname": "setUp", "guessedtype": "function"}}, "file": "TestSuite.js", "guessedtype": "function", "shortname": "Suite", "properties": {"items": {"private": "", "description": "Array of test suites and", "guessedname": "items", "guessedtype": "property"}, "name": {"type": "String", "description": "The name of the test suite.", "guessedname": "name", "guessedtype": "property"}}, "description": "A test suite that can contain a collection of TestCase and TestSuite objects."}, "Assert.UnexpectedError": {"name": "Assert.UnexpectedError", "constructors": [{"params": [{"type": "Error", "name": "cause", "description": " The unexpected error that caused this error to be \nthrown."}], "description": "UnexpectedError is subclass of Error that is thrown whenever\nan error occurs within the course of a test and the test was not expected\nto throw an error."}], "namespace": "Assert", "module": "test", "guessedname": "UnexpectedError", "extends": "Assert.Error", "superclass": "Assert.Error", "file": "Assert.js", "guessedtype": "function", "shortname": "UnexpectedError", "properties": {"cause": {"type": "Error", "description": "The unexpected error that occurred.", "guessedname": "cause", "guessedtype": "property"}, "name": {"type": "String", "description": "The name of the error that occurred.", "guessedname": "name", "guessedtype": "property"}, "stack": {"type": "String", "description": "Stack information for the error (if provided).", "guessedname": "stack", "guessedtype": "property"}}, "description": "UnexpectedError is subclass of Error that is thrown whenever\nan error occurs within the course of a test and the test was not expected\nto throw an error."}, "Do": {"name": "Do", "namespace": "", "module": "event-custom", "guessedname": "DO_BEFORE", "methods": {"_inject": {"return": {"type": "string", "description": "handle for the subscription"}, "description": "Execute the supplied method after the specified function", "private": "", "static": "", "guessedname": "_inject", "guessedtype": "function", "params": [{"type": "string", "name": "when", "description": "  before or after"}, {"type": "Function", "name": "fn", "description": "  the function to execute"}, {"type": "", "name": "obj", "description": " the object hosting the method to displace"}, {"type": "string", "name": "sFn", "description": "  the name of the method to displace"}, {"type": "", "name": "c", "description": " The execution context for fn"}]}, "detach": {"params": [{"type": "string", "name": "handle", "description": "  the subscription handle"}], "description": "Detach a before or after subscription", "guessedname": "detach", "guessedtype": "function"}, "after": {"return": {"type": "string", "description": "handle for the subscription"}, "description": "Execute the supplied method after the specified function", "static": "", "guessedname": "after", "guessedtype": "function", "params": [{"type": "Function", "name": "fn", "description": "  the function to execute"}, {"type": "", "name": "obj", "description": " the object hosting the method to displace"}, {"type": "string", "name": "sFn", "description": "  the name of the method to displace"}, {"type": "", "name": "c", "description": " The execution context for fn"}, {"type": "mixed", "name": "arg*", "description": "  0..n additional arguments to supply to the subscriber"}]}, "before": {"return": {"type": "string", "description": "handle for the subscription"}, "description": "Execute the supplied method before the specified function", "static": "", "guessedname": "before", "guessedtype": "function", "params": [{"type": "Function", "name": "fn", "description": "  the function to execute"}, {"type": "", "name": "obj", "description": " the object hosting the method to displace"}, {"type": "string", "name": "sFn", "description": "  the name of the method to displace"}, {"type": "", "name": "c", "description": " The execution context for fn"}, {"type": "mixed", "name": "arg*", "description": "  0..n additional arguments to supply to the subscriber\nwhen the event fires."}]}}, "static": "", "file": "event-do.js", "guessedtype": "property", "shortname": "Do", "properties": {"Do.currentRetVal": {"since": "2.3.0", "static": "", "description": "Contains the current state of the return value, consumable by\n'after' event listeners, and updated if an after subscriber\nchanges the return value generated by the wrapped function."}, "Do.originalRetVal": {"since": "2.3.0", "static": "", "description": "Contains the return value from the wrapped method, accessible\nby 'after' event listeners."}, "objs": {"static": "", "description": "Cache of objects touched by the utility", "guessedname": "objs", "guessedtype": "property"}}, "description": "Allows for the insertion of methods that are executed before or after\na specified method"}, "Anim": {"name": "Anim", "for": "Anim", "configs": {"node": {"type": "Node", "description": "The object to be animated.", "guessedname": "node", "guessedtype": "property"}, "paused": {"description": "Whether or not the animation is currently paused.", "default": "false", "readonly": "", "guessedname": "paused", "guessedtype": "property", "type": "Boolean"}, "direction": {"default": "\"normal\"", "type": "String", "description": "How iterations of the animation should behave. \nPossible values are \"normal\" and \"alternate\".\nNormal will repeat the animation, alternate will reverse on every other pass.", "guessedname": "direction", "guessedtype": "property"}, "from": {"type": "Object\nsupports any unit, provided it matches the \"to\" (or default)\nunit (e.g. \"{width: 10em', color: 'rgb(0, 0 0)', borderColor: '#ccc'}\".\nIf using the default ('px' for length-based units), the unit may be omitted  (\n(e.g. \"{width: 100}, borderColor: 'ccc'}\", which defaults to pixels \nand hex, respectively).", "description": "The starting values for the animated properties. \nFields may be strings, numbers, or functions.\nIf a function is used, the return value becomes the from value.\nIf no from value is specified, the DEFAULT_GETTER will be used.", "guessedname": "from", "guessedtype": "property"}, "iterations": {"default": "1", "type": "Int", "description": "The number of times the animation should run", "guessedname": "iterations", "guessedtype": "property"}, "iterationCount": {"description": "The number of iterations that have occurred.\nResets when an animation ends (reaches iteration count or stop() called).", "default": "0", "readonly": "", "guessedname": "iterationCount", "guessedtype": "property", "type": "Int"}, "elapsedTime": {"description": "Current time the animation has been running.", "default": "0", "readonly": "", "guessedname": "elapsedTime", "guessedtype": "property", "type": "Int"}, "to": {"type": "Object\nsupports any unit, provided it matches the \"from\" (or default)\nunit (e.g. \"{width: '50%', color: 'red', borderColor: '#ccc'}\".\nIf using the default ('px' for length-based units), the unit may be omitted (\n(e.g. \"{width: 100}, borderColor: 'ccc'}\", which defaults to pixels \nand hex, respectively).", "description": "The ending values for the animated properties. \nFields may be strings, numbers, or functions.", "guessedname": "to", "guessedtype": "property"}, "running": {"description": "Whether or not the animation is currently running.", "default": "false", "readonly": "", "guessedname": "running", "guessedtype": "property", "type": "Boolean"}, "startTime": {"description": "Date stamp for the first frame of the animation.", "default": "0", "readonly": "", "guessedname": "startTime", "guessedtype": "property", "type": "Int"}, "duration": {"type": "NUM", "description": "The length of the animation.  Defaults to \"1\" (second).", "guessedname": "duration", "guessedtype": "property"}, "easing": {"type": "Function", "description": "The method that will provide values to the attribute(s) during the animation. \nDefaults to \"Easing.easeNone\".", "guessedname": "easing", "guessedtype": "property"}, "reverse": {"default": "false", "type": "Boolean", "description": "If true, animation begins from last frame", "guessedname": "reverse", "guessedtype": "property"}}, "description": "A class for constructing animation instances.", "constructors": [{"description": "A class for constructing animation instances."}], "namespace": "", "module": "anim", "properties": {"behaviors": {"static": "", "description": "Bucket for custom getters and setters", "guessedname": "behaviors", "guessedtype": "property"}, "DEFAULT_UNIT": {"static": "", "description": "The default unit to use with properties that pass the RE_DEFAULT_UNIT test.", "guessedname": "DEFAULT_UNIT", "guessedtype": "property"}, "RE_DEFAULT_UNIT": {"static": "", "description": "Regex of properties that should use the default unit.", "guessedname": "RE_DEFAULT_UNIT", "guessedtype": "property"}, "DEFAULT_GETTER": {"static": "", "description": "The default getter to use when getting object properties.", "guessedname": "DEFAULT_GETTER", "guessedtype": "function"}, "intervalTime": {"default": "20", "static": "", "description": "Time in milliseconds passed to setInterval for frame processing", "guessedname": "_intervalTime", "guessedtype": "property"}, "DEFAULT_SETTER": {"static": "", "description": "The default setter to use when setting object properties.", "guessedname": "DEFAULT_SETTER", "guessedtype": "function"}}, "guessedname": "RUNNING", "extends": "Base", "superclass": "Base", "file": "anim.js", "guessedtype": "property", "shortname": "Anim", "events": {"iterationCountChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "iterationCountChange", "description": "Fires when the value for the configuration attribute 'iterationCount' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "reverseChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "reverseChange", "description": "Fires when the value for the configuration attribute 'reverse' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "end": {"type": "Event.Custom", "params": [{"type": "Event", "name": "ev", "description": " The end event."}], "description": "fires after the animation completes.", "guessedname": "END", "guessedtype": "property"}, "durationChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "durationChange", "description": "Fires when the value for the configuration attribute 'duration' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resume": {"type": "Event.Custom", "params": [{"type": "Event", "name": "ev", "description": " The pause event."}], "description": "fires when an animation is resumed (run from pause)."}, "iteration": {"type": "Event.Custom", "params": [{"type": "Event", "name": "ev", "description": " The iteration event."}], "description": "fires when an animation begins an iteration."}, "toChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "toChange", "description": "Fires when the value for the configuration attribute 'to' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "iterationsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "iterationsChange", "description": "Fires when the value for the configuration attribute 'iterations' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tween": {"type": "Event.Custom", "params": [{"type": "Event", "name": "ev", "description": " The tween event."}], "description": "fires every frame of the animation.", "guessedname": "TWEEN", "guessedtype": "property"}, "start": {"type": "Event.Custom", "params": [{"type": "Event", "name": "ev", "description": " The start event."}], "description": "fires when an animation begins.", "guessedname": "START", "guessedtype": "property"}, "fromChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "fromChange", "description": "Fires when the value for the configuration attribute 'from' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pause": {"type": "Event.Custom", "params": [{"type": "Event", "name": "ev", "description": " The pause event."}], "description": "fires when an animation is paused."}, "runningChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "runningChange", "description": "Fires when the value for the configuration attribute 'running' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pausedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pausedChange", "description": "Fires when the value for the configuration attribute 'paused' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "startTimeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "startTimeChange", "description": "Fires when the value for the configuration attribute 'startTime' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "directionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "directionChange", "description": "Fires when the value for the configuration attribute 'direction' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "elapsedTimeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "elapsedTimeChange", "description": "Fires when the value for the configuration attribute 'elapsedTime' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "easingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "easingChange", "description": "Fires when the value for the configuration attribute 'easing' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"getBezier": {"return": {"type": "Array", "description": "An array containing int x and y member data"}, "description": "Get the current position of the animated element based on t.\nEach point is an array of \"x\" and \"y\" values (0 = x, 1 = y)\nAt least 2 points are required (start and end).\nFirst point is start. Last point is end.\nAdditional control points are optional.", "static": "", "guessedname": "getBezier", "guessedtype": "function", "params": [{"type": "Array", "name": "points", "description": " An array containing Bezier points"}, {"type": "Number", "name": "t", "description": " A number between 0 and 1 which is the basis for determining current position"}]}, "stop": {"description": "Stops all animation instances.", "chainable": "", "param": "{Boolean} finish If true, the animation will move to the last frame", "static": "", "guessedname": "stop", "guessedtype": "function"}, "pause": {"chainable": "", "static": "", "description": "Pauses all animation instances.", "guessedname": "pause", "guessedtype": "function"}, "run": {"chainable": "", "static": "", "description": "Runs all animation instances.", "guessedname": "run", "guessedtype": "function"}, "_runFrame": {"guessedname": "_runFrame", "static": "", "description": "Called per Interval to handle each animation frame.", "private": "", "guessedtype": "function"}}}, "Plugin.Cache": {"name": "Plugin.Cache", "namespace": "", "module": "cache", "uses": ["Plugin.Base"], "superclass": "Cache", "file": "cache-plugin.js", "extends": "Cache", "shortname": "Plugin.Cache", "properties": {"NS": {"description": "The namespace for the plugin. This will be the property on the host which\nreferences the plugin instance.", "value": "\"cache\"", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String", "final": ""}, "NAME": {"description": "Class name.", "value": "\"dataSourceCache\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Plugin.Cache adds pluginizability to Cache."}, "DateAssert": {"name": "DateAssert", "namespace": "", "module": "test", "guessedname": "DateAssert", "methods": {"datesAreEqual": {"static": "", "params": [{"type": "Date", "name": "expected", "description": " The expected date."}, {"type": "Date", "name": "actual", "description": " The actual date to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a date's month, day, and year are equal to another date's.", "guessedname": "datesAreEqual", "guessedtype": "function"}, "timesAreEqual": {"static": "", "params": [{"type": "Date", "name": "expected", "description": " The expected date."}, {"type": "Date", "name": "actual", "description": " The actual date to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a date's hour, minutes, and seconds are equal to another date's.", "guessedname": "timesAreEqual", "guessedtype": "function"}}, "static": "", "file": "DateAssert.js", "guessedtype": "property", "shortname": "DateAssert", "description": "The DateAssert object provides functions to test JavaScript Date objects\nfor a variety of cases."}, "DD.DDM": {"properties": {"_noShim": {"guessedname": "_noShim", "type": "{Boolean}", "description": "This flag turns off the use of the mouseover/mouseout shim. It should not be used unless you know what you are doing.", "private": "", "guessedtype": "property"}, "_pg": {"guessedname": "_pg", "type": "{Node}", "description": "The shim placed over the screen to track the mousemove event.", "private": "", "guessedtype": "property"}, "useHash": {"type": "{Boolean}", "description": "Should we only check targets that are in the viewport on drags (for performance), default: true", "guessedname": "useHash", "guessedtype": "property"}, "INTERSECT": {"guessedname": "INTERSECT", "type": "Number", "description": "In intersect mode, a Drop is targeted by \"part\" of the drag node being over the Target", "private": "", "guessedtype": "property"}, "activeDrag": {"type": "{Drag}", "description": "A reference to the currently active draggable object.", "guessedname": "activeDrag", "guessedtype": "property"}, "POINT": {"guessedname": "POINT", "type": "Number", "description": "In point mode, a Drop is targeted by the cursor being over the Target", "private": "", "guessedtype": "property"}, "_activeShims": {"guessedname": "_activeShims", "type": "{Array}", "description": "Placeholder for all active shims on the page", "private": "", "guessedtype": "property"}, "_active": {"type": "{Boolean}", "description": "flag set when we activate our first drag, so DDM can start listening for events.", "guessedname": "_active", "guessedtype": "property"}, "_delegates": {"guessedname": "_delegates", "type": "Array", "description": "Holder for all Y.DD.Delegate instances", "private": "", "guessedtype": "property"}, "validDrops": {"type": "{Array}", "description": "An array of the valid Drop Targets for this interaction."}, "STRICT": {"guessedname": "STRICT", "type": "Number", "description": "In strict mode, a Drop is targeted by the \"entire\" drag node being over the Target", "private": "", "guessedtype": "property"}, "mode": {"guessedname": "mode", "type": "Number", "description": "The mode that the drag operations will run in 0 for Point, 1 for Intersect, 2 for Strict", "private": "", "guessedtype": "property"}, "CSS_PREFIX": {"type": "{String}", "description": "The PREFIX to attach to all DD CSS class names", "guessedname": "CSS_PREFIX", "guessedtype": "property"}, "_debugShim": {"guessedname": "_debugShim", "type": "{Boolean}", "description": "Set this to true to set the shims opacity to .5 for debugging it, default: false.", "private": "", "guessedtype": "property"}, "otherDrops": {"type": "{Object}", "description": "An object literal of Other Drop Targets that we encountered during this interaction (in the case of overlapping Drop Targets)", "guessedname": "otherDrops", "guessedtype": "property"}, "targets": {"type": "{Array}", "description": "All of the Targets", "guessedname": "targets", "guessedtype": "property"}, "_drags": {"guessedname": "_drags", "type": "{Array}", "description": "Holder for all registered drag elements.", "private": "", "guessedtype": "property"}, "activeDrop": {"type": "{Object}", "description": "A reference to the active Drop Target", "guessedname": "activeDrop", "guessedtype": "property"}}, "name": "DD.DDM", "description": "Provides the base Drag Drop Manger required for making a Node draggable.", "constructors": [{"description": "Provides the base Drag Drop Manger required for making a Node draggable."}], "namespace": "DD", "module": "dd", "events": {"clickPixelThreshChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "clickPixelThreshChange", "description": "Fires when the value for the configuration attribute 'clickPixelThresh' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dragCursorChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dragCursorChange", "description": "Fires when the value for the configuration attribute 'dragCursor' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "ddm:start": {"type": "{Event.Custom}", "description": "Fires from the DDM before all drag events fire."}, "dragModeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dragModeChange", "description": "Fires when the value for the configuration attribute 'dragMode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "ddm:end": {"type": "{Event.Custom}", "description": "Fires from the DDM after the DDM finishes, before the drag end events."}, "clickTimeThreshChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "clickTimeThreshChange", "description": "Fires when the value for the configuration attribute 'clickTimeThresh' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "throttleTimeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "throttleTimeChange", "description": "Fires when the value for the configuration attribute 'throttleTime' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "DDMBase", "extends": "Base", "superclass": "Base", "file": "ddm-base.js", "guessedtype": "function", "shortname": "DDM", "configs": {"dragMode": {"type": "String", "description": "This attribute only works if the dd-drop module is active. It will set the dragMode (point, intersect, strict) of all future Drag instances.", "guessedname": "dragMode", "guessedtype": "property"}, "dragCursor": {"type": "String", "description": "The cursor to apply when dragging, if shimmed the shim will get the cursor.", "guessedname": "dragCursor", "guessedtype": "property"}, "throttleTime": {"type": "Number", "description": "The number of milliseconds to throttle the mousemove event. Default: 150", "guessedname": "throttleTime", "guessedtype": "property"}, "clickPixelThresh": {"type": "Number", "description": "The number of pixels to move to start a drag operation, default is 3.", "guessedname": "clickPixelThresh", "guessedtype": "property"}, "clickTimeThresh": {"type": "Number", "description": "The number of milliseconds a mousedown has to pass to start a drag operation, default is 1000.", "guessedname": "clickTimeThresh", "guessedtype": "property"}}, "methods": {"_calcTickArray": {"return": {"type": "", "description": "The tick position"}, "description": "This method is used with the tickXArray and tickYArray config options", "private": "", "params": [{"type": "Number", "name": "pos", "description": " The current X or Y position"}, {"type": "Number", "name": "ticks", "description": " The array containing our custom tick positions."}, {"type": "Number", "name": "off1", "description": " The min offset that we can't pass (region)"}, {"type": "Number", "name": "off2", "description": " The max offset that we can't pass (region)"}], "guessedname": "_calcTickArray", "guessedtype": "function"}, "cssSizestoObject": {"return": {"type": "Object", "description": "The gutter Object Literal."}, "description": "//TODO Private, rename??...", "private": "", "params": [{"type": "String", "name": "gutter", "description": " CSS style string for gutter: '5 0' (sets top and bottom to 5px, left and right to 0px), '1 2 3 4' (top 1px, right 2px, bottom 3px, left 4px)"}], "guessedname": "cssSizestoObject", "guessedtype": "function"}, "_createPG": {"description": "Creates the shim and adds it's listeners to it.", "private": "", "guessedname": "_createPG", "guessedtype": "function"}, "_pg_deactivate": {"description": "Deactivates the shim", "private": "", "guessedname": "_pg_deactivate", "guessedtype": "function"}, "_deactivateTargets": {"description": "This method fires the drop:hit, drag:drophit, drag:dropmiss methods and deactivates the shims..", "private": "", "guessedname": "_deactivateTargets", "guessedtype": "function"}, "regDelegate": {"description": "Register a Delegate with the DDM", "guessedname": "regDelegate", "guessedtype": "function"}, "stopDrag": {"chainable": "", "return": {"type": "Self", "description": ""}, "description": "Method will forcefully stop a drag operation. For example calling this from inside an ESC keypress handler will stop this drag.", "guessedname": "stopDrag", "guessedtype": "function"}, "getDrop": {"return": {"type": "Object", "description": ""}, "params": [{"type": "String/Object", "name": "node", "description": " The Node instance or Selector string to check for a valid Drop Object"}], "description": "Get a valid Drop instance back from a Node or a selector string, false otherwise", "guessedname": "getDrop", "guessedtype": "function"}, "_start": {"description": "Internal method used by Drag to signal the start of a drag operation", "private": "", "guessedname": "_start", "guessedtype": "function"}, "_dropMove": {"description": "This method is called when the move method is called on the Drag Object.", "private": "", "guessedname": "_dropMove", "guessedtype": "function"}, "_unregDrag": {"guessedname": "_unregDrag", "params": [{"type": "Drag", "name": "d", "description": " The drag object."}], "description": "Remove this drag object from the DDM._drags array.", "private": "", "guessedtype": "function"}, "clearCache": {"description": "Clears the cache data used for this interaction.", "guessedname": "clearCache", "guessedtype": "function"}, "_hasActiveShim": {"guessedname": "_hasActiveShim", "return": {"type": "Boolean", "description": ""}, "description": "This method checks the _activeShims Object to see if there is a shim active.", "private": "", "guessedtype": "function"}, "_startDrag": {"guessedname": "_startDrag", "params": [{"type": "Number", "name": "x", "description": " The x position of the drag element"}, {"type": "Number", "name": "y", "description": " The y position of the drag element"}, {"type": "Number", "name": "w", "description": " The width of the drag element"}, {"type": "Number", "name": "h", "description": " The height of the drag element"}], "description": "Factory method to be overwritten by other DDM's", "private": "", "guessedtype": "function"}, "_createFrame": {"guessedname": "_createFrame", "description": "Create the proxy element if it doesn't already exist and set the DD.DDM._proxy value", "private": "", "guessedtype": "function"}, "_addActiveShim": {"guessedname": "_addActiveShim", "params": [{"type": "Object", "name": "d", "description": " The Drop instance to add to the list."}], "description": "Adds a Drop Target to the list of active shims", "private": "", "guessedtype": "function"}, "_end": {"description": "Internal method used by Drag to signal the end of a drag operation", "private": "", "guessedname": "_end", "guessedtype": "function"}, "getBestMatch": {"return": {"type": "Object or Array", "description": ""}, "params": [{"type": "Array", "name": "drops", "description": " An Array of drops to scan for the best match."}, {"type": "Boolean", "name": "all", "description": " If present, it returns an Array. First item is best match, second is an Array of the other items in the original Array."}], "description": "This method will gather the area for all potential targets and see which has the hightest covered area and return it.", "guessedname": "getBestMatch", "guessedtype": "function"}, "_removeActiveShim": {"guessedname": "_removeActiveShim", "params": [{"type": "Object", "name": "d", "description": " The Drop instance to remove from the list."}], "description": "Removes a Drop Target to the list of active shims", "private": "", "guessedtype": "function"}, "swapPosition": {"return": {"type": "Node", "description": ""}, "params": [{"type": "Node", "name": "n1", "description": " The first node to swap"}, {"type": "Node", "name": "n2", "description": " The first node to swap"}], "description": "Swap the position of 2 nodes based on their CSS positioning.", "guessedname": "swapPosition", "guessedtype": "function"}, "getDrag": {"return": {"type": "Object", "description": ""}, "params": [{"type": "String/Object", "name": "node", "description": " The Node instance or Selector string to check for a valid Drag Object"}], "description": "Get a valid Drag instance back from a Node or a selector string, false otherwise", "guessedname": "getDrag", "guessedtype": "function"}, "_move": {"guessedname": "_move", "params": [{"type": "Event.Facade", "name": "ev", "description": " The Dom mousemove Event"}], "description": "Internal listener for the mousemove DOM event to pass to the Drag's move method.", "private": "", "guessedtype": "function"}, "_activateTargets": {"description": "Clear the cache and activate the shims of all the targets", "private": "", "guessedname": "_activateTargets", "guessedtype": "function"}, "_addValid": {"return": {"type": "Self", "description": ""}, "description": "Add a Drop Target to the list of Valid Targets. This list get's regenerated on each new drag operation.", "chainable": "", "private": "", "params": [{"type": "Object", "name": "drop", "description": ""}], "guessedname": "_addValid", "guessedtype": "function"}, "syncActiveShims": {"params": [{"type": "Boolean", "name": "force", "description": " Resize/sync all Targets."}], "description": "This method will sync the position of the shims on the Drop Targets that are currently active.", "guessedname": "syncActiveShims", "guessedtype": "function"}, "_removeValid": {"return": {"type": "Self", "description": ""}, "description": "Removes a Drop Target from the list of Valid Targets. This list get's regenerated on each new drag operation.", "chainable": "", "private": "", "params": [{"type": "Object", "name": "drop", "description": ""}], "guessedname": "_removeValid", "guessedtype": "function"}, "swapNode": {"return": {"type": "Node", "description": ""}, "params": [{"type": "Node", "name": "n1", "description": " The first node to swap"}, {"type": "Node", "name": "n2", "description": " The first node to swap"}], "description": "Swap the position of 2 nodes based on their DOM location.", "guessedname": "swapNode", "guessedtype": "function"}, "_regTarget": {"guessedname": "_regTarget", "params": [{"type": "Object", "name": "t", "description": " The Target to add to the targets collection"}], "description": "Add the passed in Target to the targets collection", "private": "", "guessedtype": "function"}, "_endDrag": {"description": "Factory method to be overwritten by other DDM's", "private": "", "guessedname": "_endDrag", "guessedtype": "function"}, "_setupListeners": {"description": "Add the document listeners.", "private": "", "guessedname": "_setupListeners", "guessedtype": "function"}, "_unregTarget": {"guessedname": "_unregTarget", "params": [{"type": "Object", "name": "drop", "description": " The Target to remove from the targets collection"}], "description": "Remove the passed in Target from the targets collection", "private": "", "guessedtype": "function"}, "getDelegate": {"returns": "Y.DD.Delegate", "description": "Get a delegate instance from a container node", "guessedname": "getDelegate", "guessedtype": "function"}, "_pg_activate": {"description": "Activates the shim", "private": "", "guessedname": "_pg_activate", "guessedtype": "function"}, "_lookup": {"guessedname": "_lookup", "return": {"type": "Array", "description": "The valid Drop Targets that are in the viewport."}, "description": "Filters the list of Drops down to those in the viewport.", "private": "", "guessedtype": "function"}, "_calcTicks": {"return": {"type": "Number", "description": "The new position based on the tick calculation"}, "description": "Helper method to calculate the tick offsets for a given position", "private": "", "params": [{"type": "Number", "name": "pos", "description": " The current X or Y position"}, {"type": "Number", "name": "start", "description": " The start X or Y position"}, {"type": "Number", "name": "tick", "description": " The X or Y tick increment"}, {"type": "Number", "name": "off1", "description": " The min offset that we can't pass (region)"}, {"type": "Number", "name": "off2", "description": " The max offset that we can't pass (region)"}], "guessedname": "_calcTicks", "guessedtype": "function"}, "_setFrame": {"guessedname": "_setFrame", "description": "If resizeProxy is set to true (default) it will resize the proxy element to match the size of the Drag Element.\nIf positionProxy is set to true (default) it will position the proxy element in the same location as the Drag Element.", "private": "", "guessedtype": "function"}, "isOverTarget": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "Object", "name": "drop", "description": " The drop to check against"}], "description": "Check to see if the Drag element is over the target, method varies on current mode", "guessedname": "isOverTarget", "guessedtype": "function"}, "_regDrag": {"guessedname": "_regDrag", "params": [{"type": "Drag", "name": "d", "description": " The Drag object"}], "description": "Adds a reference to the drag object to the DDM._drags array, called in the constructor of Drag.", "private": "", "guessedtype": "function"}, "_pg_size": {"description": "Sizes the shim on: activatation, window:scroll, window:resize", "private": "", "guessedname": "_pg_size", "guessedtype": "function"}, "_handleTargetOver": {"description": "This method execs _handleTargetOver on all valid Drop Targets", "private": "", "guessedname": "_handleTargetOver", "guessedtype": "function"}, "_setDragMode": {"return": {"type": "", "description": "Number The Mode to be set"}, "description": "Handler for dragMode attribute setter.", "private": "", "params": [{"type": "", "name": "String/Number", "description": " The Number value or the String for the DragMode to default all future drag instances to."}], "guessedname": "_setDragMode", "guessedtype": "function"}, "getNode": {"return": {"type": "Node", "description": ""}, "params": [{"type": "Node/Object/String", "name": "n", "description": " The node to resolve."}], "description": "Return a node instance from the given node, selector string or Y.Base extended object.", "guessedname": "getNode", "guessedtype": "function"}}}, "Coverage.Format": {"name": "Coverage.Format", "namespace": "Coverage", "module": "test", "methods": {"JSON": {"return": {"type": "String", "description": "A JSON-formatted string of coverage data."}, "description": "Returns the coverage report in JSON format. This is the straight\nJSON representation of the native coverage report.", "static": "", "guessedname": "JSON", "guessedtype": "function", "params": [{"type": "Object", "name": "coverage", "description": " The coverage report object."}]}, "XdebugJSON": {"return": {"type": "String", "description": "A JSON-formatted string of coverage data."}, "description": "Returns the coverage report in a JSON format compatible with\nXdebug. See <a href=\"http://www.xdebug.com/docs/code_coverage\">Xdebug Documentation</a>\nfor more information. Note: function coverage is not available\nin this format.", "static": "", "guessedname": "XdebugJSON", "guessedtype": "function", "params": [{"type": "Object", "name": "coverage", "description": " The coverage report object."}]}}, "static": "", "file": "CoverageFormat.js", "shortname": "Format", "description": "Contains specific formatting options for coverage information."}, "WidgetStack": {"name": "WidgetStack", "namespace": "", "module": "widget-stack", "events": {"shimChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "shimChange", "description": "Fires when the value for the configuration attribute 'shim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "zIndexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "zIndexChange", "description": "Fires when the value for the configuration attribute 'zIndex' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"zIndex": {"default": "0", "type": "number", "description": "The z-index to apply to the Widgets boundingBox. Non-numerical values for \nzIndex will be converted to 0", "guessedname": "zIndex", "guessedtype": "property"}, "shim": {"default": "false, for all browsers other than IE6, for which a shim is enabled by default.", "type": "boolean", "description": "Boolean flag to indicate whether or not a shim should be added to the Widgets\nboundingBox, to protect it from select box bleedthrough.", "guessedname": "shim", "guessedtype": "property"}}, "methods": {"sizeShim": {"description": "For IE6, synchronizes the size and position of iframe shim to that of \nWidget bounding box which it is protecting. For all other browsers,\nthis method does not do anything.", "guessedname": "sizeShim", "guessedtype": "function"}, "_renderShim": {"private": "", "description": "Creates the shim element and adds it to the DOM", "guessedname": "_renderShim", "guessedtype": "function"}, "_detachStackHandles": {"guessedname": "_detachStackHandles", "params": [{"type": "", "name": "String", "description": " handleKey The key defining the group of handles which should be detached"}], "description": "Detaches any handles stored for the provided key", "private": "", "guessedtype": "function"}, "_uiSetZIndex": {"protected": "", "params": [{"type": "number", "name": "zIndex", "description": " The zindex to be reflected in the UI"}], "description": "Updates the UI to reflect the zIndex value passed in.", "guessedname": "_uiSetZIndex", "guessedtype": "function"}, "_syncUIStack": {"protected": "", "description": "Synchronizes the UI to match the Widgets stack state. This method in \ninvoked after syncUI is invoked for the Widget class using YUI's aop infrastructure.", "guessedname": "_syncUIStack", "guessedtype": "function"}, "_setZIndex": {"return": {"type": "Number", "description": "Normalized zIndex"}, "description": "Default setter for zIndex attribute changes. Normalizes zIndex values to \nnumbers, converting non-numerical values to 0.", "protected": "", "params": [{"type": "String | Number", "name": "zIndex", "description": ""}], "guessedname": "_setZIndex", "guessedtype": "function"}, "_destroyShim": {"private": "", "description": "Removes the shim from the DOM, and detaches any related event\nlisteners.", "guessedname": "_destroyShim", "guessedtype": "function"}, "_uiSetShim": {"protected": "", "params": [{"type": "boolean", "name": "enable", "description": " If true, creates/renders the shim, if false, removes it."}], "description": "Updates the UI to enable/disable the shim. If the widget is not currently visible,\ncreation of the shim is deferred until it is made visible, for performance reasons.", "guessedname": "_uiSetShim", "guessedtype": "function"}, "_getShimTemplate": {"guessedname": "_getShimTemplate", "return": {"type": "Node", "description": "node A new shim Node instance."}, "description": "Creates a cloned shim node, using the SHIM_TEMPLATE html template, for use on a new instance.", "private": "", "guessedtype": "function"}, "_renderUIStack": {"protected": "", "description": "Creates/Initializes the DOM to support stackability.\n<p>\nThis method in invoked after renderUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_renderUIStack", "guessedtype": "function"}, "_renderShimDeferred": {"private": "", "description": "Sets up change handlers for the visible attribute, to defer shim creation/rendering \nuntil the Widget is made visible.", "guessedname": "_renderShimDeferred", "guessedtype": "function"}, "_afterZIndexChange": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade for the attribute change"}], "description": "Default attribute change listener for the zIndex attribute, responsible\nfor updating the UI, in response to attribute changes.", "guessedname": "_afterZIndexChange", "guessedtype": "function"}, "_afterShimChange": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade for the attribute change"}], "description": "Default attribute change listener for the shim attribute, responsible\nfor updating the UI, in response to attribute changes.", "guessedname": "_afterShimChange", "guessedtype": "function"}, "_bindUIStack": {"protected": "", "description": "Binds event listeners responsible for updating the UI state in response to \nWidget stack related state changes.\n<p>\nThis method is invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_bindUIStack", "guessedtype": "function"}, "_addShimResizeHandlers": {"private": "", "description": "Sets up event listeners to resize the shim when the size of the Widget changes.\n<p>\nNOTE: This method is only used for IE6 currently, since IE6 doesn't support a way to\nresize the shim purely through CSS, when the Widget does not have an explicit width/height \nset.\n</p>", "guessedname": "_addShimResizeHandlers", "guessedtype": "function"}}, "param": "{Object} User configuration object", "file": "Widget-Stack.js", "shortname": "WidgetStack", "properties": {"WidgetStack.SHIM_TEMPLATE": {"type": "String", "static": "", "description": "Default markup template used to generate the shim element.", "guessedname": "SHIM_TEMPLATE", "guessedtype": "property"}, "WidgetStack.STACKED_CLASS_NAME": {"description": "Default class used to mark the boundingBox of a stacked widget.", "default": "\"yui-widget-stacked\"", "static": "", "guessedname": "STACKED_CLASS_NAME", "guessedtype": "property", "type": "String"}, "WidgetStack.SHIM_CLASS_NAME": {"description": "Default class used to mark the shim element", "default": "\"yui-widget-shim\"", "static": "", "guessedname": "SHIM_CLASS_NAME", "guessedtype": "property", "type": "String"}, "WidgetStack.HTML_PARSER": {"type": "Object", "static": "", "description": "The HTML parsing rules for the WidgetStack class.", "guessedname": "HTML_PARSER", "guessedtype": "property"}, "WidgetStack.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration introduced by WidgetStack.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "Widget extension, which can be used to add stackable (z-index) support to the \nbase Widget class along with a shimming solution, through the \n<a href=\"Base.html#method_build\">Base.build</a> method."}, "Test.Case": {"name": "Test.Case", "constructors": [{"params": [{"type": "", "name": "template", "description": " An object containing any number of test methods, other methods,\nan optional name, and anything else the test case needs."}], "description": "Test case containing various tests to run."}], "namespace": "Test", "module": "test", "guessedname": "Case", "methods": {"tearDown": {"return": {"type": "Void", "description": ""}, "description": "Function to run after each test is executed.", "guessedname": "tearDown", "guessedtype": "function"}, "setUp": {"return": {"type": "Void", "description": ""}, "description": "Function to run before each test is executed.", "guessedname": "setUp", "guessedtype": "function"}, "wait": {"return": {"type": "Void", "description": ""}, "params": [{"type": "Function", "name": "segment", "description": " (Optional) The function to run after the delay.\nIf omitted, the TestRunner will wait until resume() is called."}, {"type": "int", "name": "delay", "description": " (Optional) The number of milliseconds to wait before running\nthe function. If omitted, defaults to zero."}], "description": "Causes the test case to wait a specified amount of time and then\ncontinue executing the given code.", "guessedname": "wait", "guessedtype": "function"}, "resume": {"return": {"type": "Void", "description": ""}, "params": [{"type": "Function", "name": "segment", "description": " (Optional) The function to run.\nIf omitted, the test automatically passes."}], "description": "Resumes a paused test and runs the given function.", "guessedname": "resume", "guessedtype": "function"}}, "file": "TestCase.js", "guessedtype": "function", "shortname": "Case", "properties": {"_should": {"description": "Special rules for the test case. Possible subobjects\nare fail, for tests that should fail, and error, for\ntests that should throw an error.", "guessedname": "_should", "guessedtype": "property"}, "name": {"description": "Name for the test case.", "guessedname": "name", "guessedtype": "property"}}, "description": "Test case containing various tests to run."}, "Assert": {"name": "Assert", "namespace": "", "module": "test", "guessedname": "Assert", "methods": {"isTrue": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is true. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "isTrue", "guessedtype": "function"}, "isFalse": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is false. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "isFalse", "guessedtype": "function"}, "isNotNull": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not null. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "isNotNull", "guessedtype": "function"}, "fail": {"static": "", "params": [{"type": "String", "name": "message", "description": " (Optional) The message to display with the failure."}], "description": "Forces an assertion error to occur.", "guessedname": "fail", "guessedtype": "function"}, "isFunction": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is a function.", "guessedname": "isFunction", "guessedtype": "function"}, "isNaN": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not a number.", "guessedname": "isNaN", "guessedtype": "function"}, "isBoolean": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is a Boolean.", "guessedname": "isBoolean", "guessedtype": "function"}, "areNotSame": {"static": "", "params": [{"type": "Object", "name": "unexpected", "description": " The unexpected value."}, {"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not the same as another. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "areNotSame", "guessedtype": "function"}, "isNotNaN": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not the special NaN value.", "guessedname": "isNotNaN", "guessedtype": "function"}, "areNotEqual": {"static": "", "params": [{"type": "Object", "name": "unexpected", "description": " The unexpected value."}, {"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not equal to another. This uses the double equals sign\nso type cohersion may occur.", "guessedname": "areNotEqual", "guessedtype": "function"}, "areSame": {"static": "", "params": [{"type": "Object", "name": "expected", "description": " The expected value."}, {"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is the same as another. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "areSame", "guessedtype": "function"}, "_getCount": {"protected": "", "static": "", "description": "Returns the number of assertions that have been performed.", "guessedname": "_getCount", "guessedtype": "function"}, "isUndefined": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is undefined. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "isUndefined", "guessedtype": "function"}, "isArray": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is an array.", "guessedname": "isArray", "guessedtype": "function"}, "Y.assert": {"static": "", "params": [{"type": "Boolean", "name": "condition", "description": " The condition to test."}, {"type": "String", "name": "message", "description": " The message to display if the assertion fails."}], "description": "Asserts that a given condition is true. If not, then a Y.Assert.Error object is thrown\nand the test fails.", "guessedname": "assert", "guessedtype": "function"}, "isTypeOf": {"static": "", "params": [{"type": "String", "name": "expectedType", "description": " The expected type of the variable."}, {"type": "Object", "name": "actualValue", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is of a particular type.", "guessedname": "isTypeOf", "guessedtype": "function"}, "_formatMessage": {"return": {"type": "String", "description": "The final error message, containing either or both."}, "description": "Formats a message so that it can contain the original assertion message\nin addition to the custom message.", "protected": "", "static": "", "guessedname": "_formatMessage", "guessedtype": "function", "params": [{"type": "String", "name": "customMessage", "description": " The message passed in by the developer."}, {"type": "String", "name": "defaultMessage", "description": " The message created by the error by default."}]}, "_increment": {"protected": "", "static": "", "description": "Increments the number of assertions that have been performed.", "guessedname": "_increment", "guessedtype": "function"}, "areEqual": {"static": "", "params": [{"type": "Object", "name": "expected", "description": " The expected value."}, {"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is equal to another. This uses the double equals sign\nso type cohersion may occur.", "guessedname": "areEqual", "guessedtype": "function"}, "isNumber": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is a number.", "guessedname": "isNumber", "guessedtype": "function"}, "isObject": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is an object.", "guessedname": "isObject", "guessedtype": "function"}, "isString": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is a string.", "guessedname": "isString", "guessedtype": "function"}, "isNotUndefined": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not undefined. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "isNotUndefined", "guessedtype": "function"}, "isNull": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is null. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "isNull", "guessedtype": "function"}, "_reset": {"protected": "", "static": "", "description": "Resets the number of assertions that have been performed to 0.", "guessedname": "_reset", "guessedtype": "function"}, "isInstanceOf": {"static": "", "params": [{"type": "Function", "name": "expected", "description": " The function that the object should be an instance of."}, {"type": "Object", "name": "actual", "description": " The object to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is an instance of a particular object. This may return\nincorrect results when comparing objects from one frame to constructors in\nanother frame. For best results, don't use in a cross-frame manner.", "guessedname": "isInstanceOf", "guessedtype": "function"}, "Y.fail": {"static": "", "params": [{"type": "String", "name": "message", "description": " (Optional) The message to display with the failure."}], "description": "Forces an assertion error to occur. Shortcut for Y.Assert.fail().", "guessedname": "fail", "guessedtype": "property"}}, "static": "", "file": "Assert.js", "guessedtype": "property", "shortname": "Assert", "properties": {"_asserts": {"guessedname": "_asserts", "type": "int", "description": "The number of assertions performed.", "private": "", "guessedtype": "property"}}, "description": "The Assert object provides functions to test JavaScript values against\nknown and expected results. Whenever a comparison (assertion) fails,\nan error is thrown."}, "Array": {"name": "Array", "namespace": "", "module": "yui", "methods": {"hash": {"return": {"type": "object", "description": "the hash."}, "description": "Returns an object using the first array as keys, and\nthe second as values.  If the second array is not\nprovided the value is set to true for each.", "static": "", "guessedname": "hash", "guessedtype": "function", "params": [{"type": "Array", "name": "k", "description": " keyset."}, {"type": "Array", "name": "v", "description": " optional valueset."}]}, "indexOf": {"return": {"type": "int", "description": "the index of the item that contains the value or -1."}, "description": "Returns the index of the first item in the array\nthat contains the specified value, -1 if the\nvalue isn't found.", "static": "", "guessedname": "indexOf", "guessedtype": "property", "params": [{"type": "Array", "name": "a", "description": " the array to search."}, {"type": "any", "name": "val", "description": " the value to search for."}]}, "some": {"return": {"type": "boolean", "description": "true if the function returns true on\nany of the items in the array."}, "description": "Executes the supplied function on each item in the array.\nReturning true from the processing function will stop the\nprocessing of the remaining items.", "static": "", "guessedname": "some", "guessedtype": "property", "params": [{"type": "Array", "name": "a", "description": " the array to iterate."}, {"type": "Function", "name": "f", "description": " the function to execute on each item. The function\nreceives three arguments: the value, the index, the full array."}, {"type": "object", "name": "o", "description": " Optional context object."}]}, "()": {"return": {"type": "Array", "description": "the resulting array."}, "description": "Y.Array(o) returns an array:\n- Arrays are return unmodified unless the start position is specified.\n- \"Array-like\" collections (@see Array.test) are converted to arrays\n- For everything else, a new array is created with the input as the sole\nitem.\n- The start position is used if the input is or is like an array to return\na subset of the collection.", "static": "", "guessedname": "YArray", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " the item to arrayify."}, {"type": "int", "name": "startIdx", "description": " if an array or array-like, this is the start index."}, {"type": "boolean", "name": "arraylike", "description": " if true, it forces the array-like fork.  This\ncan be used to avoid multiple Array.test calls."}], "todo": "this will not automatically convert elements that are also\ncollections such as forms and selects.  Passing true as the third\nparam will force a conversion."}, "each": {"return": {"type": "YUI", "description": "the YUI instance."}, "description": "Executes the supplied function on each item in the array.", "static": "", "guessedname": "each", "guessedtype": "property", "params": [{"type": "Array", "name": "a", "description": " the array to iterate."}, {"type": "Function", "name": "f", "description": " the function to execute on each item.  The\nfunction receives three arguments: the value, the index, the full array."}, {"type": "object", "name": "o", "description": " Optional context object."}]}, "test": {"return": {"type": "int", "description": "a number indicating the results:\n0: Not an array or an array-like collection\n1: A real array.\n2: array-like collection."}, "description": "Evaluates the input to determine if it is an array, array-like, or\nsomething else.  This is used to handle the arguments collection\navailable within functions, and HTMLElement collections", "static": "", "guessedname": "test", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " the object to test."}], "todo": "current implementation (intenionally) will not implicitly\nhandle html elements that are array-like (forms, selects, etc)."}, "numericSort": {"static": "", "params": [{"type": "number", "name": "a", "description": " a number."}, {"type": "number", "name": "b", "description": " a number."}], "description": "Numeric sort convenience function.\nY.ArrayAssert.itemsAreEqual([1,2,3], [3,1,2].sort(Y.Array.numericSort));", "guessedname": "numericSort", "guessedtype": "function"}}, "file": "yui-array.js", "shortname": "Array", "description": "Adds the following array utilities to the YUI instance.  Additional\narray helpers can be found in the collection component."}, "Assert.UnexpectedValue": {"name": "Assert.UnexpectedValue", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}, {"type": "Object", "name": "unexpected", "description": " The unexpected value."}], "description": "UnexpectedValue is subclass of Error that is thrown whenever\na value was unexpected in its scope. This typically means that a test\nwas performed to determine that a value was *not* equal to a certain\nvalue."}], "namespace": "Assert", "module": "test", "guessedname": "UnexpectedValue", "methods": {"getMessage": {"return": {"type": "String", "description": "A string describing the error."}, "description": "Returns a fully formatted error for an assertion failure. The message\ncontains information about the unexpected value that was encountered.", "guessedname": "getMessage", "guessedtype": "function"}}, "extends": "Assert.Error", "superclass": "Assert.Error", "file": "Assert.js", "guessedtype": "function", "shortname": "UnexpectedValue", "properties": {"unexpected": {"type": "Object", "description": "The unexpected value.", "guessedname": "unexpected", "guessedtype": "property"}, "name": {"type": "String", "description": "The name of the error that occurred.", "guessedname": "name", "guessedtype": "property"}}, "description": "UnexpectedValue is subclass of Error that is thrown whenever\na value was unexpected in its scope. This typically means that a test\nwas performed to determine that a value was *not* equal to a certain\nvalue."}, "config": {"name": "config", "namespace": "", "module": "yui", "static": "", "file": "yui.js", "shortname": "config", "properties": {"purgethreshold": {"default": "20", "type": "int", "description": "The number of dynamic nodes to insert by default before\nautomatically removing them.  This applies to script nodes\nbecause remove the node will not make the evaluated script\nunavailable.  Dynamic CSS is not auto purged, because removing\na linked style sheet will also remove the style definitions."}, "cssAttributes": {"type": "string", "description": "Object literal containing attributes to add to dynamically loaded link\nnodes."}, "force": {"type": "string[]", "description": "A list of modules that should always be loaded when required, even if already\npresent on the page."}, "locale": {"deprecated": "use config.lang instead.", "type": "string", "description": "The default locale"}, "win": {"default": "the window hosting YUI", "type": "Window", "description": "The window/frame that this instance should operate in."}, "logExclude": {"type": "object", "description": "A hash of log sources that should be not be logged.  If specified,\nall sources are logged if not on this list."}, "onCSS": {"type": "function", "description": "Callback for the 'CSSComplete' event.  When dynamically loading YUI\ncomponents with CSS, this property fires when the CSS is finished\nloading but script loading is still ongoing.  This provides an\nopportunity to enhance the presentation of a loading page a little\nbit before the entire loading process is done."}, "filters": {"description": "Hash of per-component filter specification.  If specified for a given\ncomponent, this overrides the filter config.\nFor dynamic loading."}, "skin": {"description": "The 'skin' config let's you configure application level skin\ncustomizations.  It contains the following attributes which\ncan be specified to override the defaults:\n// The default skin, which is automatically applied if not\n// overriden by a component-specific skin definition.\n// Change this in to apply a different skin globally\ndefaultSkin: 'sam',\n// This is combined with the loader base property to get\n// the default root directory for a skin.\nbase: 'assets/skins/',\n// Any component-specific overrides can be specified here,\n// making it possible to load different skins for different\n// components.  It is possible to load more than one skin\n// for a given component as well.\noverrides: {\nslider: ['capsule', 'round']\n}\nFor dynamic loading."}, "pollInterval": {"default": "20", "type": "int", "description": "The default interval when polling in milliseconds."}, "ignore": {"type": "string[]", "description": "A list of modules that should never be dynamically loaded"}, "useHistoryHTML5": {"since": "3.2.0", "type": "boolean", "description": "<p>\nIf <code>true</code>, the <code>Y.History</code> alias will always point to\n<code>Y.HistoryHTML5</code> when the history-html5 module is loaded, even if\nthe current browser doesn't support HTML5 history.\n</p>\n<p>\nIf <code>false</code>, the <code>Y.History</code> alias will always point to\n<code>Y.HistoryHash</code> when the history-hash module is loaded, even if\nthe current browser supports HTML5 history.\n</p>\n<p>\nIf neither <code>true</code> nor <code>false</code>, the\n<code>Y.History</code> alias will point to the best available history adapter\nthat the browser supports. This is the default behavior.\n</p>"}, "dateFormat": {"deprecated": "use configuration in DataType.Date.format() instead.", "type": "string", "description": "The default date format"}, "logInclude": {"type": "object", "description": "A hash of log sources that should be logged.  If specified, only\nlog messages from these sources will be logged."}, "yui2": {"default": "2.8.1", "since": "3.1.0", "type": "string", "description": "The default YUI 2 version to build yui2 module urls.  This is for\nintrinsic YUI 2 support via the 2in3 project.  Also @see the '2in3'\nconfig for pulling different revisions of the wrapped YUI 2\nmodules."}, "windowResizeDelay": {"default": "40", "type": "int", "description": "The default interval when polling in milliseconds."}, "combine": {"default": "true if 'base' is not supplied, false if it is.", "type": "boolean", "description": "Use the YUI combo service to reduce the number of http connections\nrequired to load your dependencies.  Turning this off will\ndisable combo handling for YUI and all module groups configured\nwith a combo service.\nFor dynamic loading."}, "use_rls": {"since": "3.2.0", "description": "Configure the instance to use a remote loader service instead of\nthe client loader."}, "rls_base": {"since": "3.2.0", "description": "The base path to the remote loader service"}, "loaderPath": {"default": "loader/loader-min.js", "type": "string", "description": "The loader 'path' attribute to the loader itself.  This is combined\nwith the 'base' attribute to dynamically load the loader component\nwhen boostrapping with the get utility alone."}, "comboBase": {"type": "string", "description": "The YUI combo service base dir. Ex: http://yui.yahooapis.com/combo?\nFor dynamic loading."}, "core": {"type": "string[]", "description": "A list of modules that defines the YUI core (overrides the default)."}, "rls_tmpl": {"since": "3.2.0", "description": "The template to use for building the querystring portion\nof the remote loader service url.  The default is determined\nby the rls config -- each property that has a value will be\nrepresented.\nex: m={m}&v={v}&env={env}&lang={lang}&filt={filt}&tests={tests}"}, "insertBefore": {"type": "string", "description": "Node or id for a node that should be used as the insertion point for new\nnodes.  For dynamic loading."}, "useBrowserConsole": {"default": "true", "type": "boolean", "description": "Log to the browser console if debug is on and the browser has a\nsupported console."}, "jsAttributes": {"type": "string", "description": "Object literal containing attributes to add to dynamically loaded script\nnodes."}, "base": {"type": "string", "description": "Base directory for dynamic loading"}, "2in3": {"default": "1", "since": "3.1.0", "type": "string", "description": "The 2in3 project is a deployment of the various versions of YUI 2\ndeployed as first-class YUI 3 modules.  Eventually, the wrapper\nfor the modules will change (but the underlying YUI 2 code will\nbe the same), and you can select a particular version of\nthe wrapper modules via this config."}, "injected": {"default": "false", "type": "boolean", "description": "Set to true if the yui seed file was dynamically loaded in\norder to bootstrap components relying on the window load event\nand the 'domready' custom event."}, "errorFn": {"since": "3.2.0", "type": "Function", "description": "A callback to execute when Y.error is called.  It receives the\nerror message and an javascript error object if Y.error was\nexecuted because a javascript error was caught.  The function\nis executed in the YUI instance context."}, "gallery": {"since": "3.1.0", "type": "string", "description": "The default gallery version to build gallery module urls"}, "rls": {"since": "3.2.0", "description": "The parameter defaults for the remote loader service.\nRequires the rls submodule.  The properties that are\nsupported:\n<pre>\nm: comma separated list of module requirements.  This\nmust be the param name even for custom implemetations.\nv: the version of YUI to load.  Defaults to the version\nof YUI that is being used.\ngv: the version of the gallery to load (@see the gallery config)\nenv: comma separated list of modules already on the page.\nthis must be the param name even for custom implemetations.\nlang: the languages supported on the page (@see the lang config)\n'2in3v':  the version of the 2in3 wrapper to use (@see the 2in3 config).\n'2v': the version of yui2 to use in the yui 2in3 wrappers\n(@see the yui2 config)\nfilt: a filter def to apply to the urls (@see the filter config).\nfilts: a list of custom filters to apply per module\n(@see the filters config).\ntests: this is a map of conditional module test function id keys\nwith the values of 1 if the test passes, 0 if not.  This must be\nthe name of the querystring param in custom templates.\n</pre>"}, "lang": {"type": "string|string[]", "description": "A list of languages in order of preference. This list is matched against\nthe list of available languages in modules that the YUI instance uses to\ndetermine the best possible localization of language sensitive modules.\nLanguages are represented using BCP 47 language tags, such as \"en-GB\" for\nEnglish as used in the United Kingdom, or \"zh-Hans-CN\" for simplified\nChinese as used in China. The list can be provided as a comma-separated\nlist or as an array."}, "doc": {"default": "the document hosting YUI", "type": "Document", "description": "The document associated with the 'win' configuration."}, "bootstrap": {"default": "true", "type": "boolean", "description": "Allows the YUI seed file to fetch the loader component and library\nmetadata to dynamically load additional dependencies."}, "modules": {"see": "modules for the details about the modules part of the\ngroup definition.\n<code>\n&nbsp; groups: {\n&nbsp;     yui2: {\n&nbsp;         // specify whether or not this group has a combo service\n&nbsp;         combine: true,\n&nbsp;\n&nbsp;         // the base path for non-combo paths\n&nbsp;         base: 'http://yui.yahooapis.com/2.8.0r4/build/',\n&nbsp;\n&nbsp;         // the path to the combo service\n&nbsp;         comboBase: 'http://yui.yahooapis.com/combo?',\n&nbsp;\n&nbsp;         // a fragment to prepend to the path attribute when\n&nbsp;         // when building combo urls\n&nbsp;         root: '2.8.0r4/build/',\n&nbsp;\n&nbsp;         // the module definitions\n&nbsp;         modules:  {\n&nbsp;             yui2_yde: {\n&nbsp;                 path: \"yahoo-dom-event/yahoo-dom-event.js\"\n&nbsp;             },\n&nbsp;             yui2_anim: {\n&nbsp;                 path: \"animation/animation.js\",\n&nbsp;                 requires: ['yui2_yde']\n&nbsp;             }\n&nbsp;         }\n&nbsp;     }\n&nbsp; }\n</code>", "type": "object", "description": "A hash of module definitions to add to the list of YUI components.\nThese components can then be dynamically loaded side by side with\nYUI via the use() method. This is a hash, the key is the module\nname, and the value is an object literal specifying the metdata\nfor the module.  * See Loader.addModule for the supported module\nmetadata fields.  Also @see groups, which provides a way to\nconfigure the base and combo spec for a set of modules.\n<code>\nmodules: {\n&nbsp; mymod1: {\n&nbsp;   requires: ['node'],\n&nbsp;   fullpath: 'http://myserver.mydomain.com/mymod1/mymod1.js'\n&nbsp; },\n&nbsp; mymod2: {\n&nbsp;   requires: ['mymod1'],\n&nbsp;   fullpath: 'http://myserver.mydomain.com/mymod2/mymod2.js'\n&nbsp; }\n}\n</code>"}, "fetchCSS": {"default": "true", "type": "boolean|string", "description": "Specifies whether or not YUI().use(...) will attempt to load CSS\nresources at all.  Any truthy value will cause CSS dependencies\nto load when fetching script.  The special value 'force' will\ncause CSS dependencies to be loaded even if no script is needed."}, "filter": {"type": "string|object", "description": "A filter to apply to result urls.  This filter will modify the default\npath for all modules.  The default path for the YUI library is the\nminified version of the files (e.g., event-min.js).  The filter property\ncan be a predefined filter or a custom filter.  The valid predefined\nfilters are:\n<dl>\n<dt>DEBUG</dt>\n<dd>Selects the debug versions of the library (e.g., event-debug.js).\nThis option will automatically include the Logger widget</dd>\n<dt>RAW</dt>\n<dd>Selects the non-minified version of the library (e.g., event.js).</dd>\n</dl>\nYou can also define a custom filter, which must be an object literal\ncontaining a search expression and a replace string:\n<pre>\nmyFilter: &#123;\n'searchExp': \"-min\\\\.js\",\n'replaceStr': \"-debug.js\"\n&#125;\n</pre>\nFor dynamic loading."}, "timeout": {"type": "int", "description": "Number of milliseconds before a timeout occurs when dynamically\nloading nodes. If not set, there is no timeout."}, "logFn": {"since": "3.1.0", "type": "Function", "description": "Alternative console log function for use in environments without\na supported native console.  The function is executed in the\nYUI instance context."}, "root": {"type": "string", "description": "The root path to prepend to module path for the combo service.\nEx: 3.0.0b1/build/\nFor dynamic loading."}, "throwFail": {"default": "true", "type": "boolean", "description": "If throwFail is set, Y.error will generate or re-throw a JS Error.\nOtherwise the failure is logged."}}, "description": "The config object contains all of the configuration options for\nthe YUI instance.  This object is supplied by the implementer\nwhen instantiating a YUI instance.  Some properties have default\nvalues if they are not supplied by the implementer.  This should\nnot be updated directly because some values are cached.  Use\napplyConfig() to update the config object on a YUI instance that\nhas already been configured."}, "Resize": {"name": "Resize", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for Resize, providing:\n<ul>\n<li>Basic Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Applies drag handles to an element to make it resizable</li>\n<li>Here is the list of valid resize handles:\n<code>[ 't', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl' ]</code>. You can\nread this list as top, top-right, right, bottom-right, bottom,\nbottom-left, left, top-left.</li>\n<li>The drag handles are inserted into the element and positioned\nabsolute. Some elements, such as a textarea or image, don't support\nchildren. To overcome that, set wrap:true in your config and the\nelement willbe wrapped for you automatically.</li>\n</ul>\nQuick Example:\n<pre><code>var instance = new Y.Resize({\nnode: '#resize1',\npreserveRatio: true,\nwrap: true,\nmaxHeight: 170,\nmaxWidth: 400,\nhandles: 't, tr, r, br, b, bl, l, tl'\n});\n</code></pre>\nCheck the list of <a href=\"Resize.html#configattributes\">Configuration Attributes</a> available for\nResize."}], "namespace": "", "module": "resize", "events": {"resizingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "resizingChange", "description": "Fires when the value for the configuration attribute 'resizing' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "wrapTypesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "wrapTypesChange", "description": "Fires when the value for the configuration attribute 'wrapTypes' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "constrainChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "constrainChange", "description": "Fires when the value for the configuration attribute 'constrain' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tickYChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tickYChange", "description": "Fires when the value for the configuration attribute 'tickY' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "handlesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "handlesChange", "description": "Fires when the value for the configuration attribute 'handles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resize:start": {"preventable": "_defResizeStartFn", "bubbles": "Resize", "params": [{"type": "Event.Facade", "name": "event", "description": " The resize start event."}], "description": "Handles the resize start event. Fired when a handle starts to be\ndragged.", "type": "{Event.Custom}"}, "tickXChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tickXChange", "description": "Fires when the value for the configuration attribute 'tickX' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resize:mouseUp": {"preventable": "_defMouseUpFn", "bubbles": "Resize", "params": [{"type": "Event.Facade", "name": "event", "description": " The resize mouseUp event."}], "description": "Handles the resize mouseUp event. Fired when a mouseUp event happens on a\nhandle.", "type": "{Event.Custom}"}, "activeHandleNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeHandleNodeChange", "description": "Fires when the value for the configuration attribute 'activeHandleNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "autoHideChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "autoHideChange", "description": "Fires when the value for the configuration attribute 'autoHide' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxHeightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxHeightChange", "description": "Fires when the value for the configuration attribute 'maxHeight' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resize:align": {"preventable": "_defResizeAlignFn", "bubbles": "Resize", "params": [{"type": "Event.Facade", "name": "event", "description": " The resize align event."}], "description": "Handles the resize align event.", "type": "{Event.Custom}"}, "defMinHeightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defMinHeightChange", "description": "Fires when the value for the configuration attribute 'defMinHeight' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "defMinWidthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defMinWidthChange", "description": "Fires when the value for the configuration attribute 'defMinWidth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "minWidthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minWidthChange", "description": "Fires when the value for the configuration attribute 'minWidth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resize:end": {"preventable": "_defResizeEndFn", "bubbles": "Resize", "params": [{"type": "Event.Facade", "name": "event", "description": " The resize end event."}], "description": "Handles the resize end event. Fired when a handle stop to be\ndragged.", "type": "{Event.Custom}"}, "nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "activeHandleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeHandleChange", "description": "Fires when the value for the configuration attribute 'activeHandle' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "minHeightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minHeightChange", "description": "Fires when the value for the configuration attribute 'minHeight' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "preserveRatioChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "preserveRatioChange", "description": "Fires when the value for the configuration attribute 'preserveRatio' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "wrapperChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "wrapperChange", "description": "Fires when the value for the configuration attribute 'wrapper' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resize:resize": {"preventable": "_defResizeFn", "bubbles": "Resize", "params": [{"type": "Event.Facade", "name": "event", "description": " The resize event."}], "description": "Handles the resize event. Fired on each pixel when the handle is\nbeing dragged.", "type": "{Event.Custom}"}, "wrapChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "wrapChange", "description": "Fires when the value for the configuration attribute 'wrap' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxWidthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxWidthChange", "description": "Fires when the value for the configuration attribute 'maxWidth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "proxyNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "proxyNodeChange", "description": "Fires when the value for the configuration attribute 'proxyNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"activeHandle": {"description": "Stores the active handle during the resize.", "default": "null", "private": "", "guessedname": "activeHandle", "guessedtype": "property", "type": "String"}, "node": {"type": "Node", "description": "The selector or element to resize. Required.", "guessedname": "node", "guessedtype": "property"}, "defMinWidth": {"default": "15", "type": "Number", "description": "The default minimum width of the element. Only used when\nResizeConstrained is not plugged.", "guessedname": "defMinWidth", "guessedtype": "property"}, "maxWidth": {"default": "Infinity", "type": "Number", "description": "The maximum width of the element", "guessedname": "maxWidth", "guessedtype": "property"}, "wrapTypes": {"description": "Elements that requires a wrapper by default. Normally are elements\nwhich cannot have children elements.", "default": "/canvas|textarea|input|select|button|img/i", "readonly": "", "guessedname": "wrapTypes", "guessedtype": "property", "type": "Regex"}, "minWidth": {"default": "15", "type": "Number", "description": "The minimum width of the element", "guessedname": "minWidth", "guessedtype": "property"}, "tickY": {"default": "false", "type": "Number | false", "description": "The number of y ticks to span the resize to.", "guessedname": "tickY", "guessedtype": "property"}, "maxHeight": {"default": "Infinity", "type": "Number", "description": "The maximum height of the element", "guessedname": "maxHeight", "guessedtype": "property"}, "tickX": {"default": "false", "type": "Number | false", "description": "The number of x ticks to span the resize to.", "guessedname": "tickX", "guessedtype": "property"}, "minHeight": {"default": "15", "type": "Number", "description": "The minimum height of the element", "guessedname": "minHeight", "guessedtype": "property"}, "wrapper": {"description": "Element to wrap the <code>wrapTypes</code>. This element will house\nthe handles elements.", "writeonce": "", "default": "div", "guessedname": "wrapper", "guessedtype": "property", "type": "String | Node"}, "activeHandleNode": {"description": "Stores the active handle element during the resize.", "default": "null", "private": "", "guessedname": "activeHandleNode", "guessedtype": "property", "type": "Node"}, "handles": {"default": "all", "type": "Array | String", "description": "The handles to use (any combination of): 't', 'b', 'r', 'l', 'bl',\n'br', 'tl', 'tr'. Can use a shortcut of All.", "guessedname": "handles", "guessedtype": "property"}, "preserveRatio": {"default": "false", "type": "boolean", "description": "Maintain the element's ratio when resizing.", "guessedname": "preserveRatio", "guessedtype": "property"}, "autoHide": {"default": "false", "type": "boolean", "description": "False to ensure that the resize handles are always visible, true to\ndisplay them only when the user mouses over the resizable borders.", "guessedname": "autoHide", "guessedtype": "property"}, "wrap": {"default": "false", "type": "boolean", "description": "True to wrap an element with a div if needed (required for textareas\nand images, defaults to false) in favor of the handles config option.\nThe wrapper element type (default div) could be over-riden passing the\n<code>wrapper</code> attribute.", "guessedname": "wrap", "guessedtype": "property"}, "resizing": {"default": "false", "type": "boolean", "description": "True when the element is being Resized.", "guessedname": "resizing", "guessedtype": "property"}, "constrain": {"type": "{String/Object/Node}", "description": "Will attempt to constrain the resize node to the boundaries. Arguments:<br>\n'view': Contrain to Viewport<br>\n'#selector_string': Constrain to this node<br>\n'{Region Object}': An Object Literal containing a valid region (top, right, bottom, left) of page positions", "guessedname": "constrain", "guessedtype": "property"}, "proxyNode": {"default": "Generated using an internal HTML markup", "type": "String | Node", "description": "The Resize proxy element.", "guessedname": "proxyNode", "guessedtype": "property"}, "defMinHeight": {"default": "15", "type": "Number", "description": "The default minimum height of the element. Only used when\nResizeConstrained is not plugged.", "guessedname": "defMinHeight", "guessedtype": "property"}}, "methods": {"_updateConstrainBorderInfo": {"private": "", "description": "Update <code>instance.constrainBorderInfo</code> values (bottom,\nleft, top, right).", "guessedname": "_updateConstrainBorderInfo", "guessedtype": "function"}, "_checkRatio": {"protected": "", "description": "Update the current values on <a href=\"Resize.html#property_info\">info</a>\ncalculating the correct ratio for the other values.", "guessedname": "_checkRatio", "guessedtype": "function"}, "_checkRegion": {"protected": "", "return": {"type": "boolean", "description": ""}, "description": "Check whether the resizable node is inside the constrain region.", "guessedname": "_checkRegion", "guessedtype": "function"}, "_resizeAlign": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "description": "Logic method for _defResizeAlignFn. Allow AOP.", "guessedname": "_resizeAlign", "guessedtype": "function"}, "eachHandle": {"params": [{"type": "function", "name": "fn", "description": " Callback function to be executed for each handle."}], "description": "<p>Loop through each handle which is being used and executes a callback.</p>\n<p>Example:</p>\n<pre><code>instance.eachHandle(\nfunction(handleName, index) { ... }\n);</code></pre>", "guessedname": "eachHandle", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Resize instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "_onHandleMouseLeave": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Mouseout event handler for the handles.", "guessedname": "_onHandleMouseLeave", "guessedtype": "function"}, "_syncProxyUI": {"protected": "", "description": "Sync the proxy UI with internal values from\n<a href=\"ResizeProxy.html#property_info\">info</a>.", "guessedname": "_syncProxyUI", "guessedtype": "function"}, "renderer": {"protected": "", "description": "Creates DOM (or manipulates DOM for progressive enhancement)\nThis method is invoked by initializer(). It's chained automatically for\nsubclasses if required.", "guessedname": "renderer", "guessedtype": "function"}, "_checkConstrain": {"protected": "", "params": [{"type": "String", "name": "axis", "description": " 'top' or 'left'"}, {"type": "String", "name": "axisConstrain", "description": " 'bottom' or 'right'"}, {"type": "String", "name": "offset", "description": " 'offsetHeight' or 'offsetWidth'"}], "description": "Helper method to update the current values on\n<a href=\"Resize.html#property_info\">info</a> to respect the\nconstrain node.", "guessedname": "_checkConstrain", "guessedtype": "function"}, "_handleResizeEvent": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " resize:resize event facade"}], "description": "Fires the resize:resize event.", "guessedname": "_handleResizeEvent", "guessedtype": "function"}, "_syncUI": {"protected": "", "description": "Sync the Resize UI with internal values from\n<a href=\"Resize.html#property_info\">info</a>.", "guessedname": "_syncUI", "guessedtype": "function"}, "_defResizeFn": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "description": "Default resize:resize handler", "guessedname": "_defResizeFn", "guessedtype": "function"}, "_getInfo": {"guessedname": "_getInfo", "params": [{"type": "Node", "name": "node", "description": ""}, {"type": "EventFacade", "name": "event", "description": ""}], "description": "<p>Generates metadata to the <a href=\"Resize.html#property_info\">info</a>\nand <a href=\"Resize.html#property_originalInfo\">originalInfo</a></p>\n<pre><code>bottom, actXY, left, top, offsetHeight, offsetWidth, right</code></pre>", "private": "", "guessedtype": "function"}, "_defResizeAlignFn": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "description": "Default resize:align handler", "guessedname": "_defResizeAlignFn", "guessedtype": "function"}, "_updateInfo": {"private": "", "description": "Update <a href=\"Resize.html#property_info\">info</a> values (bottom, actXY, left, top, offsetHeight, offsetWidth, right).", "guessedname": "_updateInfo", "guessedtype": "function"}, "_onHandleMouseEnter": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Mouseover event handler for the handles.", "guessedname": "_onHandleMouseEnter", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Descructor lifecycle implementation for the Resize class. Purges events attached\nto the node (and all child nodes) and removes the Resize handles.", "guessedname": "destructor", "guessedtype": "function"}, "_buildHandle": {"protected": "", "params": [{"type": "String", "name": "handle", "description": " Handle name ('t', 'tr', 'b', ...)."}], "description": "Creates the handle element based on the handle name and initialize the\nDragDrop on it.", "guessedname": "_buildHandle", "guessedtype": "function"}, "_renderProxy": {"protected": "", "description": "Render the <a href=\"ResizeProxy.html#config_proxyNode\">proxyNode</a> element and\nmake it sibling of the <a href=\"Resize.html#config_node\">node</a>.", "guessedname": "_renderProxy", "guessedtype": "function"}, "_handleResizeAlignEvent": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " resize:resize event facade"}], "description": "Fires the resize:align event.", "guessedname": "_handleResizeAlignEvent", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the Resize UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_checkHeight": {"protected": "", "description": "Update the current values on <a href=\"Resize.html#property_info\">info</a>\nto respect the maxHeight and minHeight.", "guessedname": "_checkHeight", "guessedtype": "function"}, "_createEvents": {"private": "", "description": "Create the custom events used on the Resize.", "guessedname": "_createEvents", "guessedtype": "function"}, "_resize": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "description": "Logic method for _defResizeFn. Allow AOP.", "guessedname": "_resize", "guessedtype": "function"}, "_handleMouseUpEvent": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " resize:mouseUp event facade"}], "description": "Fires the resize:mouseUp event.", "guessedname": "_handleMouseUpEvent", "guessedtype": "function"}, "_valueWrapper": {"readonly": "", "protected": "", "description": "Default value for the wrapper attribute", "guessedname": "_valueWrapper", "guessedtype": "function"}, "_getConstrainRegion": {"protected": "", "return": {"type": "Object Region", "description": ""}, "description": "Get the constrain region based on the <code>constrain</code>\nattribute.", "guessedname": "_getConstrainRegion", "guessedtype": "function"}, "_defResizeStartFn": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "description": "Default resize:start handler", "guessedname": "_defResizeStartFn", "guessedtype": "function"}, "_renderHandles": {"protected": "", "description": "Responsible for loop each handle element and append to the wrapper.", "guessedname": "_renderHandles", "guessedtype": "function"}, "_defMouseUpFn": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "description": "Default resize:mouseUp handler", "guessedname": "_defMouseUpFn", "guessedtype": "function"}, "_onWrapperMouseEnter": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Mouseenter event handler for the <a href=\"Resize.html#config_wrapper\">wrapper</a>.", "guessedname": "_onWrapperMouseEnter", "guessedtype": "function"}, "_setHideHandlesUI": {"protected": "", "params": [{"type": "boolean", "name": "val", "description": " True to hide the handles, false to show."}], "description": "Set the visibility of the handles.", "guessedname": "_setHideHandlesUI", "guessedtype": "function"}, "_updateChangeHandleInfo": {"private": "", "description": "Update <code>instance.changeHeightHandles,\ninstance.changeLeftHandles, instance.changeTopHandles,\ninstance.changeWidthHandles</code> information.", "guessedname": "_updateChangeHandleInfo", "guessedtype": "function"}, "_resizeStart": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "description": "Logic method for _defResizeStartFn. Allow AOP.", "guessedname": "_resizeStart", "guessedtype": "function"}, "_bindHandle": {"private": "", "description": "Bind the events related to the handles (_onHandleMouseEnter, _onHandleMouseLeave).", "guessedname": "_bindHandle", "guessedtype": "function"}, "_handleResizeEndEvent": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " resize:end event facade"}], "description": "Fires the resize:end event.", "guessedname": "_handleResizeEndEvent", "guessedtype": "function"}, "_setHandles": {"protected": "", "params": [{"type": "String", "name": "val", "description": ""}], "description": "Setter for the handles attribute", "guessedname": "_setHandles", "guessedtype": "function"}, "_checkWidth": {"protected": "", "description": "Update the current values on <a href=\"Resize.html#property_info\">info</a>\nto respect the maxWidth and minWidth.", "guessedname": "_checkWidth", "guessedtype": "function"}, "_setWrap": {"protected": "", "params": [{"type": "boolean", "name": "val", "description": ""}], "description": "Setter for the wrap attribute", "guessedname": "_setWrap", "guessedtype": "function"}, "_setOffset": {"protected": "", "params": [{"type": "Node", "name": "node", "description": " Node"}, {"type": "number", "name": "offsetWidth", "description": ""}, {"type": "number", "name": "offsetHeight", "description": ""}], "description": "Set offsetWidth and offsetHeight of the passed node.", "guessedname": "_setOffset", "guessedtype": "function"}, "_onWrapperMouseLeave": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Mouseleave event handler for the <a href=\"Resize.html#config_wrapper\">wrapper</a>.", "guessedname": "_onWrapperMouseLeave", "guessedtype": "function"}, "_defResizeEndFn": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "description": "Default resize:end handler", "guessedname": "_defResizeEndFn", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the Resize UI.", "guessedname": "syncUI", "guessedtype": "function"}, "_calcResize": {"protected": "", "description": "Basic resize calculations.", "guessedname": "_calcResize", "guessedtype": "function"}, "_checkSize": {"protected": "", "params": [{"type": "String", "name": "offset", "description": " 'offsetHeight' or 'offsetWidth'"}, {"type": "number", "name": "size", "description": " Size to restrict the offset"}], "description": "Helper method to update the current size value on\n<a href=\"Resize.html#property_info\">info</a> to respect the\nmin/max values and fix the top/left calculations.", "guessedname": "_checkSize", "guessedtype": "function"}, "_handleResizeStartEvent": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " resize:start event facade"}], "description": "Fires the resize:start event.", "guessedname": "_handleResizeStartEvent", "guessedtype": "function"}, "_resizeEnd": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "description": "Logic method for _defResizeEndFn. Allow AOP.", "guessedname": "_resizeEnd", "guessedtype": "function"}, "_setActiveHandlesUI": {"protected": "", "params": [{"type": "boolean", "name": "val", "description": " True to activate the handles, false to deactivate."}], "description": "Set the active state of the handles.", "guessedname": "_setActiveHandlesUI", "guessedtype": "function"}, "_copyStyles": {"protected": "", "params": [{"type": "Node", "name": "node", "description": " Node from."}, {"type": "Node", "name": "wrapper", "description": " Node to."}], "description": "Copy relevant styles of the <a href=\"Resize.html#config_node\">node</a>\nto the <a href=\"Resize.html#config_wrapper\">wrapper</a>.", "guessedname": "_copyStyles", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the Resize. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}, "_bindDD": {"private": "", "description": "Bind the handles DragDrop events to the Resize instance.", "guessedname": "_bindDD", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "resize-base.js", "shortname": "Resize", "properties": {"info": {"protected": "", "type": "Object", "description": "Stores the current values for the height, width, top and left. You are\nable to manipulate these values on resize in order to change the resize\nbehavior.", "guessedname": "info", "guessedtype": "property"}, "REGEX_CHANGE_LEFT": {"type": "{String}", "description": "Regex which matches with the handles that could change the left of\nthe resizable element.", "guessedname": "REGEX_CHANGE_LEFT", "guessedtype": "property"}, "ALL_HANDLES": {"type": "{String}", "description": "Array containing all possible resizable handles.", "guessedname": "ALL_HANDLES", "guessedtype": "property"}, "REGEX_CHANGE_TOP": {"type": "{String}", "description": "Regex which matches with the handles that could change the top of\nthe resizable element.", "guessedname": "REGEX_CHANGE_TOP", "guessedtype": "property"}, "changeLeftHandles": {"default": "false", "type": "boolean", "description": "Whether the handle being dragged can change the left.", "guessedname": "changeLeftHandles", "guessedtype": "property"}, "changeTopHandles": {"default": "false", "type": "boolean", "description": "Whether the handle being dragged can change the top.", "guessedname": "changeTopHandles", "guessedtype": "property"}, "delegate": {"default": "null", "type": "Object", "description": "Store DD.Delegate reference for the respective Resize instance.", "guessedname": "delegate", "guessedtype": "property"}, "lastInfo": {"protected": "", "type": "Object", "description": "Stores the last values for the height, width, top and left.", "guessedname": "lastInfo", "guessedtype": "property"}, "HANDLE_TEMPLATE": {"type": "{String}", "description": "Template used to create each resize handle.", "guessedname": "HANDLE_TEMPLATE", "guessedtype": "property"}, "PROXY_TEMPLATE": {"type": "{String}", "description": "Template used to create the resize proxy.", "guessedname": "PROXY_TEMPLATE", "guessedtype": "property"}, "WRAP_TEMPLATE": {"type": "{String}", "description": "Template used to create the resize wrapper node when needed.", "guessedname": "WRAP_TEMPLATE", "guessedtype": "property"}, "constrainBorderInfo": {"default": "{}", "type": "Object", "description": "Cache the border widths of the contrain node if constrain\noption is being used.", "guessedname": "constrainBorderInfo", "guessedtype": "property"}, "REGEX_CHANGE_HEIGHT": {"type": "{String}", "description": "Regex which matches with the handles that could change the height of\nthe resizable element.", "guessedname": "REGEX_CHANGE_HEIGHT", "guessedtype": "property"}, "REGEX_CHANGE_WIDTH": {"type": "{String}", "description": "Regex which matches with the handles that could change the width of\nthe resizable element.", "guessedname": "REGEX_CHANGE_WIDTH", "guessedtype": "property"}, "Resize.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "changeWidthHandles": {"default": "false", "type": "boolean", "description": "Whether the handle being dragged can change the width.", "guessedname": "changeWidthHandles", "guessedtype": "property"}, "originalInfo": {"protected": "", "type": "Object", "description": "Stores the original values for the height, width, top and left, stored\non resize start.", "guessedname": "originalInfo", "guessedtype": "property"}, "Resize.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Resize.", "guessedname": "ATTRS", "guessedtype": "property"}, "changeHeightHandles": {"default": "false", "type": "boolean", "description": "Whether the handle being dragged can change the height.", "guessedname": "changeHeightHandles", "guessedtype": "property"}}, "description": "A base class for Resize, providing:\n<ul>\n<li>Basic Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Applies drag handles to an element to make it resizable</li>\n<li>Here is the list of valid resize handles:\n<code>[ 't', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl' ]</code>. You can\nread this list as top, top-right, right, bottom-right, bottom,\nbottom-left, left, top-left.</li>\n<li>The drag handles are inserted into the element and positioned\nabsolute. Some elements, such as a textarea or image, don't support\nchildren. To overcome that, set wrap:true in your config and the\nelement willbe wrapped for you automatically.</li>\n</ul>\nQuick Example:\n<pre><code>var instance = new Y.Resize({\nnode: '#resize1',\npreserveRatio: true,\nwrap: true,\nmaxHeight: 170,\nmaxWidth: 400,\nhandles: 't, tr, r, br, b, bl, l, tl'\n});\n</code></pre>\nCheck the list of <a href=\"Resize.html#configattributes\">Configuration Attributes</a> available for\nResize."}, "AutoCompleteFilters": {"name": "AutoCompleteFilters", "description": "Provides pre-built result matching filters for AutoComplete.", "namespace": "", "module": "autocomplete", "guessedname": "AccentFold", "static": "", "file": "autocomplete-filters.js", "guessedtype": "property", "shortname": "AutoCompleteFilters", "methods": {"phraseMatchFold": {"return": {"type": "Array", "description": "Filtered results"}, "description": "Accent folding version of <code>phraseMatch()</code>.", "static": "", "guessedname": "phraseMatchFold", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to filter"}]}, "phraseMatch": {"return": {"type": "Array", "description": "Filtered results"}, "description": "Returns an array of results that contain the complete query as a phrase.\nCase-insensitive.", "static": "", "guessedname": "phraseMatch", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to filter"}]}, "charMatchFold": {"return": {"type": "Array", "description": "Filtered results"}, "description": "Accent folding version of <code>charMatch()</code>.", "static": "", "guessedname": "charMatchFold", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to filter"}]}, "charMatchCase": {"return": {"type": "Array", "description": "Filtered results"}, "description": "Case-sensitive version of <code>charMatch()</code>.", "static": "", "guessedname": "charMatchCase", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to filter"}]}, "startsWith": {"return": {"type": "Array", "description": "Filtered results"}, "description": "Returns an array of results that start with the complete query as a\nphrase. Case-insensitive.", "static": "", "guessedname": "startsWith", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to filter"}]}, "wordMatchCase": {"return": {"type": "Array", "description": "Filtered results"}, "description": "Case-sensitive version of <code>wordMatch()</code>.", "static": "", "guessedname": "wordMatchCase", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to filter"}]}, "startsWithFold": {"return": {"type": "Array", "description": "Filtered results"}, "description": "Accent folding version of <code>startsWithFold()</code>.", "static": "", "guessedname": "startsWithFold", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to filter"}]}, "charMatch": {"return": {"type": "Array", "description": "Filtered results"}, "description": "Returns an array of results that contain all of the characters in the\nquery, in any order (not necessarily consecutive). Case-insensitive.", "static": "", "guessedname": "charMatch", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to filter"}]}, "wordMatch": {"return": {"type": "Array", "description": "Filtered results"}, "description": "Returns an array of results that contain all of the words in the query,\nin any order. Non-word characters like whitespace and certain punctuation\nare ignored. Case-insensitive.", "static": "", "guessedname": "wordMatch", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to filter"}]}, "startsWithCase": {"return": {"type": "Array", "description": "Filtered results"}, "description": "Case-sensitive version of <code>startsWith()</code>.", "static": "", "guessedname": "startsWithCase", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to filter"}]}, "phraseMatchCase": {"return": {"type": "Array", "description": "Filtered results"}, "description": "Case-sensitive version of <code>phraseMatch()</code>.", "static": "", "guessedname": "phraseMatchCase", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to filter"}]}, "wordMatchFold": {"return": {"type": "Array", "description": "Filtered results"}, "description": "Accent folding version of <code>wordMatchFold()</code>.", "static": "", "guessedname": "wordMatchFold", "guessedtype": "function", "params": [{"type": "String", "name": "query", "description": " Query to match"}, {"type": "Array", "name": "results", "description": " Results to filter"}]}}}, "Assert.ShouldFail": {"name": "Assert.ShouldFail", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}], "description": "ShouldFail is subclass of Error that is thrown whenever\na test was expected to fail but did not."}], "namespace": "Assert", "module": "test", "guessedname": "ShouldFail", "extends": "Assert.Error", "superclass": "Assert.Error", "file": "Assert.js", "guessedtype": "function", "shortname": "ShouldFail", "properties": {"name": {"type": "String", "description": "The name of the error that occurred.", "guessedname": "name", "guessedtype": "property"}}, "description": "ShouldFail is subclass of Error that is thrown whenever\na test was expected to fail but did not."}, "DataSchema.Text": {"name": "DataSchema.Text", "namespace": "", "module": "dataschema", "guessedname": "LANG", "methods": {"apply": {"return": {"type": "Object", "description": "Schema-parsed data."}, "description": "Applies a given schema to given delimited text data.", "static": "", "guessedname": "apply", "guessedtype": "function", "params": [{"type": "Object", "name": "schema", "description": "  Schema to apply."}, {"type": "Object", "name": "data", "description": "  Text data."}]}, "_parseResults": {"return": {"type": "Object", "description": "Parsed data object."}, "description": "Schema-parsed list of results from full data", "protected": "", "static": "", "guessedname": "_parseResults", "guessedtype": "function", "params": [{"type": "Array", "name": "schema", "description": "  Schema to parse against."}, {"type": "String", "name": "text_in", "description": "  Text to parse."}, {"type": "Object", "name": "data_out", "description": "  In-progress parsed data to update."}]}}, "static": "", "superclass": "DataSchema.Base", "file": "dataschema-text.js", "guessedtype": "property", "extends": "DataSchema.Base", "shortname": "DataSchema.Text", "description": "Text subclass for the DataSchema Utility."}, "DataSourceCache": {"name": "DataSourceCache", "namespace": "", "module": "datasource", "uses": ["Plugin.Base, DataSourceCachePlugin"], "superclass": "Cache", "file": "datasource-cache.js", "extends": "Cache", "shortname": "DataSourceCache", "properties": {"NS": {"description": "The namespace for the plugin. This will be the property on the host which\nreferences the plugin instance.", "value": "\"cache\"", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String", "final": ""}, "NAME": {"description": "Class name.", "value": "\"dataSourceCache\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "DataSource plugin adds cache functionality."}, "DataType.XML": {"name": "DataType.XML", "namespace": "", "module": "datatype", "guessedname": "LANG", "methods": {"parse": {"return": {"type": "XMLDoc", "description": "XML Document."}, "params": [{"type": "String", "name": "data", "description": "  Data to convert."}], "description": "Converts data to type XMLDocument.", "guessedname": "parse", "guessedtype": "function"}, "format": {"return": {"type": "String", "description": "String."}, "params": [{"type": "XMLDoc", "name": "data", "description": "  Data to convert."}], "description": "Converts data to type XMLDocument.", "guessedname": "format", "guessedtype": "function"}}, "static": "", "file": "datatype-xml-format.js", "guessedtype": "property", "shortname": "DataType.XML", "description": "DataType.XML provides a set of utility functions to operate against XML documents."}, "Test.Reporter": {"name": "Test.Reporter", "constructors": [{"params": [{"type": "String", "name": "url", "description": " The URL to submit the results to."}, {"type": "Function", "name": "format", "description": " (Optiona) A function that outputs the results in a specific format.\nDefault is Y.Test.Format.XML."}], "description": "An object capable of sending test results to a server."}], "namespace": "Test", "module": "test", "guessedname": "Reporter", "methods": {"report": {"return": {"type": "Void", "description": ""}, "params": [{"type": "Object", "name": "results", "description": " The results object created by TestRunner."}], "description": "Sends the report to the server.", "guessedname": "report", "guessedtype": "function"}, "destroy": {"return": {"type": "Void", "description": ""}, "description": "Cleans up the memory associated with the TestReporter, removing DOM elements\nthat were created.", "guessedname": "destroy", "guessedtype": "function"}, "addField": {"return": {"type": "Void", "description": ""}, "params": [{"type": "String", "name": "name", "description": " The name of the field."}, {"type": "Variant", "name": "value", "description": " The value of the field."}], "description": "Adds a field to the form that submits the results.", "guessedname": "addField", "guessedtype": "function"}}, "file": "TestReporter.js", "guessedtype": "function", "shortname": "Reporter", "properties": {"url": {"type": "String", "description": "The URL to submit the data to.", "guessedname": "url", "guessedtype": "property"}, "_form": {"guessedname": "_form", "type": "HTMLFormElement", "description": "The form element used to submit the results.", "private": "", "guessedtype": "property"}, "_fields": {"guessedname": "_fields", "type": "Object", "description": "Extra fields to submit with the request.", "private": "", "guessedtype": "property"}, "_iframe": {"guessedname": "_iframe", "type": "HTMLIFrameElement", "description": "Iframe used as a target for form submission.", "private": "", "guessedtype": "property"}, "format": {"type": "Function", "description": "The formatting function to call when submitting the data.", "guessedname": "format", "guessedtype": "property"}}, "description": "An object capable of sending test results to a server."}, "WidgetStdMod": {"name": "WidgetStdMod", "namespace": "", "module": "widget-stdmod", "events": {"headerContentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "headerContentChange", "description": "Fires when the value for the configuration attribute 'headerContent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "bodyContentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "bodyContentChange", "description": "Fires when the value for the configuration attribute 'bodyContent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "fillHeightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "fillHeightChange", "description": "Fires when the value for the configuration attribute 'fillHeight' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "footerContentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "footerContentChange", "description": "Fires when the value for the configuration attribute 'footerContent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"bodyContent": {"default": "undefined", "type": "{String | Node}", "description": "The content to be added to the body section. This will replace any existing content\nin the body. If you want to append, or insert new content, use the <a href=\"#method_setStdModContent\">setStdModContent</a> method.", "guessedname": "bodyContent", "guessedtype": "property"}, "footerContent": {"default": "undefined", "type": "{String | Node}", "description": "The content to be added to the footer section. This will replace any existing content\nin the footer. If you want to append, or insert new content, use the <a href=\"#method_setStdModContent\">setStdModContent</a> method.", "guessedname": "footerContent", "guessedtype": "property"}, "fillHeight": {"default": "WidgetStdMod.BODY", "type": "{String}", "description": "The section (WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER) which should be resized to fill the height of the standard module, when a \nheight is set on the Widget. If a height is not set on the widget, then all sections are sized based on \ntheir content.", "guessedname": "fillHeight", "guessedtype": "property"}, "headerContent": {"default": "undefined", "type": "{String | Node}", "description": "The content to be added to the header section. This will replace any existing content\nin the header. If you want to append, or insert new content, use the <a href=\"#method_setStdModContent\">setStdModContent</a> method.", "guessedname": "headerContent", "guessedtype": "property"}}, "methods": {"_addNodeRef": {"guessedname": "_addNodeRef", "params": [{"type": "Node", "name": "node", "description": " The section Node to be updated."}, {"type": "Node|NodeList", "name": "children", "description": " The new content Node, or NodeList to be added to section Node provided."}, {"type": "String", "name": "where", "description": " Optional. Either WidgetStdMod.AFTER, WidgetStdMod.BEFORE or WidgetStdMod.REPLACE.\nIf not provided, the content will replace existing content in the Node."}], "description": "Helper method to add nodes, to another node.\nThe child node(s) are added either before, after or replaces the existing node content \nbased on the value of the <code>where</code> argument.", "private": "", "guessedtype": "function"}, "_afterHeaderChange": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade for the attribute change"}], "description": "Default attribute change listener for the headerContent attribute, responsible\nfor updating the UI, in response to attribute changes.", "guessedname": "_afterHeaderChange", "guessedtype": "function"}, "_findStdModSection": {"return": {"type": "Node", "description": "The rendered node for the given section, or null if not found."}, "description": "Helper method to to find the rendered node for the given section,\nif it exists.", "private": "", "params": [{"type": "String", "name": "section", "description": " The section for which the render Node is to be found. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}], "guessedname": "_findStdModSection", "guessedtype": "function"}, "_afterFooterChange": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade for the attribute change"}], "description": "Default attribute change listener for the footerContent attribute, responsible\nfor updating the UI, in response to attribute changes.", "guessedname": "_afterFooterChange", "guessedtype": "function"}, "_syncUIStdMod": {"protected": "", "description": "Synchronizes the UI to match the Widgets standard module state.\n<p>\nThis method is invoked after syncUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_syncUIStdMod", "guessedtype": "function"}, "_uiSetStdMod": {"protected": "", "params": [{"type": "String", "name": "section", "description": " The section to be updated. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}, {"type": "String | Node", "name": "content", "description": " The new content (either as an HTML string, or Node reference) to add to the section"}, {"type": "String", "name": "where", "description": " Optional. Either WidgetStdMod.AFTER, WidgetStdMod.BEFORE or WidgetStdMod.REPLACE.\nIf not provided, the content will replace existing content in the section."}], "description": "Updates the rendered UI, adding the provided content (either an HTML string, or node reference),\nto the specified section. The content is either added before, after or replaces existing content\nin the section, based on the value of the <code>where</code> argument.", "guessedname": "_uiSetStdMod", "guessedtype": "function"}, "setStdModContent": {"params": [{"type": "String", "name": "section", "description": " The standard module section whose content is to be updated. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}, {"type": "String | Node", "name": "content", "description": " The content to be added, either an HTML string or a Node reference."}, {"type": "String", "name": "where", "description": " Optional. Either WidgetStdMod.AFTER, WidgetStdMod.BEFORE or WidgetStdMod.REPLACE.\nIf not provided, the content will replace existing content in the section."}], "description": "Updates the body section of the standard module with the content provided (either an HTML string, or node reference).\n<p>\nThis method can be used instead of the corresponding section content attribute if you'd like to retain the current content of the section,\nand insert content before or after it, by specifying the <code>where</code> argument.\n</p>", "guessedname": "setStdModContent", "guessedtype": "function"}, "_insertStdModSection": {"guessedname": "_insertStdModSection", "params": [{"type": "Node", "name": "contentBox", "description": " A reference to the Widgets content box."}, {"type": "String", "name": "section", "description": " The section to create/render. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}, {"type": "Node", "name": "sectionNode", "description": " The Node for the section."}], "description": "Helper method to insert the Node for the given section into the correct location in the contentBox.", "private": "", "guessedtype": "function"}, "_getPreciseHeight": {"return": {"type": "Number", "description": "The height of the Node including borders and padding, possibly a float."}, "description": "Helper method to obtain the precise height of the node provided, including padding and border.\nThe height could be a sub-pixel value for certain browsers, such as Firefox 3.", "private": "", "params": [{"type": "Node", "name": "node", "description": " The node for which the precise height is required."}], "guessedname": "_getPreciseHeight", "guessedtype": "function"}, "_eraseStdMod": {"protected": "", "params": [{"type": "String", "name": "section", "description": " The section to remove. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}], "description": "Removes the DOM node for the given section.", "guessedname": "_eraseStdMod", "guessedtype": "function"}, "fillHeight": {"params": [{"type": "Node", "name": "node", "description": " The node which should be resized to fill out the height\nof the Widget bounding box. Should be a standard module section node which belongs\nto the widget."}], "description": "Sets the height on the provided header, body or footer element to \nfill out the height of the Widget. It determines the height of the \nwidgets bounding box, based on it's configured height value, and \nsets the height of the provided section to fill out any \nspace remaining after the other standard module section heights \nhave been accounted for.\n<p><strong>NOTE:</strong> This method is not designed to work if an explicit \nheight has not been set on the Widget, since for an \"auto\" height Widget, \nthe heights of the header/body/footer will drive the height of the Widget.</p>", "guessedname": "fillHeight", "guessedtype": "function"}, "_getStdModTemplate": {"return": {"type": "Node", "description": "The new Node instance for the section"}, "description": "Gets a new Node reference for the given standard module section, by cloning\nthe stored template node.", "protected": "", "params": [{"type": "String", "name": "section", "description": " The section to create a new node for. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}], "guessedname": "_getStdModTemplate", "guessedtype": "function"}, "getStdModNode": {"return": {"type": "Node", "description": "The node reference for the section, or null if not set."}, "params": [{"type": "String", "name": "section", "description": " The section whose node reference is required. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}], "description": "Returns the node reference for the given section. Note: The DOM is not queried for the node reference. The reference\nstored by the widget instance is returned if set.", "guessedname": "getStdModNode", "guessedtype": "function"}, "_applyStdModParsedConfig": {"private": "", "description": "This method is injected before the _applyParsedConfig step in \nthe application of HTML_PARSER, and sets up the state to \nidentify whether or not we should remove the current DOM content\nor not, based on whether or not the current content attribute value\nwas extracted from the DOM, or provided by the user configuration", "guessedname": "_applyStdModParsedConfig", "guessedtype": "function"}, "_addNodeHTML": {"guessedname": "_addNodeHTML", "params": [{"type": "Node", "name": "node", "description": " The section Node to be updated."}, {"type": "String", "name": "html", "description": " The new content HTML string to be added to the section Node."}, {"type": "String", "name": "where", "description": " Optional. Either WidgetStdMod.AFTER, WidgetStdMod.BEFORE or WidgetStdMod.REPLACE.\nIf not provided, the content will replace Nodes existing content."}], "description": "Helper method to add the given HTML string to the node reference provided.\nThe HTML is added either before, after or replaces the existing node content \nbased on the value of the <code>where</code> argument.", "private": "", "guessedtype": "function"}, "_parseStdModHTML": {"return": {"type": "String", "description": "Inner HTML string with the contents of the section"}, "description": "Utility method, used by WidgetStdMods HTML_PARSER implementation\nto extract data for each section from markup.", "private": "", "params": [{"type": "String", "name": "section", "description": ""}], "guessedname": "_parseStdModHTML", "guessedtype": "function"}, "_renderStdMod": {"return": {"type": "Node", "description": "A reference to the added section node"}, "description": "Creates the DOM node for the given section, and inserts it into the correct location in the contentBox.", "protected": "", "params": [{"type": "String", "name": "section", "description": " The section to create/render. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}], "guessedname": "_renderStdMod", "guessedtype": "function"}, "_bindUIStdMod": {"protected": "", "description": "Binds event listeners responsible for updating the UI state in response to \nWidget standard module related state changes.\n<p>\nThis method is invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_bindUIStdMod", "guessedtype": "function"}, "_fillHeight": {"private": "", "description": "Updates the rendered UI, to resize the current section specified by the fillHeight attribute, so\nthat the standard module fills out the Widget height. If a height has not been set on Widget,\nthe section is not resized (height is set to \"auto\").", "guessedname": "_fillHeight", "guessedtype": "function"}, "_renderUIStdMod": {"protected": "", "description": "Creates/Initializes the DOM for standard module support.\n<p>\nThis method is invoked after renderUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_renderUIStdMod", "guessedtype": "function"}, "_uiSetFillHeight": {"protected": "", "params": [{"type": "String", "name": "fillSection", "description": " A valid section specifier - one of WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER"}], "description": "Updates the rendered UI, to resize the provided section so that the standard module fills out \nthe specified widget height. Note: This method does not check whether or not a height is set \non the Widget.", "guessedname": "_uiSetFillHeight", "guessedtype": "function"}, "_validateFillHeight": {"return": {"type": "", "description": "true if valid, false if not"}, "description": "Default validator for the fillHeight attribute. Verifies that the \nvalue set is a valid section specifier - one of WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER,\nor a falsey value if fillHeight is to be disabled.", "protected": "", "params": [{"type": "String", "name": "val", "description": " The section which should be setup to fill height, or false/null to disable fillHeight"}], "guessedname": "_validateFillHeight", "guessedtype": "function"}, "_afterBodyChange": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade for the attribute change"}], "description": "Default attribute change listener for the bodyContent attribute, responsible\nfor updating the UI, in response to attribute changes.", "guessedname": "_afterBodyChange", "guessedtype": "function"}, "_afterFillHeightChange": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade for the attribute change"}], "description": "Default attribute change listener for the fillHeight attribute, responsible\nfor updating the UI, in response to attribute changes.", "guessedname": "_afterFillHeightChange", "guessedtype": "function"}, "_getStdModContent": {"return": {"type": "Node", "description": "The child node collection of the standard module section."}, "description": "Retrieves the child nodes (content) of a standard module section", "private": "", "params": [{"type": "String", "name": "section", "description": " The standard module section whose child nodes are to be retrieved. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}], "guessedname": "_getStdModContent", "guessedtype": "function"}}, "param": "{Object} The user configuration object", "file": "Widget-StdMod.js", "shortname": "WidgetStdMod", "properties": {"WidgetStdMod.HEADER": {"type": "String", "static": "", "description": "Constant used to refer the the standard module header, in methods which expect a section specifier", "guessedname": "HEADER", "guessedtype": "property"}, "WidgetStdMod.REPLACE": {"type": "String", "static": "", "description": "Constant used to specify insertion position, when adding content to sections of the standard module in\nmethods which expect a \"where\" argument.\n<p>\n<em>Replaces</em> the sections existing content, with new content.\n</p>", "guessedname": "REPLACE", "guessedtype": "property"}, "WidgetStdMod.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration introduced by WidgetStdMod.", "guessedname": "ATTRS", "guessedtype": "property"}, "WidgetStdMod.BEFORE": {"type": "String", "static": "", "description": "Constant used to specify insertion position, when adding content to sections of the standard module in\nmethods which expect a \"where\" argument.\n<p>\nInserts new content <em>before</em> the sections existing content.\n</p>", "guessedname": "BEFORE", "guessedtype": "property"}, "WidgetStdMod.HTML_PARSER": {"type": "Object", "static": "", "description": "The HTML parsing rules for the WidgetStdMod class.", "guessedname": "HTML_PARSER", "guessedtype": "property"}, "WidgetStdMod.SECTION_CLASS_NAMES": {"type": "Object", "static": "", "description": "Static hash of default class names used for the header,\nbody and footer sections of the standard module, keyed by\nthe section identifier (WidgetStdMod.STD_HEADER, WidgetStdMod.STD_BODY, WidgetStdMod.STD_FOOTER)", "guessedname": "SECTION_CLASS_NAMES", "guessedtype": "property"}, "WidgetStdMod.FOOTER": {"type": "String", "static": "", "description": "Constant used to refer the the standard module footer, in methods which expect a section specifier", "guessedname": "FOOTER", "guessedtype": "property"}, "WidgetStdMod.TEMPLATES": {"type": "Object", "static": "", "description": "The template HTML strings for each of the standard module sections. Section entries are keyed by the section constants,\nWidgetStdMod.HEADER, WidgetStdMod.BODY, WidgetStdMod.FOOTER, and contain the HTML to be added for each section.\ne.g.\n<pre>\n{\nheader : '&lt;div class=\"yui-widget-hd\"&gt;&lt;/div&gt;',\nbody : '&lt;div class=\"yui-widget-bd\"&gt;&lt;/div&gt;',\nfooter : '&lt;div class=\"yui-widget-ft\"&gt;&lt;/div&gt;'\n}\n</pre>", "guessedname": "TEMPLATES", "guessedtype": "property"}, "WidgetStdMod.BODY": {"type": "String", "static": "", "description": "Constant used to refer the the standard module body, in methods which expect a section specifier", "guessedname": "BODY", "guessedtype": "property"}, "WidgetStdMod.AFTER": {"type": "String", "static": "", "description": "Constant used to specify insertion position, when adding content to sections of the standard module in \nmethods which expect a \"where\" argument.\n<p>\nInserts new content <em>before</em> the sections existing content.\n</p>", "guessedname": "AFTER", "guessedtype": "property"}}, "description": "Widget extension, which can be used to add Standard Module support to the \nbase Widget class, through the <a href=\"Base.html#method_build\">Base.build</a> \nmethod.\n<p>\nThe extension adds header, body and footer sections to the Widget's content box and \nprovides the corresponding methods and attributes to modify the contents of these sections.\n</p>"}, "ArrayAssert": {"name": "ArrayAssert", "namespace": "", "module": "test", "guessedname": "ArrayAssert", "methods": {"containsMatch": {"static": "", "params": [{"type": "Function", "name": "matcher", "description": " A function that returns true if the items matches or false if not."}, {"type": "Array", "name": "haystack", "description": " An array of values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value matching some condition is present in an array. This uses\na function to determine a match.", "guessedname": "containsMatch", "guessedtype": "function"}, "doesNotContain": {"static": "", "params": [{"type": "Object", "name": "needle", "description": " The value that is expected in the array."}, {"type": "Array", "name": "haystack", "description": " An array of values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not present in an array. This uses the triple equals \nAsserts that a value is not present in an array. This uses the triple equals \nsign so no type cohersion may occur.", "guessedname": "doesNotContain", "guessedtype": "function"}, "indexOf": {"static": "", "params": [{"type": "Object", "name": "needle", "description": " The value to look for."}, {"type": "Array", "name": "haystack", "description": " The array to search in."}, {"type": "int", "name": "index", "description": " The index at which the value should exist."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that the given value is contained in an array at the specified index.\nThis uses the triple equals sign so no type cohersion will occur.", "guessedname": "indexOf", "guessedtype": "function"}, "itemsAreSame": {"static": "", "params": [{"type": "Array", "name": "expected", "description": " An array of the expected values."}, {"type": "Array", "name": "actual", "description": " Any array of the actual values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that the values in an array are the same, and in the same position,\nas values in another array. This uses the triple equals sign\nso no type cohersion will occur. Note that the array objects themselves\nneed not be the same for this test to pass.", "guessedname": "itemsAreSame", "guessedtype": "function"}, "contains": {"static": "", "params": [{"type": "Object", "name": "needle", "description": " The value that is expected in the array."}, {"type": "Array", "name": "haystack", "description": " An array of values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is present in an array. This uses the triple equals \nsign so no type cohersion may occur.", "guessedname": "contains", "guessedtype": "function"}, "containsItems": {"static": "", "params": [{"type": "Object[]", "name": "needles", "description": " An array of values that are expected in the array."}, {"type": "Array", "name": "haystack", "description": " An array of values to check."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a set of values are present in an array. This uses the triple equals \nsign so no type cohersion may occur. For this assertion to pass, all values must\nbe found.", "guessedname": "containsItems", "guessedtype": "function"}, "doesNotContainItems": {"static": "", "params": [{"type": "Object[]", "name": "needles", "description": " An array of values that are not expected in the array."}, {"type": "Array", "name": "haystack", "description": " An array of values to check."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a set of values are not present in an array. This uses the triple equals \nsign so no type cohersion may occur. For this assertion to pass, all values must\nnot be found.", "guessedname": "doesNotContainItems", "guessedtype": "function"}, "itemsAreEquivalent": {"return": {"type": "Void", "description": ""}, "description": "Asserts that the values in an array are equivalent, and in the same position,\nas values in another array. This uses a function to determine if the values\nare equivalent. Note that the array objects themselves\nneed not be the same for this test to pass.", "static": "", "guessedname": "itemsAreEquivalent", "guessedtype": "function", "params": [{"type": "Array", "name": "expected", "description": " An array of the expected values."}, {"type": "Array", "name": "actual", "description": " Any array of the actual values."}, {"type": "Function", "name": "comparator", "description": " A function that returns true if the values are equivalent\nor false if not."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "itemsAreEqual": {"static": "", "params": [{"type": "Array", "name": "expected", "description": " An array of the expected values."}, {"type": "Array", "name": "actual", "description": " Any array of the actual values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that the values in an array are equal, and in the same position,\nas values in another array. This uses the double equals sign\nso type cohersion may occur. Note that the array objects themselves\nneed not be the same for this test to pass.", "guessedname": "itemsAreEqual", "guessedtype": "function"}, "isEmpty": {"static": "", "params": [{"type": "Array", "name": "actual", "description": " The array to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that an array is empty.", "guessedname": "isEmpty", "guessedtype": "function"}, "lastIndexOf": {"static": "", "params": [{"type": "Object", "name": "needle", "description": " The value to look for."}, {"type": "Array", "name": "haystack", "description": " The array to search in."}, {"type": "int", "name": "index", "description": " The index at which the value should exist."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that the given value is contained in an array at the specified index,\nstarting from the back of the array.\nThis uses the triple equals sign so no type cohersion will occur.", "guessedname": "lastIndexOf", "guessedtype": "function"}, "isNotEmpty": {"static": "", "params": [{"type": "Array", "name": "actual", "description": " The array to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that an array is not empty.", "guessedname": "isNotEmpty", "guessedtype": "function"}, "doesNotContainMatch": {"static": "", "params": [{"type": "Function", "name": "matcher", "description": " A function that returns true if the items matches or false if not."}, {"type": "Array", "name": "haystack", "description": " An array of values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that no values matching a condition are present in an array. This uses\na function to determine a match.", "guessedname": "doesNotContainMatch", "guessedtype": "function"}}, "static": "", "file": "ArrayAssert.js", "guessedtype": "property", "shortname": "ArrayAssert", "description": "The ArrayAssert object provides functions to test JavaScript array objects\nfor a variety of cases."}, "Plugin.EditorPara": {"name": "Plugin.EditorPara", "constructors": [{"description": "Plugin for Editor to paragraph auto wrapping and correction."}], "namespace": "", "module": "editor", "guessedname": "EditorPara", "methods": {"_afterEditorReady": {"private": "", "description": "Performs a block element filter when the Editor is first ready", "guessedname": "_afterEditorReady", "guessedtype": "function"}, "_onNodeChange": {"private": "", "description": "nodeChange handler to handle fixing an empty document.", "guessedname": "_onNodeChange", "guessedtype": "function"}, "_afterPaste": {"private": "", "description": "Performs block/paste filtering after paste.", "guessedname": "_afterPaste", "guessedtype": "function"}, "_fixFirstPara": {"private": "", "description": "Utility method to create an empty paragraph when the document is empty.", "guessedname": "_fixFirstPara", "guessedtype": "function"}, "_afterContentChange": {"private": "", "description": "Performs a block element filter when the Editor after an content change", "guessedname": "_afterContentChange", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "editor-para.js", "guessedtype": "function", "shortname": "Plugin.EditorPara", "properties": {"NS": {"static": "", "description": "editorPara", "guessedname": "NS", "guessedtype": "property"}, "d": {"description": "This forced FF to redraw the content on backspace.\nOn some occasions FF will leave a cursor residue after content has been deleted.\nDropping in the empty textnode and then removing it causes FF to redraw and\nremove the \"ghost cursors\"", "guessedname": "d", "guessedtype": "property"}, "NAME": {"static": "", "description": "editorPara", "guessedname": "NAME", "guessedtype": "property"}}, "description": "Plugin for Editor to paragraph auto wrapping and correction."}, "Plugin.DDProxy": {"name": "Plugin.DDProxy", "configs": {"moveOnEnd": {"type": "Boolean", "description": "Move the original node at the end of the drag. Default: true", "guessedname": "moveOnEnd", "guessedtype": "property"}, "resizeFrame": {"type": "Boolean", "description": "Make the Proxy node assume the size of the original node. Default: true", "guessedname": "resizeFrame", "guessedtype": "property"}, "cloneNode": {"type": "Boolean", "description": "Should the node be cloned into the proxy for you. Default: false", "guessedname": "cloneNode", "guessedtype": "property"}, "positionProxy": {"type": "Boolean", "description": "Make the Proxy node appear in the same place as the original node. Default: true", "guessedname": "positionProxy", "guessedtype": "property"}, "hideOnEnd": {"type": "Boolean", "description": "Hide the drag node at the end of the drag. Default: true", "guessedname": "hideOnEnd", "guessedtype": "property"}, "borderStyle": {"type": "Boolean", "description": "The default border style for the border of the proxy. Default: 1px solid #808080", "guessedname": "borderStyle", "guessedtype": "property"}}, "constructors": [{"description": "Plugin for dd-drag for creating a proxy drag node, instead of dragging the original node."}], "namespace": "Plugin", "module": "dd", "events": {"hideOnEndChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hideOnEndChange", "description": "Fires when the value for the configuration attribute 'hideOnEnd' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "positionProxyChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "positionProxyChange", "description": "Fires when the value for the configuration attribute 'positionProxy' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "moveOnEndChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "moveOnEndChange", "description": "Fires when the value for the configuration attribute 'moveOnEnd' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resizeFrameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "resizeFrameChange", "description": "Fires when the value for the configuration attribute 'resizeFrame' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "cloneNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cloneNodeChange", "description": "Fires when the value for the configuration attribute 'cloneNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "borderStyleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "borderStyleChange", "description": "Fires when the value for the configuration attribute 'borderStyle' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "DDM", "methods": {"_init": {"description": "Handler for the proxy config attribute", "private": "", "guessedname": "_init", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "proxy.js", "guessedtype": "property", "shortname": "DDProxy", "properties": {"NS": {"description": "The Proxy instance will be placed on the Drag instance under the proxy namespace.", "default": "con", "readonly": "", "protected": "", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "{String}"}, "_hands": {"private": "", "description": "Holds the event handles for setting the proxy", "guessedname": "_hands", "guessedtype": "property"}}, "description": "Plugin for dd-drag for creating a proxy drag node, instead of dragging the original node."}, "Plugin.ScrollViewPaginator": {"name": "Plugin.ScrollViewPaginator", "constructors": [{"description": "Scrollview plugin that adds support for paging"}], "namespace": "Plugin", "module": "scrollview-paginator", "events": {"selectorChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "selectorChange", "description": "Fires when the value for the configuration attribute 'selector' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "totalChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "totalChange", "description": "Fires when the value for the configuration attribute 'total' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "indexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "indexChange", "description": "Fires when the value for the configuration attribute 'index' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"index": {"default": "0", "type": "{Number}", "description": "The active page number for a paged scrollview", "guessedname": "index", "guessedtype": "property"}, "total": {"default": "0", "type": "{Number}", "description": "The total number of pages", "guessedname": "total", "guessedtype": "property"}, "selector": {"type": "{String}", "description": "CSS selector for a page inside the scrollview. The scrollview\nwill snap to the closest page.", "guessedname": "selector", "guessedtype": "property"}}, "methods": {"_afterIndexChange": {"protected": "", "description": "index attr change handler", "guessedname": "_afterIndexChange", "guessedtype": "function"}, "prev": {"description": "Scroll to the previous page in the scrollview, with animation", "guessedname": "prev", "guessedtype": "function"}, "_flickFrame": {"protected": "", "description": "Executed to respond to the flick event, by over-riding the default flickFrame animation. \nThis is needed to determine if the next or prev page should be activated.", "guessedname": "_flickFrame", "guessedtype": "function"}, "_calcOffsets": {"protected": "", "description": "Calculate the page boundary offsets", "guessedname": "_calcOffsets", "guessedtype": "function"}, "_uiIndex": {"protected": "", "description": "Update the UI based on the current page index", "guessedname": "_uiIndex", "guessedtype": "function"}, "initializer": {"description": "Designated initializer", "guessedname": "initializer", "guessedtype": "function"}, "scrollTo": {"params": [{"type": "Number", "name": "index", "description": "  The index of the page to scroll to"}, {"type": "Number", "name": "duration", "description": "  The number of ms the animation should last"}, {"type": "String", "name": "easing", "description": "  The timing function to use in the animation"}], "description": "Scroll to a given page in the scrollview, with animation.", "guessedname": "scrollTo", "guessedtype": "function"}, "snapToCurrent": {"description": "Snaps the scrollview to the currently selected page", "guessedname": "snapToCurrent", "guessedtype": "function"}, "next": {"description": "Scroll to the next page in the scrollview, with animation", "guessedname": "next", "guessedtype": "function"}, "_scrollEnded": {"protected": "", "params": [], "description": "scrollEnd handler detects if a page needs to change", "guessedname": "_scrollEnded", "guessedtype": "function"}, "_afterRender": {"protected": "", "description": "After host render handler", "guessedname": "_afterRender", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "paginator-plugin.js", "shortname": "ScrollViewPaginator", "properties": {"ScrollViewPaginator.NAME": {"description": "The identity of the plugin", "default": "'paginatorPlugin'", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String"}, "ScrollViewPaginator.NS": {"description": "The namespace on which the plugin will reside", "default": "'pages'", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String"}, "ScrollViewPaginator.ATTRS": {"type": "Object", "static": "", "description": "The default attribute configuration for the plugin", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "Scrollview plugin that adds support for paging"}, "EventHandle": {"name": "EventHandle", "constructors": [{"params": [{"type": "CustomEvent", "name": "evt", "description": " the custom event."}, {"type": "Subscriber", "name": "sub", "description": " the subscriber."}], "description": "Return value from all subscribe operations"}], "namespace": "", "module": "event-custom", "guessedname": "EventHandle", "methods": {"detach": {"return": {"type": "int", "description": "the number of detached listeners"}, "description": "Detaches this subscriber", "guessedname": "detach", "guessedtype": "function"}, "monitor": {"return": {"type": "EventHandle", "description": "return value from the monitor event subscription."}, "params": [{"type": "string", "name": "what", "description": "  what to monitor ('attach', 'detach', 'publish')."}], "description": "Monitor the event state for the subscribed event.  The first parameter\nis what should be monitored, the rest are the normal parameters when\nsubscribing to an event.", "guessedname": "monitor", "guessedtype": "function"}}, "file": "event-custom.js", "guessedtype": "function", "shortname": "EventHandle", "properties": {"evt": {"type": "CustomEvent", "description": "The custom event", "guessedname": "evt", "guessedtype": "property"}, "sub": {"type": "Subscriber", "description": "The subscriber object", "guessedname": "sub", "guessedtype": "property"}}, "description": "Return value from all subscribe operations"}, "Do.Error": {"name": "Do.Error", "deprecated": "use Y.Do.Halt or Y.Do.Prevent", "namespace": "", "module": "event-custom", "guessedname": "Error", "file": "event-do.js", "guessedtype": "property", "shortname": "Do.Error", "description": "Return an Error object when you want to terminate the execution\nof all subsequent method calls."}, "HistoryHTML5": {"name": "HistoryHTML5", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " (optional) Configuration object. The following\n<code>HistoryHTML5</code>-specific properties are supported in addition to\nthose supported by <code>HistoryBase</code>:\n<dl>\n<dt><strong>enableSessionFallback (Boolean)</strong></dt>\n<dd>\n<p>\nSet this to <code>true</code> to store the most recent history state in\nsessionStorage in order to seamlessly restore the previous state (if any)\nwhen <code>HistoryHTML5</code> is instantiated after a\n<code>window.onpopstate</code> event has already fired.\n</p>\n<p>\nBy default, this setting is <code>false</code>.\n</p>\n</dd>\n</dl>"}], "description": "<p>\nProvides browser history management using the HTML5 history API.\n</p>\n<p>\nWhen calling the <code>add()</code>, <code>addValue()</code>,\n<code>replace()</code>, or <code>replaceValue()</code> methods on\n<code>HistoryHTML5</code>, the following additional options are supported:\n</p>\n<dl>\n<dt><strong>title (String)</strong></dt>\n<dd>\nTitle to use for the new history entry. Browsers will typically display\nthis title to the user in the detailed history window or in a dropdown\nmenu attached to the back/forward buttons. If not specified, the title\nof the current document will be used.\n</dd>\n<dt><strong>url (String)</strong></dt>\n<dd>\nURL to display to the user for the new history entry. This URL will be\nvisible in the browser's address bar and will be the bookmarked URL if\nthe user bookmarks the page. It may be a relative path (\"foo/bar\"), an\nabsolute path (\"/foo/bar\"), or a full URL (\"http://example.com/foo/bar\").\nIf you specify a full URL, the origin <i>must</i> be the same as the \norigin of the current page, or an error will occur. If no URL is\nspecified, the current URL will not be changed.\n</dd>\n</dl>"}], "namespace": "", "module": "history", "guessedname": "HistoryBase", "methods": {"_storeState": {"protected": "", "params": [{"type": "String", "name": "src", "description": " Source of the changes."}, {"type": "Object", "name": "newState", "description": " New state to store."}, {"type": "Object", "name": "options", "description": " Zero or more options."}], "description": "Overrides HistoryBase's <code>_storeState()</code> and pushes or replaces\na history entry using the HTML5 history API when necessary.", "guessedname": "_storeState", "guessedtype": "function"}, "_onPopState": {"protected": "", "params": [{"type": "Event", "name": "e", "description": ""}], "description": "Handler for popstate events.", "guessedname": "_onPopState", "guessedtype": "function"}, "_loadSessionState": {"protected": "", "description": "Attempts to load a state entry stored in session storage.", "guessedname": "_loadSessionState", "guessedtype": "function"}, "_getSessionKey": {"protected": "", "return": {"type": "String", "description": ""}, "description": "Returns a string unique to the current URL pathname that's suitable for\nuse as a session storage key.", "guessedname": "_getSessionKey", "guessedtype": "function"}, "_storeSessionState": {"protected": "", "params": [{"type": "mixed", "name": "state", "description": " State to store. May be any type serializable to\nJSON."}], "description": "Stores the specified state entry in session storage if the\n<code>enableSessionFallback</code> config property is <code>true</code>\nand either <code>Y.JSON</code> or native JSON support is available and\nsession storage is supported.", "guessedname": "_storeSessionState", "guessedtype": "function"}}, "extends": "HistoryBase", "superclass": "HistoryBase", "file": "history-html5.js", "guessedtype": "property", "shortname": "HistoryHTML5", "properties": {"SRC_POPSTATE": {"description": "Constant used to identify state changes originating from\n<code>popstate</code> events.", "static": "", "guessedname": "SRC_POPSTATE", "guessedtype": "property", "type": "String", "final": ""}}, "description": "<p>\nProvides browser history management using the HTML5 history API.\n</p>\n<p>\nWhen calling the <code>add()</code>, <code>addValue()</code>,\n<code>replace()</code>, or <code>replaceValue()</code> methods on\n<code>HistoryHTML5</code>, the following additional options are supported:\n</p>\n<dl>\n<dt><strong>title (String)</strong></dt>\n<dd>\nTitle to use for the new history entry. Browsers will typically display\nthis title to the user in the detailed history window or in a dropdown\nmenu attached to the back/forward buttons. If not specified, the title\nof the current document will be used.\n</dd>\n<dt><strong>url (String)</strong></dt>\n<dd>\nURL to display to the user for the new history entry. This URL will be\nvisible in the browser's address bar and will be the bookmarked URL if\nthe user bookmarks the page. It may be a relative path (\"foo/bar\"), an\nabsolute path (\"/foo/bar\"), or a full URL (\"http://example.com/foo/bar\").\nIf you specify a full URL, the origin <i>must</i> be the same as the \norigin of the current page, or an error will occur. If no URL is\nspecified, the current URL will not be changed.\n</dd>\n</dl>"}, "Plugin.ScrollViewScrollbars": {"name": "Plugin.ScrollViewScrollbars", "constructors": [{"description": "ScrollView plugin that adds scroll indicators to ScrollView instances"}], "namespace": "Plugin", "module": "scrollview-scrollbars", "events": {"horizontalNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "horizontalNodeChange", "description": "Fires when the value for the configuration attribute 'horizontalNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "verticalNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "verticalNodeChange", "description": "Fires when the value for the configuration attribute 'verticalNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"horizontalNode": {"type": "Y.Node", "description": "Horizontal scrollbar node", "guessedname": "horizontalNode", "guessedtype": "property"}, "verticalNode": {"type": "Y.Node", "description": "Vertical scrollbar node", "guessedname": "verticalNode", "guessedtype": "property"}}, "methods": {"_setNode": {"return": {"type": "Node", "description": "The Y.Node instance for the scrollbar"}, "description": "Setter for the verticalNode and horizontalNode attributes", "protected": "", "params": [{"type": "Node", "name": "node", "description": "  The Y.Node instance for the scrollbar"}, {"type": "String", "name": "name", "description": "  The attribute name"}], "guessedname": "_setNode", "guessedtype": "function"}, "_hostDimensionsChange": {"protected": "", "description": "Set up the DOM nodes for the scrollbars. This method is invoked whenever the\nhost's _uiDimensionsChange fires, giving us the opportunity to remove un-needed\nscrollbars, as well as add one if necessary.", "guessedname": "_hostDimensionsChange", "guessedtype": "function"}, "_renderBar": {"guessedname": "_renderBar", "params": [{"type": "Node", "name": "bar", "description": " The scrollbar node"}, {"type": "boolean", "name": "add", "description": " true, to add the node, false to remove it"}], "description": "Adds or removes a scrollbar node from the document.", "private": "", "guessedtype": "function"}, "show": {"params": [{"type": "Boolean", "name": "animated", "description": "  Whether or not to animate the showing"}], "description": "Show the scroll bar indicators", "guessedname": "show", "guessedtype": "function"}, "hide": {"params": [{"type": "Boolean", "name": "animated", "description": "  Whether or not to animate the hiding"}], "description": "Hide the scroll bar indicators", "guessedname": "hide", "guessedtype": "function"}, "_show": {"protected": "", "params": [{"type": "boolean", "name": "show", "description": " Whether to show or hide the scrollbar"}, {"type": "bolean", "name": "animated", "description": " Whether or not to animate while showing/hide"}], "description": "Internal hide/show implementation utility method", "guessedname": "_show", "guessedtype": "function"}, "flash": {"description": "Momentarily flash the scroll bars to indicate current scroll position", "guessedname": "flash", "guessedtype": "function"}, "_clearChildCache": {"guessedname": "_clearChildCache", "params": [{"type": "Node", "name": "node", "description": ""}], "description": "Clears child cache", "private": "", "guessedtype": "function"}, "initializer": {"description": "Designated initializer", "guessedname": "initializer", "guessedtype": "function"}, "_setChildCache": {"guessedname": "_setChildCache", "params": [{"type": "Node", "name": "node", "description": ""}], "description": "Caches scrollbar child element information,\nto optimize _update implementation", "private": "", "guessedtype": "function"}, "_updateBar": {"guessedname": "_updateBar", "params": [{"type": "Node", "name": "scrollbar", "description": " The scrollbar node."}, {"type": "Number", "name": "current", "description": " The current scroll position."}, {"type": "Number", "name": "duration", "description": " The transition duration."}, {"type": "boolean", "name": "horiz", "description": " true if horizontal, false if vertical."}], "description": "Utility method, to move/resize either vertical or horizontal scrollbars", "private": "", "guessedtype": "function"}, "_defaultNode": {"protected": "", "return": {"type": "Node", "description": "The Y.Node instance for the scrollbar"}, "description": "Creates default node instances for scrollbars", "guessedname": "_defaultNode", "guessedtype": "function"}, "_update": {"protected": "", "params": [{"type": "Number", "name": "x", "description": "  The current scrollX value (not used here, but passed by default from _uiScrollTo)"}, {"type": "Number", "name": "y", "description": "  The current scrollY value (not used here, but passed by default from _uiScrollTo)"}, {"type": "Number", "name": "duration", "description": "  Number of ms of animation (optional) - used when snapping to bounds"}, {"type": "String", "name": "easing", "description": "  Optional easing equation to use during the animation, if duration is set"}], "description": "Position and resize the scroll bars according to the content size", "guessedname": "_update", "guessedtype": "function"}, "_hostScrollEnd": {"params": [{"type": "Event.Facade", "name": "e", "description": " The event facade."}], "description": "Handler for the scrollEnd event fired by the host. Default implementation flashes the scrollbar", "guessedname": "_hostScrollEnd", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "scrollbars-plugin.js", "shortname": "ScrollViewScrollbars", "properties": {"ScrollViewScrollbars.SCROLLBAR_TEMPLATE": {"type": "Object", "static": "", "description": "HTML template for the scrollbar", "guessedname": "SCROLLBAR_TEMPLATE", "guessedtype": "property"}, "ScrollViewScrollbars.ATTRS": {"type": "Object", "static": "", "description": "The default attribute configuration for the plugin", "guessedname": "ATTRS", "guessedtype": "property"}, "ScrollViewScrollbars.NAME": {"description": "The identity of the plugin", "default": "'pluginScrollViewScrollbars'", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String"}, "ScrollViewScrollbars.NS": {"description": "The namespace on which the plugin will reside.", "default": "'scrollbars'", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String"}}, "description": "ScrollView plugin that adds scroll indicators to ScrollView instances"}, "Plugin.ConsoleFilters": {"name": "Plugin.ConsoleFilters", "configs": {"category": {"type": "Object", "description": "<p>Map of entry categories to their visibility status.  Update a\nparticular category's visibility by setting the subattribute to true\n(visible) or false (hidden).</p>\n<p>For example, yconsole.filter.set('category.info', false) to hide\nlog entries with the category/logLevel of 'info'.</p>\n<p>Similarly, yconsole.filter.get('category.warn') will return a\nboolean indicating whether that category is currently being included\nin the UI.</p>\n<p>Unlike the YUI instance configuration's logInclude and logExclude\nproperties, filtered entries are only hidden from the UI, but\ncan be made visible again.</p>", "guessedname": "category", "guessedtype": "property"}, "source": {"type": "Object", "description": "<p>Map of entry sources to their visibility status.  Update a\nparticular sources's visibility by setting the subattribute to true\n(visible) or false (hidden).</p>\n<p>For example, yconsole.filter.set('sources.slider', false) to hide\nlog entries originating from Y.Slider.</p>", "guessedname": "source", "guessedtype": "property"}, "defaultVisibility": {"default": "true", "type": "{Boolean}", "description": "Default visibility applied to new categories and sources.", "guessedname": "defaultVisibility", "guessedtype": "property"}, "cacheLimit": {"default": "Number.POSITIVE_INFINITY", "type": "{Number}", "description": "Maximum number of entries to store in the message cache.  Use this to\nlimit the memory footprint in environments with heavy log usage.\nBy default, there is no limit (Number.POSITIVE_INFINITY).", "guessedname": "cacheLimit", "guessedtype": "property"}}, "namespace": "Plugin", "module": "console-filters", "events": {"defaultVisibilityChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultVisibilityChange", "description": "Fires when the value for the configuration attribute 'defaultVisibility' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "sourceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "sourceChange", "description": "Fires when the value for the configuration attribute 'source' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "cacheLimitChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cacheLimitChange", "description": "Fires when the value for the configuration attribute 'cacheLimit' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "categoryChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "categoryChange", "description": "Fires when the value for the configuration attribute 'category' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"_createCheckbox": {"protected": "", "params": [{"type": "Node", "name": "container", "description": "  the parentNode of the new checkbox and label"}, {"type": "String", "name": "name", "description": "  the identifier of the filter"}], "description": "Creates a checkbox and label from the ConsoleFilters.FILTER_TEMPLATE for\nthe provided type and name.  The checkbox and label are appended to the\ncontainer node passes as the first arg.", "guessedname": "_createCheckbox", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Initialize entries collection and attach listeners to host events and\nmethods.", "guessedname": "initializer", "guessedtype": "function"}, "_setCacheLimit": {"return": {"type": "Number", "description": ""}, "description": "Setter method for cacheLimit attribute.  Basically a validator to ensure\nnumeric input.", "protected": "", "params": [{"type": "Number", "name": "v", "description": "  Maximum number of entries"}], "guessedname": "_setCacheLimit", "guessedtype": "function"}, "_onCategoryCheckboxClick": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the DOM event"}], "description": "Passes checkbox clicks on to the category attribute.", "guessedname": "_onCategoryCheckboxClick", "guessedtype": "function"}, "_uiSetCheckbox": {"protected": "", "params": [{"type": "String", "name": "type", "description": "  'category' or 'source'"}, {"type": "String", "name": "item", "description": "  the name of the filter (e.g. 'info', 'event')"}, {"type": "Boolean", "name": "checked", "description": "  value to set the checkbox's checked property"}], "description": "Updates the checked property of a filter checkbox of the specified type.\nIf no checkbox is found for the input params, one is created.", "guessedname": "_uiSetCheckbox", "guessedtype": "function"}, "_onEntry": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the custom event object"}], "description": "Ensures a filter is set up for any new categories or sources and\ncollects the messages in _entries.  If the message is stamped with a\ncategory or source that is currently being filtered out, the message\nwill not pass to the Console's print buffer.", "guessedname": "_onEntry", "guessedtype": "function"}, "refreshConsole": {"description": "Repopulates the Console with entries appropriate to the current filter\nsettings.", "guessedname": "refreshConsole", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Removes the plugin UI and unwires events.", "guessedname": "destructor", "guessedtype": "function"}, "_afterCategoryChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the attribute change event object"}], "description": "Triggers the Console to update if a known category filter\nchanges value (e.g. visible => hidden).  Updates the appropriate\ncheckbox's checked state if necessary.", "guessedname": "_afterCategoryChange", "guessedtype": "function"}, "showSource": {"params": [{"type": "String", "name": "src*", "description": "  1..n sources to allow to display in the UI"}], "description": "Shows any number of sources in the UI.  Convenience method for\nmyConsole.filter.set('source.foo', true); set('source.bar', true);\nand so on.", "guessedname": "showSource", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Binds to checkbox click events and internal attribute change events to\nmaintain the UI state.", "guessedname": "bindUI", "guessedtype": "function"}, "showCategory": {"params": [{"type": "String", "name": "cat*", "description": "  1..n categories to allow to display in the UI"}], "description": "Shows any number of categories in the UI.  Convenience method for\nmyConsole.filter.set('category.foo', true); set('category.bar', true);\nand so on.", "guessedname": "showCategory", "guessedtype": "function"}, "_validateCategory": {"return": {"type": "", "description": "Boolean"}, "description": "Validates category updates are objects and the subattribute is not too\ndeep.", "protected": "", "params": [{"type": "String", "name": "cat", "description": "  the new category:visibility map"}, {"type": "String", "name": "v", "description": "  the subattribute path updated"}], "guessedname": "_validateCategory", "guessedtype": "function"}, "_onSourceCheckboxClick": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the DOM event"}], "description": "Passes checkbox clicks on to the source attribute.", "guessedname": "_onSourceCheckboxClick", "guessedtype": "function"}, "_validateSource": {"return": {"type": "", "description": "Boolean"}, "description": "Validates source updates are objects and the subattribute is not too\ndeep.", "protected": "", "params": [{"type": "String", "name": "cat", "description": "  the new source:visibility map"}, {"type": "String", "name": "v", "description": "  the subattribute path updated"}], "guessedname": "_validateSource", "guessedtype": "function"}, "hideCategory": {"params": [{"type": "String", "name": "cat*", "description": "  1..n categories to filter out of the UI"}], "description": "Hides any number of categories from the UI.  Convenience method for\nmyConsole.filter.set('category.foo', false); set('category.bar', false);\nand so on.", "guessedname": "hideCategory", "guessedtype": "function"}, "syncUI": {"description": "Updates the UI to be in accordance with the current state of the plugin.", "guessedname": "syncUI", "guessedtype": "function"}, "_afterClearConsole": {"protected": "", "description": "Flushes the cached entries after a call to the Console's clearConsole().", "guessedname": "_afterClearConsole", "guessedtype": "function"}, "_afterCacheLimitChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the attribute change event object"}], "description": "Trims the cache of entries to the appropriate new length.", "guessedname": "_afterCacheLimitChange", "guessedtype": "function"}, "_afterSourceChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the attribute change event object"}], "description": "Triggers the Console to update if a known source filter\nchanges value (e.g. visible => hidden).  Updates the appropriate\ncheckbox's checked state if necessary.", "guessedname": "_afterSourceChange", "guessedtype": "function"}, "_filterBuffer": {"protected": "", "description": "Flushes the Console's print buffer of any entries that have a category\nor source that is currently being excluded.", "guessedname": "_filterBuffer", "guessedtype": "function"}, "hideSource": {"params": [{"type": "String", "name": "src*", "description": "  1..n sources to filter out of the UI"}], "description": "Hides any number of sources from the UI.  Convenience method for\nmyConsole.filter.set('source.foo', false); set('source.bar', false);\nand so on.", "guessedname": "hideSource", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Adds the category and source filter sections to the Console footer.", "guessedname": "renderUI", "guessedtype": "function"}}, "file": "console-filters.js", "shortname": "ConsoleFilters", "properties": {"ConsoleFilters.NAME": {"description": "Plugin name.", "default": "'consoleFilters'", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String"}, "_entries": {"protected": "", "type": "Array", "description": "Collection of all log messages passed through since the plugin's\ninstantiation.  This holds all messages regardless of filter status.\nUsed as a single source of truth for repopulating the Console body when\nfilters are changed.", "guessedname": "_entries", "guessedtype": "property"}, "ConsoleFilters.SOURCES_TEMPLATE": {"type": "String", "static": "", "description": "Markup template used to create the container for the source filters.", "guessedname": "SOURCES_TEMPLATE", "guessedtype": "property"}, "ConsoleFilters.CHROME_CLASSES": {"description": "Classnames used by the templates when creating nodes.", "protected": "", "static": "", "guessedname": "CHROME_CLASSES", "guessedtype": "property", "type": "Object"}, "ConsoleFilters.FILTER_TEMPLATE": {"type": "String", "static": "", "description": "Markup template used to create the category and source filter checkboxes.", "guessedname": "FILTER_TEMPLATE", "guessedtype": "property"}, "_categories": {"protected": "", "type": "Node", "description": "The container node created to house the category filters.", "guessedname": "_categories", "guessedtype": "property"}, "ConsoleFilters.CATEGORIES_TEMPLATE": {"type": "String", "static": "", "description": "Markup template used to create the container for the category filters.", "guessedname": "CATEGORIES_TEMPLATE", "guessedtype": "property"}, "ConsoleFilters.NS": {"description": "The namespace hung off the host object that this plugin will inhabit.", "default": "'filter'", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String"}, "_sources": {"protected": "", "type": "Node", "description": "The container node created to house the source filters.", "guessedname": "_sources", "guessedtype": "property"}, "_cacheLimit": {"description": "Maximum number of entries to store in the message cache.", "default": "Infinity", "protected": "", "guessedname": "_cacheLimit", "guessedtype": "property", "type": "{Number}"}}, "description": "<p>Provides Plugin.ConsoleFilters plugin class.</p>\n<p>This plugin adds the ability to control which Console entries display by filtering on category and source. Two groups of checkboxes are added to the Console footer, one for categories and the other for sources.  Only those messages that match a checked category or source are displayed.</p>"}, "QueryString": {"name": "QueryString", "namespace": "", "module": "querystring", "guessedname": "QueryString", "methods": {"stringify": {"submodule": "querystring-stringify-simple", "description": "<p>Converts a simple object to a Query String representation.</p>\n<p>Nested objects, Arrays, and so on, are not supported.</p>", "param": "obj {Variant} any arbitrary value to convert to query string", "static": "", "guessedname": "stringify", "guessedtype": "function", "params": [{"type": "Object", "name": "obj", "description": "  A single-level object to convert to a querystring."}, {"type": "Object", "name": "cfg", "description": "  (optional) Configuration object.  In the simple\nmodule, only the arrayKey setting is\nsupported.  When set to true, the key of an\narray will have the '[]' notation appended\nto the key;."}]}}, "static": "", "file": "querystring-parse.js", "guessedtype": "property", "shortname": "QueryString", "description": "<p>The QueryString module adds support for serializing JavaScript objects into\nquery strings and parsing JavaScript objects from query strings format.</p>\n<p>The QueryString namespace is added to your YUI instance including static methods\nY.QueryString.parse(..) and Y.QueryString.stringify(..).</p>\n<p>The <code>querystring</code> module is a rollup of <code>querystring-parse</code> and\n<code>querystring-stringify</code>.</p>\n<p>As their names suggest, <code>querystring-parse</code> adds support for parsing\nQuery String data (Y.QueryString.parse) and <code>querystring-stringify</code> for serializing\nJavaScript data into Query Strings (Y.QueryString.stringify).  You may choose to\ninclude either of the submodules individually if you don't need the\ncomplementary functionality, or include the rollup for both.</p>"}, "Plugin.EditorBidi": {"name": "Plugin.EditorBidi", "constructors": [{"description": "Plugin for Editor to support BiDirectional (bidi) text operations."}], "namespace": "", "module": "editor", "guessedname": "EditorBidi", "methods": {"blockParent": {"static": "", "description": "Returns a block parent for a given element", "guessedname": "blockParent", "guessedtype": "function"}, "_afterMouseUp": {"private": "", "description": "Checks for a direction change after a mouseup occurs.", "guessedname": "_afterMouseUp", "guessedtype": "function"}, "_afterNodeChange": {"private": "", "description": "Checked for a change after a specific nodeChange event has been fired.", "guessedname": "_afterNodeChange", "guessedtype": "function"}, "_checkForChange": {"private": "", "description": "Method checks to see if the direction of the text has changed based on a nodeChange event.", "guessedname": "_checkForChange", "guessedtype": "function"}, "addParents": {"static": "", "description": "Generates a list of all the block parents of the current NodeList", "guessedname": "addParents", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "editor-bidi.js", "guessedtype": "function", "shortname": "Plugin.EditorBidi", "properties": {"BLOCKS": {"static": "", "description": "More elements may be needed. BODY *must* be in the list to take care of the special case.\nblockParent could be changed to use inst.Selection.BLOCKS\ninstead, but that would make Y.Plugin.EditorBidi.blockParent\nunusable in non-RTE contexts (it being usable is a nice\nside-effect).", "guessedname": "BLOCKS", "guessedtype": "property"}, "NAME": {"static": "", "description": "editorBidi", "guessedname": "NAME", "guessedtype": "property"}, "lastDirection": {"private": "", "description": "Place holder for the last direction when checking for a switch", "guessedname": "lastDirection", "guessedtype": "property"}, "_NODE_SELECTED": {"static": "", "description": "The data key to store on the node.", "guessedname": "_NODE_SELECTED", "guessedtype": "property"}, "firstEvent": {"private": "", "description": "Tells us that an initial bidi check has already been performed", "guessedname": "firstEvent", "guessedtype": "property"}, "NS": {"static": "", "description": "editorBidi", "guessedname": "NS", "guessedtype": "property"}, "EVENTS": {"static": "", "description": "The events to check for a direction change on", "guessedname": "EVENTS", "guessedtype": "property"}, "DIV_WRAPPER": {"static": "", "description": "Template for creating a block element", "guessedname": "DIV_WRAPPER", "guessedtype": "property"}}, "description": "Plugin for Editor to support BiDirectional (bidi) text operations."}, "WidgetPositionAlign": {"name": "WidgetPositionAlign", "namespace": "", "module": "widget-position-align", "events": {"alignChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "alignChange", "description": "Fires when the value for the configuration attribute 'align' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "centeredChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "centeredChange", "description": "Fires when the value for the configuration attribute 'centered' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"centered": {"default": "false", "type": "{boolean | node}", "description": "A convenience attribute, which can be used as a shortcut for the align attribute.\nIf set to true, the Widget is centered in the viewport. If set to a node reference or valid selector string,\nthe Widget will be centered within the node. If set the false, no center positioning is applied.", "guessedname": "centered", "guessedtype": "property"}, "align": {"default": "null", "type": "Object", "desciption": "The align attribute is used to align a reference point on the widget, with the refernce point on another node, or the viewport. \nThe object which align expects has the following properties:\n<dl>\n<dt>node</dt>\n<dd>\nThe node to which the Widget is to be aligned. If set to null, or not provided, the Widget is aligned to the viewport\n</dd>\n<dt>points</dt>\n<dd>\n<p>\nA two element array, defining the two points on the Widget and node/viewport which are to be aligned. The first element is the point on the Widget, and the second element is the point on the node/viewport.\nSupported alignment points are defined as static properties on <code>WidgetPositionAlign</code>.\n</p>\n<p>\ne.g. <code>[WidgetPositionAlign.TR, WidgetPositionAlign.TL]</code> aligns the Top-Right corner of the Widget with the\nTop-Left corner of the node/viewport, and <code>[WidgetPositionAlign.CC, WidgetPositionAlign.TC]</code> aligns the Center of the \nWidget with the Top-Center edge of the node/viewport.\n</p>\n</dd>\n</dl>", "guessedname": "align", "guessedtype": "property"}}, "methods": {"_doAlign": {"guessedname": "_doAlign", "params": [{"type": "String", "name": "widgetPoint", "description": " Supported point constant (e.g. WidgetPositionAlign.TL)"}, {"type": "Number", "name": "x", "description": " X page co-ordinate to align to"}, {"type": "Number", "name": "y", "description": " Y page co-ordinate to align to"}], "description": "Helper method, used to align the given point on the widget, with the XY page co-ordinates provided.", "private": "", "guessedtype": "function"}, "centered": {"params": [{"type": "Node | String", "name": "node", "description": " Optional. A node reference or selector string defining the node \ninside which the Widget is to be centered. If not passed in, the Widget will be centered in the \nviewport."}], "description": "Centers the container in the viewport, or if a node is passed in,\nthe node.", "guessedname": "centered", "guessedtype": "function"}, "_syncUIPosAlign": {"protected": "", "description": "Synchronizes the UI to match the Widgets align configuration.\nThis method in invoked after syncUI is invoked for the Widget class\nusing YUI's aop infrastructure.", "guessedname": "_syncUIPosAlign", "guessedtype": "function"}, "_setAlignCenter": {"return": {"type": "Number", "description": "The attribute value being set."}, "description": "Default setter for center attribute changes. Sets up the appropriate value, and passes \nit through the to the align attribute.", "protected": "", "params": [{"type": "boolean | node", "name": "The", "description": " attribute value being set."}], "guessedname": "_setAlignCenter", "guessedtype": "function"}, "_bindUIStack": {"protected": "", "description": "Binds event listeners responsible for updating the UI state in response to \nWidget extended positioning related state changes.\n<p>\nThis method is invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n</p>", "guessedname": "_bindUIPosAlign", "guessedtype": "function"}, "_uiSetAlign": {"protected": "", "params": [{"type": "Node | null", "name": "The", "description": " node to align to, or null to indicate the viewport"}], "description": "Updates the UI to reflect the align value passed in (see the align attribute documentation, for the object stucture expected)", "guessedname": "_uiSetAlign", "guessedtype": "function"}, "_afterAlignChange": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": " The event facade for the attribute change"}], "description": "Default attribute change listener for the align attribute, responsible\nfor updating the UI, in response to attribute changes.", "guessedname": "_afterAlignChange", "guessedtype": "function"}, "align": {"params": [{"type": "Node | String | null", "name": "node", "description": " A reference (or selector string) for the Node which with the Widget is to be aligned.\nIf null is passed in, the Widget will be aligned with the viewport."}, {"type": "Array[2]", "name": "points", "description": " A two element array, specifying the points on the Widget and node/viewport which need to be aligned. \nThe first entry is the point on the Widget, and the second entry is the point on the node/viewport which need to align.\nValid point references are defined as static constants on the WidgetPositionAlign class. \ne.g. [WidgetPositionAlign.TL, WidgetPositionAlign.TR] will align the top-left corner of the Widget with the top-right corner of the node/viewport."}], "description": "Aligns the Widget to the provided node (or viewport) using the provided\npoints. The method can be invoked directly, however it will result in \nthe align attribute being out of sync with current position of the of Widget.", "guessedname": "align", "guessedtype": "function"}}, "param": "{Object} User configuration object", "file": "Widget-PositionAlign.js", "shortname": "WidgetPositionAlign", "properties": {"WidgetPositionAlign.BR": {"description": "Constant used to specify the bottom-right corner for alignment", "value": "\"br\"", "static": "", "guessedname": "BR", "guessedtype": "property", "type": "String"}, "WidgetPositionAlign.RC": {"description": "Constant used to specify the right edge, center point for alignment", "value": "\"rc\"", "static": "", "guessedname": "RC", "guessedtype": "property", "type": "String"}, "WidgetPositionAlign.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration introduced by WidgetPositionAlign.", "guessedname": "ATTRS", "guessedtype": "property"}, "WidgetPositionAlign.TR": {"description": "Constant used to specify the top-right corner for alignment", "value": "\"tr\"", "static": "", "guessedname": "TR", "guessedtype": "property", "type": "String"}, "WidgetPositionAlign.BC": {"description": "Constant used to specify the bottom edge, center point for alignment", "value": "\"bc\"", "static": "", "guessedname": "BC", "guessedtype": "property", "type": "String"}, "WidgetPositionAlign.CC": {"description": "Constant used to specify the center of widget/node/viewport for alignment", "value": "\"cc\"", "static": "", "guessedname": "CC", "guessedtype": "property", "type": "String"}, "WidgetPositionAlign.LC": {"description": "Constant used to specify the left edge, center point for alignment", "value": "\"lc\"", "static": "", "guessedname": "LC", "guessedtype": "property", "type": "String"}, "WidgetPositionAlign.TL": {"description": "Constant used to specify the top-left corner for alignment", "value": "\"tl\"", "static": "", "guessedname": "TL", "guessedtype": "property", "type": "String"}, "WidgetPositionAlign.TC": {"description": "Constant used to specify the top edge-center point for alignment", "value": "\"tc\"", "static": "", "guessedname": "TC", "guessedtype": "property", "type": "String"}, "WidgetPositionAlign.BL": {"description": "Constant used to specify the bottom-left corner for alignment", "value": "\"bl\"", "static": "", "guessedname": "BL", "guessedtype": "property", "type": "String"}}, "description": "Widget extension, which can be used to add extended XY positioning support to the base Widget class,\nthrough the <a href=\"Base.html#method_build\">Base.build</a> method. This extension requires that \nthe WidgetPosition extension be added to the Widget (before WidgetPositionAlign, if part of the same \nextension list passed to Base.build)."}, "ValueChange": {"name": "ValueChange", "namespace": "", "module": "event-valuechange", "guessedname": "YArray", "methods": {"_refreshTimeout": {"description": "Restarts the inactivity timeout for the specified node.", "protected": "", "static": "", "guessedname": "_refreshTimeout", "guessedtype": "function", "params": [{"type": "Node", "name": "node", "description": ""}, {"type": "String", "name": "stamp", "description": ""}]}, "_onFocus": {"description": "Resets a node's history and starts polling when a focus event occurs.", "protected": "", "static": "", "guessedname": "_onFocus", "guessedtype": "function", "params": [{"type": "EventFacade", "name": "e", "description": ""}]}, "_onMouseDown": {"description": "Starts polling when a node receives a mouseDown event.", "protected": "", "static": "", "guessedname": "_onMouseDown", "guessedtype": "function", "params": [{"type": "EventFacade", "name": "e", "description": ""}]}, "_startPolling": {"description": "Begins polling for changes to the <code>value</code> property of the\nspecified node. If polling is already underway for the specified node,\nit will not be restarted unless the <i>force</i> parameter is\n<code>true</code>", "protected": "", "static": "", "guessedname": "_startPolling", "guessedtype": "function", "params": [{"type": "Node", "name": "node", "description": " Node to watch."}, {"type": "String", "name": "stamp", "description": " (optional) Object stamp for the node. Will be\ngenerated if not provided (provide it to improve performance)."}, {"type": "EventFacade", "name": "e", "description": " (optional) Event facade of the event that\ninitiated the polling (if any)."}, {"type": "Boolean", "name": "force", "description": " (optional) If <code>true</code>, polling will be\nrestarted even if we're already polling this node."}]}, "_stopTimeout": {"description": "Clears the inactivity timeout for the specified node, if any.", "protected": "", "static": "", "guessedname": "_stopTimeout", "guessedtype": "function", "params": [{"type": "Node", "name": "node", "description": ""}, {"type": "String", "name": "stamp", "description": " (optional)"}]}, "_stopPolling": {"description": "Stops polling for changes to the specified node's <code>value</code>\nattribute.", "protected": "", "static": "", "guessedname": "_stopPolling", "guessedtype": "function", "params": [{"type": "Node", "name": "node", "description": ""}, {"type": "String", "name": "stamp", "description": " (optional)"}]}, "_poll": {"description": "Called at an interval to poll for changes to the value of the specified\nnode.", "protected": "", "static": "", "guessedname": "_poll", "guessedtype": "function", "params": [{"type": "Node", "name": "node", "description": ""}, {"type": "String", "name": "stamp", "description": ""}, {"type": "EventFacade", "name": "e", "description": ""}]}, "_onUnsubscribe": {"description": "Called when event-valuechange loses a subscriber.", "protected": "", "static": "", "guessedname": "_onUnsubscribe", "guessedtype": "function", "params": [{"type": "Node", "name": "node", "description": ""}, {"type": "Subscription", "name": "subscription", "description": ""}, {"type": "SyntheticEvent.Notifier", "name": "notifier", "description": ""}]}, "_onSubscribe": {"description": "Called when event-valuechange receives a new subscriber.", "protected": "", "static": "", "guessedname": "_onSubscribe", "guessedtype": "function", "params": [{"type": "Node", "name": "node", "description": ""}, {"type": "Subscription", "name": "subscription", "description": ""}, {"type": "SyntheticEvent.Notifier", "name": "notifier", "description": ""}]}, "_onKeyDown": {"description": "Starts polling when a node receives a keyDown event.", "protected": "", "static": "", "guessedname": "_onKeyDown", "guessedtype": "function", "params": [{"type": "EventFacade", "name": "e", "description": ""}]}, "_onBlur": {"description": "Stops polling when a node's blur event fires.", "protected": "", "static": "", "guessedname": "_onBlur", "guessedtype": "function", "params": [{"type": "EventFacade", "name": "e", "description": ""}]}, "_onKeyUp": {"description": "Starts polling when an IME-related keyUp event occurs on a node.", "protected": "", "static": "", "guessedname": "_onKeyUp", "guessedtype": "function", "params": [{"type": "EventFacade", "name": "e", "description": ""}]}}, "static": "", "file": "event-valuechange.js", "guessedtype": "property", "shortname": "ValueChange", "properties": {"POLL_INTERVAL": {"description": "Interval (in milliseconds) at which to poll for changes to the value of\nan element with one or more <code>valueChange</code> subscribers when the\nuser is likely to be interacting with it.", "default": "50", "static": "", "guessedname": "POLL_INTERVAL", "guessedtype": "property", "type": "Number"}, "TIMEOUT": {"description": "Timeout (in milliseconds) after which to stop polling when there hasn't\nbeen any new activity (keypresses, mouse clicks, etc.) on an element.", "default": "10000", "static": "", "guessedname": "TIMEOUT", "guessedtype": "property", "type": "Number"}}, "description": "Provides the implementation for the synthetic <code>valueChange</code> event."}, "ClickableRail": {"name": "ClickableRail", "configs": {"clickableRail": {"default": "true", "type": "{Boolean}", "description": "Enable or disable clickable rail support.", "guessedname": "clickableRail", "guessedtype": "property"}}, "namespace": "", "module": "slider", "methods": {"_defRailMouseDownFn": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the EventFacade for the railMouseDown custom event"}], "description": "Default behavior for the railMouseDown event.  Centers the thumb at\nthe click location and passes control to the DDM to behave as though\nthe thumb itself were clicked in preparation for a drag operation.", "guessedname": "_defRailMouseDownFn", "guessedtype": "function"}, "_resolveThumb": {"return": {"type": "Y.DD.Drag", "description": "the Drag instance that should be moved"}, "description": "Resolves which thumb to actuate if any.  Override this if you want to\nsupport multiple thumbs.  By default, returns the Drag instance for\nthe thumb stored by the Slider.", "protected": "", "params": [{"type": "DOMEvent", "name": "e", "description": "  the mousedown event object"}], "guessedname": "_resolveThumb", "guessedtype": "function"}, "_getThumbDestination": {"return": {"type": "Array", "description": "the [top, left] pixel position of the destination"}, "description": "Calculates the top left position the thumb should be moved to to\nalign the click XY with the center of the specified node.", "protected": "", "params": [{"type": "DOMEvent", "name": "e", "description": "  The mousedown event object"}, {"type": "Node", "name": "node", "description": "  The node to position"}], "guessedname": "_getThumbDestination", "guessedtype": "function"}, "_bindClickableRail": {"protected": "", "description": "Attaches DOM event subscribers to support rail interaction.", "guessedname": "_bindClickableRail", "guessedtype": "function"}, "_onRailMouseDown": {"protected": "", "params": [{"type": "DOMEvent", "name": "e", "description": "  the mousedown event object"}], "description": "Dispatches the railMouseDown event.", "guessedname": "_onRailMouseDown", "guessedtype": "function"}, "_unbindClickableRail": {"protected": "", "description": "Detaches DOM event subscribers for cleanup/destruction cycle.", "guessedname": "_unbindClickableRail", "guessedtype": "function"}, "_initClickableRail": {"protected": "", "description": "Initializes the internal state and sets up events.", "guessedname": "_initClickableRail", "guessedtype": "function"}}, "file": "clickable-rail.js", "shortname": "ClickableRail", "events": {"railMouseDown": {"preventable": "_defRailMouseDownFn", "description": "Broadcasts when the rail has received a mousedown event and\ntriggers the thumb positioning.  Use\n<code>e.preventDefault()</code> or\n<code>set(&quot;clickableRail&quot;, false)</code> to prevent\nthe thumb positioning."}, "clickableRailChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "clickableRailChange", "description": "Fires when the value for the configuration attribute 'clickableRail' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "description": "Slider extension that allows clicking on the Slider's rail element,\ntriggering the thumb to align with the location of the click."}, "DataType.Date.Locale": {"name": "DataType.Date.Locale", "deprecated": "- use Y.config.lang to request one of many built-in languages instead.", "namespace": "", "module": "datatype", "guessedname": "YDateEn", "static": "", "file": "datatype-date-locale.js", "guessedtype": "property", "shortname": "DataType.Date.Locale", "requires": "oop", "description": "The Date.Locale class is a container for all localised date strings\nused by Y.DataType.Date. It is used internally, but may be extended\nto provide new date localisations.\nTo create your own Locale, follow these steps:\n<ol>\n<li>Find an existing locale that matches closely with your needs</li>\n<li>Use this as your base class.  Use Y.DataType.Date.Locale[\"en\"] if nothing\nmatches.</li>\n<li>Create your own class as an extension of the base class using\nY.merge, and add your own localisations where needed.</li>\n</ol>\nSee the Y.DataType.Date.Locale[\"en-US\"] and Y.DataType.Date.Locale[\"en-GB\"]\nclasses which extend Y.DataType.Date.Locale[\"en\"].\nFor example, to implement locales for French french and Canadian french,\nwe would do the following:\n<ol>\n<li>For French french, we have no existing similar locale, so use\nY.DataType.Date.Locale[\"en\"] as the base, and extend it:\n<pre>\nY.DataType.Date.Locale[\"fr\"] = Y.merge(Y.DataType.Date.Locale, {\na: [\"dim\", \"lun\", \"mar\", \"mer\", \"jeu\", \"ven\", \"sam\"],\nA: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"],\nb: [\"jan\", \"f&eacute;v\", \"mar\", \"avr\", \"mai\", \"jun\", \"jui\", \"ao&ucirc;\", \"sep\", \"oct\", \"nov\", \"d&eacute;c\"],\nB: [\"janvier\", \"f&eacute;vrier\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"ao&ucirc;t\", \"septembre\", \"octobre\", \"novembre\", \"d&eacute;cembre\"],\nc: \"%a %d %b %Y %T %Z\",\np: [\"\", \"\"],\nP: [\"\", \"\"],\nx: \"%d.%m.%Y\",\nX: \"%T\"\n});\n</pre>\n</li>\n<li>For Canadian french, we start with French french and change the meaning of \\%x:\n<pre>\nY.DataType.Date.Locale[\"fr-CA\"] = Y.merge(Y.DataType.Date.Locale[\"fr\"], {\nx: \"%Y-%m-%d\"\n});\n</pre>\n</li>\n</ol>\nWith that, you can use your new locales:\n<pre>\nvar d = new Date(\"2008/04/22\");\nY.DataType.Date.format(d, { format: \"%A, %d %B == %x\", locale: \"fr\" });\n</pre>\nwill return:\n<pre>\nmardi, 22 avril == 22.04.2008\n</pre>\nAnd\n<pre>\nY.DataType.Date.format(d, {format: \"%A, %d %B == %x\", locale: \"fr-CA\" });\n</pre>\nWill return:\n<pre>\nmardi, 22 avril == 2008-04-22\n</pre>"}, "EventFacade": {"file": "event-facade.js", "description": "Wraps and protects a custom event for use when emitFacade is set to true.\nRequires the event-custom-complex module", "namespace": "", "module": "event-custom", "methods": {"stopImmediatePropagation": {"description": "Stops the propagation to the next bubble target and\nprevents any additional listeners from being exectued\non the current target.", "guessedname": "stopImmediatePropagation", "guessedtype": "function"}, "stopPropagation": {"description": "Stops the propagation to the next bubble target", "guessedname": "stopPropagation", "guessedtype": "function"}, "preventDefault": {"description": "Prevents the event's default behavior", "guessedname": "preventDefault", "guessedtype": "function"}, "halt": {"params": [{"type": "boolean", "name": "immediate", "description": "  if true additional listeners\non the current target will not be executed"}], "description": "Stops the event propagation and prevents the default\nevent behavior.", "guessedname": "halt", "guessedtype": "function"}}, "param": "e {Event} the custom event", "guessedname": "EventFacade", "guessedtype": "function", "shortname": "EventFacade", "properties": {"relatedTarget": {"type": "Node", "propery": "relatedTarget", "description": "Node reference to the relatedTarget", "guessedname": "relatedTarget", "guessedtype": "property"}, "type": {"type": "string", "description": "The event type, this can be overridden by the fire() payload", "guessedname": "type", "guessedtype": "property"}, "details": {"type": "Array", "description": "The arguments passed to fire", "guessedname": "details", "guessedtype": "property"}, "currentTarget": {"type": "Node", "propery": "currentTarget", "description": "Node reference for the element that the listener was attached to.", "guessedname": "currentTarget", "guessedtype": "property"}, "target": {"type": "Node", "propery": "target", "description": "Node reference for the targeted eventtarget", "guessedname": "target", "guessedtype": "property"}}, "name": "EventFacade"}, "DataSourceTextSchema": {"name": "DataSourceTextSchema", "namespace": "", "module": "datasource", "guessedname": "DataSourceTextSchema", "methods": {"_beforeDefDataFn\n<dl>\n<dt>tId (Number)</dt> <dd>Unique transaction ID.</dd>\n<dt>request (Object)</dt> <dd>The request.</dd>\n<dt>callback (Object)</dt> <dd>The callback object with the following properties:\n<dl>\n<dt>success (Function)</dt> <dd>Success handler.</dd>\n<dt>failure (Function)</dt> <dd>Failure handler.</dd>\n</dl>\n</dd>\n<dt>data (Object)</dt> <dd>Raw data.</dd>\n</dl>": {"protected": "", "description": "Parses raw data into a normalized response.", "guessedname": "_beforeDefDataFn", "guessedtype": "function"}, "initializer": {"guessedname": "initializer", "params": [{"type": "Object", "name": "config", "description": "  Config object."}], "description": "Internal init() handler.", "private": "", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "datasource-textschema.js", "guessedtype": "function", "shortname": "DataSourceTextSchema", "properties": {"NS": {"description": "The namespace for the plugin. This will be the property on the host which\nreferences the plugin instance.", "value": "\"schema\"", "static": "", "guessedname": "NS", "guessedtype": "property", "type": "String", "final": ""}, "NAME": {"description": "Class name.", "value": "\"dataSourceTextSchema\"", "static": "", "guessedname": "NAME", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Adds schema-parsing to the DataSource Utility."}}, "version": "3.3.0", "namespaces": ["Plugin", "DD", "plugin", "", "Assert", "Coverage", "Mock", "Mock.Value", "Test"]}