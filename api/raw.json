{"majorversion": 3, "filemap": {"io-queue.js": {"classlist": [], "name": "io-queue.js", "module": "io"}, "queue-full.js": {"name": "queue-full.js", "classlist": [], "module": "queue", "guessedname": "EXEC", "guessedtype": "property", "property": "EXEC"}, "PluginHost.js": {"classlist": ["PluginHost"], "name": "PluginHost.js", "module": "widget"}, "node.js": {"classlist": ["NodeList"], "name": "node.js", "module": "node"}, "constrain.js": {"classlist": ["plugin.DragConstrained"], "name": "constrain.js", "module": "dd-plugin"}, "dd-plugin.js": {"classlist": ["plugin.DragPlugin"], "name": "dd-plugin.js", "module": "dd"}, "BaseBuild.js": {"name": "BaseBuild.js", "classlist": [], "module": "base", "guessedname": "B", "guessedtype": "property", "property": "B"}, "yui-object.js": {"classlist": ["YUI~object"], "name": "yui-object.js", "module": "yui"}, "io-upload-iframe.js": {"classlist": [], "name": "io-upload-iframe.js", "module": "io"}, "drag.js": {"classlist": ["plugin.Drag"], "name": "drag.js", "module": "dd"}, "event-ready.js": {"classlist": [], "name": "event-ready.js", "module": "event"}, "yui-core.js": {"classlist": [], "name": "yui-core.js", "module": "yui"}, "anim-node-plugin.js": {"classlist": [], "name": "anim-node-plugin.js", "module": "anim"}, "event-simulate.js": {"classlist": [], "name": "event-simulate.js", "module": "event-simulate"}, "Base.js": {"classlist": ["Base"], "name": "Base.js", "module": "widget"}, "ddm-drop.js": {"classlist": [], "name": "ddm-drop.js", "module": "dd"}, "io-xdr.js": {"classlist": [], "name": "io-xdr.js", "module": "io"}, "loader.js": {"classlist": ["Loader"], "name": "loader.js", "module": "yui"}, "mouseentermouseleave.js": {"name": "mouseentermouseleave.js", "classlist": [], "module": "event", "guessedname": "fireMouseEventForNode", "guessedtype": "function", "method": "fireMouseEventForNode"}, "substitute.js": {"classlist": ["YUI~substitute"], "name": "substitute.js", "module": "substitute"}, "node-style.js": {"classlist": [], "name": "node-style.js", "module": "node"}, "event.js": {"classlist": [], "name": "event.js", "module": "event-custom"}, "io-base.js": {"classlist": ["io"], "name": "io-base.js", "module": "io"}, "key.js": {"classlist": [], "name": "key.js", "module": "event"}, "TestRunner.js": {"classlist": ["Test.TestNode", "Test.Runner"], "name": "TestRunner.js", "module": "yuitest"}, "ddm-base.js": {"classlist": ["plugin.DDM"], "name": "ddm-base.js", "module": "dd"}, "node-class.js": {"classlist": [], "name": "node-class.js", "module": "node"}, "TestCase.js": {"classlist": ["Test.Case", "Test.Wait"], "name": "TestCase.js", "module": "yuitest"}, "node-menunav.js": {"classlist": ["plugin.NodeMenuNav"], "name": "node-menunav.js", "module": "node-menunav"}, "event-facade.js": {"classlist": ["EventFacade"], "name": "event-facade.js", "module": "event-custom"}, "available.js": {"classlist": [], "name": "available.js", "module": "event"}, "nodelist.js": {"classlist": ["NodeList"], "name": "nodelist.js", "module": "node"}, "proxy.js": {"classlist": ["plugin.DDProxy"], "name": "proxy.js", "module": "dd"}, "Cookie.js": {"classlist": ["Cookie"], "name": "Cookie.js", "module": "cookie"}, "oop.js": {"classlist": ["YUI~oop"], "name": "oop.js", "module": "oop"}, "queue-base.js": {"classlist": ["Queue"], "name": "queue-base.js", "module": "queue"}, "dump.js": {"classlist": ["YUI~dump"], "name": "dump.js", "module": "dump"}, "ArrayAssert.js": {"classlist": ["Test.ArrayAssert"], "name": "ArrayAssert.js", "module": "yuitest"}, "history.js": {"classlist": ["History", "History.Module"], "name": "history.js", "module": "history"}, "plugin.js": {"classlist": ["Plugin"], "name": "plugin.js", "module": "plugin"}, "anim.js": {"classlist": ["plugin.Anim"], "name": "anim.js", "module": "anim"}, "Widget-Stack.js": {"classlist": ["WidgetStack"], "name": "Widget-Stack.js", "module": "widget-stack"}, "node-region.js": {"classlist": [], "name": "node-region.js", "module": "node"}, "node-screen.js": {"classlist": [], "name": "node-screen.js", "module": "node"}, "json-parse.js": {"classlist": ["JSON"], "name": "json-parse.js", "module": "json"}, "array-extras.js": {"classlist": [], "name": "array-extras.js", "module": "yui"}, "io-form.js": {"classlist": [], "name": "io-form.js", "module": "io"}, "TestManager.js": {"classlist": ["Test.Manager"], "name": "TestManager.js", "module": "yuitest"}, "node-event-simulate.js": {"classlist": [], "name": "node-event-simulate.js", "module": "node"}, "stylesheet.js": {"name": "stylesheet.js", "classlist": [], "module": "substitute", "guessedname": "d", "guessedtype": "property", "property": "d"}, "yui.js": {"classlist": ["YUI"], "name": "yui.js", "module": "yui"}, "delegate.js": {"classlist": [], "name": "delegate.js", "module": "event"}, "anim-easing.js": {"classlist": ["Easing"], "name": "anim-easing.js", "module": "anim"}, "Widget-Position.js": {"classlist": ["WidgetPosition"], "name": "Widget-Position.js", "module": "widget-position"}, "classnamemanager.js": {"classlist": ["ClassNameManager"], "name": "classnamemanager.js", "module": "classnamemanager"}, "yui-base.js": {"classlist": [], "name": "yui-base.js", "module": "yui"}, "event-facade-dom.js": {"classlist": ["EventFacade"], "name": "event-facade-dom.js", "module": "event"}, "Attribute.js": {"classlist": ["Attribute"], "name": "Attribute.js", "module": "attribute"}, "TestSuite.js": {"classlist": ["Test.Suite"], "name": "TestSuite.js", "module": "yuitest"}, "yui-later.js": {"classlist": [], "name": "yui-later.js", "module": "yui"}, "event-do.js": {"classlist": ["Do", "Do.Method", "Do.AlterArgs", "Do.AlterReturn", "Do.Halt", "Do.Prevent", "Do.Error"], "name": "event-do.js", "module": "event"}, "json-stringify.js": {"classlist": [], "name": "json-stringify.js", "module": "json"}, "ddm.js": {"classlist": [], "name": "ddm.js", "module": "dd"}, "anim-scroll.js": {"classlist": [], "name": "anim-scroll.js", "module": "anim"}, "anim-color.js": {"classlist": [], "name": "anim-color.js", "module": "anim"}, "event-target.js": {"classlist": ["Event.Target", "EventTarget"], "name": "event-target.js", "module": "event-custom"}, "yui-lang.js": {"classlist": ["Lang"], "name": "yui-lang.js", "module": "yui"}, "anim-curve.js": {"classlist": [], "name": "anim-curve.js", "module": "anim"}, "event-ready-base.js": {"classlist": [], "name": "event-ready-base.js", "module": "event"}, "event-dom.js": {"classlist": ["Event"], "name": "event-dom.js", "module": "event"}, "console.js": {"classlist": ["Console"], "name": "console.js", "module": "console"}, "TestReporter.js": {"classlist": ["Test.Reporter"], "name": "TestReporter.js", "module": "yuitest"}, "Assert.js": {"classlist": ["Assert", "Assert.Error", "Assert.ComparisonFailure", "Assert.UnexpectedValue", "Assert.ShouldFail", "Assert.ShouldError", "Assert.UnexpectedError"], "name": "Assert.js", "module": "yuitest"}, "get.js": {"classlist": ["Get"], "name": "get.js", "module": "yui"}, "Widget-StdMod.js": {"classlist": ["WidgetStdMod"], "name": "Widget-StdMod.js", "module": "widget-stdmod"}, "yui-ua.js": {"classlist": ["UA"], "name": "yui-ua.js", "module": "yui"}, "Widget-PositionExt.js": {"classlist": ["WidgetPositionExt"], "name": "Widget-PositionExt.js", "module": "widget-position-ext"}, "Mock.js": {"classlist": ["Test.Format.Mock"], "name": "Mock.js", "module": "yuitest"}, "resize-window.js": {"classlist": [], "name": "resize-window.js", "module": "event"}, "State.js": {"classlist": ["State"], "name": "State.js", "module": "attribute"}, "focusblur.js": {"classlist": [], "name": "focusblur.js", "module": "event"}, "dd-drop-plugin.js": {"classlist": ["plugin.DropPlugin"], "name": "dd-drop-plugin.js", "module": "dd"}, "event-custom.js": {"classlist": ["EventHandle", "Event.Custom", "Subscriber"], "name": "event-custom.js", "module": "event"}, "TestFormat.js": {"classlist": [], "name": "TestFormat.js", "module": "yuitest"}, "Overlay.js": {"classlist": ["Overlay"], "name": "Overlay.js", "module": "overlay"}, "queue-io.js": {"name": "queue-io.js", "classlist": [], "module": "queue", "guessedname": "_protoInit", "guessedtype": "property", "property": "_protoInit"}, "scroll.js": {"classlist": ["Scroll", "plugin.DDWindowScroll", "plugin.DDNodeScroll"], "name": "scroll.js", "module": "dd"}, "anim-xy.js": {"classlist": [], "name": "anim-xy.js", "module": "anim"}, "DateAssert.js": {"classlist": ["Test.DateAssert"], "name": "DateAssert.js", "module": "yuitest"}, "ObjectAssert.js": {"classlist": ["Assert.ObjectAssert"], "name": "ObjectAssert.js", "module": "yuitest"}, "slider.js": {"classlist": ["Slider"], "name": "slider.js", "module": "slider"}, "drop.js": {"classlist": ["plugin.Drop"], "name": "drop.js", "module": "dd"}, "Widget.js": {"classlist": ["Widget"], "name": "Widget.js", "module": "widget"}}, "modules": {"dump": {"description": "Returns a simple string representation of the object or array.\nOther types of objects will be returned unprocessed.  Arrays\nare expected to be indexed.  Use object notation for\nassociative arrays.\nIf included, the dump method is added to the YUI instance.", "submodules": [], "classlist": ["YUI~dump"], "filelist": ["dump.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "dump"}, "attribute": {"description": "Managed Attribute Provider", "submodules": [], "classlist": ["Attribute", "State"], "filelist": ["Attribute.js", "State.js"], "subdata": {}, "guessedname": "O", "guessedtype": "property", "name": "attribute"}, "widget-stack": {"description": "Provides stackable (z-index) support for Widgets through an extension.", "submodules": [], "classlist": ["WidgetStack"], "filelist": ["Widget-Stack.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "widget-stack"}, "io": {"description": "HTTP communications module.", "submodules": ["io-upload-iframe", "io-xdr", "io-form"], "classlist": ["io"], "filelist": ["io-base.js", "io-queue.js", "io-upload-iframe.js", "io-xdr.js", "io-form.js"], "subdata": {"io-xdr": {"name": "io", "description": "Extends the IO base class to provide an alternate, Flash transport, for making\ncross-domain requests."}, "io-form": {"name": "io", "description": "Extends the IO base class to enable HTML form data serialization, when specified\nin the transaction's configuration object."}, "io-upload-iframe": {"name": "io", "description": "Extends the IO base class to enable file uploads, with HTML forms,\nusing an iframe as the transport medium."}}, "guessedname": "w", "guessedtype": "property", "name": "io"}, "event": {"description": "Custom event engine, DOM event listener abstraction layer, synthetic DOM \nevents.", "submodules": [], "classlist": ["Event", "EventFacade", "Event.Target", "EventTarget", "Do", "Do.Method", "Do.AlterArgs", "Do.AlterReturn", "Do.Halt", "Do.Prevent", "Do.Error", "EventHandle", "Event.Custom", "Subscriber"], "filelist": ["key.js", "event-ready-base.js", "event-ready.js", "focusblur.js", "event-dom.js", "available.js", "resize-window.js", "delegate.js", "event-facade-dom.js", "mouseentermouseleave.js", "event-do.js", "event-custom.js"], "subdata": {}, "guessedname": "GLOBAL_ENV", "guessedtype": "property", "name": "event"}, "substitute": {"description": "String variable substitution and string formatting.\nIf included, the substitute method is added to the YUI instance.", "submodules": [], "classlist": ["YUI~substitute"], "filelist": ["stylesheet.js", "substitute.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "substitute"}, "queue": {"description": "Mechanism for executing a series of callbacks in sequential order.  Supports\nsimple synchronous queueing as well as queuing callbacks across setTimeout.\nCallback iteration, specifying context and callback arguments, retrieval,\nremoval, and promotion of queued callbacks.\nPass in a configuration object with the same keys as a callback object (see\nthe add method) to set the default values for those keys on all callbacks\nadded to this Queue. E.g. <code>Y.Queue({ timeout : 50 });<\/code>", "submodules": ["queue-full", "queue-io", "queue-base"], "classlist": ["Queue"], "filelist": ["queue-full.js", "queue-io.js", "queue-base.js"], "subdata": {"queue-io": {"name": "Queue", "description": "Adds support for callback configuration key <code>pauseForIOResponse<\/code>.\nThis will trigger the Queue to pause until all Y.io requests issued from\ninside the callback have received a response."}, "queue-base": {"name": "Queue", "description": "Mechanism to execute a series of callbacks in sequence.\nCallbacks can be function references or object literals with the following\nkeys:\n<dl>\n<dt>fn<\/dt>\n<dd>{Function} REQUIRED the callback function.<\/dd>\n<dt>context<\/dt>\n<dd>{Object} the desired execution context of the callback function<\/dd>\n<dt>args<\/dt>\n<dd>{Array} list of arguments to pass to the callback function<\/dd>\n<\/dl>"}, "queue-full": {"name": "Queue", "description": "Mechanism for executing a series of callbacks in sequential order.  Supports\nsimple synchronous queueing as well as queuing callbacks across setTimeout.\nCallback iteration, specifying context and callback arguments, retrieval,\nremoval, and promotion of queued callbacks.\nPass in a configuration object with the same keys as a callback object (see\nthe add method) to set the default values for those keys on all callbacks\nadded to this Queue. E.g. <code>Y.Queue({ timeout : 50 });<\/code>"}}, "name": "queue"}, "console": {"description": "A user interface for viewing log messages.", "submodules": [], "classlist": ["Console"], "filelist": ["console.js"], "subdata": {}, "guessedname": "getCN", "guessedtype": "property", "name": "console"}, "overlay": {"description": "Provides a basic Overlay widget, with Standard Module content support. The Overlay widget\nprovides Page XY positioning support, alignment and centering support along with basic \nstackable support (z-index and shimming).", "submodules": [], "classlist": ["Overlay"], "filelist": ["Overlay.js"], "subdata": {}, "name": "overlay"}, "event-simulate": {"description": "Synthetic DOM events", "submodules": [], "classlist": [], "filelist": ["event-simulate.js"], "subdata": {}, "name": "event-simulate"}, "widget-position": {"description": "Provides basic XY positioning support for Widgets, though an extension", "submodules": [], "classlist": ["WidgetPosition"], "filelist": ["Widget-Position.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "widget-position"}, "json": {"description": "The JSON Utility provides methods to serialize JavaScript objects into\nJSON strings and parse JavaScript objects from strings containing JSON data.\nThree modules are available for inclusion:\n<ol>\n<li>1. <code>json-parse<\/code> for parsing JSON strings into native JavaScript data<\/li>\n<li>2. <code>json-stringify<\/code> for stringification of JavaScript objects into JSON strings<\/li>\n<li>3. <code>json<\/code> for both parsing and stringification<\/li>\n<\/ol>\nBoth <code>json-parse<\/code> and <code>json-stringify<\/code> create functions in a static JSON class under your YUI instance (e.g. Y.JSON.parse(..)).", "submodules": ["json-stringify", "json-parse"], "classlist": ["JSON"], "filelist": ["json-stringify.js", "json-parse.js"], "subdata": {"json-stringify": {"name": "JSON", "description": "Provides Y.JSON.stringify method for converting objects to JSON strings."}, "json-parse": {"name": "JSON", "description": "Provides Y.JSON.parse method to take JSON strings and return native\nJavaScript objects."}}, "static": "", "guessedname": "_toString", "guessedtype": "property", "name": "json"}, "dd-plugin": {"description": "This is a simple Drop plugin that can be attached to a Node via the plug method.", "submodules": ["dd-drop-plugin", "dd-plugin"], "classlist": ["plugin.DropPlugin", "plugin.DragPlugin"], "filelist": ["constrain.js"], "subdata": {"dd-drop-plugin": {"name": "plugin.DropPlugin", "description": "This is a simple Drop plugin that can be attached to a Node via the plug method."}, "dd-plugin": {"name": "plugin.DragPlugin", "description": "This is a simple Drag plugin that can be attached to a Node via the plug method."}}, "name": "dd-plugin"}, "node-menunav": {"description": "<p>The MenuNav Node Plugin makes it easy to transform existing list-based markup into traditional, \ndrop down navigational menus that are both accessible and easy to customize, and only require \na small set of dependencies.<\/p>\n<p>To use the MenuNav Node Plugin, simply pass a reference to the plugin to a Node instance's \n<code>plug<\/code> method.<\/p>\n<p>\n<code>\n&#60;script type=\"text\/javascript\"&#62;<br>\n<br>\n\/\/\tCall the \"use\" method, passing in \"node-menunav\".  This will load the <br>\n\/\/\tscript and CSS for the MenuNav Node Plugin and all of the required <br>\n\/\/\tdependencies.<br>\n<br>\nYUI().use(\"node-menunav\", function(Y) {<br>\n<br>\n\/\/\tUse the \"contentready\" event to initialize the menu when the subtree of <br>\n\/\/\telement representing the root menu (&#60;div id=\"menu-1\"&#62;) is ready to <br>\n\/\/\tbe scripted.<br>\n<br>\nY.on(\"contentready\", function () {<br>\n<br>\n\/\/\tThe scope of the callback will be a Node instance representing <br>\n\/\/\tthe root menu (&#60;div id=\"menu-1\"&#62;).  Therefore, since \"this\"<br>\n\/\/\trepresents a Node instance, it is possible to just call \"this.plug\"<br>\n\/\/\tpassing in a reference to the MenuNav Node Plugin.<br>\n<br>\nthis.plug(Y.plugin.NodeMenuNav);<br>\n<br>\n}, \"#menu-1\");<br>\n<br>\t\t\n}); <br>\n<br>\t\n&#60;\/script&#62;<br>\n<\/code>\n<\/p>\n<p>The MenuNav Node Plugin has several configuration properties that can be set via an \nobject literal that is passed as a second argument to a Node instance's <code>plug<\/code> method.\n<\/p>\n<p>\n<code>\n&#60;script type=\"text\/javascript\"&#62;<br>\n<br>\n\/\/\tCall the \"use\" method, passing in \"node-menunav\".  This will load the <br>\n\/\/\tscript and CSS for the MenuNav Node Plugin and all of the required <br>\n\/\/\tdependencies.<br>\n<br>\nYUI().use(\"node-menunav\", function(Y) {<br>\n<br>\n\/\/\tUse the \"contentready\" event to initialize the menu when the subtree of <br>\n\/\/\telement representing the root menu (&#60;div id=\"menu-1\"&#62;) is ready to <br>\n\/\/\tbe scripted.<br>\n<br>\nY.on(\"contentready\", function () {<br>\n<br>\n\/\/\tThe scope of the callback will be a Node instance representing <br>\n\/\/\tthe root menu (&#60;div id=\"menu-1\"&#62;).  Therefore, since \"this\"<br>\n\/\/\trepresents a Node instance, it is possible to just call \"this.plug\"<br>\n\/\/\tpassing in a reference to the MenuNav Node Plugin.<br>\n<br>\nthis.plug(Y.plugin.NodeMenuNav, { mouseOutHideDelay: 1000 });<br>\n<br>\n}, \"#menu-1\");<br>\n<br>\t\t\n}); <br>\n<br>\t\n&#60;\/script&#62;<br>\n<\/code>\n<\/p>\n<p> The complete list of the MenuNav Node Plugin configuration properties are:<\/p>\n<dl>\n<dt>useARIA<\/dt>\n<dd>Boolean indicating if use of the WAI-ARIA Roles and States should be enabled for the \nMenuNav.  Set to true by default for Firefox 3 and Internet Explorer 8 as currently only \nthese browsers have support for ARIA, and are supported by several screen readers for \nWindows that also offer support for ARIA.<\/dd>\n<dt>autoSubmenuDisplay<\/dt>\n<dd>Boolean indicating if submenus are automatically made visible when the user mouses over \nthe menu's items.  Set to true by default.<\/dd>\n<dt>submenuShowDelay<\/dt>\n<dd>Number indicating the time (in milliseconds) that should expire before a submenu is \nmade visible when the user mouses over the menu's label.  Set to 250 by default.<\/dd>\n<dt>submenuHideDelay<\/dt>\n<dd>Number indicating the time (in milliseconds) that should expire before a submenu is \nhidden when the user mouses out of a menu label heading in the direction of a submenu.  \nSet to 250 by default.<\/dd>\n<dt>mouseOutHideDelay<\/dt>\n<dd>Number indicating the time (in milliseconds) that should expire before a submenu is \nhidden when the user mouses out of it.  Set to 750 by default.<\/dd>\n<\/dl>", "submodules": [], "classlist": ["plugin.NodeMenuNav"], "filelist": ["node-menunav.js"], "subdata": {}, "name": "node-menunav"}, "node": {"description": "The NodeList Utility provides a DOM-like interface for interacting with DOM nodes.", "submodules": ["node-list", "node-base", "node-style", "node-screen", "node", "node-screen"], "classlist": ["NodeList", "NodeList"], "filelist": ["node-event-simulate.js", "nodelist.js", "node.js", "node-style.js", "node-screen.js", "node-class.js", "node-region.js"], "subdata": {"node-list": {"name": "NodeList", "description": "The NodeList class provides a wrapper for manipulating DOM NodeLists.\nNodeList properties can be accessed via the set\/get methods.\nUse Y.get() to retrieve NodeList instances.\n<strong>NOTE:<\/strong> NodeList properties are accessed using\nthe <code>set<\/code> and <code>get<\/code> methods."}, "node": {"name": "Node", "description": "Extended Node interface for managing classNames."}, "node-base": {"name": "NodeList", "description": "The NodeList class provides a wrapper for manipulating DOM NodeLists.\nNodeList properties can be accessed via the set\/get methods.\nUse Y.get() to retrieve NodeList instances.\n<strong>NOTE:<\/strong> NodeList properties are accessed using\nthe <code>set<\/code> and <code>get<\/code> methods."}, "node-screen": {"name": "Node", "description": "Extended Node interface for managing regions and screen positioning.\nAdds support for positioning elements and normalizes window size and scroll detection."}, "node-style": {"name": "Node", "description": "Extended Node interface for managing node styles."}}, "guessedname": "methods", "guessedtype": "property", "name": "node"}, "widget": {"description": "Provides the base Widget class", "submodules": [], "classlist": ["PluginHost", "Widget"], "filelist": ["PluginHost.js", "Base.js", "Widget.js"], "subdata": {}, "name": "widget"}, "anim": {"description": "Y.Animation Utility.", "submodules": ["anim-scroll", "anim-curve", "anim-easing", "anim-xy", "anim-node-plugin", "anim-color"], "classlist": ["Easing", "plugin.Anim"], "filelist": ["anim-scroll.js", "anim-curve.js", "anim-easing.js", "anim-xy.js", "anim-node-plugin.js", "anim-color.js", "anim.js"], "subdata": {"anim-node-plugin": {"name": "Anim", "description": "Binds an Anim instance to a Node instance"}, "anim-scroll": {"name": "Anim", "description": "Adds support for the <code>scroll<\/code> property in <code>to<\/code>\nand <code>from<\/code> attributes."}, "anim-xy": {"name": "Anim", "description": "Adds support for the <code>xy<\/code> property in <code>from<\/code> and \n<code>to<\/code> attributes."}, "anim-color": {"name": "Anim", "description": "Adds support for color properties in <code>to<\/code>\nand <code>from<\/code> attributes."}, "anim-curve": {"name": "Anim", "description": "Adds support for the <code>curve<\/code> property for the <code>to<\/code> \nattribute.  A curve is zero or more control points and an end point."}, "anim-easing": {"name": "Easing", "description": "The easing module provides methods for customizing\nhow an animation behaves during each run."}}, "guessedname": "NUM", "guessedtype": "property", "name": "anim"}, "dd": {"description": "Extends the dd-ddm Class to add support for the placement of Drop Target shims inside the viewport shim. It also handles all Drop Target related events and interactions.", "submodules": ["dd-ddm-drop", "dd-scroll", "dd-constrain", "dd-drag", "dd-ddm", "dd-drop", "dd-ddm-base", "dd-proxy"], "classlist": ["Scroll", "plugin.DDWindowScroll", "plugin.DDNodeScroll", "plugin.DragConstrained", "plugin.Drag", "plugin.Drop", "plugin.DDM", "plugin.DDProxy"], "filelist": ["ddm-drop.js", "scroll.js", "dd-drop-plugin.js", "drag.js", "ddm.js", "drop.js", "ddm-base.js", "proxy.js", "dd-plugin.js"], "subdata": {"dd-ddm-drop": {"name": "DDM", "description": "Extends the dd-ddm Class to add support for the placement of Drop Target shims inside the viewport shim. It also handles all Drop Target related events and interactions."}, "dd-constrain": {"name": "plugin.DragConstrained", "description": "This is a plugin for the dd-drag module to add the constraining methods to it. It supports constraining to a region, node or viewport. It also\nsupports tick based moves and XY axis constraints."}, "dd-drop": {"name": "plugin.Drop", "description": "This class provides the ability to create a Drop Target."}, "dd-scroll": {"name": "plugin.DDNodeScroll", "description": "Extends the Scroll class to make a parent node scroll while dragging."}, "dd-ddm": {"name": "DDM", "description": "Extends the dd-ddm-base Class to add support for the viewport shim to allow a draggable node to drag to be dragged over an iframe or any other node that traps mousemove events.\nIt is also required to have Drop Targets enabled, as the viewport shim will contain the shims for the Drop Targets."}, "dd-drag": {"name": "plugin.Drag", "description": "This class provides the ability to drag a Node."}, "dd-proxy": {"name": "plugin.DDProxy", "description": "This plugin for dd-drag is for creating a proxy drag node, instead of dragging the original node."}, "dd-ddm-base": {"name": "plugin.DDM", "description": "Provides the base Drag Drop Manger required for making a Node draggable."}}, "name": "dd"}, "yuitest": {"description": "YUI JavaScript Testing Framework", "submodules": [], "classlist": ["Assert", "Assert.Error", "Assert.ComparisonFailure", "Assert.UnexpectedValue", "Assert.ShouldFail", "Assert.ShouldError", "Assert.UnexpectedError", "Assert.ObjectAssert", "Test.Suite", "Test.Format.Mock", "Test.Case", "Test.Wait", "Test.TestNode", "Test.Runner", "Test.DateAssert", "Test.Reporter", "Test.Manager", "Test.ArrayAssert"], "filelist": ["Assert.js", "ObjectAssert.js", "TestSuite.js", "TestFormat.js", "Mock.js", "TestCase.js", "TestRunner.js", "DateAssert.js", "TestReporter.js", "TestManager.js", "ArrayAssert.js"], "subdata": {}, "name": "yuitest"}, "slider": {"description": "Create a sliding value range input visualized as a draggable thumb on a\nbackground element.", "submodules": [], "classlist": ["Slider"], "filelist": ["slider.js"], "subdata": {}, "guessedname": "SLIDER", "guessedtype": "property", "name": "slider"}, "base": {"description": "Base class support for objects requiring managed attributes and acting as event targets. \nThe base module also provides an augmentable PluginHost interface.", "submodules": [], "classlist": ["Base"], "filelist": ["BaseBuild.js"], "subdata": {}, "guessedname": "O", "guessedtype": "property", "name": "base"}, "cookie": {"description": "Utilities for cookie management", "submodules": [], "classlist": ["Cookie"], "filelist": ["Cookie.js"], "subdata": {}, "name": "cookie"}, "oop": {"description": "Supplies object inheritance and manipulation utilities.  This adds\nadditional functionaity to what is provided in yui-base, and the\nmethods are applied directly to the YUI instance.  This module\nis required for most YUI components.", "submodules": [], "classlist": ["YUI~oop"], "filelist": ["oop.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "oop"}, "widget-stdmod": {"description": "Provides standard module support for Widgets through an extension.", "submodules": [], "classlist": ["WidgetStdMod"], "filelist": ["Widget-StdMod.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "widget-stdmod"}, "widget-position-ext": {"description": "Provides extended\/advanced XY positioning support for Widgets, through an extension.\nIt builds on top of the widget-position module, to provide alignmentment and centering support.\nFuture releases aim to add constrained and fixed positioning support.", "submodules": [], "classlist": ["WidgetPositionExt"], "filelist": ["Widget-PositionExt.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "widget-position-ext"}, "plugin": {"description": "Provides the base Plugin class for building widget plugins.", "submodules": [], "classlist": ["Plugin"], "filelist": ["plugin.js"], "subdata": {}, "name": "plugin"}, "classnamemanager": {"description": "Contains a singleton (ClassNameManager) that enables easy creation and caching of \nprefixed class names.", "submodules": [], "classlist": ["ClassNameManager"], "filelist": ["classnamemanager.js"], "subdata": {}, "name": "classnamemanager"}, "yui": {"description": "Collection utilities beyond what is provided in the YUI core", "submodules": ["yui-base", "get", "loader"], "classlist": ["YUI~object", "YUI", "Get", "Loader", "UA", "Lang"], "filelist": ["yui-object.js", "yui-base.js", "yui.js", "yui-core.js", "yui-later.js", "get.js", "loader.js", "yui-ua.js", "yui-lang.js", "array-extras.js"], "subdata": {"loader": {"name": "Lang", "description": "Provides the language utilites and extensions used by the library"}, "yui-base": {"name": "YUI~object", "description": "YUI stub"}, "get": {"name": "Get", "description": "Fetches and inserts one or more script or link nodes into the document"}}, "guessedname": "ua", "guessedtype": "property", "name": "yui"}, "event-custom": {"description": "Custom event engine", "submodules": [], "classlist": ["EventFacade"], "filelist": ["event.js", "event-facade.js", "event-target.js"], "subdata": {}, "guessedname": "evt", "guessedtype": "property", "name": "event-custom"}, "history": {"description": "The Browser History Utility provides the ability to use the back\/forward\nnavigation buttons in a DHTML application. It also allows a DHTML\napplication to be bookmarked in a specific state.\nThis utility requires the following static markup:\n&lt;iframe id=\"yui-history-iframe\" src=\"path-to-real-asset-in-same-domain\"&gt;&lt;\/iframe&gt;\n&lt;input id=\"yui-history-field\" type=\"hidden\"&gt;", "submodules": [], "classlist": ["History", "History.Module"], "filelist": ["history.js"], "subdata": {}, "name": "history"}}, "classmap": {"plugin.DDM": {"properties": {"_drags": {"guessedname": "_drags", "type": "{Array}", "description": "Holder for all registered drag elements.", "private": "", "guessedtype": "property"}, "CSS_PREFIX": {"type": "{String}", "description": "The PREFIX to attach to all DD CSS class names", "guessedname": "CSS_PREFIX", "guessedtype": "property"}, "activeDrag": {"type": "{Drag}", "description": "A reference to the currently active draggable object.", "guessedname": "activeDrag", "guessedtype": "property"}}, "name": "plugin.DDM", "constructors": [{"description": "Provides the base Drag Drop Manger required for making a Node draggable."}], "namespace": "plugin", "module": "dd", "events": {"dragCursorChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "dragCursorChange", "description": "Fires when the value for the configuration attribute 'dragCursor' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "clickPixelThreshChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "clickPixelThreshChange", "description": "Fires when the value for the configuration attribute 'clickPixelThresh' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "clickTimeThreshChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "clickTimeThreshChange", "description": "Fires when the value for the configuration attribute 'clickTimeThresh' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "dragModeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "dragModeChange", "description": "Fires when the value for the configuration attribute 'dragMode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "DDMBase", "methods": {"_move": {"guessedname": "_move", "params": [{"type": "Event", "name": "ev", "description": " The Dom mousemove Event"}], "description": "Internal listener for the mousemove DOM event to pass to the Drag's move method.", "private": "", "guessedtype": "function"}, "cssSizestoObject": {"return": {"type": "Object", "description": "The gutter Object Literal."}, "description": "\/\/TODO Private, rename??...", "private": "", "params": [{"type": "String", "name": "gutter", "description": " CSS style string for gutter: '5 0' (sets top and bottom to 5px, left and right to 0px), '1 2 3 4' (top 1px, right 2px, bottom 3px, left 4px)"}], "guessedname": "cssSizestoObject", "guessedtype": "function"}, "_unregDrag": {"guessedname": "_unregDrag", "params": [{"type": "Drag", "name": "d", "description": " The drag object."}], "description": "Remove this drag object from the DDM._drags array.", "private": "", "guessedtype": "function"}, "_endDrag": {"description": "Factory method to be overwritten by other DDM's", "private": "", "guessedname": "_endDrag", "guessedtype": "function"}, "_init": {"description": "DDM's init method", "private": "", "guessedname": "initializer", "guessedtype": "function"}, "_startDrag": {"guessedname": "_startDrag", "params": [{"type": "Number", "name": "x", "description": " The x position of the drag element"}, {"type": "Number", "name": "y", "description": " The y position of the drag element"}, {"type": "Number", "name": "w", "description": " The width of the drag element"}, {"type": "Number", "name": "h", "description": " The height of the drag element"}], "description": "Factory method to be overwritten by other DDM's", "private": "", "guessedtype": "function"}, "_regDrag": {"guessedname": "_regDrag", "params": [{"type": "Drag", "name": "d", "description": " The Drag object"}], "description": "Adds a reference to the drag object to the DDM._drags array, called in the constructor of Drag.", "private": "", "guessedtype": "function"}, "_end": {"description": "Internal method used by Drag to signal the end of a drag operation", "private": "", "guessedname": "_end", "guessedtype": "function"}, "stopDrag": {"chainable": "", "return": {"type": "Self", "description": ""}, "description": "Method will forcefully stop a drag operation. For example calling this from inside an ESC keypress handler will stop this drag.", "guessedname": "stopDrag", "guessedtype": "function"}, "_start": {"guessedname": "_start", "params": [{"type": "Number", "name": "x", "description": " The x position of the drag element"}, {"type": "Number", "name": "y", "description": " The y position of the drag element"}, {"type": "Number", "name": "w", "description": " The width of the drag element"}, {"type": "Number", "name": "h", "description": " The height of the drag element"}], "description": "Internal method used by Drag to signal the start of a drag operation", "private": "", "guessedtype": "function"}, "getDrag": {"return": {"type": "Object", "description": ""}, "params": [{"type": "String\/Object", "name": "node", "description": " The Node instance or Selector string to check for a valid Drag Object"}], "description": "Get a valid Drag instance back from a Node or a selector string, false otherwise", "guessedname": "getDrag", "guessedtype": "function"}, "_setDragMode": {"return": {"type": "", "description": "Number The Mode to be set"}, "description": "Handler for dragMode attribute setter.", "private": "", "params": [{"type": "", "name": "String\/Number", "description": " The Number value or the String for the DragMode to default all future drag instances to."}], "guessedname": "_setDragMode", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "ddm-base.js", "guessedtype": "function", "shortname": "DDM", "configs": {"dragCursor": {"type": "String", "description": "The cursor to apply when dragging, if shimmed the shim will get the cursor.", "guessedname": "dragCursor", "guessedtype": "property"}, "dragMode": {"type": "String", "description": "This attribute only works if the dd-drop module is active. It will set the dragMode (point, intersect, strict) of all future Drag instances.", "guessedname": "dragMode", "guessedtype": "property"}, "clickPixelThresh": {"type": "Number", "description": "The number of pixels to move to start a drag operation, default is 3.", "guessedname": "clickPixelThresh", "guessedtype": "property"}, "clickTimeThresh": {"type": "Number", "description": "The number of milliseconds a mousedown has to pass to start a drag operation, default is 1000.", "guessedname": "clickTimeThresh", "guessedtype": "property"}}, "description": "Provides the base Drag Drop Manger required for making a Node draggable."}, "plugin.DDNodeScroll": {"name": "plugin.DDNodeScroll", "constructors": [{"description": "Extends the Scroll class to make a parent node scroll while dragging."}], "namespace": "plugin", "module": "dd", "guessedname": "NS", "extends": "DD.Scroll", "superclass": "DD.Scroll", "file": "scroll.js", "guessedtype": "function", "shortname": "DDNodeScroll", "description": "Extends the Scroll class to make a parent node scroll while dragging."}, "Test.TestNode": {"name": "Test.TestNode", "constructors": [{"params": [{"type": "Variant", "name": "testObject", "description": " A TestSuite, TestCase, or the name of a test function."}], "description": "A node in the test tree structure. May represent a TestSuite, TestCase, or\ntest function."}], "namespace": "Test", "module": "yuitest", "methods": {"appendChild": {"return": {"type": "Void", "description": ""}, "params": [{"type": "Variant", "name": "testObject", "description": " A TestSuite, TestCase, or the name of a test function."}], "description": "Appends a new test object (TestSuite, TestCase, or test function name) as a child\nof this node.", "guessedname": "appendChild", "guessedtype": "function"}}, "private": "", "file": "TestRunner.js", "shortname": "TestNode", "properties": {"testObject": {"type": "Variant", "description": "The TestSuite, TestCase, or test function represented by this node.", "guessedname": "testObject", "guessedtype": "property"}, "parent": {"type": "TestNode", "description": "Pointer to this node's parent.", "guessedname": "parent", "guessedtype": "property"}, "results": {"type": "object", "description": "Test results for this test object."}, "firstChild": {"type": "TestNode", "description": "Pointer to this node's first child."}, "next": {"type": "TestNode", "description": "Pointer to this node's next sibling.", "guessedname": "next", "guessedtype": "property"}, "lastChild": {"type": "TestNode", "description": "Pointer to this node's last child.", "guessedname": "lastChild", "guessedtype": "property"}}, "description": "A node in the test tree structure. May represent a TestSuite, TestCase, or\ntest function."}, "Console": {"name": "Console", "namespace": "", "module": "console", "events": {"logEventChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "logEventChange", "description": "Fires when the value for the configuration attribute 'logEvent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "reset": {"preventable": "_defResetFn", "params": [{"type": "Event.Facade", "name": "event", "description": "  Event Facade object"}], "description": "Triggers the reset behavior via the default logic in _defResetFn.", "guessedname": "defaultFn", "guessedtype": "property"}, "stringsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "stringsChange", "description": "Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "widthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "widthChange", "description": "Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "logLevelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "logLevelChange", "description": "Fires when the value for the configuration attribute 'logLevel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "scrollIntoViewChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "scrollIntoViewChange", "description": "Fires when the value for the configuration attribute 'scrollIntoView' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "heightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "heightChange", "description": "Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "lastTimeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "lastTimeChange", "description": "Fires when the value for the configuration attribute 'lastTime' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "pausedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "pausedChange", "description": "Fires when the value for the configuration attribute 'paused' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "startTimeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "startTimeChange", "description": "Fires when the value for the configuration attribute 'startTime' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "consoleLimitChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "consoleLimitChange", "description": "Fires when the value for the configuration attribute 'consoleLimit' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "defaultCategoryChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "defaultCategoryChange", "description": "Fires when the value for the configuration attribute 'defaultCategory' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "printTimeoutChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "printTimeoutChange", "description": "Fires when the value for the configuration attribute 'printTimeout' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "entry": {"preventable": "_defEntryFn", "params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>message<\/dt>\n<dd>The message data normalized into an object literal (see _normalizeMessage)<\/dd>\n<\/dl>"}], "description": "Triggers the processing of an incoming message via the default logic\nin _defEntryFn.", "guessedname": "defaultFn", "guessedtype": "property"}, "defaultSourceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "defaultSourceChange", "description": "Fires when the value for the configuration attribute 'defaultSource' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "collapsedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "collapsedChange", "description": "Fires when the value for the configuration attribute 'collapsed' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "entryTemplateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "entryTemplateChange", "description": "Fires when the value for the configuration attribute 'entryTemplate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "newestOnTopChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "newestOnTopChange", "description": "Fires when the value for the configuration attribute 'newestOnTop' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"height": {"default": "\"300px\"", "type": "{String | Number}", "description": "String with units, or number, representing the height of the Console,\ninclusive of header and footer. If a number is provided, the default\nunit, defined by the Widgets DEF_UNIT, property is used.", "guessedname": "height", "guessedtype": "property"}, "consoleLimit": {"default": "500", "type": "Number", "description": "Maximum number of Console entries allowed in the Console body at one\ntime.  This is used to keep acquired messages from exploding the\nDOM tree and impacting page performance.", "guessedname": "consoleLimit", "guessedtype": "property"}, "width": {"default": "\"300px\"", "type": "{String | Number}", "description": "String with units, or number, representing the width of the Console.\nIf a number is provided, the default unit, defined by the Widgets\nDEF_UNIT, property is used.", "guessedname": "width", "guessedtype": "property"}, "logLevel": {"default": "Y.config.logLevel or Console.LOG_LEVEL_INFO", "type": "String|Number", "description": "Minimum entry log level to render into the Console.  The initial\nlogLevel value for all Console instances defaults from the\nY.config.logLevel YUI configuration, or Console.LOG_LEVEL_INFO if\nthat configuration is not set.\nPossible values are &quot;info&quot;, &quot;warn&quot;,\n&quot;error&quot; (case insensitive), or the corresponding statics\nConsole.LOG_LEVEL_INFO and so on.", "guessedname": "logLevel", "guessedtype": "property"}, "collapsed": {"default": "false", "type": "Boolean", "description": "Controls the collapsed state of the Console", "guessedname": "collapsed", "guessedtype": "property"}, "printTimeout": {"default": "100", "type": "Number", "description": "Millisecond timeout to maintain before emptying buffer of Console\nentries to the UI.", "guessedname": "printTimeout", "guessedtype": "property"}, "defaultSource": {"default": "\"global\"", "type": "String", "description": "If a source is not specified in the Y.log(..) statement, this\nsource will be used.", "guessedname": "defaultSource", "guessedtype": "property"}, "paused": {"default": "false", "type": "boolean", "description": "Boolean to pause the outputting of new messages to the console.\nWhen paused, messages will accumulate in the buffer.", "guessedname": "paused", "guessedtype": "property"}, "newestOnTop": {"default": "true", "type": "Boolean", "description": "New entries should display at the top of the Console or the bottom?", "guessedname": "newestOnTop", "guessedtype": "property"}, "logEvent": {"default": "\"yui:log\"", "type": "String", "description": "Name of the custom event that will communicate log messages.", "guessedname": "logEvent", "guessedtype": "property"}, "startTime": {"default": "The moment the console module is <code>use<\/code>d", "type": "Date", "description": "The baseline time for this Console instance, used to measure elapsed\ntime from the moment the console module is <code>use<\/code>d to the\nmoment each new entry is logged (not rendered).\nThis value is reset by the instance method myConsole.reset().", "guessedname": "startTime", "guessedtype": "property"}, "entryTemplate": {"default": "(see Console.ENTRY_TEMPLATE)", "type": "String", "description": "Markup template used to create the DOM structure for Console entries.", "guessedname": "entryTemplate", "guessedtype": "property"}, "scrollIntoView": {"default": "true", "type": "Boolean", "description": "When new entries are added to the Console UI, should they be\nscrolled into view?", "guessedname": "scrollIntoView", "guessedtype": "property"}, "lastTime": {"default": "The moment the console module is <code>use<\/code>d", "type": "Date", "description": "The precise time the last entry was logged.  Used to measure elapsed\ntime between log messages.", "guessedname": "lastTime", "guessedtype": "property"}, "defaultCategory": {"default": "\"info\"", "type": "String", "description": "If a category is not specified in the Y.log(..) statement, this\ncategory will be used. Category is also called &quot;log level&quot;.", "guessedname": "defaultCategory", "guessedtype": "property"}, "strings": {"type": "Object", "description": "Collection of strings used to label elements in the Console UI.\nDefault collection contains the following name:value pairs:\n<ul>\n<li>title : &quot;Log Console&quot;<\/li>\n<li>pause : &quot;Pause&quot;<\/li>\n<li>clear : &quot;Clear&quot;<\/li>\n<li>collapse : &quot;Collapse&quot;<\/li>\n<li>expand : &quot;Expand&quot;<\/li>\n<\/ul>", "guessedname": "strings", "guessedtype": "property"}}, "methods": {"_normalizeMessage": {"return": {"type": "", "description": "Object the message object"}, "description": "Create a log entry message from the inputs including the following keys:\n<ul>\n<li>time - this moment<\/li>\n<li>message - leg message<\/li>\n<li>category - aka logLevel<\/li>\n<li>source - when provided, the widget or util calling Y.log<\/li>\n<li>sourceAndDetail - same as source but can include instance info<\/li>\n<li>label - logLevel\/category label for the entry<\/li>\n<li>localTime - readable version of time<\/li>\n<li>elapsedTime - ms since last entry<\/li>\n<li>totalTime - ms since Console was instantiated or reset<\/li>\n<\/ul>", "mehod": "_normalizeMessage", "protected": "", "params": [{"type": "String", "name": "msg", "description": "  the log message"}, {"type": "String", "name": "cat", "description": "  OPTIONAL the category or logLevel of the message"}, {"type": "String", "name": "src", "description": "  OPTIONAL the source widget or util of the message"}], "guessedname": "_normalizeMessage", "guessedtype": "function"}, "_uiUpdateCollapsed": {"protected": "", "params": [{"type": "Boolean", "name": "v", "description": "  true for collapsed, false for expanded"}], "description": "Updates the UI to reflect the new Collapsed state", "guessedname": "_uiUpdateCollapsed", "guessedtype": "function"}, "_afterStringsChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  Custom event for the attribute change"}], "description": "Updates the UI if changes are made to any of the strings in the strings\nattribute.", "guessedname": "_afterStringsChange", "guessedtype": "function"}, "printLogEntry": {"chainable": "", "params": [{"type": "Object", "name": "m", "description": "  Normalized message object"}], "description": "Prints the provided message to the console UI.", "guessedname": "printLogEntry", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Constructor code.  Set up the buffer and entry template, publish\ninternal events, and subscribe to the configured logEvent.", "guessedname": "initializer", "guessedtype": "function"}, "_trimOldEntries": {"protected": "", "description": "Removes the oldest message entries from the UI to maintain the limit\nspecified in the consoleLimit configuration.", "guessedname": "_trimOldEntries", "guessedtype": "function"}, "_defResetFn": {"protected": "", "description": "Clears the console, resets the startTime attribute, enables and\nunpauses the widget.", "guessedname": "_defResetFn", "guessedtype": "function"}, "_encodeHTML": {"return": {"type": "", "description": "String the encoded string"}, "description": "Returns the input string with ampersands (&amp;), &lt, and &gt; encoded\nas HTML entities.", "protected": "", "params": [{"type": "String", "name": "s", "description": "  the raw string"}], "guessedname": "_encodeHTML", "guessedtype": "function"}, "_uiSetHeight": {"protected": "", "params": [{"type": "String|Number", "name": "v", "description": "  the new height"}], "description": "Set the height of the Console container.  Set the body height to the difference between the configured height and the calculated heights of the header and footer.\nOverrides Widget.prototype._uiSetHeight.", "guessedname": "_uiSetHeight", "guessedtype": "function"}, "_validateNewLogLevel": {"return": {"type": "", "description": "Boolean"}, "description": "Verifies input logLevel is one of Y.Console.LOG_LEVEL_ERROR,\nY.Console.LOG_LEVEL_WARN, or Y.Console.LOG_LEVEL_INFO.", "protected": "", "params": [{"type": "Number", "name": "v", "description": "  requested logLevel"}], "guessedname": "_validateNewLogLevel", "guessedtype": "function"}, "log": {"params": [{"type": "Any*", "name": "*", "description": " (all arguments passed through to <code>Y.log<\/code>)"}], "description": "Wrapper for <code>Y.log<\/code>.", "guessedname": "log", "guessedtype": "function"}, "_initBody": {"protected": "", "description": "Create the DOM structure for the console body&#8212;where messages are\nrendered.", "guessedname": "_initBody", "guessedtype": "function"}, "_onLogEvent": {"protected": "", "params": [{"type": "String", "name": "msg", "description": "  the log message"}, {"type": "String", "name": "cat", "description": "  OPTIONAL the category or logLevel of the message"}, {"type": "String", "name": "src", "description": "  OPTIONAL the source of the message (e.g. widget name)"}], "description": "Responds to log events by normalizing qualifying messages and passing\nthem along through the entry event for buffering etc.", "guessedname": "_onLogEvent", "guessedtype": "function"}, "_afterPausedChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  Custom event for the attribute change"}], "description": "Updates the UI and schedules or cancels the scheduled buffer printing\noperation.", "guessedname": "_afterPausedChange", "guessedtype": "function"}, "_initHead": {"protected": "", "description": "Create the DOM structure for the header elements.", "guessedname": "_initHead", "guessedtype": "function"}, "_clearTimeout": {"protected": "", "description": "Clears the timeout for printing buffered messages.", "guessedname": "_clearTimeout", "guessedtype": "function"}, "_afterConsoleLimitChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  Custom event for the attribute change"}], "description": "Calls this._trimOldEntries() in response to changes in the configured\nconsoleLimit attribute.", "guessedname": "_afterConsoleLimitChange", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Set up event listeners to wire up the UI to the internal state.", "guessedname": "bindUI", "guessedtype": "function"}, "_defEntryFn": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  The Custom event carrying the message in its payload"}], "description": "Buffers incoming message objects and schedules the printing.", "guessedname": "_defEntryFn", "guessedtype": "function"}, "_addToConsole": {"protected": "", "params": [{"type": "Node", "name": "node", "description": "  the node to insert into the console body"}], "description": "Inserts a Node into the console body at the top or bottom depending on\nthe configuration value of newestOnTop.", "guessedname": "_addToConsole", "guessedtype": "function"}, "_htmlEscapeMessage": {"return": {"type": "", "description": "Object a clone of the message object with proper escapement"}, "description": "Performs HTML escaping on strings in the message object.", "protected": "", "params": [{"type": "Object", "name": "m", "description": "  the normalized message object"}], "guessedname": "_htmlEscapeMessage", "guessedtype": "function"}, "collapse": {"chainable": "", "description": "Collapses the UI.", "guessedname": "collapse", "guessedtype": "function"}, "_onPauseClick": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  DOM event facade for the click event"}], "description": "Event handler for clicking on the Pause checkbox to update the paused\nattribute.", "guessedname": "_onPauseClick", "guessedtype": "function"}, "_afterVisibleChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the visibleChange event"}], "description": "Makes adjustments to the UI if needed when the Console is hidden or shown", "guessedname": "_afterVisibleChange", "guessedtype": "function"}, "scrollToLatest": {"chainable": "", "description": "Scrolls to the most recent entry", "guessedname": "scrollToLatest", "guessedtype": "function"}, "_onClearClick": {"description": "Event handler for clicking on the Clear button.  Pass-through to\n<code>this.clearConsole()<\/code>.", "param": "e {Event} DOM event facade for the click event", "protected": "", "params": [{"type": "Event", "name": "e", "description": "  DOM event facade for the click event"}], "guessedname": "_onClearClick", "guessedtype": "function"}, "_schedulePrint": {"protected": "", "description": "Sets a timeout for buffered messages to be output to the console.", "guessedname": "_schedulePrint", "guessedtype": "function"}, "_uiUpdateFromHideShow": {"protected": "", "params": [{"type": "Boolean", "name": "v", "description": "  true for visible, false for hidden"}], "description": "Recalculates dimensions and updates appropriately when shown", "guessedname": "_uiUpdateFromHideShow", "guessedtype": "function"}, "_uiUpdatePaused": {"protected": "", "params": [{"type": "Boolean", "name": "on", "description": "  the new checked state"}], "description": "Checks or unchecks the paused checkbox", "guessedname": "_uiUpdatePaused", "guessedtype": "function"}, "reset": {"chainable": "", "description": "Clears the console and resets internal timers.", "guessedname": "reset", "guessedtype": "function"}, "syncUI": {"description": "Sync the UI state to the current attribute state.", "guessedname": "syncUI", "guessedtype": "function"}, "_afterCollapsedChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  Custom event for the attribute change"}], "description": "Updates the className of the contentBox, which should trigger CSS to\nhide or show the body and footer sections depending on the new value.", "guessedname": "_afterCollapsedChange", "guessedtype": "function"}, "_initFoot": {"protected": "", "description": "Create the DOM structure for the footer elements.", "guessedname": "_initFoot", "guessedtype": "function"}, "printBuffer": {"chainable": "", "description": "Outputs all buffered messages to the console UI.", "guessedname": "printBuffer", "guessedtype": "function"}, "_setLogLevel": {"return": {"type": "", "description": "Number LOG_LEVEL_ERROR, _WARN, or _INFO"}, "description": "Setter method for logLevel attribute.  Acceptable values are\n&quot;error&quot, &quot;warn&quot, &quot;info&quot, and\nY.Console.LOG_LEVEL_ERROR, Y.Console.LOG_LEVEL_WARN, \nY.Console.LOG_LEVEL_INFO.  Any other value becomes\nY.Console.LOG_LEVEL_INFO.", "protected": "", "params": [{"type": "String|Number", "name": "v", "description": "  String or numeric alias for the desired logLevel"}], "guessedname": "_setLogLevel", "guessedtype": "function"}, "clearConsole": {"chainable": "", "description": "Clear the console of messages and flush the buffer of pending messages.", "guessedname": "clearConsole", "guessedtype": "function"}, "_isInLogLevel": {"protected": "", "description": "Determine if incoming log messages are within the configured logLevel\nto be buffered for printing.", "guessedname": "_isInLogLevel", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Generate the Console UI.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "console.js", "shortname": "Console", "properties": {"Console.LOG_LEVEL_INFO": {"type": "Number", "static": "", "description": "Static identifier for logLevel configuration setting to allow all\nincoming messages to generate Console entries.", "guessedname": "LOG_LEVEL_INFO", "guessedtype": "property"}, "Console.BODY_TEMPLATE": {"type": "String", "static": "", "description": "Markup template used to generate the DOM structure for the Console body\n(where the messages are inserted) when it is rendered.  The template\nincludes only the {placeholder} &quot;console_bd_class&quot;, which is\nconstributed by Console.CHROME_CLASSES.", "guessedname": "BODY_TEMPLATE", "guessedtype": "property"}, "Console.HEADER_TEMPLATE": {"type": "String", "static": "", "description": "Markup template used to generate the DOM structure for the header\nsection of the Console when it is rendered.  The template includes\nthese {placeholder}s:\n<ul>\n<li>console_hd_class - contributed by Console.CHROME_CLASSES<\/li>\n<li>console_title_class - contributed by Console.CHROME_CLASSES<\/li>\n<li>str_title - pulled from attribute strings.title<\/li>\n<li>str_collapse - pulled from attribute strings.collapse<\/li>\n<\/ul>", "guessedname": "HEADER_TEMPLATE", "guessedtype": "property"}, "buffer": {"default": "null", "type": "Array", "description": "Array of normalized message objects awaiting printing.", "guessedname": "buffer", "guessedtype": "property"}, "Console.ENTRY_TEMPLATE": {"type": "String", "static": "", "description": "Default markup template used to create the DOM structure for Console\nentries. The markup contains {placeholder}s for content and classes\nthat are replaced via Y.substitute.  The default template contains\nthe {placeholder}s identified in Console.ENTRY_CLASSES as well as the\nfollowing placeholders that will be populated by the log entry data:\n<ul>\n<li>cat_class<\/li>\n<li>src_class<\/li>\n<li>label<\/li>\n<li>totalTime<\/li>\n<li>elapsedTime<\/li>\n<li>localTime<\/li>\n<li>sourceAndDetail<\/li>\n<li>message<\/li>\n<\/ul>", "guessedname": "ENTRY_TEMPLATE", "guessedtype": "property"}, "_body": {"description": "Reference to the Node instance that will house the console messages.", "default": "null", "protected": "", "guessedname": "_body", "guessedtype": "property", "type": "Node"}, "_head": {"description": "Reference to the Node instance containing the head contents.", "default": "null", "protected": "", "guessedname": "_head", "guessedtype": "property", "type": "Node"}, "Console.LOG_LEVEL_WARN": {"type": "Number", "static": "", "description": "Static identifier for logLevel configuration setting to allow only\nincoming messages of logLevel &quot;warn&quot; or &quot;error&quot;\nto generate Console entries.", "guessedname": "LOG_LEVEL_WARN", "guessedtype": "property"}, "Console.ENTRY_CLASSES": {"type": "Object", "static": "", "description": "Map (object) of classNames used to populate the placeholders in the\nConsole.ENTRY_TEMPLATE markup when rendering a new Console entry.\n<p>By default, the keys contained in the object are:<\/p>\n<ul>\n<li>entry_class<\/li>\n<li>entry_meta_class<\/li>\n<li>entry_cat_class<\/li>\n<li>entry_src_class<\/li>\n<li>entry_time_class<\/li>\n<li>entry_content_class<\/li>\n<\/ul>", "guessedname": "ENTRY_CLASSES", "guessedtype": "property"}, "Console.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute configuration of\nthe Widget.", "guessedname": "ATTRS", "guessedtype": "property"}, "Console.NAME": {"type": "String", "static": "", "description": "The identity of the widget.", "guessedname": "NAME", "guessedtype": "property"}, "_timeout": {"description": "Object API returned from <code>Y.later<\/code>. Holds the timer id\nreturned by <code>setTimout<\/code> for scheduling of buffered messages.", "default": "null", "protected": "", "guessedname": "_timeout", "guessedtype": "property", "type": "Object"}, "Console._logLevels": {"protected": "", "type": "Object", "description": "Used to normalize input values for available logLevels.", "guessedname": "_logLevels", "guessedtype": "property"}, "Console.LOG_LEVEL_ERROR": {"type": "Number", "static": "", "description": "Static identifier for logLevel configuration setting to allow only\nincoming messages of logLevel &quot;error&quot; to generate\nConsole entries.", "guessedname": "LOG_LEVEL_ERROR", "guessedtype": "property"}, "Console.CHROME_CLASSES": {"type": "Object", "static": "", "description": "Map (object) of classNames used to populate the placeholders in the\nConsole.HEADER_TEMPLATE, Console.BODY_TEMPLATE, and\nConsole.FOOTER_TEMPLATE markup when rendering the Console UI.\n<p>By default, the keys contained in the object are:<\/p>\n<ul>\n<li>console_hd_class<\/li>\n<li>console_bd_class<\/li>\n<li>console_ft_class<\/li>\n<li>console_controls_class<\/li>\n<li>console_checkbox_class<\/li>\n<li>console_pause_class<\/li>\n<li>console_pause_label_class<\/li>\n<li>console_button_class<\/li>\n<li>console_clear_class<\/li>\n<li>console_collapse_class<\/li>\n<li>console_title_class<\/li>\n<\/ul>", "guessedname": "CHROME_CLASSES", "guessedtype": "property"}}, "description": "Console creates a visualization for messages logged through calls to a YUI\ninstance's <code>Y.log( message, category, source )<\/code> method.  The\ndebug versions of YUI modules will include logging statements to offer some\ninsight into the steps executed during that module's operation.  Including\nlog statements in your code will cause those messages to also appear in the\nConsole.  Use Console to aid in developing your page or application.\nEntry categories are also referred to as the log level, and entries are\nfiltered against the configured logLevel."}, "plugin.DDProxy": {"name": "plugin.DDProxy", "configs": {"positionProxy": {"type": "Boolean", "description": "Make the Proxy node appear in the same place as the original node. Default: true", "guessedname": "positionProxy", "guessedtype": "property"}, "resizeFrame": {"type": "Boolean", "description": "Make the Proxy node assume the size of the original node. Default: true", "guessedname": "resizeFrame", "guessedtype": "property"}, "borderStyle": {"type": "Boolean", "description": "The default border style for the border of the proxy. Default: 1px solid #808080", "guessedname": "borderStyle", "guessedtype": "property"}, "moveOnEnd": {"type": "Boolean", "description": "Move the original node at the end of the drag. Default: true", "guessedname": "moveOnEnd", "guessedtype": "property"}}, "constructors": [{"description": "This plugin for dd-drag is for creating a proxy drag node, instead of dragging the original node."}], "namespace": "plugin", "module": "dd", "events": {"moveOnEndChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "moveOnEndChange", "description": "Fires when the value for the configuration attribute 'moveOnEnd' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "borderStyleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "borderStyleChange", "description": "Fires when the value for the configuration attribute 'borderStyle' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "positionProxyChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "positionProxyChange", "description": "Fires when the value for the configuration attribute 'positionProxy' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "resizeFrameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "resizeFrameChange", "description": "Fires when the value for the configuration attribute 'resizeFrame' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "DDM", "methods": {"_init": {"description": "Handler for the proxy config attribute", "private": "", "guessedname": "_init", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "proxy.js", "guessedtype": "property", "shortname": "DDProxy", "properties": {"proxy": {"type": "{String}", "description": "The Proxy instance will be placed on the Drag instance under the proxy namespace.", "guessedname": "NS", "guessedtype": "property"}, "_hands": {"private": "", "description": "Holds the event handles for setting the proxy", "guessedname": "_hands", "guessedtype": "property"}}, "description": "This plugin for dd-drag is for creating a proxy drag node, instead of dragging the original node."}, "plugin.Drop": {"name": "plugin.Drop", "configs": {"node": {"type": "Node", "description": "Y.Node instanace to use as the element to make a Drop Target", "guessedname": "node", "guessedtype": "property"}, "padding": {"type": "String", "description": "CSS style padding to make the Drop Target bigger than the node.", "guessedname": "padding", "guessedtype": "property"}, "bubbles": {"type": "Object", "description": "Controls the default bubble parent for this Drop instance. Default: Y.DD.DDM. Set to false to disable bubbling.", "guessedname": "bubbles", "guessedtype": "property"}, "groups": {"type": "Array", "description": "Array of groups to add this drop into.", "guessedname": "groups", "guessedtype": "property"}, "lock": {"type": "Boolean", "description": "Set to lock this drop element.", "guessedname": "lock", "guessedtype": "property"}}, "constructors": [{"description": "This class provides the ability to create a Drop Target."}], "namespace": "plugin", "module": "dd", "properties": {"_groups": {"guessedname": "_groups", "type": "Array", "description": "The groups this target belongs to.", "private": "", "guessedtype": "property"}, "region": {"type": "Object", "description": "A region object associated with this target, used for checking regions while dragging.", "guessedname": "region", "guessedtype": "property"}, "overTarget": {"type": "Boolean", "description": "This flag is tripped when a drag element is over this target.", "guessedname": "overTarget", "guessedtype": "property"}, "_valid": {"guessedname": "_valid", "type": "Boolean", "description": "Flag for determining if the target is valid in this operation.", "private": "", "guessedtype": "property"}, "shim": {"type": "{Object}", "description": "Node reference to the targets shim", "guessedname": "shim", "guessedtype": "property"}}, "guessedname": "NODE", "methods": {"_createEvents": {"description": "This method creates all the events for this Event Target and publishes them so we get Event Bubbling.", "private": "", "guessedname": "_createEvents", "guessedtype": "function"}, "_handleOverTarget": {"description": "This handles the over target call made from this object or from the DDM", "private": "", "guessedname": "_handleTargetOver", "guessedtype": "function"}, "_handleOverEvent": {"description": "Handles the mouseover DOM event on the Target Shim", "private": "", "guessedname": "_handleOverEvent", "guessedtype": "function"}, "sizeShim": {"description": "Positions and sizes the shim with the raw data from the node, this can be used to programatically adjust the Targets shim for Animation..", "guessedname": "sizeShim", "guessedtype": "function"}, "destructor": {"description": "Lifecycle destructor, unreg the drag from the DDM and remove listeners", "private": "", "guessedname": "destructor", "guessedtype": "function"}, "_createShim": {"description": "Creates the Target shim and adds it to the DDM's playground..", "private": "", "guessedname": "_createShim", "guessedtype": "function"}, "inGroup": {"return": {"type": "", "description": "Boolean"}, "params": [{"type": "Array", "name": "groups", "description": " The groups to check against"}], "description": "Check if this target is in one of the supplied groups.", "guessedname": "inGroup", "guessedtype": "function"}, "_activateShim": {"description": "Activates the shim and adds some interaction CSS classes", "private": "", "guessedname": "_activateShim", "guessedtype": "function"}, "_deactivateShim": {"description": "Removes classes from the target, resets some flags and sets the shims deactive position [-999, -999]", "private": "", "guessedname": "_deactivateShim", "guessedtype": "function"}, "initializer": {"description": "Private lifecycle method", "private": "", "guessedname": "initializer", "guessedtype": "function"}, "_handleOut": {"description": "Handles the mouseout DOM event on the Target Shim", "private": "", "guessedname": "_handleOutEvent", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "drop.js", "guessedtype": "property", "shortname": "Drop", "events": {"paddingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "paddingChange", "description": "Fires when the value for the configuration attribute 'padding' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "groupsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "groupsChange", "description": "Fires when the value for the configuration attribute 'groups' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "drop:enter": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires when a drag element enters this target.", "guessedname": "EV_DROP_ENTER", "guessedtype": "property"}, "bubblesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "bubblesChange", "description": "Fires when the value for the configuration attribute 'bubbles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "drop:over": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires when a drag element is over this target.", "guessedname": "EV_DROP_OVER", "guessedtype": "property"}, "nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "drop:hit": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires when a draggable node is dropped on this Drop Target. (Fired from dd-ddm-drop)", "guessedname": "Drop", "guessedtype": "function"}, "lockChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "lockChange", "description": "Fires when the value for the configuration attribute 'lock' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "drop:exit": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires when a drag element exits this target.", "guessedname": "EV_DROP_EXIT", "guessedtype": "property"}}, "description": "This class provides the ability to create a Drop Target."}, "Queue": {"methods": {"_ioStartHandler": {"protected": "", "params": [{"type": "Number", "name": "id", "description": "  the Y.io transaction id"}], "description": "Stores the ids of initiated Y.io transactions for completion tracking.", "guessedname": "_ioStartHandler", "guessedtype": "function"}, "size": {"return": {"type": "Number", "description": "the number of currently queued callbacks"}, "description": "Returns the number of items in the queue.  Callbacks configured with\n<code>iterations<\/code> or <code>until<\/code> are counted only once.", "guessedname": "size", "guessedtype": "function"}, "isReady": {"return": {"type": "Boolean", "description": "true if callbacks can be run now"}, "description": "Determines if the Queue is in a state that will allow for callback\nexecution.", "guessedname": "isReady", "guessedtype": "function"}, "pause": {"return": {"type": "Queue", "description": "the Queue instance"}, "description": "Pause the execution of the Queue after the execution of the current\ncallback completes.  If called from code outside of a queued callback,\nclears the timeout for the pending callback. Paused Queue can be\nrestarted with q.run()", "guessedname": "pause", "guessedtype": "function"}, "run": {"return": {"type": "Queue", "description": "the Queue instance"}, "description": "Execute the queue callbacks (also resumes paused Queue).", "guessedname": "run", "guessedtype": "function"}, "_prepareCallback": {"return": {"type": "Object", "description": "the normalized callback object"}, "description": "Normalizes the callback into object literal form with required key:value\npairs dfaulted to functional values.", "protected": "", "params": [{"type": "Object|Function", "name": "callback", "description": "  the raw callback"}], "guessedname": "_prepareCallback", "guessedtype": "function"}, "_defShiftFn": {"protected": "", "description": "Shifts the first callback off the Queue", "guessedname": "_defShiftFn", "guessedtype": "function"}, "stop": {"return": {"type": "Queue", "description": "the Queue instance"}, "description": "Stop and clear the Queue's queue after the current execution of the\ncurrent callback completes.", "guessedname": "stop", "guessedtype": "function"}, "_ioEndHandler": {"protected": "", "params": [{"type": "Number", "name": "id", "description": "  the Y.io transaction id"}], "description": "Marks a Y.io transaction id as completed (or aborted).  If all Y.io\ntransactions generated by the callback have received responses, signal\nthe Queue to continue.", "guessedname": "_ioEndHandler", "guessedtype": "function"}, "_init": {"protected": "", "params": [{"type": "Object", "name": "config", "description": "  Instance level defaults for all callbacks"}], "description": "Initializes the Queue isntance properties and events.", "guessedname": "_init", "guessedtype": "function"}, "remove": {"return": {"type": "Queue", "description": "the Queue instance"}, "description": "Removes the callback from the queue.  If the Queue is active, the\nremoval is scheduled to occur after the current callback has completed.", "param": "name {String|Object} the callback object or a callback's name", "protected": "", "params": [{"type": "String|Object", "name": "name", "description": "  the callback object or a callback's name"}], "guessedname": "remove", "guessedtype": "function"}, "_processSync": {"protected": "", "params": [{"type": "Object", "name": "callback", "description": "  the callback object to execute"}], "description": "Handles the execution of synchronous callbacks.", "guessedname": "_processSync", "guessedtype": "function"}, "add": {"return": {"type": "Queue", "description": "the Queue instance"}, "description": "Add any number of callbacks to the end of the queue.  Callbacks passed\nin as functions will be wrapped in a callback object.\nCallbacks can be function references or object literals with these keys:\n<dl>\n<dt>fn<\/dt>\n<dd>{Function} REQUIRED the callback function.<\/dd>\n<dt>name<\/dt>\n<dd>{String} a reference name to use for promotion or access<\/dd>\n<dt>context<\/dt>\n<dd>{Object} the context from which to call the callback function.<\/dd>\n<dt>timeout<\/dt>\n<dd>{number} millisecond delay to wait after previous callback\ncompletion before executing this callback.  Negative\nvalues cause immediate blocking execution.  Default 0.<\/dd>\n<dt>until<\/dt>\n<dd>{Function} boolean function executed before each iteration.\nReturn true to indicate callback completion.<\/dd>\n<dt>iterations<\/dt>\n<dd>{Number} number of times to execute the callback before\nproceeding to the next callback in the queue.\nIncompatible with <code>until<\/code>.<\/dd>\n<dt>args<\/dt>\n<dd>{Array} array of arguments passed to callback function<\/dd>\n<\/dl>", "param": "callback* {Function|Object} Any number of callbacks", "params": [{"type": "Function|Object", "name": "callback*", "description": "  Any number of callbacks"}], "guessedname": "add", "guessedtype": "function"}, "_detachIOStartListener": {"protected": "", "description": "Detaches event listener from io:start so new transactions spawned while\nthe current callback is waiting are not considered required for\ncontinuing.", "guessedname": "_detachIOStartListener", "guessedtype": "function"}, "_defExecFn": {"protected": "", "params": [{"type": "Object", "name": "callback", "description": "  the callback object"}], "description": "Executes the callback function", "guessedname": "_defExecFn", "guessedtype": "function"}, "getCallback": {"return": {"type": "Object", "description": "the callback object"}, "params": [{"type": "String", "name": "name", "description": "  the name assigned to the callback"}], "description": "Retrieve a callback by its name.  Useful to modify the configuration\nwhile the Queue is running.", "guessedname": "getCallback", "guessedtype": "function"}, "_bindIOListeners": {"protected": "", "description": "Attaches event listeners to IO and the Queue itself to monitor for new\nY.io requests, to trigger the waiting process accordingly.", "guessedname": "_bindIOListeners", "guessedtype": "function"}, "_promote": {"return": {"type": "Queue", "description": "the Queue instance"}, "description": "Promotes the named callback to the top of the queue.", "protected": "", "params": [{"type": "String|Object", "name": "name", "description": "  the callback object or a callback's name"}], "guessedname": "_promote", "guessedtype": "function"}, "promote": {"return": {"type": "Queue", "description": "the Queue instance"}, "params": [{"type": "String|Object", "name": "name", "description": "  the callback object or a callback's name"}], "description": "Promotes the named callback to the top of the queue. If a callback is\ncurrently executing or looping (via until or iterations), the promotion\nis scheduled to occur after the current callback has completed.", "guessedname": "promote", "guessedtype": "function"}, "_detachIOListeners": {"protected": "", "description": "Detaches the event listeners to prevent processing noise during Queue\nexecution.", "guessedname": "_detachIOListeners", "guessedtype": "function"}, "_processAsync": {"protected": "", "params": [{"type": "Object", "name": "callback", "description": "  the callback object to execute"}], "description": "Handles the execution of asynchronous callbacks.", "guessedname": "_processAsync", "guessedtype": "function"}}, "description": "Mechanism to execute a series of callbacks in sequence.\nCallbacks can be function references or object literals with the following\nkeys:\n<dl>\n<dt>fn<\/dt>\n<dd>{Function} REQUIRED the callback function.<\/dd>\n<dt>context<\/dt>\n<dd>{Object} the desired execution context of the callback function<\/dd>\n<dt>args<\/dt>\n<dd>{Array} list of arguments to pass to the callback function<\/dd>\n<\/dl>", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  default callback configuration values"}, {"type": "Function|Object", "name": "callback*", "description": "  Any number of callbacks to initialize the queue"}], "description": "Mechanism to execute a series of callbacks in sequence.\nCallbacks can be function references or object literals with the following\nkeys:\n<dl>\n<dt>fn<\/dt>\n<dd>{Function} REQUIRED the callback function.<\/dd>\n<dt>context<\/dt>\n<dd>{Object} the desired execution context of the callback function<\/dd>\n<dt>args<\/dt>\n<dd>{Array} list of arguments to pass to the callback function<\/dd>\n<\/dl>"}], "namespace": "", "module": "queue", "properties": {"defaults": {"protected": "", "type": "{Object}", "description": "Callback defaults for this instance.  Initially populated from the\nstatic Queue.defaults collection.", "guessedname": "_defaults", "guessedtype": "property"}, "_ioSuccessSub": {"protected": "", "type": "{Object}", "description": "Event listener for global io:success event to mark off io transactions,\neventually restarting the Queue after all are complete or aborted.", "guessedname": "_ioSuccessSub", "guessedtype": "property"}, "_ioAbortSub": {"protected": "", "type": "{Object}", "description": "Event listener for global io:abort event to mark off io transactions,\neventually restarting the Queue after all are complete or aborted.", "guessedname": "_ioAbortSub", "guessedtype": "property"}, "_shiftSub": {"protected": "", "type": "{Object}", "description": "Event listener on the Queue to trigger detaching event subscriptions for\na given callback when that callback is shifted off the queue.", "guessedname": "_shiftSub", "guessedtype": "property"}, "_ioFailureSub": {"protected": "", "type": "{Object}", "description": "Event listener for global io:success event to mark off io transactions,\neventually restarting the Queue after all are complete or aborted.", "guessedname": "_ioFailureSub", "guessedtype": "property"}, "_tId": {"protected": "", "type": "{Number}", "description": "Flag used to indicate the Queue is currently executing a callback.", "guessedname": "_tId", "guessedtype": "property"}, "_waiting": {"protected": "", "type": "{Array}", "description": "Collection of outstanding io transaction ids that must complete before\nthe Queue continues.  Used during execution of callbacks configured with\nwaitForIOResponse set to true.", "guessedname": "_waiting", "guessedtype": "property"}, "Queue.defaults": {"type": "{Object}", "static": "", "description": "Defaults used to fill unset callback configuration values.", "guessedname": "defaults", "guessedtype": "property"}, "active": {"type": "{Boolean}", "description": "Indicates the execution state of the Queue.", "guessedname": "active", "guessedtype": "property"}, "_ioStartSub": {"protected": "", "type": "{Object}", "description": "Event listener for global io:start event to cache active io transactions.", "guessedname": "_ioStartSub", "guessedtype": "property"}}, "file": "queue-base.js", "shortname": "Queue", "events": {"pause": {"description": "Fired after Queue is paused"}, "complete": {"description": "Event fired after the last queued callback is executed."}, "stop": {"description": "Fired after Queue is stopped"}, "executeCallback": {"params": [{"type": "Object", "name": "callback", "description": "  the callback object that will be executed"}], "description": "Event used to trigger the execution of the callback.  Subscribe to this\nevent and call e.preventDefault() to prevent the callback execution.  Doing\nso will not stop or pause the Queue."}, "shiftCallback": {"params": [{"type": "Function|Object", "name": "callback", "description": "  The callback passed to <code>add(..)<\/code>"}], "description": "Event fired after a callback is shifted from the Queue"}, "addCallback": {"params": [{"type": "Array", "name": "callbacks", "description": "  array of added callback objects"}], "description": "Event fired when callbacks are added to the Queue."}}, "name": "Queue"}, "Test.Suite": {"name": "Test.Suite", "constructors": [{"params": [{"type": "String||Object", "name": "data", "description": " The name of the test suite or an object containing\na name property as well as setUp and tearDown methods."}], "description": "A test suite that can contain a collection of TestCase and TestSuite objects."}], "namespace": "Test", "module": "yuitest", "guessedname": "Suite", "methods": {"tearDown": {"return": {"type": "Void", "description": ""}, "description": "Function to run after each test is executed.", "guessedname": "tearDown", "guessedtype": "function"}, "XML": {"return": {"type": "String", "description": "An XML-formatted string of results."}, "description": "Returns test results formatted as an XML string.", "static": "", "guessedname": "XML", "guessedtype": "function", "params": [{"type": "Object", "name": "result", "description": " The results object created by TestRunner."}]}, "add": {"return": {"type": "Void", "description": ""}, "params": [{"type": "Y.Test.Suite||Y.Test.Case", "name": "testObject", "description": " The test suite or test case to add."}], "description": "Adds a test suite or test case to the test suite.", "guessedname": "add", "guessedtype": "function"}, "JSON": {"return": {"type": "String", "description": "A JSON-formatted string of results."}, "description": "Returns test results formatted as a JSON string. Requires JSON utility.", "static": "", "guessedname": "JSON", "guessedtype": "function", "params": [{"type": "Object", "name": "result", "description": " The results object created by TestRunner."}]}, "setUp": {"return": {"type": "Void", "description": ""}, "description": "Function to run before each test is executed.", "guessedname": "setUp", "guessedtype": "function"}}, "file": "TestSuite.js", "guessedtype": "function", "shortname": "Suite", "properties": {"name": {"type": "String", "description": "The name of the test suite."}}, "description": "A test suite that can contain a collection of TestCase and TestSuite objects."}, "plugin.NodeMenuNav": {"name": "plugin.NodeMenuNav", "namespace": "plugin", "module": "node-menunav", "guessedname": "MenuNav", "methods": {"_showMenu": {"protected": "", "params": [{"type": "Node", "name": "menu", "description": " Node instance representing a menu."}], "description": "Shows the specified menu.", "guessedname": "_showMenu", "guessedtype": "function"}, "_setActiveItem": {"protected": "", "params": [{"type": "Node", "name": "item", "description": " Node instance representing a menuitem or menu label."}], "description": "Sets the specified menuitem or menu label as the MenuNav's active descendent.", "guessedname": "_setActiveItem", "guessedtype": "function"}, "_hideMenu": {"protected": "", "params": [{"type": "Node", "name": "menu", "description": " Node instance representing a menu."}, {"type": "Boolean", "name": "activateAndFocusLabel", "description": " Boolean indicating if the label for the specified \nmenu should be focused and set as active."}], "description": "Hides the specified menu.", "guessedname": "_hideMenu", "guessedtype": "function"}, "_onHorizontalMenuKeyDown": {"protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"keydown\" event handler for horizontal menus of a MenuNav.", "guessedname": "_onHorizontalMenuKeyDown", "guessedtype": "function"}, "_onVerticalMenuKeyDown": {"protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"keydown\" event handler for vertical menus of a MenuNav.", "guessedname": "_onVerticalMenuKeyDown", "guessedtype": "function"}, "_onMouseOver": {"protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"mouseover\" event handler for the MenuNav.", "guessedname": "_onMouseOver", "guessedtype": "function"}, "_focusItem": {"protected": "", "params": [{"type": "Node", "name": "item", "description": " Node instance representing a menuitem or menu label."}], "description": "Focuses the specified menuitem or menu label.", "guessedname": "_focusItem", "guessedtype": "function"}, "_cancelHideSubmenuTimer": {"protected": "", "description": "Cancels the timer used to hide a submenu.", "guessedname": "_cancelHideSubmenuTimer", "guessedtype": "function"}, "_onMenuLabelMouseOver": {"protected": "", "params": [{"type": "Node", "name": "menuLabel", "description": " Node instance representing a menu label."}, {"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"mouseover\" event handler for a menu label.", "guessedname": "_onMenuLabelMouseOver", "guessedtype": "function"}, "_onDocMouseDown": {"protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"mousedown\" event handler for the owner document of the MenuNav.", "guessedname": "_onDocMouseDown", "guessedtype": "function"}, "_onMenuLabelMouseOut": {"protected": "", "params": [{"type": "Node", "name": "menuLabel", "description": " Node instance representing a menu label."}, {"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"mouseout\" event handler for a menu label.", "guessedname": "_onMenuLabelMouseOut", "guessedtype": "function"}, "_onMenuItemMouseOver": {"protected": "", "params": [{"type": "Node", "name": "menuItem", "description": " Node instance representing a menuitem."}, {"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"mouseover\" event handler for a menuitem.", "guessedname": "_onMenuItemMouseOver", "guessedtype": "function"}, "_cancelShowSubmenuTimer": {"protected": "", "description": "Cancels the timer used to show a submenu.", "guessedname": "_cancelShowSubmenuTimer", "guessedtype": "function"}, "_isRoot": {"return": {"type": "Boolean", "description": "Boolean indicating if the specified menu is the root menu in the MenuNav."}, "description": "Returns a boolean indicating if the specified menu is the root menu in \nthe MenuNav.", "protected": "", "params": [{"type": "Node", "name": "menu", "description": " Node instance representing a menu."}], "guessedname": "_isRoot", "guessedtype": "function"}, "_getTopmostSubmenu": {"return": {"type": "Node", "description": "Node instance representing a menu."}, "description": "Returns the topmost submenu of a submenu hierarchy.", "protected": "", "params": [{"type": "Node", "name": "menu", "description": " Node instance representing a menu."}], "guessedname": "_getTopmostSubmenu", "guessedtype": "function"}, "_clearActiveItem": {"protected": "", "description": "Clears the MenuNav's active descendent.", "guessedname": "_clearActiveItem", "guessedtype": "function"}, "_onMouseMove": {"protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"mousemove\" event handler for the MenuNav.", "guessedname": "_onMouseMove", "guessedtype": "function"}, "_onMenuItemMouseOut": {"protected": "", "params": [{"type": "Node", "name": "menuItem", "description": " Node instance representing a menuitem."}, {"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"mouseout\" event handler for a menuitem.", "guessedname": "_onMenuItemMouseOut", "guessedtype": "function"}, "_onMenuMouseOver": {"protected": "", "params": [{"type": "Node", "name": "menu", "description": " Node instance representing a menu."}, {"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"mouseover\" event handler for a menu.", "guessedname": "_onMenuMouseOver", "guessedtype": "function"}, "_hideAllSubmenus": {"protected": "", "params": [{"type": "Node", "name": "menu", "description": " Node instance representing a menu."}], "description": "Hides all submenus of the specified menu.", "guessedname": "_hideAllSubmenus", "guessedtype": "function"}, "_onMouseOut": {"protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"mouseout\" event handler for the MenuNav.", "guessedname": "_onMouseOut", "guessedtype": "function"}, "_toggleSubmenuDisplay": {"protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"mousedown,\" \"keydown,\" and \"click\" event handler for the \nMenuNav used to toggle the display of a submenu.", "guessedname": "_toggleSubmenuDisplay", "guessedtype": "function"}, "_onKeyPress": {"protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"keypress\" event handler for the MenuNav.", "guessedname": "_onKeyPress", "guessedtype": "function"}, "_onMenuMouseOut": {"protected": "", "params": [{"type": "Node", "name": "menu", "description": " Node instance representing a menu."}, {"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"mouseout\" event handler for a menu.", "guessedname": "_onMenuMouseOut", "guessedtype": "function"}, "_onKeyDown": {"protected": "", "params": [{"type": "Object", "name": "event", "description": " Object representing the DOM event."}], "description": "\"keydown\" event handler for the MenuNav.", "guessedname": "_onKeyDown", "guessedtype": "function"}}, "file": "node-menunav.js", "guessedtype": "function", "shortname": "NodeMenuNav", "properties": {"_hideAllSubmenusTimer": {"description": "Timer used to hide a all submenus.", "default": "null", "protected": "", "guessedname": "_hideAllSubmenusTimer", "guessedtype": "property", "type": "Object"}, "_blockMouseEvent": {"description": "Boolean indicating whether or not to handle the \"mouseover\" event.", "default": "false", "protected": "", "guessedname": "_blockMouseEvent", "guessedtype": "property", "type": "Boolean"}, "_autoSubmenuDisplay": {"description": "Boolean indicating if submenus are automatically made visible when the user \nmouses over the menu's items.", "default": "true", "protected": "", "guessedname": "_autoSubmenuDisplay", "guessedtype": "property", "type": "Boolean"}, "_activeMenu": {"description": "Node instance representing the menu that is the parent of the MenuNav's \nactive descendent.", "default": "null", "protected": "", "guessedname": "_activeMenu", "guessedtype": "property", "type": "Node"}, "NodeMenuNav.SHIM_TEMPLATE_TITLE": {"default": "\"Menu Stacking Shim\"", "type": "String", "description": "String representing the value for the <code>title<\/code> attribute for the shim used\nto prevent <code>&#60;select&#62;<\/code> elements from poking through menus in IE 6.", "guessedname": "SHIM_TEMPLATE_TITLE", "guessedtype": "property"}, "_hasFocus": {"description": "Boolean indicating if the MenuNav has focus.", "default": "false", "protected": "", "guessedname": "_hasFocus", "guessedtype": "property", "type": "Boolean"}, "_currentMouseX": {"description": "Number representing the current x coordinate of the mouse inside the MenuNav.", "default": "0", "protected": "", "guessedname": "_currentMouseX", "guessedtype": "property", "type": "Number"}, "_hideSubmenuTimer": {"description": "Timer used to hide a submenu.", "default": "null", "protected": "", "guessedname": "_hideSubmenuTimer", "guessedtype": "property", "type": "Object"}, "_firstItem": {"description": "Node instance representing the first item (menuitem or menu label) in the root \nmenu of a MenuNav.", "default": "null", "protected": "", "guessedname": "_firstItem", "guessedtype": "property", "type": "Node"}, "_showSubmenuTimer": {"description": "Timer used to show a submenu.", "default": "null", "protected": "", "guessedname": "_showSubmenuTimer", "guessedtype": "property", "type": "Object"}, "_movingToSubmenu": {"description": "Boolean indicating if the mouse is moving from a menu label to its \ncorresponding submenu.", "default": "false", "protected": "", "guessedname": "_movingToSubmenu", "guessedtype": "property", "type": "Boolean"}, "NodeMenuNav.SHIM_TEMPLATE": {"default": "&#34;&#60;iframe frameborder=&#34;0&#34; tabindex=&#34;-1&#34; \nclass=&#34;yui-shim&#34; title=&#34;Menu Stacking Shim&#34; \nsrc=&#34;javascript:false;&#34;&#62;&#60;\/iframe&#62;&#34;", "type": "String", "description": "String representing the HTML used to create the <code>&#60;iframe&#62;<\/code> shim \nused to prevent <code>&#60;select&#62;<\/code> elements from poking through menus in IE 6."}, "_activeItem": {"description": "Node instance representing the MenuNav's active descendent - the menuitem or \nmenu label the user is currently interacting with.", "default": "null", "protected": "", "guessedname": "_activeItem", "guessedtype": "property", "type": "Node"}, "_rootMenu": {"description": "Node instance representing the root menu in the MenuNav.", "default": "null", "protected": "", "guessedname": "_rootMenu", "guessedtype": "property", "type": "Node"}}, "description": "The NodeMenuNav class is a plugin for a Node instance.  The class is used via the \n<a href=\"Node.html#method_plug\"><code>plug<\/code><\/a> method of Node and should not be \ninstantiated directly."}, "YUI": {"global": "", "name": "YUI", "constructors": [{"params": [{"type": "", "name": "o", "description": " Optional configuration object.  Options:\n<ul>\n<li>------------------------------------------------------------------------<\/li>\n<li>Global:<\/li>\n<li>------------------------------------------------------------------------<\/li>\n<li>debug:\nTurn debug statements on or off<\/li>\n<li>useBrowserConsole:\nLog to the browser console if debug is on and the console is available<\/li>\n<li>logInclude:\nA hash of log sources that should be logged.  If specified, only log messages from these sources will be logged.\n<\/li>\n<li>logExclude:\nA hash of log sources that should be not be logged.  If specified, all sources are logged if not on this list.<\/li>\n<li>throwFail:\nIf throwFail is set, Y.fail will generate or re-throw a JS error.  Otherwise the failure is logged.\n<li>win:\nThe target window\/frame<\/li>\n<li>core:\nA list of modules that defines the YUI core (overrides the default)<\/li>\n<li>dateFormat: default date format<\/li>\n<li>locale: default locale<\/li>\n<li>------------------------------------------------------------------------<\/li>\n<li>For event and get:<\/li>\n<li>------------------------------------------------------------------------<\/li>\n<li>pollInterval: The default poll interval<\/li>\n<li>windowResizeDelay: The time between browser events to wait before firing.<\/li>\n<li>-------------------------------------------------------------------------<\/li>\n<li>For loader:<\/li>\n<li>-------------------------------------------------------------------------<\/li>\n<li>base:\nThe base dir<\/li>\n<li>secureBase:\nThe secure base dir (not implemented)<\/li>\n<li>comboBase:\nThe YUI combo service base dir. Ex: http:\/\/yui.yahooapis.com\/combo?<\/li>\n<li>root:\nThe root path to prepend to module names for the combo service. Ex: 2.5.2\/build\/<\/li>\n<li>filter:\nA filter to apply to result urls.  This filter will modify the default\npath for all modules.  The default path for the YUI library is the\nminified version of the files (e.g., event-min.js).  The filter property\ncan be a predefined filter or a custom filter.  The valid predefined \nfilters are:\n<dl>\n<dt>DEBUG<\/dt>\n<dd>Selects the debug versions of the library (e.g., event-debug.js).\nThis option will automatically include the Logger widget<\/dd>\n<dt>RAW<\/dt>\n<dd>Selects the non-minified version of the library (e.g., event.js).<\/dd>\n<\/dl>\nYou can also define a custom filter, which must be an object literal \ncontaining a search expression and a replace string:\n<pre>\nmyFilter: &#123; \n'searchExp': \"-min\\\\.js\", \n'replaceStr': \"-debug.js\"\n&#125;\n<\/pre>\n<\/li>\n<li>combine:\nUse the YUI combo service to reduce the number of http connections required to load your dependencies<\/li>\n<li>ignore:\nA list of modules that should never be dynamically loaded<\/li>\n<li>force:\nA list of modules that should always be loaded when required, even if already present on the page<\/li>\n<li>insertBefore:\nNode or id for a node that should be used as the insertion point for new nodes<\/li>\n<li>charset:\ncharset for dynamic nodes<\/li>\n<li>timeout:\nnumber of milliseconds before a timeout occurs when dynamically loading nodes.  in not set, there is no timeout<\/li>\n<li>context:\nexecution context for all callbacks<\/li>\n<li>onSuccess:\ncallback for the 'success' event<\/li>\n<li>onFailure:\ncallback for the 'failure' event<\/li>\n<li>onTimeout:\ncallback for the 'timeout' event<\/li>\n<li>onProgress:\ncallback executed each time a script or css file is loaded<\/li>\n<li>modules:\nA list of module definitions.  See Loader.addModule for the supported module metadata<\/li>\n<\/ul>"}], "description": "The YUI global namespace object.  If YUI is already defined, the\nexisting YUI object will not be overwritten so that defined\nnamespaces are preserved."}], "namespace": "", "module": "yui", "events": {"available": {"description": "Executes the callback as soon as the specified element \nis detected in the DOM.", "guessedname": "available", "guessedtype": "property"}, "domready": {"optional": "context execution context", "params": [{"type": "function", "name": "fn", "description": " what to execute when the element is found."}], "description": "Executes the supplied callback when the DOM is first usable.  This\nwill execute immediately if called after the DOMReady event has\nfired.   @todo the DOMContentReady event does not fire when the\nscript is dynamically injected into the page.  This means the\nDOMReady custom event will never fire in FireFox or Opera when the\nlibrary is injected.  It _will_ fire in Safari, and the IE \nimplementation would allow for us to fire it if the defered script\nis not available.  We want this to behave the same in all browsers.\nIs there a way to identify when the script has been injected \ninstead of included inline?  Is there a way to know whether the \nwindow onload event has fired without having had a listener attached \nto it when it did so?\n<p>The callback is a Event.Custom, so the signature is:<\/p>\n<p>type &lt;string&gt;, args &lt;array&gt;, customobject &lt;object&gt;<\/p>\n<p>For DOMReady events, there are no fire argments, so the\nsignature is:<\/p>\n<p>\"DOMReady\", [], obj<\/p>", "guessedname": "domready", "guessedtype": "property"}, "mouseleave": {"return": "{Event.Handle} the detach handle", "params": [{"type": "string", "name": "type", "description": "  'mouseleave'"}, {"type": "string", "name": "fn", "description": "  The method the event invokes."}, {"type": "string|node", "name": "el", "description": "  The element to assign the listener to."}], "description": "Sets up a \"mouseleave\" listener--a listener that is called the first time \nthe user's mouse enters the specified element(s).  Can be used to listen for \nthe \"mouseleave\" event on a single element, or a collection of elements as\nspecified via a CSS selector passed as the fourth argument when subscribing \nto the event.", "guessedname": "mouseleave", "guessedtype": "property"}, "event:ready": {"deprecated": "use 'domready' instead", "description": "Use domready event instead. @see domready"}, "focus": {"description": "Adds a DOM focus listener.  Uses the focusin event in IE,\nand the capture phase otherwise so that\nthe event propagates properly.", "guessedname": "focus", "guessedtype": "property"}, "windowresize": {"description": "Firefox fires the window resize event once when the resize action\nfinishes, other browsers fire the event periodically during the\nresize.  This code uses timeout logic to simulate the Firefox \nbehavior in other browsers.", "guessedname": "windowresize", "guessedtype": "property"}, "contentready": {"description": "Executes the callback as soon as the specified element \nis detected in the DOM with a nextSibling property\n(indicating that the element's children are available)", "guessedname": "contentready", "guessedtype": "property"}, "delegate": {"return": "{Event.Handle} the detach handle", "params": [{"type": "string", "name": "type", "description": "  'delegate'"}, {"type": "string", "name": "fn", "description": "  the function to execute"}, {"type": "string|node", "name": "el", "description": "  the element that is the delegation container"}, {"type": "string", "name": "delegateType", "description": "  the event type to delegate"}, {"type": "string", "name": "spec", "description": "  a selector that must match the target of the\nevent."}, {"type": "", "name": "o", "description": " optional context object"}, {"type": "", "name": "args", "description": " 0..n additional arguments that should be provided \nto the listener."}], "description": "Sets up a delegated listener container.", "guessedname": "delegate", "guessedtype": "property"}, "key": {"return": "{Event.Handle} the detach handle", "params": [{"type": "string", "name": "type", "description": "  'key'"}, {"type": "string", "name": "fn", "description": "  the function to execute"}, {"type": "string", "name": "id", "description": "  the element(s) to bind"}, {"type": "string", "name": "spec", "description": "  the keyCode and modifier specification"}, {"type": "", "name": "o", "description": " optional context object"}, {"type": "", "name": "args", "description": " 0..n additional arguments that should be provided \nto the listener."}], "description": "Add a key listener.  The listener will only be notified if the\nkeystroke detected meets the supplied specification.  The\nspec consists of the key event type, followed by a colon,\nfollowed by zero or more comma separated key codes, followed\nby zero or more modifiers delimited by a plus sign.  Ex:\npress:12,65+shift+ctrl", "guessedname": "key", "guessedtype": "property"}, "blur": {"description": "Adds a DOM focus listener.  Uses the focusout event in IE,\nand the capture phase otherwise so that\nthe event propagates properly.", "guessedname": "blur", "guessedtype": "property"}, "mouseenter": {"return": "{Event.Handle} the detach handle", "params": [{"type": "string", "name": "type", "description": "  'mouseenter'"}, {"type": "string", "name": "fn", "description": "  The method the event invokes."}, {"type": "string|node", "name": "el", "description": "  The element to assign the listener to."}], "description": "Sets up a \"mouseenter\" listener--a listener that is called the first time \nthe user's mouse enters the specified element(s).  Can be used to listen for \nthe \"mouseenter\" event on a single element, or a collection of elements as\nspecified via a CSS selector passed as the fourth argument when subscribing \nto the event.", "guessedname": "mouseenter", "guessedtype": "property"}}, "methods": {"Array.every": {"return": {"type": "boolean", "description": "true if every item in the array returns true\nfrom the supplied function."}, "description": "Executes the supplied function on each item in the array.", "static": "", "guessedname": "every", "guessedtype": "property", "params": [{"type": "Array", "name": "a", "description": "  the array to iterate"}, {"type": "Function", "name": "f", "description": "  the function to execute on each item"}, {"type": "", "name": "o", "description": " Optional context object"}]}, "Array.reject": {"return": {"type": "Array", "description": "The items on which the supplied function\nreturned false."}, "description": "The inverse of filter. Executes the supplied function on each item. \nReturns a new array containing the items that the supplied\nfunction returned *false* for.", "static": "", "guessedname": "reject", "guessedtype": "function", "params": [{"type": "Array", "name": "a", "description": "  the array to iterate"}, {"type": "Function", "name": "f", "description": "  the function to execute on each item"}, {"type": "", "name": "o", "description": " Optional context object"}]}, "_init": {"guessedname": "_init", "params": [{"type": "", "name": "o", "description": " config options"}], "description": "Initialize this YUI instance", "private": "", "guessedtype": "function"}, "set": {"description": "Update style for a rule.  Add the rule if it's not present already.", "guessedname": "set", "guessedtype": "function"}, "Array.some": {"return": {"type": "boolean", "description": "true if the function returns true on\nany of the items in the array"}, "description": "Executes the supplied function on each item in the array.\nReturning true from the processing function will stop the \nprocessing of the remaining\nitems.", "static": "", "guessedname": "some", "guessedtype": "property", "params": [{"type": "Array", "name": "a", "description": "  the array to iterate"}, {"type": "Function", "name": "f", "description": "  the function to execute on each item"}, {"type": "", "name": "o", "description": " Optional context object"}]}, "Array.zip": {"return": {"type": "", "description": "An array of arrays formed by pairing each element \nof the first collection with an item in the second collection \nhaving the corresponding index."}, "description": "Creates an array of arrays by pairing the corresponding\nelements of two arrays together into a new array.", "static": "", "guessedname": "zip", "guessedtype": "function", "params": [{"type": "Array", "name": "a", "description": "  a collection to iterate over"}, {"type": "Array", "name": "a2", "description": "  another collection whose members will be \npaired with members of the first parameter"}]}, "message": {"return": {"type": "YUI", "description": "YUI instance"}, "params": [{"type": "String", "name": "msg", "description": "  The message to log."}, {"type": "String", "name": "cat", "description": "  The log category for the message.  Default\ncategories are \"info\", \"warn\", \"error\", time\".\nCustom categories can be used as well. (opt)"}, {"type": "String", "name": "src", "description": "  The source of the the message (opt)"}, {"type": "boolean", "name": "silent", "description": " If true, the log event won't fire"}], "description": "Write a system message.  This message will be preserved in the\nminified and raw versions of the YUI files, unlike log statements.", "guessedname": "message", "guessedtype": "function"}, "guid": {"return": {"type": "string", "description": "the guid"}, "params": [{"type": "string", "name": "pre", "description": "  optional guid prefix"}], "description": "Generate an id that is unique among all YUI instances", "guessedname": "guid", "guessedtype": "function"}, "substitute": {"return": {"type": "string", "description": "the substituted string"}, "params": [{"type": "string", "name": "s", "description": "  The string that will be modified."}, {"type": "", "name": "o", "description": " An object containing the replacement values"}, {"type": "function", "name": "f", "description": "  An optional function that can be used to\nprocess each match.  It receives the key,\nvalue, and any extra metadata included with\nthe key inside of the braces."}], "description": "Does variable substitution on a string. It scans through the string \nlooking for expressions enclosed in { } braces. If an expression \nis found, it is used a key on the object.  If there is a space in\nthe key, the first word is used for the key and the rest is provided\nto an optional function to be used to programatically determine the\nvalue (the extra information might be used for this decision). If \nthe value for the key in the object, or what is returned from the\nfunction has a string value, number value, or object value, it is \nsubstituted for the bracket expression and it repeats.  If this\nvalue is an object, it uses the Object's toString() if this has\nbeen overridden, otherwise it does a shallow dump of the key\/value\npairs if Y.dump is available (if dump isn't available, toString()\nis used).\nThis method is included in the 'substitute' module.  It is not included\nin the YUI module.", "guessedname": "substitute", "guessedtype": "function"}, "use": {"return": {"type": "YUI", "description": "the YUI instance"}, "description": "Bind a module to a YUI instance", "params": [{"type": "string", "name": "modules*", "description": "  1-n modules to bind (uses arguments array)"}, {"type": "function", "name": "*callback", "description": "  callback function executed when \nthe instance has the required functionality.  If included, it\nmust be the last parameter."}], "guessedname": "use", "guessedtype": "function", "todo": "Implement versioning?  loader can load different versions?\nShould sub-modules\/plugins be normal modules, or do\nwe add syntax for specifying these?\nYUI().use('dragdrop')\nYUI().use('dragdrop:2.4.0'); \/\/ specific version\nYUI().use('dragdrop:2.4.0-'); \/\/ at least this version\nYUI().use('dragdrop:2.4.0-2.9999.9999'); \/\/ version range\nYUI().use('*'); \/\/ use all available modules\nYUI().use('lang+dump+substitute'); \/\/ use lang and some plugins\nYUI().use('lang+*'); \/\/ use lang and all known plugins"}, "Array.reduce": {"return": {"type": "", "description": "A value that results from iteratively applying the\nsupplied function to each element in the array."}, "description": "Executes the supplied function on each item in the array.\nReduce \"folds\" the array into a single value.", "static": "", "guessedname": "reduce", "guessedtype": "property", "params": [{"type": "Array", "name": "a", "description": "  the array to iterate"}, {"type": "", "name": "init", "description": " The initial value to start from"}, {"type": "Function", "name": "f", "description": "  the function to execute on each item. It\nis responsible for returning the updated value of the\ncomputation."}, {"type": "", "name": "o", "description": " Optional context object"}]}, "stamp": {"return": {"type": "string", "description": "The object's guid or null"}, "params": [{"type": "", "name": "o", "description": " The object to stamp"}, {"type": "boolean", "name": "readOnly", "description": "  if true, a valid guid will only\nbe returned if the object has one assigned to it."}], "description": "Returns a guid associated with an object.  If the object\ndoes not have one, a new one is created unless readOnly\nis specified.", "guessedname": "stamp", "guessedtype": "function"}, "namespace": {"return": {"type": "object", "description": "A reference to the last namespace object created"}, "params": [{"type": "string*", "name": "arguments", "description": " 1-n namespaces to create"}], "description": "Returns the namespace specified and creates it if it doesn't exist\n<pre>\nYUI.namespace(\"property.package\");\nYUI.namespace(\"YAHOO.property.package\");\n<\/pre>\nEither of the above would create YUI.property, then\nYUI.property.package (YAHOO is scrubbed out, this is\nto remain compatible with YUI2)\nBe careful when naming packages. Reserved words may work in some browsers\nand not others. For instance, the following will fail in Safari:\n<pre>\nYUI.namespace(\"really.long.nested.namespace\");\n<\/pre>\nThis fails because \"long\" is a future reserved word in ECMAScript", "guessedname": "namespace", "guessedtype": "function"}, "Array.map": {"return": {"type": "Array", "description": "A new array containing the return value\nof the supplied function for each item in the original\narray."}, "description": "Executes the supplied function on each item in the array.", "static": "", "guessedname": "map", "guessedtype": "property", "params": [{"type": "Array", "name": "a", "description": "  the array to iterate"}, {"type": "Function", "name": "f", "description": "  the function to execute on each item"}, {"type": "", "name": "o", "description": " Optional context object"}]}, "mix": {"return": {"type": "object", "description": "the augmented object"}, "description": "Applies the supplier's properties to the receiver.  By default\nall prototype and static propertes on the supplier are applied\nto the corresponding spot on the receiver.  By default all\nproperties are applied, and a property that is already on the\nreciever will not be overwritten.  The default behavior can\nbe modified by supplying the appropriate parameters.", "params": [{"type": "Function", "name": "r", "description": "  the object to receive the augmentation"}, {"type": "Function", "name": "s", "description": "  the object that supplies the properties to augment"}, {"type": "boolean", "name": "ov", "description": "  if true, properties already on the receiver\nwill be overwritten if found on the supplier."}, {"type": "string[]", "name": "wl", "description": "  a whitelist.  If supplied, only properties in \nthis list will be applied to the receiver."}, {"type": "int", "name": "mode", "description": " what should be copies, and to where\ndefault(0): object to object\n1: prototype to prototype (old augment)\n2: prototype to prototype and object props (new augment)\n3: prototype to object\n4: object to prototype"}, {"type": "boolean", "name": "merge", "description": "  merge objects instead of overwriting\/ignoring\nUsed by Y.aggregate"}], "guessedname": "mix", "guessedtype": "function", "todo": "add constants for the modes"}, "add": {"return": {"type": "YUI", "description": "the YUI instance"}, "params": [{"type": "string", "name": "name", "description": "  module name"}, {"type": "Function", "name": "fn", "description": "  entry point into the module that\nis used to bind module to the YUI instance"}, {"type": "string", "name": "version", "description": "  version string"}, {"type": "", "name": "details", "description": " optional config data: \nrequires   - features that should be present before loading\noptional   - optional features that should be present if load optional defined\nuse  - features that should be attached automatically\nskinnable  -\nrollup\nomit - features that should not be loaded if this module is present"}], "description": "Register a module", "guessedname": "add", "guessedtype": "function"}, "Array.partition": {"return": {"type": "", "description": "An object with two members, 'matches' and 'rejects',\nthat are arrays containing the items that were selected or \nrejected by the test function (or an empty array)."}, "description": "Partitions an array into two new arrays, one with the items\nthat match the supplied function, and one with the items that\ndo not.", "paran": "f {Function} a function that will receive each item \nin the collection and its index.", "static": "", "guessedname": "partition", "guessedtype": "function", "params": [{"type": "Array", "name": "a", "description": "  a collection to iterate over"}, {"type": "", "name": "o", "description": " Optional execution context of f."}]}, "simulate": {"return": {"type": "void", "description": ""}, "description": "Simulates an event on the node.", "static": "", "guessedname": "simulate", "guessedtype": "function", "params": [{"type": "String", "name": "type", "description": " The type of event to simulate (i.e., \"click\")."}, {"type": "Object", "name": "options", "description": " (Optional) Extra options to copy onto the event object."}]}, "Array.filter": {"return": {"type": "Array", "description": "The items on which the supplied function\nreturned true. If no items matched an empty array is \nreturned."}, "description": "Executes the supplied function on each item in the array.\nReturns a new array containing the items that the supplied\nfunction returned true for.", "static": "", "guessedname": "filter", "guessedtype": "property", "params": [{"type": "Array", "name": "a", "description": "  the array to iterate"}, {"type": "Function", "name": "f", "description": "  the function to execute on each item"}, {"type": "", "name": "o", "description": " Optional context object"}]}, "applyTo": {"return": {"type": "object", "description": "the return value from the applied method or null"}, "params": [{"type": "string", "name": "id", "description": "  the YUI instance id"}, {"type": "string", "name": "method", "description": "  the name of the method to exectute.\nEx: 'Object.keys'"}, {"type": "Array", "name": "args", "description": "  the arguments to apply to the method"}], "description": "Executes a method on a YUI instance with\nthe specified id if the specified method is whitelisted.", "guessedname": "applyTo", "guessedtype": "function"}, "later": {"return": {"type": "object", "description": "a timer object. Call the cancel() method on this object to \nstop the timer."}, "params": [{"type": "int", "name": "when", "description": "  the number of milliseconds to wait until the fn \nis executed."}, {"type": "", "name": "o", "description": " the context object."}, {"type": "Function|String", "name": "fn", "description": "  the function to execute or the name of \nthe method in the 'o' object to execute."}, {"type": "", "name": "data", "description": " [Array] data that is provided to the function.  This accepts\neither a single item or an array.  If an array is provided, the\nfunction is executed with one parameter for each array item.  If\nyou need to pass a single array parameter, it needs to be wrapped in\nan array [myarray]."}, {"type": "boolean", "name": "periodic", "description": "  if true, executes continuously at supplied \ninterval until canceled."}], "description": "Executes the supplied function in the context of the supplied \nobject 'when' milliseconds later.  Executes the function a \nsingle time unless periodic is set to true.", "guessedname": "later", "guessedtype": "function"}, "_setup": {"private": "", "description": "Finishes the instance setup. Attaches whatever modules were defined\nwhen the yui modules was registered.", "guessedname": "_setup", "guessedtype": "function"}, "Array.grep": {"return": {"type": "Array", "description": "All the items in the collection that \nproduce a match against the supplied regular expression. \nIf no items match, an empty array is returned."}, "description": "Iterates over an array, returning a new array of all the elements\nthat match the supplied regular expression", "static": "", "guessedname": "grep", "guessedtype": "function", "params": [{"type": "Array", "name": "a", "description": "  a collection to iterate over"}, {"type": "RegExp", "name": "pattern", "description": "  The regular expression to test against \neach item"}]}, "merge": {"return": {"type": "object", "description": "the new merged object"}, "params": [{"type": "Object*", "name": "arguments", "description": "  the objects to merge"}], "description": "Returns a new object containing all of the properties of\nall the supplied objects.  The properties from later objects\nwill overwrite those in earlier objects.  Passing in a\nsingle object will create a shallow copy of it.  For a deep\ncopy, use clone.", "guessedname": "merge", "guessedtype": "function"}, "Array.unique": {"return": {"type": "Array", "description": "a copy of the array with duplicate entries removed"}, "description": "Returns a copy of the array with the duplicate entries removed", "static": "", "guessedname": "unique", "guessedtype": "function", "params": [{"type": "Array", "name": "a", "description": "  the array to find the subset of uniques for"}, {"type": "bool", "name": "sort", "description": "  flag to denote if the array is sorted or not. Defaults to false, the more general operation"}]}, "error": {"return": {"type": "YUI", "description": "this YUI instance"}, "params": [{"type": "string", "name": "msg", "description": "  the error message"}, {"type": "Error", "name": "e", "description": "  Optional JS error that was caught.  If supplied\nand throwFail is specified, this error will be re-thrown."}], "description": "Report an error.  The reporting mechanism is controled by\nthe 'throwFail' configuration attribute.  If throwFail is\nnot specified, the message is written to the Logger, otherwise\na JS error is thrown", "guessedname": "error", "guessedtype": "function"}, "Array.find": {"return": {"type": "object", "description": "the first item that the supplied function\nreturns true for, or null if it never returns true"}, "description": "Executes the supplied function on each item in the array,\nsearching for the first item that matches the supplied\nfunction.", "static": "", "guessedname": "find", "guessedtype": "function", "params": [{"type": "Array", "name": "a", "description": "  the array to search"}, {"type": "Function", "name": "f", "description": "  the function to execute on each item. \nIteration is stopped as soon as this function returns true\non an item."}, {"type": "", "name": "o", "description": " Optional context object"}]}}, "uses": ["Event.Target"], "file": "yui.js", "shortname": "YUI", "properties": {"lastIndexOf": {"return": "{int} the index of hte item that contains the value or -1", "description": "Returns the index of the last item in the array\nthat contains the specified value, -1 if the\nvalue isn't found.\nmethod Array.lastIndexOf", "param": "a {Array} the array to search", "static": "", "guessedname": "lastIndexOf", "guessedtype": "property"}, "_iefix": {"guessedname": "_iefix", "param": "{Function} r  the object to receive the augmentation", "description": "IE will not enumerate native functions in a derived object even if the\nfunction was overridden.  This is a workaround for specific functions \nwe care about on the Object prototype.", "private": "", "guessedtype": "property"}}, "description": "The YUI global namespace object.  If YUI is already defined, the\nexisting YUI object will not be overwritten so that defined\nnamespaces are preserved."}, "State": {"name": "State", "constructors": [{"description": "Maintain state for a collection of items.  Individual properties \nare stored in hash tables.  This is instead of having state objects \nfor each item in the collection.  For large collections, especially \nchanging ones, this approach may perform better."}], "namespace": "", "module": "attribute", "guessedname": "State", "methods": {"add": {"params": [{"type": "string", "name": "name", "description": "  identifier for this attribute"}, {"type": "", "name": "o", "description": " hash of attributes"}], "description": "Add an item with all of the properties in the supplied object.", "guessedname": "add", "guessedtype": "function"}, "remove": {"params": [{"type": "string", "name": "name", "description": "  name of attribute"}, {"type": "string|object|array", "name": "o", "description": "  single key or collection of keys to delete"}], "description": "Remove entire item, or optionally specified fields", "guessedname": "remove", "guessedtype": "function"}, "get": {"return": {"type": "", "description": "either the value of the supplied key or an object with\nall data."}, "params": [{"type": "string", "name": "name", "description": "  name of attribute"}, {"type": "string", "name": "key", "description": "  optional attribute to get"}], "description": "For a given item, gets an attribute.  If key is not\nsupplied, a disposable object with all attributes is \nreturned.  Use of the latter option makes sense when\nworking with single items, but not if object explosion\nmight cause gc problems.", "guessedname": "get", "guessedtype": "function"}}, "file": "State.js", "guessedtype": "function", "shortname": "State", "properties": {"data": {"description": "Hash of attributes", "guessedname": "data", "guessedtype": "property"}}, "description": "Maintain state for a collection of items.  Individual properties \nare stored in hash tables.  This is instead of having state objects \nfor each item in the collection.  For large collections, especially \nchanging ones, this approach may perform better."}, "Test.ArrayAssert": {"name": "Test.ArrayAssert", "namespace": "Test", "module": "yuitest", "guessedname": "ArrayAssert", "methods": {"containsMatch": {"static": "", "params": [{"type": "Function", "name": "matcher", "description": " A function that returns true if the items matches or false if not."}, {"type": "Array", "name": "haystack", "description": " An array of values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value matching some condition is present in an array. This uses\na function to determine a match.", "guessedname": "containsMatch", "guessedtype": "function"}, "doesNotContain": {"static": "", "params": [{"type": "Object", "name": "needle", "description": " The value that is expected in the array."}, {"type": "Array", "name": "haystack", "description": " An array of values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not present in an array. This uses the triple equals \nAsserts that a value is not present in an array. This uses the triple equals \nsign so no type cohersion may occur.", "guessedname": "doesNotContain", "guessedtype": "function"}, "indexOf": {"static": "", "params": [{"type": "Object", "name": "needle", "description": " The value to look for."}, {"type": "Array", "name": "haystack", "description": " The array to search in."}, {"type": "int", "name": "index", "description": " The index at which the value should exist."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that the given value is contained in an array at the specified index.\nThis uses the triple equals sign so no type cohersion will occur.", "guessedname": "indexOf", "guessedtype": "function"}, "itemsAreSame": {"static": "", "params": [{"type": "Array", "name": "expected", "description": " An array of the expected values."}, {"type": "Array", "name": "actual", "description": " Any array of the actual values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that the values in an array are the same, and in the same position,\nas values in another array. This uses the triple equals sign\nso no type cohersion will occur. Note that the array objects themselves\nneed not be the same for this test to pass.", "guessedname": "itemsAreSame", "guessedtype": "function"}, "contains": {"static": "", "params": [{"type": "Object", "name": "needle", "description": " The value that is expected in the array."}, {"type": "Array", "name": "haystack", "description": " An array of values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is present in an array. This uses the triple equals \nsign so no type cohersion may occur.", "guessedname": "contains", "guessedtype": "function"}, "containsItems": {"static": "", "params": [{"type": "Object[]", "name": "needles", "description": " An array of values that are expected in the array."}, {"type": "Array", "name": "haystack", "description": " An array of values to check."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a set of values are present in an array. This uses the triple equals \nsign so no type cohersion may occur. For this assertion to pass, all values must\nbe found.", "guessedname": "containsItems", "guessedtype": "function"}, "doesNotContainItems": {"static": "", "params": [{"type": "Object[]", "name": "needles", "description": " An array of values that are not expected in the array."}, {"type": "Array", "name": "haystack", "description": " An array of values to check."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a set of values are not present in an array. This uses the triple equals \nsign so no type cohersion may occur. For this assertion to pass, all values must\nnot be found.", "guessedname": "doesNotContainItems", "guessedtype": "function"}, "itemsAreEquivalent": {"return": {"type": "Void", "description": ""}, "description": "Asserts that the values in an array are equivalent, and in the same position,\nas values in another array. This uses a function to determine if the values\nare equivalent. Note that the array objects themselves\nneed not be the same for this test to pass.", "static": "", "guessedname": "itemsAreEquivalent", "guessedtype": "function", "params": [{"type": "Array", "name": "expected", "description": " An array of the expected values."}, {"type": "Array", "name": "actual", "description": " Any array of the actual values."}, {"type": "Function", "name": "comparator", "description": " A function that returns true if the values are equivalent\nor false if not."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}]}, "itemsAreEqual": {"static": "", "params": [{"type": "Array", "name": "expected", "description": " An array of the expected values."}, {"type": "Array", "name": "actual", "description": " Any array of the actual values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that the values in an array are equal, and in the same position,\nas values in another array. This uses the double equals sign\nso type cohersion may occur. Note that the array objects themselves\nneed not be the same for this test to pass.", "guessedname": "itemsAreEqual", "guessedtype": "function"}, "isEmpty": {"static": "", "params": [{"type": "Array", "name": "actual", "description": " The array to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that an array is empty.", "guessedname": "isEmpty", "guessedtype": "function"}, "lastIndexOf": {"static": "", "params": [{"type": "Object", "name": "needle", "description": " The value to look for."}, {"type": "Array", "name": "haystack", "description": " The array to search in."}, {"type": "int", "name": "index", "description": " The index at which the value should exist."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that the given value is contained in an array at the specified index,\nstarting from the back of the array.\nThis uses the triple equals sign so no type cohersion will occur.", "guessedname": "lastIndexOf", "guessedtype": "function"}, "isNotEmpty": {"static": "", "params": [{"type": "Array", "name": "actual", "description": " The array to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that an array is not empty.", "guessedname": "isNotEmpty", "guessedtype": "function"}, "doesNotContainMatch": {"static": "", "params": [{"type": "Function", "name": "matcher", "description": " A function that returns true if the items matches or false if not."}, {"type": "Array", "name": "haystack", "description": " An array of values."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that no values matching a condition are present in an array. This uses\na function to determine a match.", "guessedname": "doesNotContainMatch", "guessedtype": "function"}}, "static": "", "file": "ArrayAssert.js", "guessedtype": "property", "shortname": "ArrayAssert", "description": "The ArrayAssert object provides functions to test JavaScript array objects\nfor a variety of cases."}, "YUI~object": {"methods": {"Object.owns": {"return": {"type": "boolean", "description": "true if the object has the property on the instance"}, "description": "Determines whether or not the property was added\nto the object instance.  Returns false if the property is not present\nin the object, or was inherited from the prototype.", "deprecated": "Safari 1.x support has been removed, so this is simply a \nwrapper for the native implementation.  Use the native implementation\ndirectly instead.", "static": "", "guessedname": "owns", "guessedtype": "function", "params": [{"type": "any", "name": "o", "description": "  The object being testing"}, {"type": "string", "name": "p", "description": "  the property to look for"}], "todo": "Remove in B1"}, "setValue": {"return": {"type": "Object", "description": "The modified object, with the new sub value set, or \nundefined, if the path was invalid."}, "params": [{"type": "", "name": "o", "description": "             The object on which to set the sub value."}, {"type": "Array", "name": "path", "description": "   A path array, specifying the object traversal path\nat which to set the sub value."}, {"type": "Any", "name": "val", "description": "      The new value for the sub-attribute."}], "description": "Sets the sub-attribute value at the provided path on the \nvalue object.  Returns the modified value object, or \nundefined if the path is invalid.", "guessedname": "setValue", "guessedtype": "function"}, "Object.hasValue": {"return": {"type": "boolean", "description": "true if the object contains the value"}, "description": "Returns true if the object contains a given value", "static": "", "guessedname": "hasValue", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " an object"}, {"type": "", "name": "v", "description": " the value to query"}]}, "Object.values": {"return": {"type": "Array", "description": "the values"}, "description": "Returns an array containing the object's values", "static": "", "guessedname": "values", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " an object"}], "todo": "use native Object.values() if available"}, "_extract": {"return": {"type": "boolean|Array", "description": "the extracted info"}, "description": "Extracts the keys, values, or size from an object", "private": "", "params": [{"type": "", "name": "o", "description": " the object"}, {"type": "", "name": "what", "description": " what to extract (0: keys, 1: values, 2: size)"}], "guessedname": "_extract", "guessedtype": "function"}, "Object": {"return": {"type": "object", "description": "the new object"}, "description": "Y.Object(o) returns a new object based upon the supplied object.", "static": "", "guessedname": "Object", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " the supplier object"}], "todo": "Use native Object.create() when available"}, "getValue": {"return": {"type": "Any", "description": "The value stored in the path, undefined if not found.\nReturns the source object if an empty path is provided."}, "params": [{"type": "", "name": "o", "description": " The object from which to extract the property value"}, {"type": "Array", "name": "path", "description": "  A path array, specifying the object traversal path\nfrom which to obtain the sub value."}], "description": "Retrieves the sub value at the provided path,\nfrom the value object provided.", "guessedname": "getValue", "guessedtype": "function"}, "Object.hasKey": {"return": {"type": "boolean", "description": "true if the object contains the key"}, "description": "Returns true if the object contains a given key", "static": "", "guessedname": "hasKey", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " an object"}, {"type": "", "name": "k", "description": " the key to query"}]}, "Object.each": {"return": {"type": "YUI", "description": "the YUI instance"}, "description": "Executes a function on each item. The function\nreceives the value, the key, and the object\nas paramters (in that order).", "static": "", "guessedname": "each", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " the object to iterate"}, {"type": "function", "name": "f", "description": "  the function to execute"}, {"type": "", "name": "c", "description": " the execution context"}, {"type": "boolean", "name": "proto", "description": "  include proto"}]}, "Object.keys": {"return": {"type": "string[]", "description": "the keys"}, "description": "Returns an array containing the object's keys", "static": "", "guessedname": "keys", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " an object"}], "todo": "use native Object.keys() if available"}, "Object.size": {"return": {"type": "int", "description": "the size"}, "description": "Returns the size of an object", "static": "", "guessedname": "size", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " an object"}], "todo": "use native Object.size() if available"}}, "description": "Adds the following Object utilities to the YUI instance", "namespace": "", "module": "yui", "file": "yui-object.js", "shortname": "YUI~object", "name": "YUI~object"}, "YUI~substitute": {"name": "YUI~substitute", "namespace": "", "module": "substitute", "file": "substitute.js", "shortname": "YUI~substitute", "description": "The following methods are added to the YUI instance"}, "io": {"name": "io", "namespace": "", "module": "io", "properties": {"_headers": {"description": "Object of default HTTP headers to be initialized and sent\nfor all transactions.", "private": "", "static": "", "guessedname": "_headers", "guessedtype": "property", "type": "object"}, "_qState": {"description": "Property to determine whether the queue is set to\n1 (active) or 0 (inactive).  When inactive, transactions\nwill be stored in the queue until the queue is set to active.", "private": "", "static": "", "guessedname": "_qState", "guessedtype": "property", "type": "int"}, "_q": {"description": "Array of transactions queued for processing", "private": "", "static": "", "guessedname": "_q", "guessedtype": "property", "type": "array"}, "_qMaxSize": {"description": "Queue property to set a maximum queue storage size.  When\nthis property is set, the queue will not store any more transactions\nuntil the queue size os reduced below this threshold. There is no\nmaximum queue size until it is explicitly set.", "private": "", "static": "", "guessedname": "_qMaxSize", "guessedtype": "property", "type": "int"}, "_transport": {"description": "Map of IO transports.", "private": "", "static": "", "guessedname": "_transport", "guessedtype": "property", "type": "object"}, "_timeOut": {"description": "Object that stores timeout values for any transaction with\na defined \"timeout\" configuration property.", "private": "", "static": "", "guessedname": "_timeout", "guessedtype": "property", "type": "object"}, "transactionId": {"description": "A transaction counter that increments for each transaction.", "private": "", "static": "", "guessedname": "transactionId", "guessedtype": "property", "type": "int"}, "_fn": {"description": "Object that stores callback handlers for cross-domain requests\nwhen using Flash as the transport.", "private": "", "static": "", "guessedname": "_fn", "guessedtype": "property", "type": "object"}}, "methods": {"_concat": {"return": {"type": "", "description": "int"}, "static": "", "params": [{"type": "string", "name": "s", "description": " - URI or root data."}, {"type": "string", "name": "d", "description": " - data to be concatenated onto URI."}], "description": "Method that concatenates string data for HTTP GET transactions.", "private": ""}, "_create": {"return": {"type": "", "description": "object"}, "static": "", "params": [{"type": "number", "name": "s", "description": " - URI or root data."}, {"type": "number", "name": "c", "description": " - configuration object"}], "description": "Method that creates a unique transaction object for each\nrequest.", "private": ""}, "_stop": {"static": "", "return": {"type": "", "description": "void"}, "description": "Method for setting queue processing to inactive.\nTransaction requests to YUI.io.queue() will be stored in the queue, but\nnot processed until the queue is reset to \"active\".", "private": ""}, "_ioEnd": {"return": {"type": "", "description": "void"}, "static": "", "params": [{"type": "object", "name": "o", "description": " - transaction object."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}], "description": "Fires event \"io:end\" and creates, fires a\ntransaction-specific \"end\" event, if config.on.end is\ndefined.", "private": ""}, "header": {"return": {"type": "", "description": "int"}, "description": "Method that stores default client headers for all transactions.\nIf a label is passed with no value argument, the header will be deleted.\nThis is the interface for _setHeader().", "static": "", "guessedname": "header", "guessedtype": "property", "params": [{"type": "string", "name": "l", "description": " - HTTP header"}, {"type": "string", "name": "v", "description": " - HTTP header value"}], "public": ""}, "_startTimeout": {"return": {"type": "", "description": "void"}, "description": "Starts timeout count if the configuration object\nhas a defined timeout property.", "param": "{object} o Transaction object generated by _create().", "static": "", "private": "", "params": [{"type": "object", "name": "o", "description": " - Transaction object generated by _create()."}, {"type": "object", "name": "c", "description": " - Configuration object passed to YUI.io()."}]}, "_ioFailure": {"return": {"type": "", "description": "void"}, "static": "", "params": [{"type": "object", "name": "o", "description": " - transaction object."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}], "description": "Fires event \"io:failure\" and creates, fires a\ntransaction-specific \"failure\" event, if config.on.failure is\ndefined.", "private": ""}, "io": {"return": {"type": "", "description": "object"}, "description": "Method for requesting a transaction. This\nis the interface for _io().", "static": "", "guessedname": "io", "guessedtype": "property", "params": [{"type": "string", "name": "uri", "description": " - qualified path to transaction resource."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}], "public": ""}, "_size": {"static": "", "return": {"type": "", "description": "int"}, "description": "Method to query the current size of the queue, or to\nset a maximum queue size.", "private": ""}, "_async": {"return": {"type": "", "description": "void"}, "static": "", "params": [{"type": "object", "name": "o", "description": " - Transaction object generated by _create()."}, {"type": "string", "name": "d", "description": " - Transaction data."}, {"type": "object", "name": "c", "description": " - Configuration object passed to YUI.io()."}], "description": "Method that sends the transaction request.", "private": ""}, "_ioSuccess": {"return": {"type": "", "description": "void"}, "static": "", "params": [{"type": "object", "name": "o", "description": " - transaction object."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}], "description": "Fires event \"io:success\" and creates, fires a\ntransaction-specific \"success\" event, if config.on.success is\ndefined.", "private": ""}, "size": {"return": {"type": "", "description": "number"}, "description": "Method to query the current size of the queue, or to\nset a maximum queue size.  This is the interface for _size().", "static": "", "guessedname": "size", "guessedtype": "property", "params": [{"type": "number", "name": "i", "description": " - Specified maximum size of queue."}], "public": ""}, "purge": {"return": {"type": "", "description": "void"}, "description": "Method for removing a specific, pending transaction from\nthe queue. This is the interface for _purge().", "static": "", "guessedname": "purge", "guessedtype": "property", "params": [{"type": "number", "name": "i", "description": " - ID of queued transaction."}], "public": ""}, "_start": {"static": "", "return": {"type": "", "description": "void"}, "description": "Method for setting the queue to active. If there are\ntransactions pending in the queue, they will be processed from the\nqueue in FIFO order.", "private": ""}, "_readyState": {"return": {"type": "", "description": "void"}, "static": "", "params": [{"type": "object", "name": "o", "description": " - Transaction object generated by _create()."}, {"type": "object", "name": "c", "description": " - Configuration object passed to YUI.io()."}], "description": "Event handler bound to onreadystatechange.", "private": ""}, "start": {"return": {"type": "", "description": "void"}, "description": "Method for setting the queue to \"active\". If there are\ntransactions pending in the queue, they will be processed from the\nqueue in FIFO order. This is the interface for _start().", "static": "", "guessedname": "start", "guessedtype": "property", "public": ""}, "_clearTimeout": {"return": {"type": "", "description": "void"}, "description": "Clears the timeout interval started by _startTimeout().", "param": "{number} id - Transaction id.", "static": "", "private": "", "params": [{"type": "number", "name": "id", "description": " - Transaction id."}]}, "transport": {"return": {"type": "", "description": "void"}, "description": "Method to initialize the desired transport.", "static": "", "guessedname": "transport", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " - object of transport configurations."}], "public": ""}, "_serialize": {"return": {"type": "", "description": "string"}, "description": "Method to enumerate through an HTML form's elements collection\nand return a string comprised of key-value pairs.", "private": "", "static": "", "guessedname": "_serialize", "guessedtype": "function", "params": [{"type": "object", "name": "o", "description": " - HTML form object or id."}]}, "_tPubSub": {"return": {"type": "", "description": "void"}, "static": "", "params": [{"type": "string", "name": "e", "description": " - event to be published"}, {"type": "object", "name": "c", "description": " - configuration data subset for event subscription."}], "description": "Method for creating and subscribing transaction events.", "private": ""}, "_purge": {"static": "", "return": {"type": "", "description": "void"}, "description": "Method for removing a specific, pending transaction from\nthe queue.", "private": ""}, "xdrReady": {"return": {"type": "", "description": "void"}, "description": "Fires event \"io:xdrReady\"", "private": "", "static": "", "guessedname": "xdrReady", "guessedtype": "function", "params": [{"type": "number", "name": "id", "description": " - transaction id"}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}]}, "_upload": {"return": {"type": "void", "description": ""}, "description": "Uploads HTML form, inclusive of files\/attachments, using the\niframe created in createFrame to facilitate the transaction.", "private": "", "static": "", "guessedname": "_upload", "guessedtype": "function", "params": [{"type": "o", "name": "o", "description": " The transaction object"}, {"type": "object", "name": "uri", "description": " Qualified path to transaction resource."}, {"type": "object", "name": "c", "description": " Configuration object for the transaction."}]}, "stop": {"return": {"type": "", "description": "void"}, "description": "Method for setting queue processing to inactive.\nTransaction requests to YUI.io.queue() will be stored in the queue, but\nnot processed until the queue is set to \"active\". This is the\ninterface for _stop().", "static": "", "guessedname": "stop", "guessedtype": "property", "public": ""}, "_shift": {"static": "", "return": {"type": "", "description": "void"}, "description": "Method for removing a transaction from the top of the\nqueue, and sending the transaction to _io().", "private": ""}, "_setHeader": {"return": {"type": "", "description": "int"}, "static": "", "params": [{"type": "string", "name": "l", "description": " - HTTP header"}, {"type": "string", "name": "v", "description": " - HTTP header value"}], "description": "Method that stores default client headers for all transactions.\nIf a label is passed with no value argument, the header will be deleted.", "private": ""}, "_swf": {"return": {"type": "", "description": "void"}, "static": "", "params": [{"type": "string", "name": "uri", "description": " - location of IO.swf."}, {"type": "string", "name": "yid", "description": " - YUI instance id."}], "description": "Method that creates the Flash transport swf.", "private": ""}, "_xdr": {"return": {"type": "", "description": "object"}, "description": "Method for accessing the transport's interface for making a\ncross-domain transaction.", "private": "", "static": "", "guessedname": "_xdr", "guessedtype": "function", "params": [{"type": "string", "name": "uri", "description": " - qualified path to transaction resource."}, {"type": "object", "name": "o", "description": " - Transaction object generated by _create() in io-base."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}]}, "_ioComplete": {"return": {"type": "", "description": "void"}, "static": "", "params": [{"type": "object", "name": "o", "description": " - transaction object."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}], "description": "Fires event \"io:complete\" and creates, fires a\ntransaction-specific \"complete\" event, if config.on.complete is\ndefined.", "private": ""}, "appendData": {"return": {"type": "array", "description": "e Array of created fields."}, "static": "", "params": [{"type": "object", "name": "d", "description": " The key-value hash map."}], "description": "Parses the POST data object and creates hidden form elements\nfor each key-value, and appends them to the HTML form object.", "private": ""}, "promote": {"return": {"type": "", "description": "void"}, "description": "Method for promoting a transaction to the top of the queue.\nThis is the interface for _unshift().", "static": "", "guessedname": "promote", "guessedtype": "property", "params": [{"type": "number", "name": "i", "description": " - ID of queued transaction."}], "public": ""}, "_setHeaders": {"return": {"type": "", "description": "void"}, "static": "", "params": [{"type": "object", "name": "o", "description": " - XHR instance for the specific transaction."}, {"type": "object", "name": "h", "description": " - HTTP headers for the specific transaction, as defined\nin the configuration object passed to YUI.io()."}], "description": "Method that sets all HTTP headers to be sent in a transaction.", "private": ""}, "_xhr": {"static": "", "return": {"type": "", "description": "object"}, "description": "Method that creates the XMLHttpRequest transport", "private": ""}, "_queue": {"static": "", "return": {"type": "", "description": "int"}, "description": "Method for requesting a transaction, and queueing the\nrequest before it is sent to the resource.", "private": ""}, "_io": {"return": {"type": "", "description": "object"}, "static": "", "params": [{"type": "string", "name": "uri", "description": " - qualified path to transaction resource."}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}], "description": "Method for requesting a transaction. _io() is implemented as\nyui.io().  Each transaction may include a configuration object.  Its\nproperties are:\nmethod: HTTP method verb (e.g., GET or POST). If this property is not\nnot defined, the default value will be GET.\ndata: This is the name-value string that will be sent as the transaction\ndata.  If the request is HTTP GET, the data become part of\nquerystring. If HTTP POST, the data are sent in the message body.\nxdr: Defines the transport to be used for cross-domain requests.  By\nsetting this property, the transaction will use the specified\ntransport instead of XMLHttpRequest.  Currently, the only alternate\ntransport supported is Flash (e.g., { xdr: 'flash' }).\nform: This is a defined object used to process HTML form as data.  The\nproperties are:\n{\nid: object, \/\/HTML form object or id of HTML form\nuseDisabled: boolean, \/\/Allow disabled HTML form field values\nto be sent as part of the data.\n}\non: This is a defined object used to create and handle specific\nevents during a transaction lifecycle.  These events will fire in\naddition to the global io events. The events are:\nstart - This event is fired when a request is sent to a resource.\ncomplete - This event fires when the transaction is complete.\nsuccess - This event fires when the response status resolves to\nHTTP 2xx.\nfailure - This event fires when the response status resolves to\nHTTP 4xx, 5xx; and, for all transaction exceptions,\nincluding aborted transactions and transaction timeouts.\nend -  This even is fired at the conclusion of the transaction\nlifecycle, after a success or failure resolution.\nThe properties are:\n{\nstart: function(id, args){},\ncomplete: function(id, responseobject, args){},\nsuccess: function(id, responseobject, args){},\nfailure: function(id, responseobject, args){},\nend: function(id, args){}\n}\nEach property can reference a function or be written as an\ninline function.\ncontext: Object reference for an event handler when it is implemented\nas a method of a base object. Defining \"context\" will preserve\nthe proper reference of \"this\" used in the event handler.\nheaders: This is a defined object of client headers, as many as.\ndesired for the transaction.  These headers are sentThe object\npattern is:\n{\nheader: value\n}\ntimeout: This value, defined as milliseconds, is a time threshold for the\ntransaction. When this threshold is reached, and the transaction's\nComplete event has not yet fired, the transaction will be aborted.\narguments: Object, array, string, or number passed to all registered\nevent handlers.  This value is available as the second\nargument in the \"start\" and \"abort\" event handlers; and, it is\nthe third argument in the \"complete\", \"success\", and \"failure\"\nevent handlers.", "private": ""}, "_ioStart": {"return": {"type": "", "description": "void"}, "static": "", "params": [{"type": "number", "name": "id", "description": " - transaction id"}, {"type": "object", "name": "c", "description": " - configuration object for the transaction."}], "description": "Fires event \"io:start\" and creates, fires a\ntransaction-specific start event, if config.on.start is\ndefined.", "private": ""}, "_unshift": {"static": "", "return": {"type": "", "description": "void"}, "description": "Method for promoting a transaction to the top of the queue.", "private": ""}, "_handleResponse": {"return": {"type": "", "description": "void"}, "static": "", "params": [{"type": "object", "name": "o", "description": " - Transaction object generated by _create()."}, {"type": "object", "name": "c", "description": " - Configuration object passed to io()."}], "description": "Method that determines if a transaction response qualifies\nas success or failure, based on the response HTTP status code, and\nfires the appropriate success or failure events.", "private": ""}, "_ioCancel": {"return": {"type": "", "description": "void"}, "static": "", "params": [{"type": "object", "name": "o", "description": " - Transaction object generated by _create()."}, {"type": "object", "name": "c", "description": " - Configuration object passed to YUI.io()."}, {"type": "string", "name": "s", "description": " - Identifies timed out or aborted transaction."}], "description": "Terminates a transaction due to an explicit abort or\ntimeout.", "private": ""}, "_id": {"static": "", "return": {"type": "", "description": "int"}, "description": "Method that increments _transactionId for each transaction.", "private": ""}}, "file": "io-base.js", "shortname": "io", "events": {"io:end": {"type": "Event Custom", "description": "This event signifies the end of the transaction lifecycle.  The\ntransaction transport is destroyed.", "guessedname": "E_END", "guessedtype": "property"}, "io:start": {"type": "Event Custom", "description": "This event is fired by YUI.io when a transaction is initiated.", "guessedname": "E_START", "guessedtype": "property"}, "io:complete": {"type": "Event Custom", "description": "This event is fired by YUI.io when a transaction is complete.\nResponse status and data are accessible, if available.", "guessedname": "E_COMPLETE", "guessedtype": "property"}, "io:failure": {"type": "Event Custom", "description": "This event is fired by YUI.io when a transaction is complete, and\nthe HTTP status resolves to HTTP4xx, 5xx and above.", "guessedname": "E_FAILURE", "guessedtype": "property"}, "io:success": {"type": "Event Custom", "description": "This event is fired by YUI.io when a transaction is complete, and\nthe HTTP status resolves to HTTP2xx.", "guessedname": "E_SUCCESS", "guessedtype": "property"}, "io:xdrReady": {"type": "Event Custom", "description": "This event is fired by YUI.io when the specified transport is\nready for use.", "guessedname": "E_XDR_READY", "guessedtype": "property"}}, "description": "The io class is a utility that brokers HTTP requests through a simplified\ninterface.  Specifically, it allows JavaScript to make HTTP requests to\na resource without a page reload.  The underlying transport for making\nsame-domain requests is the XMLHttpRequest object.  YUI.io can also use\nFlash, if specified as a transport, for cross-domain requests."}, "Do.Method": {"name": "Do.Method", "constructors": [{"params": [{"type": "", "name": "obj", "description": " The object to operate on"}, {"type": "", "name": "sFn", "description": " The name of the method to displace"}], "description": "Wrapper for a displaced method with aop enabled"}], "namespace": "", "module": "event", "guessedname": "Method", "methods": {"register": {"params": [{"type": "string", "name": "sid", "description": "  the subscriber id"}, {"type": "Function", "name": "fn", "description": "  the function to execute"}, {"type": "string", "name": "when", "description": "  when to execute the function"}], "description": "Register a aop subscriber", "guessedname": "register", "guessedtype": "function"}, "exec": {"description": "Execute the wrapped method", "guessedname": "exec", "guessedtype": "function"}, "delete": {"params": [{"type": "string", "name": "sid", "description": "  the subscriber id"}, {"type": "Function", "name": "fn", "description": "  the function to execute"}, {"type": "string", "name": "when", "description": "  when to execute the function"}], "description": "Unregister a aop subscriber", "guessedname": "_delete", "guessedtype": "function"}}, "file": "event-do.js", "guessedtype": "function", "shortname": "Do.Method", "description": "Wrapper for a displaced method with aop enabled"}, "NodeList": {"name": "NodeList", "constructors": [{"description": "The NodeList class provides a wrapper for manipulating DOM NodeLists.\nNodeList properties can be accessed via the set\/get methods.\nUse Y.get() to retrieve NodeList instances.\n<strong>NOTE:<\/strong> NodeList properties are accessed using\nthe <code>set<\/code> and <code>get<\/code> methods."}, {"description": "The NodeList class provides a wrapper for manipulating DOM NodeLists.\nNodeList properties can be accessed via the set\/get methods.\nUse Y.get() to retrieve NodeList instances.\n<strong>NOTE:<\/strong> NodeList properties are accessed using\nthe <code>set<\/code> and <code>get<\/code> methods."}], "namespace": "", "module": "node", "guessedname": "_diff", "methods": {"ancestor": {"return": {"type": "Node", "description": "The matching Node instance or null if not found"}, "params": [{"type": "String | Function", "name": "fn", "description": " A selector or boolean method for testing elements.\nIf a function is used, it receives the current node being tested as the only argument."}], "description": "Returns the nearest ancestor that passes the test applied by supplied boolean method.", "guessedname": "ancestor", "guessedtype": "function"}, "getDOMNode": {"return": {"type": "HTMLNode", "description": "The DOM node bound to the Node instance.  If a DOM node is passed\nas the node argument, it is simply returned."}, "description": "Retrieves the DOM node bound to a Node instance", "static": "", "guessedname": "getDOMNode", "guessedtype": "function", "params": [{"type": "Y.Node || HTMLNode", "name": "node", "description": " The Node instance or an HTMLNode"}]}, "inDoc": {"return": {"type": "Boolean", "description": "Whether or not this node is appended to the document."}, "params": [{"type": "Node|HTMLElement", "name": "doc", "description": " optional An optional document to check against.\nDefaults to current document."}], "description": "Determines whether the node is appended to the document.", "guessedname": "inDoc", "guessedtype": "function"}, "compareTo": {"return": {"type": "Boolean", "description": "True if the nodes match, false if they do not."}, "params": [{"type": "HTMLElement | Node", "name": "refNode", "description": " The reference node to compare to the node."}], "description": "Compares nodes to determine if they match.\nNode instances can be compared to each other and\/or HTMLElements.", "guessedname": "compareTo", "guessedtype": "function"}, "next": {"return": {"type": "Node", "description": "Node instance or null if not found"}, "params": [{"type": "String | Function", "name": "fn", "description": " A selector or boolean method for testing elements.\nIf a function is used, it receives the current node being tested as the only argument."}, {"type": "Boolean", "name": "all", "description": " optional Whether all node types should be returned, or just element nodes."}], "description": "Returns the next matching sibling. \nReturns the nearest element node sibling if no method provided.", "guessedname": "next", "guessedtype": "function"}, "filter": {"return": {"type": "NodeList", "description": "NodeList containing the updated collection"}, "description": "Filters the NodeList instance down to only nodes matching the given selector.", "see": "Selector", "params": [{"type": "String", "name": "selector", "description": " The selector to filter against"}], "guessedname": "filter", "guessedtype": "function"}, "item": {"return": {"type": "Node", "description": "The Node instance at the given index."}, "description": "Retrieves the Node instance at the given index.", "deprecated": "Use NodeList", "param": "{Number} index The index of the target Node.", "params": [{"type": "Number", "name": "index", "description": " The index of the target Node."}], "guessedname": "item", "guessedtype": "function"}, "test": {"return": {"type": "boolean", "description": "Whether or not the node matches the selector."}, "params": [{"type": "string", "name": "selector", "description": " The CSS selector to test against."}], "description": "Test if the supplied node matches the supplied selector.", "guessedname": "test", "guessedtype": "function"}, "each": {"return": {"type": "NodeList", "description": "NodeList containing the updated collection"}, "description": "Applies the given function to each Node in the NodeList.", "deprecated": "Use NodeList", "chainable": "", "param": "{Function} fn The function to apply", "params": [{"type": "Function", "name": "fn", "description": " The function to apply"}, {"type": "Object", "name": "context", "description": " optional An optional context to apply the function with\nDefault context is the NodeList instance"}], "guessedname": "each", "guessedtype": "function"}, "previous": {"return": {"type": "Node", "description": "Node instance or null if not found"}, "params": [{"type": "String | Function", "name": "fn", "description": " A selector or boolean method for testing elements.\nIf a function is used, it receives the current node being tested as the only argument."}, {"type": "Boolean", "name": "all", "description": " optional Whether all node types should be returned, or just element nodes."}], "description": "Returns the previous matching sibling. \nReturns the nearest element node sibling if no method provided.", "guessedname": "previous", "guessedtype": "function"}, "query": {"return": {"type": "Node", "description": "A Node instance for the matching HTMLElement."}, "params": [{"type": "string", "name": "selector", "description": " The CSS selector to test against."}], "description": "Retrieves a Node instance of nodes based on the given CSS selector.", "guessedname": "query", "guessedtype": "function"}, "detach": {"params": [{"type": "String", "name": "type", "description": " The type of DOM Event"}, {"type": "Function", "name": "fn", "description": " The handler to call when the event fires"}], "description": "Detaches a DOM event handler.", "guessedname": "detach", "guessedtype": "function"}, "getDOMNodes": {"return": {"type": "Array", "description": "The array of DOM nodes bound to the NodeList"}, "description": "Retrieves the DOM nodes bound to a NodeList instance", "static": "", "guessedname": "getDOMNodes", "guessedtype": "function", "params": [{"type": "Y.NodeList", "name": "node", "description": " The NodeList instance"}]}, "queryAll": {"return": {"type": "NodeList", "description": "A NodeList instance for the matching HTMLCollection\/Array."}, "params": [{"type": "string", "name": "selector", "description": " The CSS selector to test against."}], "description": "Retrieves a nodeList based on the given CSS selector.", "guessedname": "queryAll", "guessedtype": "function"}, "size": {"deprecated": "Use NodeList", "return": {"type": "Int", "description": "The number of items in the NodeList."}, "description": "Returns the current number of items in the NodeList.", "guessedname": "size", "guessedtype": "function"}}, "file": "node.js", "guessedtype": "function", "shortname": "NodeList", "properties": {"children": {"type": "NodeList", "description": "Returns a NodeList instance."}}, "description": "The NodeList class provides a wrapper for manipulating DOM NodeLists.\nNodeList properties can be accessed via the set\/get methods.\nUse Y.get() to retrieve NodeList instances.\n<strong>NOTE:<\/strong> NodeList properties are accessed using\nthe <code>set<\/code> and <code>get<\/code> methods."}, "Assert.UnexpectedError": {"name": "Assert.UnexpectedError", "constructors": [{"params": [{"type": "Error", "name": "cause", "description": " The unexpected error that caused this error to be \nthrown."}], "description": "UnexpectedError is subclass of Error that is thrown whenever\nan error occurs within the course of a test and the test was not expected\nto throw an error."}], "namespace": "Assert", "module": "yuitest", "guessedname": "UnexpectedError", "extends": "Assert.Error", "superclass": "Assert.Error", "file": "Assert.js", "guessedtype": "function", "shortname": "UnexpectedError", "properties": {"cause": {"type": "Error", "description": "The unexpected error that occurred."}, "name": {"type": "String", "description": "The name of the error that occurred."}, "stack": {"type": "String", "description": "Stack information for the error (if provided)."}}, "description": "UnexpectedError is subclass of Error that is thrown whenever\nan error occurs within the course of a test and the test was not expected\nto throw an error."}, "Do.Prevent": {"name": "Do.Prevent", "namespace": "", "module": "event", "guessedname": "Prevent", "file": "event-do.js", "guessedtype": "function", "shortname": "Do.Prevent", "description": "Return a Prevent object when you want to prevent the wrapped function\nfrom executing, but want the remaining listeners to execute"}, "Node": {"shortname": "Node", "namespace": "", "name": "Node", "properties": {"viewportRegion": {"type": "Node", "description": "Returns a region object for the node's viewport", "guessedname": "viewportRegion", "guessedtype": "property"}, "winWidth": {"type": "{Int}", "description": "Returns the inner width of the viewport (exludes scrollbar)."}, "region": {"type": "Node", "description": "Returns a region object for the node", "guessedname": "region", "guessedtype": "property"}, "docScrollY": {"type": "{Int}", "description": "Amount page has been scroll horizontally"}, "docScrollX": {"type": "{Int}", "description": "Amount page has been scroll vertically"}, "docHeight": {"type": "{Int}", "description": "Document height"}, "winHeight": {"type": "{Int}", "description": "Returns the inner height of the viewport (exludes scrollbar)."}}, "methods": {"getXY": {"return": {"type": "Array", "description": "The XY position of the node"}, "description": "Gets the current position of the node in page coordinates. \nNodes must be part of the DOM tree to have page coordinates\n(display:none or nodes not appended return false)."}, "replaceClass": {"chainable": "", "params": [{"type": "String", "name": "oldClassName", "description": " the class name to be replaced"}, {"type": "String", "name": "newClassName", "description": " the class name that will be replacing the old class name"}], "description": "Replace a class with another class.\nIf no oldClassName is present, the newClassName is simply added."}, "removeClass": {"chainable": "", "params": [{"type": "String", "name": "className", "description": " the class name to remove from the node's class attribute"}], "description": "Removes a class name from the node."}, "getComputedStyle": {"return": {"type": "String", "description": "The computed value of the style property for the element."}, "params": [{"type": "String", "name": "attr", "description": " The style attribute to retrieve."}], "description": "Returns the computed value for the given style property."}, "setStyles": {"chainable": "", "params": [{"type": "Object", "name": "hash", "description": " An object literal of property:value pairs."}], "description": "Sets multiple style properties on the node."}, "getX": {"return": {"type": "Int", "description": "The X position of the node"}, "description": "Gets the current position of the node in page coordinates. \nNodes must be part of the DOM tree to have page coordinates\n(display:none or nodes not appended return false)."}, "getY": {"return": {"type": "Int", "description": "The Y position of the node"}, "description": "Gets the current position of the node in page coordinates. \nNodes must be part of the DOM tree to have page coordinates\n(display:none or nodes not appended return false)."}, "getStyle": {"return": {"type": "String", "description": "The current value of the style property for the element."}, "params": [{"type": "String", "name": "attr", "description": " The style attribute to retrieve."}], "description": "Returns the style's current value."}, "setXY": {"chainable": "", "params": [{"type": "Array", "name": "xy", "description": " Contains X & Y values for new position (coordinates are page-based)"}], "description": "Set the position of the node in page coordinates, regardless of how the node is positioned.\nThe node must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)."}, "inRegion": {"return": {"type": "Object", "description": "An object representing the intersection of the regions."}, "params": [{"type": "Node|Object", "name": "node2", "description": " The node or region to compare with."}, {"type": "Boolean", "name": "all", "description": " Whether or not all of the node must be in the region."}, {"type": "Object", "name": "altRegion", "description": " An alternate region to use (rather than this node's)."}], "description": "Determines whether or not the node is within the giving region.", "guessedname": "inRegion", "guessedtype": "function"}, "intersect": {"return": {"type": "Object", "description": "An object representing the intersection of the regions."}, "params": [{"type": "Node|Object", "name": "node2", "description": " The node or region to compare with."}, {"type": "Object", "name": "altRegion", "description": " An alternate region to use (rather than this node's)."}], "description": "Compares the intersection of the node with another node or region", "guessedname": "intersect", "guessedtype": "function"}, "toggleClass": {"chainable": "", "params": [{"type": "String", "name": "className", "description": " the class name to be toggled"}], "description": "If the className exists on the node it is removed, if it doesn't exist it is added."}, "hasClass": {"return": {"type": "Boolean", "description": "Whether or not the node has the given class."}, "params": [{"type": "String", "name": "className", "description": " the class name to search for"}], "description": "Determines whether the node has the given className."}, "setStyle": {"chainable": "", "params": [{"type": "String", "name": "attr", "description": " The style attribute to set."}, {"type": "String|Number", "name": "val", "description": " The value."}], "description": "Sets a style property of the node."}, "setX": {"chainable": "", "params": [{"type": "Int", "name": "x", "description": " X value for new position (coordinates are page-based)"}], "description": "Set the position of the node in page coordinates, regardless of how the node is positioned.\nThe node must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)."}, "setY": {"chainable": "", "params": [{"type": "Int", "name": "y", "description": " Y value for new position (coordinates are page-based)"}], "description": "Set the position of the node in page coordinates, regardless of how the node is positioned.\nThe node must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)."}, "addClass": {"chainable": "", "params": [{"type": "String", "name": "className", "description": " the class name to add to the node's class attribute"}], "description": "Adds a class name to the node."}}}, "Do": {"name": "Do", "namespace": "", "module": "event", "guessedname": "BEFORE", "methods": {"_inject": {"return": {"type": "string", "description": "handle for the subscription"}, "description": "Execute the supplied method after the specified function", "private": "", "static": "", "guessedname": "_inject", "guessedtype": "function", "params": [{"type": "string", "name": "when", "description": "  before or after"}, {"type": "Function", "name": "fn", "description": "  the function to execute"}, {"type": "", "name": "obj", "description": " the object hosting the method to displace"}, {"type": "string", "name": "sFn", "description": "  the name of the method to displace"}, {"type": "", "name": "c", "description": " The execution context for fn"}]}, "detach": {"params": [{"type": "string", "name": "handle", "description": "  the subscription handle"}], "description": "Detach a before or after subscription", "guessedname": "detach", "guessedtype": "function"}, "after": {"return": {"type": "string", "description": "handle for the subscription"}, "description": "Execute the supplied method after the specified function", "static": "", "guessedname": "after", "guessedtype": "function", "params": [{"type": "Function", "name": "fn", "description": "  the function to execute"}, {"type": "", "name": "obj", "description": " the object hosting the method to displace"}, {"type": "string", "name": "sFn", "description": "  the name of the method to displace"}, {"type": "", "name": "c", "description": " The execution context for fn"}]}, "before": {"return": {"type": "string", "description": "handle for the subscription"}, "description": "Execute the supplied method before the specified function", "static": "", "guessedname": "before", "guessedtype": "function", "params": [{"type": "Function", "name": "fn", "description": "  the function to execute"}, {"type": "", "name": "obj", "description": " the object hosting the method to displace"}, {"type": "string", "name": "sFn", "description": "  the name of the method to displace"}, {"type": "", "name": "c", "description": " The execution context for fn"}]}}, "static": "", "file": "event-do.js", "guessedtype": "property", "shortname": "Do", "properties": {"objs": {"static": "", "description": "Cache of objects touched by the utility", "guessedname": "objs", "guessedtype": "property"}}, "description": "Allows for the insertion of methods that are executed before or after\na specified method"}, "plugin.DropPlugin": {"name": "plugin.DropPlugin", "constructors": [{"description": "This is a simple Drop plugin that can be attached to a Node via the plug method."}], "namespace": "plugin", "module": "dd-plugin", "guessedname": "Drop", "extends": "Drop", "superclass": "Drop", "file": "dd-drop-plugin.js", "guessedtype": "function", "shortname": "DropPlugin", "properties": {"NS": {"type": "{String}", "description": "The Drop instance will be placed on the Node instance under the drop namespace. It can be accessed via Node.drop;", "guessedname": "NS", "guessedtype": "property"}, "NAME": {"type": "{String}", "description": "dd-drop-plugin", "guessedname": "NAME", "guessedtype": "property"}}, "description": "This is a simple Drop plugin that can be attached to a Node via the plug method."}, "Anim": {"shortname": "Anim", "namespace": "", "name": "Anim", "methods": {"getBezier": {"return": {"type": "Array", "description": "An array containing int x and y member data"}, "description": "Get the current position of the animated element based on t.\nEach point is an array of \"x\" and \"y\" values (0 = x, 1 = y)\nAt least 2 points are required (start and end).\nFirst point is start. Last point is end.\nAdditional control points are optional.", "static": "", "guessedname": "getBezier", "guessedtype": "function", "params": [{"type": "Array", "name": "points", "description": " An array containing Bezier points"}, {"type": "Number", "name": "t", "description": " A number between 0 and 1 which is the basis for determining current position"}]}}}, "Get": {"name": "Get", "namespace": "", "module": "yui", "guessedname": "Get", "methods": {"_purge": {"private": "", "description": "Removes the nodes for the specified queue", "guessedname": "_purge", "guessedtype": "function"}, "_finalize": {"description": "Called by the the helper for detecting script load in Safari", "private": "", "static": "", "guessedname": "_finalize", "guessedtype": "function", "params": [{"type": "string", "name": "id", "description": "  the transaction id"}]}, "_autoPurge": {"private": "", "description": "Removes processed queues and corresponding nodes", "guessedname": "_autoPurge", "guessedtype": "function"}, "_finish": {"guessedname": "_finish", "params": [{"type": "string", "name": "id", "description": "  the id of the request"}], "description": "The request is complete, so executing the requester's callback", "private": "", "guessedtype": "function"}, "_linkNode": {"return": {"type": "HTMLElement", "description": "the generated node"}, "description": "Generates a link node", "private": "", "params": [{"type": "string", "name": "url", "description": "  the url for the css file"}, {"type": "Window", "name": "win", "description": "  optional window to create the node in"}], "guessedname": "_linkNode", "guessedtype": "function"}, "script": {"return": {"type": "tId: string", "description": "an object containing info about the transaction"}, "description": "Fetches and inserts one or more script nodes into the head\nof the current document or the document in a specified window.", "static": "", "guessedname": "script", "guessedtype": "function", "params": [{"type": "string|string[]", "name": "url", "description": "  the url or urls to the script(s)"}, {"type": "object", "name": "opts", "description": "  Options: \n<dl>\n<dt>onSuccess<\/dt>\n<dd>\ncallback to execute when the script(s) are finished loading\nThe callback receives an object back with the following\ndata:\n<dl>\n<dt>win<\/dt>\n<dd>the window the script(s) were inserted into<\/dd>\n<dt>data<\/dt>\n<dd>the data object passed in when the request was made<\/dd>\n<dt>nodes<\/dt>\n<dd>An array containing references to the nodes that were\ninserted<\/dd>\n<dt>purge<\/dt>\n<dd>A function that, when executed, will remove the nodes\nthat were inserted<\/dd>\n<dt>\n<\/dl>\n<\/dd>\n<dt>onTimeout<\/dt>\n<dd>\ncallback to execute when a timeout occurs.\nThe callback receives an object back with the following\ndata:\n<dl>\n<dt>win<\/dt>\n<dd>the window the script(s) were inserted into<\/dd>\n<dt>data<\/dt>\n<dd>the data object passed in when the request was made<\/dd>\n<dt>nodes<\/dt>\n<dd>An array containing references to the nodes that were\ninserted<\/dd>\n<dt>purge<\/dt>\n<dd>A function that, when executed, will remove the nodes\nthat were inserted<\/dd>\n<dt>\n<\/dl>\n<\/dd>\n<dt>onFailure<\/dt>\n<dd>\ncallback to execute when the script load operation fails\nThe callback receives an object back with the following\ndata:\n<dl>\n<dt>win<\/dt>\n<dd>the window the script(s) were inserted into<\/dd>\n<dt>data<\/dt>\n<dd>the data object passed in when the request was made<\/dd>\n<dt>nodes<\/dt>\n<dd>An array containing references to the nodes that were\ninserted successfully<\/dd>\n<dt>purge<\/dt>\n<dd>A function that, when executed, will remove any nodes\nthat were inserted<\/dd>\n<dt>\n<\/dl>\n<\/dd>\n<dt>context<\/dt>\n<dd>the execution context for the callbacks<\/dd>\n<dt>win<\/dt>\n<dd>a window other than the one the utility occupies<\/dd>\n<dt>autopurge<\/dt>\n<dd>\nsetting to true will let the utilities cleanup routine purge \nthe script once loaded\n<\/dd>\n<dt>purgethreshold<\/dt>\n<dd>\nThe number of transaction before autopurge should be initiated\n<\/dd>\n<dt>data<\/dt>\n<dd>\ndata that is supplied to the callback when the script(s) are\nloaded.\n<\/dd>\n<dt>insertBefore<\/dt>\n<dd>node or node id that will become the new node's nextSibling<\/dd>\n<\/dl>\n<dt>charset<\/dt>\n<dd>Node charset, default utf-8<\/dd>\n<dt>timeout<\/dt>\n<dd>Number of milliseconds to wait before aborting and firing the timeout event<\/dd>\n<pre>\n&nbsp;&nbsp;Y.Get.script(\n&nbsp;&nbsp;[\"http:\/\/yui.yahooapis.com\/2.5.2\/build\/yahoo\/yahoo-min.js\",\n&nbsp;&nbsp;&nbsp;\"http:\/\/yui.yahooapis.com\/2.5.2\/build\/event\/event-min.js\"], &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;onSuccess: function(o) &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.log(\"won't cause error because Y is the context\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y.log(o.data); \/\/ foo\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y.log(o.nodes.length === 2) \/\/ true\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\/\/ o.purge(); \/\/ optionally remove the script nodes immediately\n&nbsp;&nbsp;&nbsp;&nbsp;&#125;,\n&nbsp;&nbsp;&nbsp;&nbsp;onFailure: function(o) &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y.log(\"transaction failed\");\n&nbsp;&nbsp;&nbsp;&nbsp;&#125;,\n&nbsp;&nbsp;&nbsp;&nbsp;onTimeout: function(o) &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Y.log(\"transaction timed out\");\n&nbsp;&nbsp;&nbsp;&nbsp;&#125;,\n&nbsp;&nbsp;&nbsp;&nbsp;data: \"foo\",\n&nbsp;&nbsp;&nbsp;&nbsp;timeout: 10000, \/\/ 10 second timeout\n&nbsp;&nbsp;&nbsp;&nbsp;context: Y, \/\/ make the YUI instance\n&nbsp;&nbsp;&nbsp;&nbsp;\/\/ win: otherframe \/\/ target another window\/frame\n&nbsp;&nbsp;&nbsp;&nbsp;autopurge: true \/\/ allow the utility to choose when to remove the nodes\n&nbsp;&nbsp;&nbsp;&nbsp;purgetheshold: 1 \/\/ purge previous transaction before next transaction\n&nbsp;&nbsp;&#125;);\n<\/pre>"}]}, "_returnData": {"private": "", "description": "Returns the data payload for callback functions", "guessedname": "_returnData", "guessedtype": "function"}, "queue": {"guessedname": "_queue", "params": [{"type": "string", "name": "type", "description": "  the type of node to insert"}, {"type": "string", "name": "url", "description": "  the url to load"}, {"type": "", "name": "opts", "description": " the hash of options for this request"}], "description": "Saves the state for the request and begins loading\nthe requested urls", "private": "", "guessedtype": "function"}, "_scriptNode": {"return": {"type": "HTMLElement", "description": "the generated node"}, "description": "Generates a script node", "private": "", "params": [{"type": "string", "name": "url", "description": "  the url for the script file"}, {"type": "Window", "name": "win", "description": "  optional window to create the node in"}], "guessedname": "_scriptNode", "guessedtype": "function"}, "_node": {"return": {"type": "HTMLElement", "description": "the generated node"}, "description": "Generates an HTML element, this is not appended to a document", "private": "", "params": [{"type": "string", "name": "type", "description": "  the type of element"}, {"type": "string", "name": "attr", "description": "  the attributes"}, {"type": "Window", "name": "win", "description": "  optional window to create the element in"}], "guessedname": "_node", "guessedtype": "function"}, "abort": {"static": "", "params": [{"type": "string|object", "name": "o", "description": "  Either the tId or the object returned from\nscript() or css()"}], "description": "Abort a transaction", "guessedname": "abort", "guessedtype": "function"}, "_next": {"guessedname": "_next", "params": [{"type": "string", "name": "id", "description": "  the id of the request"}, {"type": "string", "name": "loaded", "description": "  the url that was just loaded, if any"}], "description": "Loads the next item for a given request", "private": "", "guessedtype": "function"}, "_timeout": {"guessedname": "_timeout", "params": [{"type": "string", "name": "id", "description": "  the id of the request"}], "description": "Timeout detected", "private": "", "guessedtype": "function"}, "_track": {"guessedname": "_track", "params": [{"type": "string", "name": "type", "description": "  the type of node to track"}, {"type": "HTMLElement", "name": "n", "description": "  the node to track"}, {"type": "string", "name": "id", "description": "  the id of the request"}, {"type": "string", "name": "url", "description": "  the url that is being loaded"}, {"type": "Window", "name": "win", "description": "  the targeted window"}, {"type": "", "name": "qlength", "description": " the number of remaining items in the queue,\nincluding this one"}, {"type": "Function", "name": "trackfn", "description": "  function to execute when finished\nthe default is _next"}], "description": "Detects when a node has been loaded.  In the case of\nscript nodes, this does not guarantee that contained\nscript is ready to use.", "private": "", "guessedtype": "function"}, "css": {"return": {"type": "tId: string", "description": "an object containing info about the transaction"}, "description": "Fetches and inserts one or more css link nodes into the \nhead of the current document or the document in a specified\nwindow.", "static": "", "guessedname": "css", "guessedtype": "function", "params": [{"type": "string", "name": "url", "description": "  the url or urls to the css file(s)"}, {"type": "", "name": "opts", "description": " Options: \n<dl>\n<dt>onSuccess<\/dt>\n<dd>\ncallback to execute when the css file(s) are finished loading\nThe callback receives an object back with the following\ndata:\n<dl>win<\/dl>\n<dd>the window the link nodes(s) were inserted into<\/dd>\n<dt>data<\/dt>\n<dd>the data object passed in when the request was made<\/dd>\n<dt>nodes<\/dt>\n<dd>An array containing references to the nodes that were\ninserted<\/dd>\n<dt>purge<\/dt>\n<dd>A function that, when executed, will remove the nodes\nthat were inserted<\/dd>\n<dt>\n<\/dl>\n<\/dd>\n<dt>context<\/dt>\n<dd>the execution context for the callbacks<\/dd>\n<dt>win<\/dt>\n<dd>a window other than the one the utility occupies<\/dd>\n<dt>data<\/dt>\n<dd>\ndata that is supplied to the callbacks when the nodes(s) are\nloaded.\n<\/dd>\n<dt>insertBefore<\/dt>\n<dd>node or node id that will become the new node's nextSibling<\/dd>\n<dt>charset<\/dt>\n<dd>Node charset, default utf-8<\/dd>\n<\/dl>\n<pre>\nY.Get.css(\"http:\/\/yui.yahooapis.com\/2.3.1\/build\/menu\/assets\/skins\/sam\/menu.css\");\n<\/pre>\n<pre>\n&nbsp;&nbsp;Y.Get.css(\n&nbsp;&nbsp;[\"http:\/\/yui.yahooapis.com\/2.3.1\/build\/menu\/assets\/skins\/sam\/menu.css\",\n&nbsp;&nbsp;&nbsp;\"http:\/\/yui.yahooapis.com\/2.3.1\/build\/logger\/assets\/skins\/sam\/logger.css\"], &#123;\n&nbsp;&nbsp;&nbsp;&nbsp;insertBefore: 'custom-styles' \/\/ nodes will be inserted before the specified node\n&nbsp;&nbsp;&#125;);\n<\/pre>"}]}}, "static": "", "file": "get.js", "guessedtype": "function", "shortname": "Get", "properties": {"queues": {"private": "", "description": "hash of queues to manage multiple requests", "guessedname": "queues", "guessedtype": "property"}, "nidx": {"guessedname": "nidx", "type": "int", "description": "node index used to generate unique node ids", "private": "", "guessedtype": "property"}, "qidx": {"guessedname": "qidx", "type": "int", "description": "queue index used to generate transaction ids", "private": "", "guessedtype": "property"}, "PURGE_THRESH": {"description": "The number of request required before an automatic purge.\nproperty PURGE_THRESH", "default": "20", "static": "", "guessedname": "PURGE_THRESH", "guessedtype": "property", "type": "int"}, "purging": {"guessedname": "purging", "type": "boolean", "description": "interal property used to prevent multiple simultaneous purge \nprocesses", "private": "", "guessedtype": "property"}}, "description": "Fetches and inserts one or more script or link nodes into the document"}, "Test.Manager": {"name": "Test.Manager", "namespace": "Test", "module": "yuitest", "events": {"testmanagerbegin": {"static": "", "description": "Fires when the test manager starts running all test pages"}, "testmanagercomplete": {"static": "", "params": [{"type": " pages_passed: int, pages_failed: int, tests_passed: int\ntests_failed: int, passed: string[], failed: string[],\npage_results: {} ", "name": "obj", "description": ""}], "description": "Fires when the test manager finishes running all test pages.  External\ntest runners should subscribe to this event in order to get the\naggregated test results."}, "testpagecomplete": {"static": "", "params": [{"type": "page: string, results: object", "name": "obj", "description": "  the name of the\npage that was loaded, and the test suite results"}], "description": "Fires when a test page is complete"}, "testpagebegin": {"static": "", "params": [{"type": "string", "name": "curPage", "description": "  the page being loaded"}], "description": "Fires when loading a test page"}}, "guessedname": "Manager", "methods": {"load": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Signals that a test page has been loaded. This should be called from\nwithin the test page itself to notify the TestManager that it is ready.", "guessedname": "load", "guessedtype": "function"}, "_run": {"return": {"type": "Void", "description": ""}, "description": "Loads the next test page into the iframe.", "private": "", "static": "", "guessedname": "_run", "guessedtype": "function"}, "stop": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Stops the execution of tests.", "guessedname": "stop", "guessedtype": "function"}, "setPages": {"return": {"type": "Void", "description": ""}, "description": "Sets the pages to be loaded.", "static": "", "guessedname": "setPages", "guessedtype": "function", "params": [{"type": "String[]", "name": "pages", "description": " An array of URLs to load."}]}, "start": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Begins the process of running the tests.", "guessedname": "start", "guessedtype": "function"}, "_processResults": {"return": {"type": "Void", "description": ""}, "description": "Processes the results of a test page run, outputting log messages\nfor failed tests.", "private": "", "static": "", "guessedname": "_processResults", "guessedtype": "function"}, "_handleTestRunnerComplete": {"return": {"type": "Void", "description": ""}, "description": "Handles TestRunner.COMPLETE_EVENT, storing the results and beginning\nthe loop again.", "private": "", "static": "", "guessedname": "_handleTestRunnerComplete", "guessedtype": "function", "params": [{"type": "Object", "name": "data", "description": " Data about the event."}]}}, "static": "", "file": "TestManager.js", "guessedtype": "property", "shortname": "Manager", "properties": {"_pages": {"type": "String[]", "static": "", "description": "Array of pages to load.", "private": ""}, "TEST_MANAGER_COMPLETE_EVENT": {"static": "", "type": "string", "description": "Constant for the testmanagercomplete custom event", "final": ""}, "_timeoutId": {"type": "int", "static": "", "description": "The timeout ID for the next iteration through the tests.", "private": ""}, "_logger": {"description": "The logger used to output results from the various tests.", "private": "", "static": "", "guessedname": "_logger", "guessedtype": "property", "type": "YAHOO.tool.TestLogger"}, "TEST_PAGE_BEGIN_EVENT": {"static": "", "type": "string", "description": "Constant for the testpagebegin custom event", "final": ""}, "TEST_PAGE_COMPLETE_EVENT": {"static": "", "type": "string", "description": "Constant for the testpagecomplete custom event", "final": ""}, "_curPage": {"type": "String", "static": "", "description": "The URL of the page currently being executed.", "private": ""}, "_results": {"description": "Aggregated results", "private": "", "static": "", "guessedname": "_results", "guessedtype": "property", "type": "Object"}, "TEST_MANAGER_BEGIN_EVENT": {"static": "", "type": "string", "description": "Constant for the testmanagerbegin custom event", "final": ""}, "_frame": {"type": "Window", "static": "", "description": "The frame used to load and run tests.", "private": ""}}, "description": "Runs pages containing test suite definitions."}, "EventFacade": {"name": "EventFacade", "namespace": "", "module": "event-custom", "methods": {"resolve": {"private": "", "description": "Returns a wrapped node.  Intended to be used on event targets,\nso it will return the node's parent if the target is a text\nnode", "guessedname": "resolve", "guessedtype": "function"}, "preventDefault": {"description": "Prevents the event's default behavior", "guessedname": "preventDefault", "guessedtype": "function"}, "stopPropagation": {"description": "Stops the propagation to the next bubble target", "guessedname": "stopPropagation", "guessedtype": "function"}, "stopImmediatePropagation": {"description": "Stops the propagation to the next bubble target and\nprevents any additional listeners from being exectued\non the current target.", "guessedname": "stopImmediatePropagation", "guessedtype": "function"}, "halt": {"param": "immediate {boolean} if true additional listeners\non the current target will not be executed", "params": [{"type": "boolean", "name": "immediate", "description": "  if true additional listeners\non the current target will not be executed"}], "description": "Stops the event propagation and prevents the default\nevent behavior.", "guessedname": "halt", "guessedtype": "function"}}, "param": "ev {Event} the DOM event", "file": "event-facade.js", "shortname": "EventFacade", "properties": {"webkitKeymap": {"private": "", "description": "webkit key remapping required for Safari < 3.1", "guessedname": "webkitKeymap", "guessedtype": "property"}, "which": {"type": "int", "description": "The button that was pushed.  Same as button.", "guessedname": "which", "guessedtype": "property"}, "relatedTarget": {"type": "Node", "propery": "relatedTarget", "description": "Node reference to the relatedTarget", "guessedname": "relatedTarget", "guessedtype": "property"}, "button": {"type": "int", "description": "The button that was pushed.", "guessedname": "button", "guessedtype": "property"}, "time": {"type": "Date", "description": "Timestamp for the event", "guessedname": "time", "guessedtype": "property"}, "currentTarget": {"type": "Node", "propery": "currentTarget", "description": "Node reference for the element that the listener was attached to.", "guessedname": "currentTarget", "guessedtype": "property"}, "details": {"type": "Array", "description": "The event details.  Currently supported for Custom\nEvents only, where it contains the arguments that\nwere passed to fire().", "guessedname": "details", "guessedtype": "property"}, "pageX": {"type": "int", "description": "The X location of the event on the page (including scroll)", "guessedname": "pageX", "guessedtype": "property"}, "pageY": {"type": "int", "description": "The Y location of the event on the page (including scroll)", "guessedname": "pageY", "guessedtype": "property"}, "charCode": {"type": "int", "description": "The charCode for key events.  Same as keyCode", "guessedname": "charCode", "guessedtype": "property"}, "type": {"type": "string", "description": "The event type", "guessedname": "type", "guessedtype": "property"}, "keyCode": {"type": "int", "description": "The keyCode for key events.  Uses charCode if keyCode is not available", "guessedname": "c", "guessedtype": "property"}, "target": {"type": "Node", "propery": "target", "description": "Node reference for the targeted element", "guessedname": "target", "guessedtype": "property"}}, "description": "Wraps a DOM event, properties requiring browser abstraction are\nfixed here.  Provids a security layer when required."}, "JSON": {"methods": {"parse": {"return": {"type": "MIXED", "description": "the native JavaScript representation of the JSON string"}, "description": "Parse a JSON string, returning the native JavaScript representation.", "throws": "SyntaxError", "static": "", "params": [{"type": "string", "name": "s", "description": "  JSON string data"}, {"type": "function", "name": "reviver", "description": "  (optional) function(k,v) passed each key value\npair of object literals, allowing pruning or altering values"}], "public": ""}, "stringify": {"return": {"type": "string", "description": "JSON string representation of the input"}, "description": "Converts an arbitrary value to a JSON string representation.\nCyclical object or array references are replaced with null.\nIf a whitelist is provided, only matching object keys will be included.\nIf a positive integer or non-empty string is passed as the third\nparameter, the output will be formatted with carriage returns and\nindentation for readability.  If a String is passed (such as \"\\t\") it\nwill be used once for each indentation level.  If a number is passed,\nthat number of spaces will be used.", "static": "", "guessedname": "stringify", "guessedtype": "function", "params": [{"type": "MIXED", "name": "o", "description": "  any arbitrary object to convert to JSON string"}, {"type": "Array|Function", "name": "w", "description": "  (optional) whitelist of acceptable object\nkeys to include, or a replacer function to modify the\nraw value before serialization"}, {"type": "Number|String", "name": "ind", "description": "  (optional) indentation character or depth of\nspaces to format the output."}], "public": ""}, "escapeException": {"return": {"type": "String", "description": "the \\unnnn escapement of the character"}, "description": "Replaces specific unicode characters with their appropriate \\unnnn\nformat. Some browsers ignore certain characters during eval.", "private": "", "params": [{"type": "String", "name": "c", "description": "  Unicode character"}], "guessedname": "_escapeException", "guessedtype": "function"}, "dateToString": {"return": {"type": "String", "description": "stringified Date in UTC format YYYY-MM-DDTHH:mm:SSZ"}, "description": "Serializes a Date instance as a UTC date string.  Used internally by\nstringify.  Override this method if you need Dates serialized in a\ndifferent format.", "static": "", "guessedname": "dateToString", "guessedtype": "function", "params": [{"type": "Date", "name": "d", "description": "  The Date to serialize"}]}, "_revive": {"return": {"type": "MIXED", "description": "The results of the filtered data"}, "description": "Traverses nested objects, applying a reviver function to each (key,value)\nfrom the scope if the key:value's containing object.  The value returned\nfrom the function will replace the original value in the key:value pair.\nIf the value returned is undefined, the key will be omitted from the\nreturned object.", "private": "", "params": [{"type": "MIXED", "name": "data", "description": "  Any JavaScript data"}, {"type": "Function", "name": "reviver", "description": "  filter or mutation function"}], "guessedname": "_revive", "guessedtype": "function"}}, "description": "The JSON Utility provides methods to serialize JavaScript objects into\nJSON strings and parse JavaScript objects from strings containing JSON data.\nThree modules are available for inclusion:\n<ol>\n<li>1. <code>json-parse<\/code> for parsing JSON strings into native JavaScript data<\/li>\n<li>2. <code>json-stringify<\/code> for stringification of JavaScript objects into JSON strings<\/li>\n<li>3. <code>json<\/code> for both parsing and stringification<\/li>\n<\/ol>\nBoth <code>json-parse<\/code> and <code>json-stringify<\/code> create functions in a static JSON class under your YUI instance (e.g. Y.JSON.parse(..)).", "namespace": "", "module": "json", "static": "", "file": "json-parse.js", "shortname": "JSON", "properties": {"_INVALID": {"guessedname": "_INVALID", "type": "{RegExp}", "description": "Final step in the validation.  Regex used to test the string left after\nall previous replacements for invalid characters.", "private": "", "guessedtype": "property"}, "_CHARS": {"description": "Character substitution map for common escapes and special characters.", "private": "", "static": "", "guessedname": "_CHARS", "guessedtype": "property", "type": "{Object}"}, "_VALUES": {"guessedname": "_VALUES", "type": "{RegExp}", "description": "Second step in the validation.  Regex used to replace all simple\nvalues with ']' characters.", "private": "", "guessedtype": "property"}, "_BRACKETS": {"guessedname": "_BRACKETS", "type": "{RegExp}", "description": "Third step in the validation.  Regex used to remove all open square\nbrackets following a colon, comma, or at the beginning of the string.", "private": "", "guessedtype": "property"}, "_SIMPLE": {"protected": "", "type": "{RegExp}", "description": "Test for JSON string of simple data string, number, boolean, or null.\nE.g. '\"some string\"', \"true\", \"false\", \"null\", or numbers \"-123e+7\"\nCurrently FireFox 3.1b2 JSON.parse requires object\/array wrapped data", "guessedname": "_SIMPLE", "guessedtype": "property"}, "_SPECIAL_CHARS": {"guessedname": "_SPECIAL_CHARS", "type": "{RegExp}", "description": "Regex used to capture characters that need escaping before enclosing\ntheir containing string in quotes.", "private": "", "guessedtype": "property"}, "_ESCAPES": {"guessedname": "_ESCAPES", "type": "{RegExp}", "description": "First step in the validation.  Regex used to replace all escape\nsequences (i.e. \"\\\\\", etc) with '@' characters (a non-JSON character).", "private": "", "guessedtype": "property"}, "_UNICODE_EXCEPTIONS": {"guessedname": "_UNICODE_EXCEPTIONS", "type": "{RegExp}", "description": "Replace certain Unicode characters that JavaScript may handle incorrectly\nduring eval--either by deleting them or treating them as line\nendings--with escape sequences.\nIMPORTANT NOTE: This regex will be used to modify the input if a match is\nfound.", "private": "", "guessedtype": "property"}}, "name": "JSON"}, "plugin.DragConstrained": {"name": "plugin.DragConstrained", "configs": {"tickX": {"type": "Number\/false", "description": "The X tick offset the drag node should snap to on each drag move. False for no ticks. Default: false", "guessedname": "tickX", "guessedtype": "property"}, "tickY": {"type": "Number\/false", "description": "The Y tick offset the drag node should snap to on each drag move. False for no ticks. Default: false", "guessedname": "tickY", "guessedtype": "property"}, "constrain2region": {"type": "Object", "description": "An Object Literal containing a valid region (top, right, bottom, left) of page positions to constrain the drag node to.", "guessedname": "constrain2region", "guessedtype": "property"}, "tickYArray": {"type": "Array", "description": "An array of page coordinates to use as Y ticks for drag movement.", "guessedname": "tickYArray", "guessedtype": "property"}, "constrain2node": {"type": "Object", "description": "Will attempt to constrain the drag node to the bounderies of this node.", "guessedname": "constrain2node", "guessedtype": "property"}, "stickX": {"type": "Boolean", "description": "Stick the drag movement to the X-Axis. Default: false", "guessedname": "stickX", "guessedtype": "property"}, "stickY": {"type": "Boolean", "description": "Stick the drag movement to the Y-Axis", "guessedname": "stickY", "guessedtype": "property"}, "gutter": {"type": "String", "description": "CSS style string for the gutter of a region (supports negative values): '5 0' (sets top and bottom to 5px, left and right to 0px), '1 2 3 4' (top 1px, right 2px, bottom 3px, left 4px)", "guessedname": "gutter", "guessedtype": "property"}, "constrain2view": {"type": "Object", "description": "Will attempt to constrain the drag node to the bounderies of the viewport region.", "guessedname": "constrain2view", "guessedtype": "property"}, "tickXArray": {"type": "Array", "description": "An array of page coordinates to use as X ticks for drag movement.", "guessedname": "tickXArray", "guessedtype": "property"}}, "constructors": [{"description": "This is a plugin for the dd-drag module to add the constraining methods to it. It supports constraining to a region, node or viewport. It also\nsupports tick based moves and XY axis constraints."}], "namespace": "plugin", "module": "dd", "events": {"constrain2viewChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "constrain2viewChange", "description": "Fires when the value for the configuration attribute 'constrain2view' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "tickXChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "tickXChange", "description": "Fires when the value for the configuration attribute 'tickX' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "tickXArrayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "tickXArrayChange", "description": "Fires when the value for the configuration attribute 'tickXArray' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "gutterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "gutterChange", "description": "Fires when the value for the configuration attribute 'gutter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "constrain2nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "constrain2nodeChange", "description": "Fires when the value for the configuration attribute 'constrain2node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "stickYChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "stickYChange", "description": "Fires when the value for the configuration attribute 'stickY' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "tickYArrayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "tickYArrayChange", "description": "Fires when the value for the configuration attribute 'tickYArray' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "stickXChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "stickXChange", "description": "Fires when the value for the configuration attribute 'stickX' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "tickYChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "tickYChange", "description": "Fires when the value for the configuration attribute 'tickY' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "constrain2regionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "constrain2regionChange", "description": "Fires when the value for the configuration attribute 'constrain2region' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "DRAG_NODE", "methods": {"_checkRegion": {"return": {"type": "Array", "description": "The new XY that is inside the region"}, "description": "", "private": "", "params": [{"type": "Array", "name": "_xy", "description": " The XY to check if it's in the current region, if it isn't inside the region, it will reset the xy array to be inside the region."}], "guessedname": "_checkRegion", "guessedtype": "function"}, "_checkTicks": {"return": {"type": "Array", "description": "The calced XY coords"}, "description": "This method delegates the proper helper method for tick calculations", "private": "", "params": [{"type": "Array", "name": "xy", "description": " The XY coords for the Drag"}, {"type": "Object", "name": "r", "description": " The optional region that we are bound to."}], "guessedname": "_checkTicks", "guessedtype": "function"}, "getRegion": {"return": {"type": "Object", "description": ""}, "params": [{"type": "Boolean", "name": "inc", "description": " Include the node's height and width"}], "description": "Get the active region: viewport, node, custom region", "guessedname": "getRegion", "guessedtype": "function"}, "align": {"description": "Modifies the Drag.actXY method from the after drag:align event. This is where the constraining happens.", "guessedname": "align", "guessedtype": "function"}, "_handleStart": {"description": "Fires on drag:start and clears the _regionCache", "private": "", "guessedname": "_handleStart", "guessedtype": "function"}, "inRegion": {"return": {"type": "Boolean", "description": "True if the XY is inside the region, false otherwise."}, "params": [{"type": "Array", "name": "xy", "description": " Optional XY to check, if not supplied this.get('dragNode').getXY() is used."}], "description": "Checks if the XY passed or the dragNode is inside the active region.", "guessedname": "inRegion", "guessedtype": "function"}, "_cacheRegion": {"description": "Get's the region and caches it, called from window.resize and when the cache is null", "private": "", "guessedname": "_cacheRegion", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "constrain.js", "guessedtype": "property", "shortname": "DragConstrained", "properties": {"_regionCache": {"guessedname": "_regionCache", "type": "Object", "description": "Store a cache of the region that we are constraining to", "private": "", "guessedtype": "property"}, "con": {"type": "{String}", "description": "The Constrained instance will be placed on the Drag instance under the con namespace.", "guessedname": "NS", "guessedtype": "property"}}, "description": "This is a plugin for the dd-drag module to add the constraining methods to it. It supports constraining to a region, node or viewport. It also\nsupports tick based moves and XY axis constraints."}, "Assert": {"name": "Assert", "namespace": "", "module": "yuitest", "guessedname": "Assert", "methods": {"isTrue": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is true. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "isTrue", "guessedtype": "function"}, "isFalse": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is false. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "isFalse", "guessedtype": "function"}, "isNotNull": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not null. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "isNotNull", "guessedtype": "function"}, "fail": {"static": "", "params": [{"type": "String", "name": "message", "description": " (Optional) The message to display with the failure."}], "description": "Forces an assertion error to occur.", "guessedname": "fail", "guessedtype": "function"}, "isFunction": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is a function.", "guessedname": "isFunction", "guessedtype": "function"}, "isNaN": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not a number.", "guessedname": "isNaN", "guessedtype": "function"}, "isBoolean": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is a Boolean.", "guessedname": "isBoolean", "guessedtype": "function"}, "areNotSame": {"static": "", "params": [{"type": "Object", "name": "unexpected", "description": " The unexpected value."}, {"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not the same as another. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "areNotSame", "guessedtype": "function"}, "isNotNaN": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not the special NaN value.", "guessedname": "isNotNaN", "guessedtype": "function"}, "areNotEqual": {"static": "", "params": [{"type": "Object", "name": "unexpected", "description": " The unexpected value."}, {"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not equal to another. This uses the double equals sign\nso type cohersion may occur.", "guessedname": "areNotEqual", "guessedtype": "function"}, "areSame": {"static": "", "params": [{"type": "Object", "name": "expected", "description": " The expected value."}, {"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is the same as another. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "areSame", "guessedtype": "function"}, "_getCount": {"protected": "", "static": "", "description": "Returns the number of assertions that have been performed.", "guessedname": "_getCount", "guessedtype": "function"}, "isUndefined": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is undefined. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "isUndefined", "guessedtype": "function"}, "isArray": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is an array.", "guessedname": "isArray", "guessedtype": "function"}, "Y.assert": {"static": "", "params": [{"type": "Boolean", "name": "condition", "description": " The condition to test."}, {"type": "String", "name": "message", "description": " The message to display if the assertion fails."}], "description": "Asserts that a given condition is true. If not, then a Y.Assert.Error object is thrown\nand the test fails.", "guessedname": "assert", "guessedtype": "function"}, "isTypeOf": {"static": "", "params": [{"type": "String", "name": "expectedType", "description": " The expected type of the variable."}, {"type": "Object", "name": "actualValue", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is of a particular type.", "guessedname": "isTypeOf", "guessedtype": "function"}, "_formatMessage": {"return": {"type": "String", "description": "The final error message, containing either or both."}, "description": "Formats a message so that it can contain the original assertion message\nin addition to the custom message.", "protected": "", "static": "", "guessedname": "_formatMessage", "guessedtype": "function", "params": [{"type": "String", "name": "customMessage", "description": " The message passed in by the developer."}, {"type": "String", "name": "defaultMessage", "description": " The message created by the error by default."}]}, "_increment": {"protected": "", "static": "", "description": "Increments the number of assertions that have been performed.", "guessedname": "_increment", "guessedtype": "function"}, "areEqual": {"static": "", "params": [{"type": "Object", "name": "expected", "description": " The expected value."}, {"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is equal to another. This uses the double equals sign\nso type cohersion may occur.", "guessedname": "areEqual", "guessedtype": "function"}, "isNumber": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is a number.", "guessedname": "isNumber", "guessedtype": "function"}, "isObject": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is an object.", "guessedname": "isObject", "guessedtype": "function"}, "isString": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is a string.", "guessedname": "isString", "guessedtype": "function"}, "isNotUndefined": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is not undefined. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "isNotUndefined", "guessedtype": "function"}, "isNull": {"static": "", "params": [{"type": "Object", "name": "actual", "description": " The actual value to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is null. This uses the triple equals sign\nso no type cohersion may occur.", "guessedname": "isNull", "guessedtype": "function"}, "_reset": {"protected": "", "static": "", "description": "Resets the number of assertions that have been performed to 0.", "guessedname": "_reset", "guessedtype": "function"}, "isInstanceOf": {"static": "", "params": [{"type": "Function", "name": "expected", "description": " The function that the object should be an instance of."}, {"type": "Object", "name": "actual", "description": " The object to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a value is an instance of a particular object. This may return\nincorrect results when comparing objects from one frame to constructors in\nanother frame. For best results, don't use in a cross-frame manner.", "guessedname": "isInstanceOf", "guessedtype": "function"}}, "static": "", "file": "Assert.js", "guessedtype": "property", "shortname": "Assert", "properties": {"_asserts": {"guessedname": "_asserts", "type": "int", "description": "The number of assertions performed.", "private": "", "guessedtype": "property"}}, "description": "The Assert object provides functions to test JavaScript values against\nknown and expected results. Whenever a comparison (assertion) fails,\nan error is thrown."}, "Slider": {"name": "Slider", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Configuration object"}], "description": "Create a slider to represent an integer value between a given minimum and\nmaximum."}], "namespace": "", "module": "slider", "events": {"axisChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "axisChange", "description": "Fires when the value for the configuration attribute 'axis' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "railEnabledChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "railEnabledChange", "description": "Fires when the value for the configuration attribute 'railEnabled' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "minGutterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "minGutterChange", "description": "Fires when the value for the configuration attribute 'minGutter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "valueSet": {"preventable": "_defPositionThumbFn", "params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>changeEv<\/dt>\n<dd><code>valueChange<\/code> event fired in response to the change in the value attribute<\/dd>\n<\/dl>"}], "description": "Signals a value change via API, requiring the thumb position to be\nupdated.  Triggers the thumb placement logic in the default function\n_defSetThumbPosition.", "guessedname": "defaultFn", "guessedtype": "property"}, "slideEnd": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>ddEvent<\/dt>\n<dd><code>drag:end<\/code> event from the managed DD.Drag instance<\/dd>\n<\/dl>"}], "description": "Signals the end of a thumb drag operation.  Payload includes\nthe DD.Drag instance's drag:end event under key ddEvent."}, "maxGutterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "maxGutterChange", "description": "Fires when the value for the configuration attribute 'maxGutter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "railChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "railChange", "description": "Fires when the value for the configuration attribute 'rail' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "thumbImageChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "thumbImageChange", "description": "Fires when the value for the configuration attribute 'thumbImage' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "minChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "minChange", "description": "Fires when the value for the configuration attribute 'min' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "slideStart": {"params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>ddEvent<\/dt>\n<dd><code>drag:start<\/code> event from the managed DD.Drag instance<\/dd>\n<\/dl>"}], "description": "Signals the beginning of a thumb drag operation.  Payload includes\nthe DD.Drag instance's drag:start event under key ddEvent."}, "valueChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "valueChange", "description": "Fires when the value for the configuration attribute 'value' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "thumbChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "thumbChange", "description": "Fires when the value for the configuration attribute 'thumb' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "sync": {"preventable": "_defSyncFn", "params": [{"type": "Event.Facade", "name": "event", "description": "  Event Facade object"}], "description": "Communicates a request to synchronize the Slider UI with the\nattribute state.  Links the sync request with the default sync\nlogic in the default function _defSyncFn.", "guessedname": "defaultFn", "guessedtype": "property"}, "maxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "maxChange", "description": "Fires when the value for the configuration attribute 'max' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "railSizeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "railSizeChange", "description": "Fires when the value for the configuration attribute 'railSize' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "thumbDrag": {"preventable": "_defUpdateValueFromDD", "params": [{"type": "Event.Facade", "name": "event", "description": "  An Event Facade object with the following attribute specific properties added:\n<dl>\n<dt>ddEvent<\/dt>\n<dd><code>drag:drag<\/code> event from the managed DD.Drag instance<\/dd>\n<\/dl>"}], "description": "Communicates user interaction with the thumb.  Triggers the logic\nto update the value via the default function _defUpdateValueFromDD.", "guessedname": "defaultFn", "guessedtype": "property"}}, "configs": {"thumb": {"default": "null", "type": "Node", "description": "The Node representing the Slider's thumb, usually visualized as a\npointer using a contained image Node (see thumbImage).  The current\nvalue of the Slider is calculated from the centerpoint of this\nNode in relation to the rail Node.  If provided, the thumbImage\nNode is contained within this Node.\nIf no thumbImage is provided and the Node passed as the thumb is an\n<code>img<\/code> element, the assigned Node will be allocated to the\nthumbImage and the thumb container defaulted.", "guessedname": "thumb", "guessedtype": "property"}, "maxGutter": {"default": "0", "type": "Number", "description": "Like CSS padding, the distance in pixels from the inner bottom right\ncorner of the rail node within which the thumb can travel.  Negative\nvalues allow the edge of the thumb to escape the rail node\nboundaries.", "guessedname": "maxGutter", "guessedtype": "property"}, "min": {"default": "0", "type": "Number", "description": "Integer value associated with the left or top terminus of the\nSlider's rail, depending on the configured axis.", "guessedname": "min", "guessedtype": "property"}, "railEnabled": {"default": "true", "type": "Boolean", "description": "Boolean indicating whether clicking and dragging on the rail will\ntrigger thumb movement.", "guessedname": "railEnabled", "guessedtype": "property"}, "max": {"default": "100", "type": "Number", "description": "Integer value associated with the right or bottom terminus of the\nSlider's rail, depending on the configured axis.", "guessedname": "max", "guessedtype": "property"}, "railSize": {"default": "'0'", "type": "String", "description": "The width or height of the rail element representing the physical\nspace along which the thumb can move.  CSS size values (e.g. '30em')\naccepted but converted to pixels during render.\nAlternately, but not recommended, this attribute can be left\nunassigned in favor of specifying height or width.", "guessedname": "railSize", "guessedtype": "property"}, "rail": {"default": "null", "type": "Node", "description": "The Node representing the Slider's rail, usually visualized as a\nbar of some sort using a background image, along which the thumb\nmoves.  This Node contains the thumb Node.", "guessedname": "rail", "guessedtype": "property"}, "value": {"default": "0", "type": "Number", "description": "The current value of the Slider.  This value is interpretted into a\nposition for the thumb along the Slider's rail.", "guessedname": "value", "guessedtype": "property"}, "minGutter": {"default": "0", "type": "Number", "description": "Like CSS padding, the distance in pixels from the inner top left\ncorner of the rail node within which the thumb can travel.  Negative\nvalues allow the edge of the thumb to escape the rail node\nboundaries.", "guessedname": "minGutter", "guessedtype": "property"}, "thumbImage": {"default": "null", "type": "Node|String", "description": "The Node representing the image element to use for the Slider's\nthumb.\nAlternately, an image URL can be passed and an <code>img<\/code>\nNode will be generated accordingly.\nIf no thumbImage is provided and the Node passed as the thumb is an\n<code>img<\/code> element, the assigned Node will be allocated to the\nthumbImage and the thumb container defaulted.\nIf thumbImage is provided but its URL resolves to a 404, a default\nstyle will be applied to maintain basic functionality.", "guessedname": "thumbImage", "guessedtype": "property"}, "axis": {"description": "Axis upon which the Slider's thumb moves.  &quot;x&quot; for\nhorizontal, &quot;y&quot; for vertical.", "writeonce": "", "default": "&quot;x&quot;", "guessedname": "axis", "guessedtype": "property", "type": "String"}}, "methods": {"_setThumbFn": {"return": {"type": "Node", "description": "The Node if found.  Otherwise null."}, "description": "Setter applied to the input when updating the thumb attribute.  Input can\nbe a Node, raw HTMLElement, or a selector string to locate it.", "protected": "", "params": [{"type": "Node|String|HTMLElement", "name": "v", "description": "  The thumb element Node or selector"}], "guessedname": "_setThumbFn", "guessedtype": "function"}, "_defSyncFn": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  Internal sync event"}], "description": "The default synchronization behavior, updating the Slider's DOM state to\nmatch the current attribute values.", "guessedname": "_defSyncFn", "guessedtype": "function"}, "_afterRailSizeChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  railSizeChange custom event"}], "description": "Calls syncUI to update the Slider UI in response to change in the\nrailSize attribute.", "guessedname": "_afterRailSizeChange", "guessedtype": "function"}, "_defPositionThumbFn": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the positionThumb custom event"}], "description": "Calls _uiPositionThumb with the value of the custom event's\n&quot;offset&quot; property.", "guessedname": "_defPositionThumbFn", "guessedtype": "function"}, "_isImageLoading": {"return": {"type": "", "description": "Boolean"}, "description": "Used to determine if there is a current or pending request for the\nthumbImage resource.", "protected": "", "params": [{"type": "Node", "name": "img", "description": "  <code>img<\/code> Node"}], "guessedname": "_isImageLoading", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed durint Slider instantiation. Subscribe to\nafter events for min, max, and railSize.  Publish custom events\nincluding slideStart and slideEnd.", "guessedname": "initializer", "guessedtype": "function"}, "_uiSetRailSize": {"protected": "", "description": "Stores the rail Node's pixel height or width, depending on the Slider's\naxis, for use in calculating thumb position from the value.", "guessedname": "_uiSetRailSize", "guessedtype": "function"}, "_setFactor": {"protected": "", "description": "Calculates the multiplier used to translate the value into a thumb\nposition.", "guessedname": "_setFactor", "guessedtype": "function"}, "_setRailOffsetXY": {"protected": "", "description": "Store the current XY position of the rail Node on the page.  For use in calculating thumb position from value.", "guessedname": "_setRailOffsetXY", "guessedtype": "function"}, "_afterValueChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  valueChange custom event"}], "description": "Fires the internal valueSet event in response to a change in the value\nattribute.", "guessedname": "_afterValueChange", "guessedtype": "function"}, "_setDDGutter": {"protected": "", "description": "Passes the gutter attribute value to the DDConstrain gutter attribute.", "guessedname": "_setDDGutter", "guessedtype": "function"}, "_setThumbImageFn": {"return": {"type": "Node", "description": "The Node if found or created.  Otherwise null."}, "description": "Setter applied to the input when updating the thumbImage attribute.\nInput can be a Node, raw HTMLElement, selector string to locate it, or\nthe URL for an image resource.\nString input will be treated as a selector.  If no element is found using\nthe selector, an <code>img<\/code> Node will be created with the string\nused as the <code>src<\/code> attribute.", "protected": "", "params": [{"type": "Node|String|HTMLElement", "name": "v", "description": "  The thumbImage element Node, selector,\nor image URL"}], "guessedname": "_setThumbImageFn", "guessedtype": "function"}, "_uiPositionThumb": {"protected": "", "params": [{"type": "Number", "name": "xy", "description": "  the desired left or top pixel position of the thumb\nin relation to the rail Node."}], "description": "Places the thumb at a particular X or Y location based on the configured\naxis.", "guessedname": "_uiPositionThumb", "guessedtype": "function"}, "_validateNewValue": {"return": {"type": "", "description": "Boolean"}, "description": "Validator applied to the value attribute. Only numbers between the min\nand max are allowed.", "protected": "", "params": [{"type": "String", "name": "v", "description": "  proposed value for the value attribute"}], "guessedname": "_validateNewValue", "guessedtype": "function"}, "_setAxisFn": {"return": {"type": "String", "description": "lowercased first character of the input string"}, "description": "Setter applied to the input when updating the railSize attribute.", "protected": "", "params": [{"type": "String", "name": "v", "description": "  proposed value for the axis attribute"}], "guessedname": "_setAxisFn", "guessedtype": "function"}, "_setThumbOffset": {"protected": "", "description": "Sets the _thumbOffset property for use in establishing the point in the\nthumb that should align to the rail position representing the calculated\nvalue.", "guessedname": "_setThumbOffset", "guessedtype": "function"}, "_validateNewThumbImage": {"return": {"type": "", "description": "Boolean"}, "description": "Validator applied to the thumbImage attribute. Only allows values through\nbefore the Slider is rendered.", "protected": "", "params": [{"type": "String", "name": "v", "description": "  proposed value for the thumbImage attribute"}], "guessedname": "_validateNewThumbImage", "guessedtype": "function"}, "_afterMaxChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  maxChange custom event"}], "description": "Calls syncUI to update the Slider UI in response to change in the max\nattribute.", "guessedname": "_afterMaxChange", "guessedtype": "function"}, "_validateNewThumb": {"return": {"type": "", "description": "Boolean"}, "description": "Validator applied to the thumb attribute. Only allows values through\nbefore the Slider is rendered.", "protected": "", "params": [{"type": "String", "name": "v", "description": "  proposed value for the thumb attribute"}], "guessedname": "_validateNewThumb", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Calls _bindThumbDD to create the Y.DD instance used to handle the thumb\nmovement and binds Slider interaction to the configured value model.", "guessedname": "bindUI", "guessedtype": "function"}, "_initThumbImage": {"protected": "", "description": "Ensures the thumbImage is a child of the thumb element.", "guessedname": "_initThumbImage", "guessedtype": "function"}, "_bindThumbDD": {"protected": "", "description": "Creates the Y.DD instance used to handle the thumb interaction.", "guessedname": "_bindThumbDD", "guessedtype": "function"}, "_stallDisabledChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  Change event for the disabled attribute"}], "description": "Method subscribed to the disabledChange event when thumbImage is being\nloaded.  Prevents manually enabling the Slider until the thumbImage\nresource is resolved.  Intended value is stored during load and set upon\ncompletion.", "guessedname": "_stallDisabledChange", "guessedtype": "function"}, "_initRailDD": {"protected": "", "description": "Subscribes to the rail Node's mousedown event to actuate the thumb when\nbackgroundEnabled is true.", "guessedname": "_initRailDD", "guessedtype": "function"}, "setValue": {"params": [{"type": "Number", "name": "val", "description": "  the new value"}], "description": "Convenience method for updating the current value of the Slider.\nEquivalent to <code>slider.set(&quot;value&quot;,val)<\/code>.", "guessedname": "setValue", "guessedtype": "function"}, "_imageLoaded": {"protected": "", "params": [{"type": "Node", "name": "img", "description": "  The thumbImage Node"}, {"type": "Event", "name": "e", "description": "  load or error event fired by the thumbImage"}], "description": "Event handler assigned to the thumbImage's load and error event if it\nwas not loaded prior to instantiation.  Calls _ready method and restores\nthe Slider's disabled attribute.", "guessedname": "_imageLoaded", "guessedtype": "function"}, "_validateNewMax": {"return": {"type": "", "description": "Boolean"}, "description": "Validator applied to the max attribute. Only numbers are allowed.", "protected": "", "params": [{"type": "String", "name": "v", "description": "  proposed value for the max attribute"}], "guessedname": "_validateNewMax", "guessedtype": "function"}, "_refresh": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  An attribute change event"}], "description": "Common handler to call syncUI in response to change events that occurred\nafter the Slider is rendered.", "guessedname": "_refresh", "guessedtype": "function"}, "_uiSetThumbSize": {"protected": "", "description": "Captures the thumbs pixel height or width, depending on the Slider's\naxis, for use in positioning calculations.", "guessedname": "_uiSetThumbSize", "guessedtype": "function"}, "_setValueFn": {"return": {"type": "Number", "description": "rounded value or configured min if non-number input"}, "description": "Setter applied to the input when updating the value attribute.", "protected": "", "params": [{"type": "Number", "name": "v", "description": "  proposed new value for the Slider"}], "guessedname": "_setValueFn", "guessedtype": "function"}, "_validateNewRail": {"return": {"type": "", "description": "Boolean"}, "description": "Validator applied to the rail attribute. Only allows values through\nbefore the Slider is rendered.", "protected": "", "params": [{"type": "String", "name": "v", "description": "  proposed value for the rail attribute"}], "guessedname": "_validateNewRail", "guessedtype": "function"}, "_handleRailMouseDown": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  Mousedown event facade"}], "description": "Moves the thumb to the mousedown position and hands control over to DD\nif the Slider is not disabled and railEnabled is true.", "guessedname": "_handleRailMouseDown", "guessedtype": "function"}, "_isImageLoaded": {"return": {"type": "", "description": "Boolean"}, "description": "Used to determine if the image resource loaded successfully or there was\nan error.\nNOTES:\n<ul>\n<li>img load error fired xbrowser for image resources not yet resolved<\/li>\n<li>img.complete reports false in IE for images not yet loaded as well as images that failed to load<\/li>\n<li>img.complete true && img.naturalWidth == 0 in FF and Safari indicate image failed to load<\/li>\n<li>img.complete && img.width == 0 in Opera indicates image failed to load<\/li>\n<\/ul>", "protected": "", "params": [{"type": "Node", "name": "img", "description": "  <code>img<\/code> Node"}], "guessedname": "_isImageLoaded", "guessedtype": "function"}, "_afterThumbChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  thumbChange custom event"}], "description": "Replaces the thumb Node in response to a change in the thumb attribute.\nThis only has effect before the Slider is rendered.", "guessedname": "_afterThumbChange", "guessedtype": "function"}, "_convertValueToOffset": {"protected": "", "params": [{"type": "Number", "name": "v", "description": "  value between the Slider's min and max"}], "description": "Converts a value to an integer offset for the thumb position on the rail.", "guessedname": "_convertValueToOffset", "guessedtype": "function"}, "_afterMinChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  minChange custom event"}], "description": "Calls syncUI to update the Slider UI in response to change in the min\nattribute.", "guessedname": "_afterMinChange", "guessedtype": "function"}, "_scheduleSync": {"protected": "", "description": "Binds to the load and error event on the thumbImage to sync the DOM\nstate with the attribute settings when the image resource is resolved.\nThe Slider is disabled while it waits.", "guessedname": "_scheduleSync", "guessedtype": "function"}, "_initThumb": {"protected": "", "description": "Creates the thumb element (not image) if not provided or discovered via\nHTML_PARSER.  If thumb is present and an <code>img<\/code> element\n<em>and<\/em> no thumbImage provided, reassigns the thumb element to the\nthumbImage and defaults the thumb element as a div.\nMakes sure the thumb is a child of the rail element and calls\n_initThumbImage if thumbImage is provided.", "guessedname": "_initThumb", "guessedtype": "function"}, "_validateNewRailSize": {"return": {"type": "", "description": "Boolean"}, "description": "Validator applied to the railSize attribute. Only css size values (e.g.\n'200px' are allowed.", "protected": "", "params": [{"type": "String", "name": "v", "description": "  proposed value for the railSize attribute"}], "guessedname": "_validateNewRailSize", "guessedtype": "function"}, "_onDDStartDrag": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the DD instance's drag:start custom event"}], "description": "Caches the current page position of the rail element and fires the\nslideStart event in response to the DD's drag:start.", "guessedname": "_onDDStartDrag", "guessedtype": "function"}, "syncUI": {"description": "Synchronizes the DOM state with the attribute settings (most notably\nrailSize and value).  If thumbImage is provided and is still loading,\nsync is delayed until it is complete, since the image's dimensions are\ntaken into consideration for calculations.", "guessedname": "syncUI", "guessedtype": "function"}, "_validateNewAxis": {"return": {"type": "", "description": "Boolean"}, "description": "Validator applied to new values for the axis attribute. Only\n&quot;x&quot; and &quot;y&quot; are permitted.", "protected": "", "params": [{"type": "String", "name": "v", "description": "  proposed value for the axis attribute"}], "guessedname": "_validateNewAxis", "guessedtype": "function"}, "_afterDisabledChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  disabledChange custom event"}], "description": "Locks or unlocks the DD instance in response to a change in the disabled\nattribute.", "guessedname": "_afterDisabledChange", "guessedtype": "function"}, "getValue": {"return": {"type": "Number", "description": "the value"}, "description": "Convenience method for accessing the current value of the Slider.\nEquivalent to <code>slider.get(&quot;value&quot;)<\/code>.", "guessedname": "getValue", "guessedtype": "function"}, "_initRail": {"protected": "", "description": "Creates the rail element if not provided or discovered via HTML_PARSER.", "guessedname": "_initRail", "guessedtype": "function"}, "_ready": {"protected": "", "params": [{"type": "Node", "name": "img", "description": "  the thumbImage Node"}, {"type": "Boolean", "name": "error", "description": "  Indicates an error while loading the thumbImage"}], "description": "Fires the internal sync event, which barring preventDefault should\nexecute _defSyncFn.", "guessedname": "_ready", "guessedtype": "function"}, "_setRailFn": {"return": {"type": "Node", "description": "The Node if found.  Otherwise null."}, "description": "Setter applied to the input when updating the rail attribute.  Input can\nbe a Node, raw HTMLElement, or a selector string to locate it.", "protected": "", "params": [{"type": "Node|String|HTMLElement", "name": "v", "description": "  The rail element Node or selector"}], "guessedname": "_setRailFn", "guessedtype": "function"}, "_validateNewMin": {"return": {"type": "", "description": "Boolean"}, "description": "Validator applied to the min attribute. Only numbers are allowed.", "protected": "", "params": [{"type": "String", "name": "v", "description": "  proposed value for the min attribute"}], "guessedname": "_validateNewMin", "guessedtype": "function"}, "_onDDEndDrag": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the DD instance's drag:end custom event"}], "description": "Fires the slideEnd event.", "guessedname": "_onDDEndDrag", "guessedtype": "function"}, "_defUpdateValueFromDD": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the internal thumbDrag event"}], "description": "The default value update behavior in response to Slider thumb\ninteraction.  Calculates the value using stored offsets, the _factor\nmultiplier and the min value.", "guessedname": "_defUpdateValueFromDD", "guessedtype": "function"}, "_afterThumbImageChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  thumbImageChange custom event"}], "description": "Sets or replaces the thumb's contained <code>img<\/code> Node with the\nnew Node in response to a change in the thumbImage attribute.  This only\nhas effect before the Slider is rendered.", "guessedname": "_afterThumbImageChange", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the Slider.  Calls _initRail and _initThumb.", "guessedname": "renderUI", "guessedtype": "function"}, "_onDDDrag": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the DD instance's drag:drag custom event"}], "description": "Fires the thumbDrag event to queue Slider value update.", "guessedname": "_onDDDrag", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "slider.js", "shortname": "Slider", "properties": {"Slider.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute configuration of\nthe Widget.", "guessedname": "ATTRS", "guessedtype": "property"}, "_thumbSize": {"protected": "", "type": "Number", "description": "Pixel dimension of the thumb Node's width for X axis Sliders or height\nfor Y axis Sliders.  Used with _factor to calculate positional\ncoordinates for the thumb.", "guessedname": "_thumbSize", "guessedtype": "property"}, "_key": {"protected": "", "type": "Object", "description": "Collection of object property names from the appropriate hash set in\nSlider.AXIS_KEYS.", "guessedname": "_key", "guessedtype": "property"}, "_factor": {"protected": "", "type": "Number", "description": "Factor used to translate positional coordinates (e.g. left or top) to\nthe Slider's value.", "guessedname": "_factor", "guessedtype": "property"}, "Slider.NAME": {"type": "String", "static": "", "description": "The identity of the widget.", "guessedname": "NAME", "guessedtype": "property"}, "_disabled": {"protected": "", "type": "Boolean", "description": "Deferred value for the disabled attribute when stalled (see _stall\nproperty).", "guessedname": "_disabled", "guessedtype": "property"}, "Slider.AXIS_KEYS": {"type": "Object", "static": "", "description": "Object property names used for respective X and Y axis Sliders (e.g.\n&quot;left&quot; vs. &quot;top&quot; for placing the thumb according to\nits representative value).", "guessedname": "AXIS_KEYS", "guessedtype": "property"}, "Slider.HTML_PARSER": {"type": "Object", "static": "", "description": "Static Object hash used to capture existing markup for progressive\nenhancement.  Keys correspond to config attribute names and values\nare selectors used to inspect the contentBox for an existing node\nstructure.", "guessedname": "HTML_PARSER", "guessedtype": "property"}, "_railSize": {"protected": "", "type": "Number", "description": "Pixel dimension of the rail Node's width for X axis Sliders or height\nfor Y axis Sliders.  Used with _factor to calculate positional\ncoordinates for the thumb.", "guessedname": "_railSize", "guessedtype": "property"}, "_thumbOffset": {"protected": "", "type": "Number", "description": "Pixel offset of the point in the thumb element from its top\/left edge\nto where the value calculation should take place.  By default, this is\ncalculated to half the width of the thumb, causing the value to be\nmarked from the center of the thumb.", "guessedname": "_thumbOffset", "guessedtype": "property"}, "_stall": {"protected": "", "type": "Object", "description": "Object returned from temporary subscription to disabledChange event to\ndefer setting the disabled state while Slider is loading the thumb\nimage.", "guessedname": "_stall", "guessedtype": "property"}}, "description": "Create a slider to represent an integer value between a given minimum and\nmaximum."}, "Subscriber": {"name": "Subscriber", "constructors": [{"params": [{"type": "Function", "name": "fn", "description": "       The wrapped function to execute"}, {"type": "Object", "name": "context", "description": "  The value of the keyword 'this' in the listener"}, {"type": "Array", "name": "args*", "description": "       0..n additional arguments to supply the listener"}], "description": "Stores the subscriber information to be used when the event fires."}], "namespace": "", "module": "event", "guessedname": "Subscriber", "methods": {"contains": {"return": {"type": "boolean", "description": "true if the supplied arguments match this \nsubscriber's signature."}, "params": [{"type": "Function", "name": "fn", "description": " the function to execute"}, {"type": "Object", "name": "context", "description": " optional 'this' keyword for the listener"}], "description": "Returns true if the fn and obj match this objects properties.\nUsed by the unsubscribe method to match the right subscriber.", "guessedname": "contains", "guessedtype": "function"}, "toString": {"guessedname": "toString", "guessedtype": "function"}, "notify": {"params": [{"type": "", "name": "defaultContext", "description": " The execution context if not overridden\nby the subscriber"}, {"type": "Array", "name": "args", "description": "  Arguments array for the subscriber"}, {"type": "Event.Custom", "name": "ce", "description": "  The custom event that sent the notification"}], "description": "Executes the subscriber.", "guessedname": "notify", "guessedtype": "function"}}, "file": "event-custom.js", "guessedtype": "function", "shortname": "Subscriber", "properties": {"context": {"type": "Object", "description": "Optional 'this' keyword for the listener", "guessedname": "context", "guessedtype": "property"}, "args": {"type": "Array", "description": "Optional additional arguments supplied to subscribe().  If present,\nthese will be appended to the arguments supplied to fire()"}, "id": {"type": "String", "description": "Unique subscriber id", "guessedname": "id", "guessedtype": "property"}, "wrappedFn": {"type": "Function", "description": "}\nfn bound to obj with additional arguments applied via Y.rbind", "guessedname": "wrappedFn", "guessedtype": "property"}, "events": {"type": "{EventTarget}", "description": "Custom events for a given fire transaction.", "guessedname": "events", "guessedtype": "property"}, "fn": {"type": "Function", "description": "The callback that will be execute when the event fires\nThis is wrapped by Y.rbind if obj was supplied.", "guessedname": "fn", "guessedtype": "property"}}, "description": "Stores the subscriber information to be used when the event fires."}, "Base": {"name": "Base", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Object literal of configuration property name\/value pairs"}], "description": "<p>\nProvides a base class for managed attribute based\nobjects, which handles the chaining of initializer and destructor methods\nacross the hierarchy during init and destroy lifecycle methods and \nhandles automatic configuration of registered Attributes, through \nthe static <a href=\"#property_ATTRS\">ATTRS<\/a> property.\n<\/p>\n<p>The Base class also handles prefixing of event types with the static <a href=\"#property_NAME\">NAME<\/a> \nproperty for all events fired from instances of classes derived from Base.<\/p>"}], "namespace": "", "module": "base", "events": {"destroy": {"preventable": "_defDestroyFn", "params": [{"type": "Event.Facade", "name": "e", "description": " Event object"}], "description": "<p>\nLifecycle event for the destroy phase, \nfired prior to destruction. Invoking the preventDefault \nmethod on the event object provided to subscribers will \nprevent destruction from proceeding.\n<\/p>\n<p>\nSubscribers to the \"after\" moment of this event, will be notified\nafter destruction is complete (and as a result cannot prevent\ndestruction).\n<\/p>"}, "destroyedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "destroyedChange", "description": "Fires when the value for the configuration attribute 'destroyed' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "init": {"preventable": "_defInitFn", "params": [{"type": "Event.Facade", "name": "e", "description": " Event object"}, {"type": "", "name": "config", "description": " Object literal of configuration name\/value pairs"}], "description": "<p>\nLifecycle event for the init phase, fired prior to initialization. \nInvoking the preventDefault method on the event object provided \nto subscribers will prevent initialization from occuring.\n<\/p>\n<p>\nSubscribers to the \"after\" momemt of this event, will be notified\nafter initialization of the object is complete (and therefore\ncannot prevent initialization).\n<\/p>"}, "initializedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "initializedChange", "description": "Fires when the value for the configuration attribute 'initialized' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"destroyed": {"description": "Flag indicating whether or not this object\nhas been through the destroy lifecycle phase.", "default": "false", "readonly": "", "guessedname": "destroyed", "guessedtype": "property", "type": "boolean"}, "initialized": {"description": "Flag indicating whether or not this object\nhas been through the init lifecycle phase.", "default": "false", "readonly": "", "guessedname": "initialized", "guessedtype": "property", "type": "boolean"}}, "methods": {"toString": {"return": {"type": "String", "description": "String representation for this object"}, "description": "Default toString implementation. Provides the constructor NAME\nand the instance ID.", "guessedname": "toString", "guessedtype": "function"}, "_defInitFn": {"protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": " Event object"}], "description": "Default init event handler", "guessedname": "_defInitFn", "guessedtype": "function"}, "_initHierarchyData": {"private": "", "guessedname": "_initHierarchyData", "guessedtype": "function"}, "_aggregateAttrs": {"params": [{"type": "Object", "name": "allAttrs", "description": ""}], "private": "", "guessedname": "_aggregateAttrs", "guessedtype": "function"}, "_destroyHierarchy": {"private": "", "description": "Destroys the class hierarchy rooted at this base class by invoking\nthe descructor method on the prototype of each class in the hierarchy.", "guessedname": "_destroyHierarchy", "guessedtype": "function"}, "init": {"return": {"type": "Base", "description": "A reference to this object"}, "description": "Init lifecycle method, invoked during construction.\nFires the init event prior to invoking initializers on\nthe class hierarchy.", "chainable": "", "params": [{"type": "Object", "name": "config", "description": " Object literal of configuration property name\/value pairs"}], "guessedname": "init", "guessedtype": "function", "final": ""}, "_defDestroyFn": {"protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": " Event object"}], "description": "Default destroy event handler", "guessedname": "_defDestroyFn", "guessedtype": "function"}, "_getClasses": {"protected": "", "return": {"type": "Function[]", "description": "An Array of classes (constructor functions), making up the class hierarchy for this object"}, "description": "Returns the class hierarchy for this object, with Base being the last class in the array.", "guessedname": "_getClasses", "guessedtype": "function"}, "build": {"return": {"type": "Function", "description": "A custom class, created from the provided main and extension classes"}, "description": "<p>\nBuilds a constructor function (class) from the\nmain function, and array of extension functions (classes)\nprovided.\n<\/p>\n<p>\nThe cfg object literal supports the following properties\n<\/p>\n<dl>\n<dt>dynamic &#60;boolean&#62;<\/dt>\n<dd>\n<p>If true (default), a completely new class\nis created which extends the main class, and acts as the \nhost on which the extension classes are augmented.<\/p>\n<p>If false, the extensions classes are augmented directly to\nthe main class, modifying the main classes prototype.<\/p>\n<\/dd>\n<dt>aggregates &#60;String[]&#62;<\/dt>\n<dd>An array of static property names, which will get aggregated\non to the built class, in addition to the default properties build \nwill always aggregate as defined by the main class' _buildCfg\nproperty.\n<\/dd>\n<\/dl>", "static": "", "guessedname": "build", "guessedtype": "function", "params": [{"type": "Function", "name": "main", "description": " The name of the new class"}, {"type": "Function", "name": "main", "description": " The main class on which to base the built class"}, {"type": "Function[]", "name": "extensions", "description": " The set of extension classes which will be\naugmented\/aggregated to the built class."}, {"type": "Object", "name": "cfg", "description": " Optional. Configuration for the class."}]}, "_getAttrCfgs": {"protected": "", "return": {"type": "Object", "description": "The hash of attribute configurations, aggregated across classes in the hierarchy"}, "description": "Returns an aggregated set of attribute configurations, by traversing the class hierarchy.", "guessedname": "_getAttrCfgs", "guessedtype": "function"}, "_filterAttrCfs": {"params": [{"type": "Function", "name": "clazz", "description": ""}, {"type": "Objects", "name": "allCfgs", "description": ""}], "private": "", "guessedname": "_filterAttrCfgs", "guessedtype": "function"}, "destroy": {"return": {"type": "Base", "description": "A reference to this object"}, "description": "<p>\nDestroy lifecycle method. Fires the destroy\nevent, prior to invoking destructors for the\nclass hierarchy.\n<\/p>\n<p>\nSubscribers to the destroy\nevent can invoke preventDefault on the event object, to prevent destruction\nfrom proceeding.\n<\/p>", "chainable": "", "guessedname": "destroy", "guessedtype": "function", "final": ""}, "_initHierarchy": {"guessedname": "_initHierarchy", "params": [{"type": "Object", "name": "userConf", "description": " Object literal containing attribute name\/value pairs"}], "description": "Initializes the class hierarchy rooted at this base class,\nwhich includes initializing attributes for each class defined \nin the class's static <a href=\"#property_ATTRS\">ATTRS<\/a> property and invoking the initializer \nmethod on the prototype of each class in the hierarchy.", "private": "", "guessedtype": "function"}}, "uses": ["Attribute, PluginHost"], "file": "Base.js", "shortname": "Base", "properties": {"_buildCfg": {"description": "The build configuration for the Base class.\nDefines the static fields which need to be aggregated,\nwhen this class is used as the main class passed to \nthe <a href=\"#method_build\">Base.build<\/a> method.", "private": "", "static": "", "guessedname": "_buildCfg", "guessedtype": "property", "type": "Object", "final": ""}, "NAME": {"type": "String", "static": "", "description": "<p>\nName string to be used to identify instances of \nthis class, for example in prefixing events.\n<\/p>\n<p>\nClasses extending Base, should define their own\nstatic NAME property.\n<\/p>", "guessedname": "NAME", "guessedtype": "property"}, "name": {"type": "String", "description": "The name string to be used to identify \nthis instance of object.", "guessedname": "name", "guessedtype": "property"}, "ATTRS": {"type": "Object", "static": "", "description": "Object literal defining the set of attributes which\nwill be available for instances of this class, and \nhow they are configured. See Attributes addAtt method\nfor a description of configuration options available \nfor each attribute.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "<p>\nProvides a base class for managed attribute based\nobjects, which handles the chaining of initializer and destructor methods\nacross the hierarchy during init and destroy lifecycle methods and \nhandles automatic configuration of registered Attributes, through \nthe static <a href=\"#property_ATTRS\">ATTRS<\/a> property.\n<\/p>\n<p>The Base class also handles prefixing of event types with the static <a href=\"#property_NAME\">NAME<\/a> \nproperty for all events fired from instances of classes derived from Base.<\/p>"}, "Cookie": {"name": "Cookie", "namespace": "", "module": "cookie", "guessedname": "Cookie", "methods": {"setSub": {"return": {"type": "String", "description": "The created cookie string."}, "description": "Sets a sub cookie with a given name to a particular value.", "static": "", "guessedname": "setSub", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to set."}, {"type": "String", "name": "subName", "description": " The name of the subcookie to set."}, {"type": "Variant", "name": "value", "description": " The value to set."}, {"type": "Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nand secure (true\/false)."}]}, "_parseCookieHash": {"return": {"type": "Object", "description": "An object containing entries for each cookie value."}, "description": "Parses a cookie hash string into an object.", "private": "", "static": "", "guessedname": "_parseCookieHash", "guessedtype": "function", "params": [{"type": "String", "name": "text", "description": " The cookie hash string to parse (format: n1=v1&n2=v2)."}]}, "set": {"return": {"type": "String", "description": "The created cookie string."}, "description": "Sets a cookie with a given name and value.", "static": "", "guessedname": "set", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to set."}, {"type": "Variant", "name": "value", "description": " The value to set for the cookie."}, {"type": "Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nsecure (true\/false), and raw (true\/false). Setting raw to true indicates\nthat the cookie should not be URI encoded before being set."}]}, "setSubs": {"return": {"type": "String", "description": "The created cookie string."}, "description": "Sets a cookie with a given name to contain a hash of name-value pairs.", "static": "", "guessedname": "setSubs", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to set."}, {"type": "Object", "name": "value", "description": " An object containing name-value pairs."}, {"type": "Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nand secure (true\/false)."}]}, "exists": {"return": {"type": "Boolean", "description": "True if the cookie exists, false if not."}, "description": "Determines if the cookie with the given name exists. This is useful for\nBoolean cookies (those that do not follow the name=value convention).", "static": "", "guessedname": "exists", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to check."}]}, "get": {"return": {"type": "Variant", "description": "If no converter is specified, returns a string or null if\nthe cookie doesn't exist. If the converter is specified, returns the value\nreturned from the converter or null if the cookie doesn't exist."}, "description": "Returns the cookie value for the given name.", "static": "", "guessedname": "get", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to retrieve."}, {"type": "Function|Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: raw (true\/false) and converter (a function).\nThe converter function is run on the value before returning it. The\nfunction is not used if the cookie doesn't exist. The function can be\npassed instead of the options object for backwards compatibility. When\nraw is set to true, the cookie value is not URI decoded."}]}, "_parseCookieString": {"return": {"type": "Object", "description": "An object containing entries for each accessible cookie."}, "description": "Parses a cookie string into an object representing all accessible cookies.", "private": "", "static": "", "guessedname": "_parseCookieString", "guessedtype": "function", "params": [{"type": "String", "name": "text", "description": " The cookie string to parse."}, {"type": "Boolean", "name": "shouldDecode", "description": " (Optional) Indicates if the cookie values should be decoded or not. Default is true."}]}, "remove": {"return": {"type": "String", "description": "The created cookie string."}, "description": "Removes a cookie from the machine by setting its expiration date to\nsometime in the past.", "static": "", "guessedname": "remove", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to remove."}, {"type": "Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), \nand secure (true\/false). The expires option will be overwritten\nby the method."}]}, "removeSub": {"return": {"type": "String", "description": "The created cookie string."}, "description": "Removes a sub cookie with a given name.", "static": "", "guessedname": "removeSub", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie in which the subcookie exists."}, {"type": "String", "name": "subName", "description": " The name of the subcookie to remove."}, {"type": "Object", "name": "options", "description": " (Optional) An object containing one or more\ncookie options: path (a string), domain (a string), expires (a Date object),\nremoveIfEmpty (true\/false), and secure (true\/false). This must be the same\nsettings as the original subcookie."}]}, "_createCookieHashString": {"return": {"type": "String", "description": "A string suitable for use as a cookie value."}, "description": "Formats a cookie value for an object containing multiple values.", "private": "", "static": "", "guessedname": "_createCookieHashString", "guessedtype": "function", "params": [{"type": "Object", "name": "hash", "description": " An object of key-value pairs to create a string for."}]}, "getSubs": {"return": {"type": "Object", "description": "An object of name-value pairs if the cookie with the given name\nexists, null if it does not."}, "description": "Returns an object containing name-value pairs stored in the cookie with the given name.", "static": "", "guessedname": "getSubs", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to retrieve."}]}, "getSub": {"return": {"type": "Variant", "description": "If the cookie doesn't exist, null is returned. If the subcookie\ndoesn't exist, null if also returned. If no converter is specified and the\nsubcookie exists, a string is returned. If a converter is specified and the\nsubcookie exists, the value returned from the converter is returned."}, "description": "Returns the value of a subcookie.", "static": "", "guessedname": "getSub", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie to retrieve."}, {"type": "String", "name": "subName", "description": " The name of the subcookie to retrieve."}, {"type": "Function", "name": "converter", "description": " (Optional) A function to run on the value before returning\nit. The function is not used if the cookie doesn't exist."}]}, "_createCookieString": {"return": {"type": "String", "description": "The formatted cookie string."}, "description": "Creates a cookie string that can be assigned into document.cookie.", "private": "", "static": "", "guessedname": "_createCookieString", "guessedtype": "function", "params": [{"type": "String", "name": "name", "description": " The name of the cookie."}, {"type": "String", "name": "value", "description": " The value of the cookie."}, {"type": "Boolean", "name": "encodeValue", "description": " True to encode the value, false to leave as-is."}, {"type": "Object", "name": "options", "description": " (Optional) Options for the cookie."}]}}, "static": "", "file": "Cookie.js", "guessedtype": "property", "shortname": "Cookie", "description": "Cookie utility."}, "Test.Case": {"name": "Test.Case", "constructors": [{"params": [{"type": "", "name": "template", "description": " An object containing any number of test methods, other methods,\nan optional name, and anything else the test case needs."}], "description": "Test case containing various tests to run."}], "namespace": "Test", "module": "yuitest", "guessedname": "Case", "methods": {"tearDown": {"return": {"type": "Void", "description": ""}, "description": "Function to run after each test is executed.", "guessedname": "tearDown", "guessedtype": "function"}, "setUp": {"return": {"type": "Void", "description": ""}, "description": "Function to run before each test is executed.", "guessedname": "setUp", "guessedtype": "function"}, "wait": {"return": {"type": "Void", "description": ""}, "params": [{"type": "Function", "name": "segment", "description": " (Optional) The function to run after the delay.\nIf omitted, the TestRunner will wait until resume() is called."}, {"type": "int", "name": "delay", "description": " (Optional) The number of milliseconds to wait before running\nthe function. If omitted, defaults to zero."}], "description": "Causes the test case to wait a specified amount of time and then\ncontinue executing the given code.", "guessedname": "wait", "guessedtype": "function"}, "resume": {"return": {"type": "Void", "description": ""}, "params": [{"type": "Function", "name": "segment", "description": " (Optional) The function to run.\nIf omitted, the test automatically passes."}], "description": "Resumes a paused test and runs the given function.", "guessedname": "resume", "guessedtype": "function"}}, "file": "TestCase.js", "guessedtype": "function", "shortname": "Case", "description": "Test case containing various tests to run."}, "Test.Runner": {"name": "Test.Runner", "namespace": "Test", "module": "yuitest", "events": {"testcasebegin": {"static": "", "description": "Fires when a test case is opened but before the first \ntest is executed."}, "testcasecomplete": {"static": "", "description": "Fires when all tests in a test case have been executed."}, "begin": {"static": "", "description": "Fires when the run() method is called."}, "ignore": {"static": "", "description": "Fires when a test has been ignored."}, "testsuitebegin": {"static": "", "description": "Fires when a test suite is opened but before the first \ntest is executed."}, "testsuitecomplete": {"static": "", "description": "Fires when all test cases in a test suite have been\ncompleted."}, "pass": {"static": "", "description": "Fires when a test has passed."}, "fail": {"static": "", "description": "Fires when a test has failed."}, "complete": {"static": "", "description": "Fires when all test suites and test cases have been completed."}}, "methods": {"disableLogging": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Disable logging via Y.log(). Test output will not be visible unless\nTestRunner events are subscribed to.", "guessedname": "disableLogging", "guessedtype": "function"}, "_run": {"return": {"type": "Object", "description": "Results of the execution with properties passed, failed, and total."}, "description": "Runs a test case or test suite, returning the results.", "private": "", "static": "", "guessedname": "_run", "guessedtype": "function", "params": [{"type": "Y.Test.Case|Y.Test.Suite", "name": "testObject", "description": " The test case or test suite to run."}]}, "run": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Runs the test suite.", "guessedname": "run", "guessedtype": "function"}, "resume": {"return": {"type": "Void", "description": ""}, "description": "Resumes the TestRunner after wait() was called.", "static": "", "guessedname": "resume", "guessedtype": "function", "params": [{"type": "Function", "name": "segment", "description": " The function to run as the rest\nof the haulted test."}]}, "_logEvent": {"return": {"type": "Void", "description": ""}, "description": "Logs TestRunner events using Y.log().", "private": "", "static": "", "guessedname": "_logEvent", "guessedtype": "function", "params": [{"type": "Object", "name": "event", "description": " The event object for the event."}]}, "_addTestCaseToTestTree": {"return": {"type": "Void", "description": ""}, "description": "Adds a test case to the test tree as a child of the specified node.", "private": "", "static": "", "guessedname": "_addTestCaseToTestTree", "guessedtype": "function", "params": [{"type": "TestNode", "name": "parentNode", "description": " The node to add the test case to as a child."}, {"type": "Y.Test.Case", "name": "testCase", "description": " The test case to add."}]}, "clear": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Removes all test objects from the runner.", "guessedname": "clear", "guessedtype": "function"}, "enableLogging": {"static": "", "return": {"type": "Void", "description": ""}, "description": "Enable logging via Y.log(). Test output is published and can be read via\nlogreader.", "guessedname": "enableLogging", "guessedtype": "function"}, "_buildTestTree": {"return": {"type": "Void", "description": ""}, "description": "Builds the test tree based on items in the master suite. The tree is a hierarchical\nrepresentation of the test suites, test cases, and test functions. The resulting tree\nis stored in _root and the pointer _cur is set to the root initially.", "private": "", "static": "", "guessedname": "_buildTestTree", "guessedtype": "function"}, "_addTestSuiteToTestTree": {"return": {"type": "Void", "description": ""}, "description": "Adds a test suite to the test tree as a child of the specified node.", "private": "", "static": "", "guessedname": "_addTestSuiteToTestTree", "guessedtype": "function", "params": [{"type": "TestNode", "name": "parentNode", "description": " The node to add the test suite to as a child."}, {"type": "Y.Test.Suite", "name": "testSuite", "description": " The test suite to add."}]}, "_handleTestObjectComplete": {"return": {"type": "Void", "description": ""}, "description": "Handles the completion of a test object's tests. Tallies test results \nfrom one level up to the next.", "private": "", "params": [{"type": "TestNode", "name": "node", "description": " The TestNode representing the test object."}], "guessedname": "_handleTestObjectComplete", "guessedtype": "function"}, "add": {"return": {"type": "Void", "description": ""}, "description": "Adds a test suite or test case to the list of test objects to run.", "static": "", "guessedname": "add", "guessedtype": "function", "params": [{"type": "", "name": "testObject", "description": " Either a TestCase or a TestSuite that should be run."}]}, "_next": {"return": {"type": "TestNode", "description": "The next node in the test tree or null if the end is reached."}, "description": "Retrieves the next node in the test tree.", "private": "", "static": "", "guessedname": "_next", "guessedtype": "function"}, "_runTest": {"return": {"type": "Void", "description": ""}, "description": "Runs a single test based on the data provided in the node.", "private": "", "static": "", "guessedname": "_runTest", "guessedtype": "function", "params": [{"type": "TestNode", "name": "node", "description": " The TestNode representing the test to run."}], "name": "_runTest"}}, "static": "", "file": "TestRunner.js", "shortname": "Runner", "properties": {"_root": {"description": "Pointer to the root node in the test tree.", "private": "", "static": "", "guessedname": "_root", "guessedtype": "property", "type": "TestNode"}, "_cur": {"description": "Pointer to the current node in the test tree.", "private": "", "static": "", "guessedname": "_cur", "guessedtype": "property", "type": "TestNode"}, "masterSuite": {"type": "Y.Test.Suite", "static": "", "description": "Suite on which to attach all TestSuites and TestCases to be run.", "private": ""}, "_log": {"description": "Indicates if the TestRunner will log events or not.", "private": "", "static": "", "guessedname": "_log", "guessedtype": "property", "type": "Boolean"}}, "description": "Runs test suites and test cases, providing events to allowing for the\ninterpretation of test results."}, "Do.Halt": {"name": "Do.Halt", "namespace": "", "module": "event", "guessedname": "Halt", "file": "event-do.js", "guessedtype": "function", "shortname": "Do.Halt", "description": "Return a Halt object when you want to terminate the execution\nof all subsequent subscribers as well as the wrapped method\nif it has not exectued yet."}, "History": {"name": "History", "constructors": [{"description": "This class represents an instance of the browser history utility."}], "namespace": "", "module": "history", "methods": {"getBookmarkedState": {"return": {"type": "string", "description": "The bookmarked state of the specified module."}, "description": "Returns the state of a module according to the URL fragment\nidentifier. This method is useful to initialize your modules\nif your application was bookmarked from a particular state.", "params": [{"type": "string", "name": "moduleId", "description": " Non-empty string representing your module."}], "guessedname": "getBookmarkedState", "guessedtype": "function", "public": ""}, "_updateIFrame": {"return": {"type": "boolean", "description": "true if successful. false otherwise."}, "description": "Update the IFrame with our new state.", "private": ""}, "_handleFQStateChange": {"params": [{"type": "string", "name": "fqstate", "description": " fully qualified state"}], "description": "Sets the new currentState attribute of all modules depending on the new fully\nqualified state. Also notifies the modules which current state has changed.", "private": ""}, "getCurrentState": {"return": {"type": "string", "description": "The current state of the specified module."}, "description": "Returns the current state of the specified module.", "params": [{"type": "string", "name": "moduleId", "description": " Non-empty string representing your module."}], "guessedname": "getCurrentState", "guessedtype": "function", "public": ""}, "navigate": {"return": {"type": "boolean", "description": "Indicates whether the new state was successfully added to the history."}, "description": "Stores a new entry in the browser history by changing the state of a registered module.", "params": [{"type": "string", "name": "module", "description": " Non-empty string representing your module."}, {"type": "string", "name": "state", "description": " String representing the new state of the specified module."}], "guessedname": "navigate", "guessedtype": "function", "public": ""}, "_initialize": {"description": "Finish up the initialization of the browser utility library.", "private": ""}, "register": {"return": {"type": "History.Module", "description": "The newly registered module"}, "params": [{"type": "string", "name": "moduleId", "description": " Non-empty string uniquely identifying the\nmodule you wish to register."}, {"type": "string", "name": "initialState", "description": " The initial state of the specified\nmodule corresponding to its earliest history entry."}], "description": "Registers a new module.", "guessedname": "register", "guessedtype": "function"}, "_checkIframeLoaded": {"description": "Periodically checks whether our internal IFrame is ready to be used", "private": ""}, "initialize": {"public": "", "params": [{"type": "string|HTML Element", "name": "stateField", "description": " <input type=\"hidden\"> used\nto store application states. Must be in the static markup."}, {"type": "string|HTML Element", "name": "historyIFrame", "description": " IFrame used to store\nthe history (only required for IE6\/7)"}], "description": "Initializes the Browser History Manager. Call this method\nfrom a script block located right after the opening body tag.", "guessedname": "initialize", "guessedtype": "function"}, "_storeStates": {"description": "Stores the initial state and current state for all registered modules.\nOn Safari, we also store all the fully qualified states visited by\nthe application within a single browser session. The storage takes\nplace in the form field specified during initialization.", "private": ""}, "getQueryStringParameter": {"return": {"type": "string", "description": "The value of the specified parameter, or null."}, "description": "Returns the value of the specified query string parameter.\nThis method is not used internally by the Browser History Manager.\nHowever, it is provided here as a helper since many applications\nusing the Browser History Manager will want to read the value of\nurl parameters to initialize themselves.", "params": [{"type": "string", "name": "paramName", "description": " Name of the parameter we want to look up."}, {"type": "string", "name": "queryString", "description": " Optional URL to look at. If not specified,\nthis method uses the URL in the address bar."}], "guessedname": "getQueryStringParameter", "guessedtype": "function", "public": ""}, "_getHash": {"return": {"type": "string", "description": "The hash portion of the document's location"}, "description": "Returns the portion of the hash after the '#' symbol.", "private": ""}, "multiNavigate": {"return": {"type": "boolean", "description": "Indicates whether the new state was successfully added to the history."}, "description": "Stores a new entry in the browser history by changing the state\nof several registered modules in one atomic operation.", "params": [{"type": "object", "name": "states", "description": " Associative array of module-state pairs to set simultaneously."}], "guessedname": "multiNavigate", "guessedtype": "function", "public": ""}}, "file": "history.js", "shortname": "History", "events": {"history:moduleStateChange": {"type": "Event.Custom", "description": "Fires when the state of a history module object has changed", "guessedname": "EV_HISTORY_MODULE_STATE_CHANGE", "guessedtype": "property"}, "history:ready": {"type": "Event.Custom", "description": "Fires when the browser history utility is ready", "guessedname": "EV_HISTORY_READY", "guessedtype": "property"}, "history:globalStateChange": {"type": "Event.Custom", "description": "Fires when the global state of the page has changed (that is,\nwhen the state of at least one browser history module has changed)", "guessedname": "EV_HISTORY_GLOBAL_STATE_CHANGE", "guessedtype": "property"}}, "description": "This class represents an instance of the browser history utility."}, "plugin.Drag": {"name": "plugin.Drag", "configs": {"node": {"type": "Node", "description": "Y.Node instanace to use as the element to initiate a drag operation", "guessedname": "node", "guessedtype": "property"}, "activeHandle": {"type": "Node", "description": "This config option is set by Drag to inform you of which handle fired the drag event (in the case that there are several handles): default false.", "guessedname": "activeHandle", "guessedtype": "property"}, "dragNode": {"type": "Node", "description": "Y.Node instanace to use as the draggable element, defaults to node", "guessedname": "dragNode", "guessedtype": "property"}, "move": {"type": "Boolean", "description": "If this is false, the drag element will not move with the cursor: default true. Can be used to \"resize\" the element.", "guessedname": "move", "guessedtype": "property"}, "target": {"type": "Boolean", "description": "This attribute only works if the dd-drop module has been loaded. It will make this node a drop target as well as draggable.", "guessedname": "target", "guessedtype": "property"}, "lock": {"type": "Boolean", "description": "Set to lock this drag element so that it can't be dragged: default false.", "guessedname": "lock", "guessedtype": "property"}, "offsetNode": {"type": "Boolean", "description": "Offset the drag element by the difference in cursor position: default true", "guessedname": "offsetNode", "guessedtype": "property"}, "handles": {"type": "Array", "description": "Array of valid handles to add. Adding something here will set all handles, even if previously added with addHandle", "guessedname": "handles", "guessedtype": "property"}, "clickPixelThresh": {"type": "Number", "description": "The number of pixels to move to start a drag operation, default is 3.", "guessedname": "clickPixelThresh", "guessedtype": "property"}, "groups": {"type": "Array", "description": "Array of groups to add this drag into.", "guessedname": "groups", "guessedtype": "property"}, "useShim": {"type": "Boolean", "description": "Use the protective shim on all drag operations: default true. Only works with dd-ddm, not dd-ddm-base.", "guessedname": "useShim", "guessedtype": "property"}, "dragMode": {"type": "String", "description": "This attribute only works if the dd-drop module is active. It will set the dragMode (point, intersect, strict) of this Drag instance.", "guessedname": "dragMode", "guessedtype": "property"}, "bubbles": {"type": "Object", "description": "Controls the default bubble parent for this Drag instance. Default: Y.DD.DDM. Set to false to disable bubbling.", "guessedname": "bubbles", "guessedtype": "property"}, "dragging": {"type": "Boolean", "description": "This attribute is not meant to be used by the implementor, it is meant to be used as an Event tracker so you can listen for it to change.", "guessedname": "dragging", "guessedtype": "property"}, "data": {"type": "Mixed", "description": "A payload holder to store arbitrary data about this drag object, can be used to store any value.", "guessedname": "data", "guessedtype": "property"}, "primaryButtonOnly": {"type": "Boolean", "description": "By default a drag operation will only begin if the mousedown occurred with the primary mouse button. Setting this to false will allow for all mousedown events to trigger a drag.", "guessedname": "primaryButtonOnly", "guessedtype": "property"}, "clickTimeThresh": {"type": "Number", "description": "The number of milliseconds a mousedown has to pass to start a drag operation, default is 1000.", "guessedname": "clickTimeThresh", "guessedtype": "property"}}, "constructors": [{"description": "This class provides the ability to drag a Node."}], "namespace": "plugin", "module": "dd", "properties": {"_groups": {"guessedname": "_groups", "type": "{Array}", "description": "Storage Array for the groups this drag belongs to.", "private": "", "guessedtype": "property"}, "_handles": {"guessedname": "_handles", "type": "{Object}", "description": "A private hash of the valid drag handles", "private": "", "guessedtype": "property"}, "_invalids": {"guessedname": "_invalids", "type": "{Object}", "description": "A private hash of the invalid selector strings", "private": "", "guessedtype": "property"}, "_clickTimeout": {"guessedname": "_clickTimeout", "type": "{Boolean}", "description": "Holder for the setTimeout call", "private": "", "guessedtype": "property"}, "_ev_md": {"guessedname": "_ev_md", "type": "{Event}", "description": "A private reference to the mousedown DOM event", "private": "", "guessedtype": "property"}, "target": {"type": "{Object}", "description": "This will be a reference to the Drop instance associated with this drag if the target: true config attribute is set..", "guessedname": "target", "guessedtype": "property"}, "mouseXY": {"type": "{Array}", "description": "The XY coords of the mousemove", "guessedname": "mouseXY", "guessedtype": "property"}, "_startTime": {"guessedname": "_startTime", "type": "Date", "description": "The getTime of the mousedown event. Not used, just here in case someone wants\/needs to use it.", "private": "", "guessedtype": "property"}, "_endTime": {"guessedname": "_endTime", "type": "Date", "description": "The getTime of the mouseup event. Not used, just here in case someone wants\/needs to use it.", "private": "", "guessedtype": "property"}, "region": {"type": "Object", "description": "A region object associated with this drag, used for checking regions while dragging.", "guessedname": "region", "guessedtype": "property"}, "_dragThreshMet": {"guessedname": "_dragThreshMet", "type": "{Boolean}", "description": "Private flag to see if the drag threshhold was met", "private": "", "guessedtype": "property"}, "actXY": {"type": "{Array}", "description": "The xy that the node will be set to. Changing this will alter the position as it's dragged.", "guessedname": "actXY", "guessedtype": "property"}, "startXY": {"type": "{Array}", "description": "The initial mouse position", "guessedname": "startXY", "guessedtype": "property"}, "nodeXY": {"type": "{Array}", "description": "The initial element position", "guessedname": "nodeXY", "guessedtype": "property"}, "deltaXY": {"type": "{Array}", "description": "The offset of the mouse position to the element's position", "guessedname": "deltaXY", "guessedtype": "property"}, "_invalidsDefault": {"guessedname": "_invalidsDefault", "type": "{Object}", "description": "A private hash of the default invalid selector strings: {'textarea': true, 'input': true, 'a': true, 'button': true}", "private": "", "guessedtype": "property"}, "lastXY": {"type": "{Array}", "description": "The position of the element as it's moving (for offset calculations)", "guessedname": "lastXY", "guessedtype": "property"}, "_fromTimeout": {"guessedname": "_fromTimeout", "type": "{Boolean}", "description": "Flag to determine if the drag operation came from a timeout", "private": "", "guessedtype": "property"}, "_ieSelectBack": {"private": "", "description": "We will hold a copy of the current \"onselectstart\" method on this property, and reset it after we are done using it.", "guessedname": "_ieSelectBack", "guessedtype": "property"}, "realXY": {"type": "{Array}", "description": "The real xy position of the node.", "guessedname": "realXY", "guessedtype": "property"}}, "guessedname": "DDM", "methods": {"addToGroup": {"return": {"type": "Self", "description": ""}, "description": "Add this Drag instance to a group, this should be used for on-the-fly group additions.", "chainable": "", "params": [{"type": "String", "name": "g", "description": " The group to add this Drag Instance to."}], "guessedname": "addToGroup", "guessedtype": "function"}, "_setStartPosition": {"guessedname": "_setStartPosition", "params": [{"type": "Array", "name": "xy", "description": " The XY coords to set the position to."}], "description": "Sets the current position of the Element and calculates the offset", "private": "", "guessedtype": "function"}, "_fixDragStart": {"description": "The function we use as the ondragstart handler when we start a drag in Internet Explorer. This keeps IE from blowing up on images as drag handles.", "private": "", "guessedname": "_fixDragStart", "guessedtype": "function"}, "_defDragFn": {"guessedname": "_defDragFn", "params": [{"type": "Event", "name": "ev", "description": " The drag:drag event"}], "description": "Default function for drag:drag. Fired from _moveNode.", "private": "", "guessedtype": "function"}, "stopDrag": {"chainable": "", "return": {"type": "Self", "description": ""}, "description": "Method will forcefully stop a drag operation. For example calling this from inside an ESC keypress handler will stop this drag.", "guessedname": "stopDrag", "guessedtype": "function"}, "_move": {"guessedname": "_move", "params": [{"type": "Event", "name": "ev", "description": " The mousemove DOM event"}], "description": "Fired from DragDropMgr (DDM) on mousemove.", "private": "", "guessedtype": "function"}, "validClick": {"return": {"type": "Boolean", "description": ""}, "params": [], "description": "Method first checks to see if we have handles, if so it validates the click against the handle. Then if it finds a valid handle, it checks it against the invalid handles list. Returns true if a good handle was used, false otherwise.", "guessedname": "validClick", "guessedtype": "function"}, "removeInvalid": {"return": {"type": "Self", "description": ""}, "description": "Remove an invalid handle added by addInvalid", "chainable": "", "params": [{"type": "String", "name": "str", "description": " The invalid handle to remove from the internal list."}], "guessedname": "removeInvalid", "guessedtype": "function"}, "addHandle": {"return": {"type": "Self", "description": ""}, "description": "Add a handle to a drag element. Drag only initiates when a mousedown happens on this element.", "chainable": "", "params": [{"type": "String", "name": "str", "description": " The selector to test for a valid handle. Must be a child of the element."}], "guessedname": "addHandle", "guessedtype": "function"}, "initializer": {"description": "Internal init handler", "private": "", "guessedname": "initializer", "guessedtype": "function"}, "removeHandle": {"return": {"type": "Self", "description": ""}, "description": "Remove a Selector added by addHandle", "chainable": "", "params": [{"type": "String", "name": "str", "description": " The selector for the handle to be removed."}], "guessedname": "removeHandle", "guessedtype": "function"}, "_handleMouseDownEvent": {"guessedname": "_handleMouseDownEvent", "params": [], "description": "Handler for the mousedown DOM event", "private": "", "guessedtype": "function"}, "end": {"chainable": "", "return": {"type": "Self", "description": ""}, "description": "Ends the drag operation", "guessedname": "end", "guessedtype": "function"}, "_moveNode": {"description": "This method performs the actual element move.", "private": "", "guessedname": "_moveNode", "guessedtype": "function"}, "destructor": {"description": "Lifecycle destructor, unreg the drag from the DDM and remove listeners", "private": "", "guessedname": "destructor", "guessedtype": "function"}, "start": {"chainable": "", "return": {"type": "Self", "description": ""}, "description": "Starts the drag operation", "guessedname": "start", "guessedtype": "function"}, "_ieSelectFix": {"description": "The function we use as the onselectstart handler when we start a drag in Internet Explorer", "private": "", "guessedname": "_ieSelectFix", "guessedtype": "function"}, "_defAlignFn": {"guessedname": "_defAlignFn", "params": [{"type": "Event", "name": "e", "description": " The drag:align event."}], "description": "Calculates the offsets and set's the XY that the element will move to.", "private": "", "guessedtype": "function"}, "_createEvents": {"description": "This method creates all the events for this Event Target and publishes them so we get Event Bubbling.", "private": "", "guessedname": "_createEvents", "guessedtype": "function"}, "_timeoutCheck": {"description": "The method passed to setTimeout to determine if the clickTimeThreshold was met.", "private": "", "guessedname": "_timeoutCheck", "guessedtype": "function"}, "removeFromGroup": {"return": {"type": "Self", "description": ""}, "description": "Remove this Drag instance from a group, this should be used for on-the-fly group removals.", "chainable": "", "params": [{"type": "String", "name": "g", "description": " The group to remove this Drag Instance from."}], "guessedname": "removeFromGroup", "guessedtype": "function"}, "_fixIEMouseUp": {"description": "This method copies the _ieSelectFix property back to the onselectstart listner on the document.", "private": "", "guessedname": "_fixIEMouseUp", "guessedtype": "function"}, "_alignNode": {"guessedname": "_alignNode", "params": [{"type": "Array", "name": "eXY", "description": " The XY to move the element to, usually comes from the mousemove DOM event."}], "description": "This method performs the alignment before the element move.", "private": "", "guessedtype": "function"}, "_prep": {"description": "Attach event listners and add classname", "private": "", "guessedname": "_prep", "guessedtype": "function"}, "addInvalid": {"return": {"type": "Self", "description": ""}, "description": "Add a selector string to test the handle against. If the test passes the drag operation will not continue.", "chainable": "", "params": [{"type": "String", "name": "str", "description": " The selector to test against to determine if this is an invalid drag handle."}], "guessedname": "addInvalid", "guessedtype": "function"}, "_defMouseDownFn": {"guessedname": "_defMouseDownFn", "params": [], "description": "Handler for the mousedown DOM event", "private": "", "guessedtype": "function"}, "_handleMouseUp": {"guessedname": "_handleMouseUp", "params": [], "description": "Handler for the mouseup DOM event", "private": "", "guessedtype": "function"}, "_align": {"guessedname": "_align", "params": [{"type": "Array", "name": "xy", "description": " The xy coords to align with."}], "description": "Calculates the offsets and set's the XY that the element will move to.", "private": "", "guessedtype": "function"}, "_handleTarget": {"return": {"type": "Boolean\/Object", "description": ""}, "description": "Attribute handler for the target config attribute.", "private": "", "params": [], "guessedname": "_handleTarget", "guessedtype": "function"}, "_unprep": {"description": "Detach event listeners and remove classname", "private": "", "guessedname": "_unprep", "guessedtype": "function"}, "_fixIEMouseDown": {"description": "This method copies the onselectstart listner on the document to the _ieSelectFix property", "private": "", "guessedname": "_fixIEMouseDown", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "drag.js", "guessedtype": "property", "shortname": "Drag", "events": {"clickPixelThreshChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "clickPixelThreshChange", "description": "Fires when the value for the configuration attribute 'clickPixelThresh' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "groupsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "groupsChange", "description": "Fires when the value for the configuration attribute 'groups' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "drag:afterMouseDown": {"description": "Fires after the mousedown event has been cleared.", "params": [{"type": "Event", "name": "ev", "description": " The mousedown event."}], "guessedname": "EV_AFTER_MOUSE_DOWN", "guessedtype": "property", "bubbles": "DDM", "type": "Event.Custom"}, "bubblesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "bubblesChange", "description": "Fires when the value for the configuration attribute 'bubbles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "offsetNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "offsetNodeChange", "description": "Fires when the value for the configuration attribute 'offsetNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "draggingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "draggingChange", "description": "Fires when the value for the configuration attribute 'dragging' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "handlesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "handlesChange", "description": "Fires when the value for the configuration attribute 'handles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "dataChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "dataChange", "description": "Fires when the value for the configuration attribute 'data' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "drag:removeInvalid": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires after an invalid selector is removed.", "guessedname": "EV_REMOVE_INVALID", "guessedtype": "property"}, "dragModeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "dragModeChange", "description": "Fires when the value for the configuration attribute 'dragMode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "primaryButtonOnlyChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "primaryButtonOnlyChange", "description": "Fires when the value for the configuration attribute 'primaryButtonOnly' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "drag:mouseDown": {"description": "Handles the mousedown DOM event, checks to see if you have a valid handle then starts the drag timers.", "params": [{"type": "Event", "name": "ev", "description": " The mousedown event."}], "guessedname": "EV_MOUSE_DOWN", "guessedtype": "property", "preventable": "_defMouseDownFn", "bubbles": "DDM", "type": "Event.Custom"}, "drag:align": {"description": "Fires when this node is aligned.", "guessedname": "EV_ALIGN", "guessedtype": "property", "preventable": "_defAlignFn", "bubbles": "DDM", "type": "Event.Custom"}, "drag:addHandle": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires after a handle is added.", "guessedname": "EV_ADD_HANDLE", "guessedtype": "property"}, "drag:removeHandle": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires after a handle is removed.", "guessedname": "EV_REMOVE_HANDLE", "guessedtype": "property"}, "activeHandleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "activeHandleChange", "description": "Fires when the value for the configuration attribute 'activeHandle' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "drag:start": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires at the start of a drag operation.", "guessedname": "EV_START", "guessedtype": "property"}, "useShimChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "useShimChange", "description": "Fires when the value for the configuration attribute 'useShim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "clickTimeThreshChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "clickTimeThreshChange", "description": "Fires when the value for the configuration attribute 'clickTimeThresh' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "lockChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "lockChange", "description": "Fires when the value for the configuration attribute 'lock' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "targetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "targetChange", "description": "Fires when the value for the configuration attribute 'target' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "drag:enter": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires when this node enters a Drop Target. (Fired from dd-drop)"}, "drag:addInvalid": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires after an invalid selector is added.", "guessedname": "EV_ADD_INVALID", "guessedtype": "property"}, "drag:drag": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires every mousemove during a drag operation.", "guessedname": "EV_DRAG", "guessedtype": "property"}, "nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "dragNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "dragNodeChange", "description": "Fires when the value for the configuration attribute 'dragNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "drag:drophit": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires when this node is dropped on a valid Drop Target. (Fired from dd-ddm-drop)"}, "drag:dropmiss": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires when this node is dropped on an invalid Drop Target. (Fired from dd-ddm-drop)", "guessedname": "Drag", "guessedtype": "function"}, "drag:over": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires when this node is over a Drop Target. (Fired from dd-drop)"}, "drag:exit": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires when this node exits a Drop Target. (Fired from dd-drop)"}, "moveChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "moveChange", "description": "Fires when the value for the configuration attribute 'move' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "drag:end": {"bubbles": "DDM", "type": "Event.Custom", "description": "Fires at the end of a drag operation.", "guessedname": "EV_END", "guessedtype": "property"}}, "description": "This class provides the ability to drag a Node."}, "Event.Target": {"name": "Event.Target", "namespace": "", "module": "event", "guessedname": "L", "methods": {"_getType": {"description": "If the instance has a prefix attribute and the\nevent type is not prefixed, the instance prefix is\napplied to the supplied type.", "guessedname": "_getType", "guessedtype": "function"}, "_parseType": {"private": "", "description": "Returns an array with the detach key (if provided),\nand the prefixed event name from _getType\nY.on('detachkey, menu:click', fn)", "guessedname": "_parseType", "guessedtype": "function"}}, "file": "event-target.js", "guessedtype": "property", "shortname": "Event.Target", "description": "EventTarget is designed to be used with Y.augment to wrap \nEventCustom in an interface that allows events to be listened to \nand fired by name.  This makes it possible for implementing code to\nsubscribe to an event that either has not been created yet, or will\nnot be created at all."}, "Test.Format.Mock": {"name": "Test.Format.Mock", "constructors": [{"params": [{"type": "Object", "name": "template", "description": " (Optional) An object whose methods\nshould be stubbed out on the mock object."}], "description": "Creates a new mock object."}], "namespace": "Test.Format", "module": "yuitest", "guessedname": "Mock", "methods": {"verify": {"return": {"type": "void", "description": ""}, "description": "Verifies that all expectations of a mock object have been met and\nthrows an assertion error if not.", "static": "", "guessedname": "verify", "guessedtype": "function", "params": [{"type": "Object", "name": "mock", "description": " The object to verify.."}]}, "expect": {"return": {"type": "void", "description": ""}, "description": "Assigns an expectation to a mock object. This is used to create\nmethods and properties on the mock object that are monitored for\ncalls and changes, respectively.", "static": "", "guessedname": "expect", "guessedtype": "function", "params": [{"type": "Object", "name": "mock", "description": " The object to add the expectation to."}, {"type": "Object", "name": "expectation", "description": " An object defining the expectation. For\na method, the keys \"method\" and \"args\" are required with\nan optional \"returns\" key available. For properties, the keys\n\"property\" and \"value\" are required."}]}}, "file": "Mock.js", "guessedtype": "function", "shortname": "Mock", "description": "Creates a new mock object."}, "Lang": {"name": "Lang", "namespace": "", "module": "yui", "guessedname": "Lang", "methods": {"isArray": {"return": {"type": "boolean", "description": "true if o is an array"}, "description": "Determines whether or not the provided item is an array.\nReturns false for array-like collections such as the\nfunction arguments collection or HTMLElement collection\nwill return false.  You can use @see Array.test if you \nwant to", "static": "", "guessedname": "isArray", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test"}]}, "trim": {"return": {"type": "string", "description": "the trimmed string"}, "description": "Returns a string without any leading or trailing whitespace.  If \nthe input is not a string, the input will be returned untouched.", "static": "", "guessedname": "trim", "guessedtype": "function", "params": [{"type": "string", "name": "s", "description": "  the string to trim"}]}, "isDate": {"return": {"type": "boolean", "description": "true if o is a date"}, "description": "Determines whether or not the supplied item is a date instance", "static": "", "guessedname": "isDate", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test"}]}, "isString": {"return": {"type": "boolean", "description": "true if o is a string"}, "description": "Determines whether or not the provided item is a string", "static": "", "guessedname": "isString", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test"}]}, "isBoolean": {"return": {"type": "boolean", "description": "true if o is a boolean"}, "description": "Determines whether or not the provided item is a boolean", "static": "", "guessedname": "isBoolean", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test"}]}, "isNull": {"return": {"type": "boolean", "description": "true if o is null"}, "description": "Determines whether or not the provided item is null", "static": "", "guessedname": "isNull", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test"}]}, "isValue": {"return": {"type": "boolean", "description": "true if it is not null\/undefined\/NaN || false"}, "description": "A convenience method for detecting a legitimate non-null value.\nReturns false for null\/undefined\/NaN, true for other values, \nincluding 0\/false\/''", "static": "", "guessedname": "isValue", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The item to test"}]}, "isFunction": {"return": {"type": "boolean", "description": "true if o is a function"}, "description": "Determines whether or not the provided item is a function\nNote: Internet Explorer thinks certain functions are objects:\nvar obj = document.createElement(\"object\");\nY.Lang.isFunction(obj.getAttribute) \/\/ reports false in IE\nvar input = document.createElement(\"input\"); \/\/ append to body\nY.Lang.isFunction(input.focus) \/\/ reports false in IE\nYou will have to implement additional tests if these functions\nmatter to you.", "static": "", "guessedname": "isFunction", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test"}]}, "isNumber": {"return": {"type": "boolean", "description": "true if o is a number"}, "description": "Determines whether or not the provided item is a legal number", "static": "", "guessedname": "isNumber", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test"}]}, "type": {"return": {"type": "string", "description": "the detected type"}, "params": [{"type": "", "name": "o", "description": " the item to test"}], "description": "Returns a string representing the type of the item passed in.", "guessedname": "type", "guessedtype": "function"}, "isObject": {"return": {"type": "boolean", "description": "true if o is an object"}, "description": "Determines whether or not the provided item is of type object\nor function", "static": "", "guessedname": "isObject", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test"}, {"type": "boolean", "name": "failfn", "description": "  fail if the input is a function"}]}, "isUndefined": {"return": {"type": "boolean", "description": "true if o is undefined"}, "description": "Determines whether or not the provided item is undefined", "static": "", "guessedname": "isUndefined", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " The object to test"}]}}, "static": "", "file": "yui-lang.js", "guessedtype": "property", "shortname": "Lang", "description": "Provides the language utilites and extensions used by the library"}, "Overlay": {"name": "Overlay", "constructors": [{"params": [{"type": "Object", "name": "object", "description": " The user configuration for the instance."}], "description": "A basic Overlay Widget, which can be positioned based on Page XY co-ordinates and is stackable (z-index support).\nIt also provides alignment and centering support and uses a standard module format for it's content, with header,\nbody and footer section support."}], "namespace": "", "module": "overlay", "guessedname": "Overlay", "uses": ["WidgetPosition", "WidgetStack", "WidgetPositionExt", "WidgetStdMod"], "superclass": "Widget", "file": "Overlay.js", "guessedtype": "property", "extends": "Widget", "shortname": "Overlay", "description": "A basic Overlay Widget, which can be positioned based on Page XY co-ordinates and is stackable (z-index support).\nIt also provides alignment and centering support and uses a standard module format for it's content, with header,\nbody and footer section support."}, "History.Module": {"name": "History.Module", "constructors": [{"params": [{"type": "String", "name": "id", "description": "  the module identifier"}, {"type": "String", "name": "initialState", "description": "  the module's initial state"}], "description": "This class represents a browser history module."}], "namespace": "", "module": "history", "guessedname": "Module", "file": "history.js", "guessedtype": "function", "shortname": "History.Module", "properties": {"upcomingState": {"description": "The module's upcoming state. There can be a slight delay between the\ntime a state is changed, and the time a state change is detected.\nThis property allows us to not fire the module state changed event\nmultiple times, making client code simpler.", "private": "", "guessedname": "upcomingState", "guessedtype": "property", "type": "String", "final": ""}, "id": {"final": "", "type": "String", "description": "The module identifier", "guessedname": "id", "guessedtype": "property"}, "currentState": {"final": "", "type": "String", "description": "The module's current state", "guessedname": "currentState", "guessedtype": "property"}, "initialState": {"final": "", "type": "String", "description": "The module's initial state", "guessedname": "initialState", "guessedtype": "property"}}, "description": "This class represents a browser history module."}, "Do.AlterArgs": {"name": "Do.AlterArgs", "namespace": "", "module": "event", "guessedname": "AlterArgs", "file": "event-do.js", "guessedtype": "function", "shortname": "Do.AlterArgs", "description": "Return an AlterArgs object when you want to change the arguments that\nwere passed into the function.  An example would be a service that scrubs\nout illegal characters prior to executing the core business logic."}, "Plugin": {"properties": {"Plugin.NS": {"type": "{String}", "static": "", "description": "Static property provides the namespace the plugin will be\nregistered under.", "guessedname": "NS", "guessedtype": "property"}, "Plugin.NAME": {"type": "{String}", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "name": "Plugin", "namespace": "", "module": "plugin", "events": {"hostChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "hostChange", "description": "Fires when the value for the configuration attribute 'host' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"doAfter": {"return": {"type": "", "description": "Handle A handle that can be used to detach the handler (e.g. \"handle.detach()\")."}, "params": [{"type": "", "name": "sFn", "description": " The event of method to listen for."}, {"type": "", "name": "fn", "description": " The handler function to call when the listener fires."}, {"type": "", "name": "context", "description": " An optional context to call the handler with.\nDefault context is the plugin instance."}], "description": "Listens for events and methods fired by the owner widget.\nThe handler is called after the event handler or method is called.", "guessedname": "doAfter", "guessedtype": "function"}, "destructor": {"description": "desctructor lifecycle implementation.\nRemoves any listeners attached by the Plugin and restores\nand over-ridden methods.", "guessedname": "destructor", "guessedtype": "function"}, "doBefore": {"return": {"type": "", "description": "Handle A handle that can be used to detach the handler (e.g. \"handle.detach()\")."}, "params": [{"type": "", "name": "sFn", "description": " The event of method to listen for."}, {"type": "", "name": "fn", "description": " The handler function to call when the listener fires."}, {"type": "", "name": "context", "description": " An optional context to call the handler with.\nDefault context is the plugin instance."}], "description": "Listens for events and methods fired by the host.\nThe handler is called before the event handler or method is called.", "guessedname": "doBefore", "guessedtype": "function"}, "initializer": {"params": [{"type": "Object", "name": "config", "description": " Configuration object literal for the plugin"}], "description": "Initializer lifecycle implementation.", "guessedname": "initializer", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "plugin.js", "shortname": "Plugin", "param": "{Object} config The configuration object for the\nplugin.", "configs": {"host": {"guessedtype": "property", "type": "PluginHost", "description": "The plugin's host object.", "guessedname": "host", "writeonce": ""}}, "description": "Plugin provides a base class for all Plugin classes."}, "Assert.ShouldFail": {"name": "Assert.ShouldFail", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}], "description": "ShouldFail is subclass of Error that is thrown whenever\na test was expected to fail but did not."}], "namespace": "Assert", "module": "yuitest", "guessedname": "ShouldFail", "extends": "Assert.Error", "superclass": "Assert.Error", "file": "Assert.js", "guessedtype": "function", "shortname": "ShouldFail", "properties": {"name": {"type": "String", "description": "The name of the error that occurred."}}, "description": "ShouldFail is subclass of Error that is thrown whenever\na test was expected to fail but did not."}, "Widget": {"name": "Widget", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration \nproperties."}], "description": "A base class for widgets, providing:\n<ul>\n<li>The render lifecycle method, in addition to the init and destroy \nlifecycle methods provide by Base<\/li>\n<li>Abstract methods to support consistent MVC structure across \nwidgets: renderer, renderUI, bindUI, syncUI<\/li>\n<li>Support for common widget attributes, such as boundingBox, contentBox, visible, \ndisabled, hasFocus, strings<\/li>\n<\/ul>"}], "namespace": "", "module": "widget", "events": {"tabIndexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "tabIndexChange", "description": "Fires when the value for the configuration attribute 'tabIndex' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "stringsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "stringsChange", "description": "Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "localeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "localeChange", "description": "Fires when the value for the configuration attribute 'locale' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "heightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "heightChange", "description": "Fires when the value for the configuration attribute 'height' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "widget:contentUpdate": {"preventable": "false", "params": [{"type": "Event.Facade", "name": "e", "description": " The Event Facade"}], "description": "Notification event, which widget implementations can fire, when\nthey change the content of the widget. This event has no default\nbehavior and cannot be prevented, so the \"on\" or \"after\"\nmoments are effectively equivalent (with on listeners being invoked before \nafter listeners).", "guessedname": "preventable", "guessedtype": "property"}, "boundingBoxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "boundingBoxChange", "description": "Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "visibleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "visibleChange", "description": "Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "moveStylesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "moveStylesChange", "description": "Fires when the value for the configuration attribute 'moveStyles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "contentBoxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "contentBoxChange", "description": "Fires when the value for the configuration attribute 'contentBox' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "renderedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "renderedChange", "description": "Fires when the value for the configuration attribute 'rendered' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "hasFocusChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "hasFocusChange", "description": "Fires when the value for the configuration attribute 'hasFocus' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "widget:render": {"preventable": "_defRenderFn", "params": [{"type": "Event.Facade", "name": "e", "description": " The Event Facade"}], "description": "Lifcyle event for the render phase, fired prior to rendering the UI \nfor the widget (prior to invoking the widgets renderer method).\n<p>\nSubscribers to the \"on\" moment of this event, will be notified \nbefore the widget is rendered.\n<\/p>\n<p>\nSubscribers to the \"after\" momemt of this event, will be notified\nafter rendering is complete.\n<\/p>", "guessedname": "queuable", "guessedtype": "property"}, "disabledChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "disabledChange", "description": "Fires when the value for the configuration attribute 'disabled' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "widthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "widthChange", "description": "Fires when the value for the configuration attribute 'width' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"rendered": {"description": "Flag indicating whether or not this object\nhas been through the render lifecycle phase.", "default": "false", "readonly": "", "guessedname": "rendered", "guessedtype": "property", "type": "boolean"}, "width": {"default": "\"\"", "type": "{String | Number}", "description": "String with units, or number, representing the width of the Widget. If a number is provided,\nthe default unit, defined by the Widgets DEF_UNIT, property is used.", "guessedname": "width", "guessedtype": "property"}, "hasFocus": {"default": "false", "type": "boolean", "description": "Boolean indicating if the Widget has focus.", "guessedname": "hasFocus", "guessedtype": "property"}, "height": {"default": "\"\"", "type": "{String | Number}", "description": "String with units, or number, representing the height of the Widget. If a number is provided,\nthe default unit, defined by the Widgets DEF_UNIT, property is used.", "guessedname": "height", "guessedtype": "property"}, "disabled": {"default": "false", "type": "boolean", "description": "Boolean indicating if the Widget should be disabled. The disabled implementation\nis left to the specific classes extending widget.", "guessedname": "disabled", "guessedtype": "property"}, "visible": {"default": "true", "type": "boolean", "description": "Boolean indicating weather or not the Widget is visible.", "guessedname": "visible", "guessedtype": "property"}, "moveStyles": {"default": "false", "type": "boolean", "description": "Flag defining whether or not style properties from the content box\nshould be moved to the bounding box when wrapped (as defined by the WRAP_STYLES property)", "guessedname": "moveStyles", "guessedtype": "property"}, "boundingBox": {"type": "Node", "description": "The outermost DOM node for the Widget, used for sizing and positioning \nof a Widget as well as a containing element for any decorator elements used \nfor skinning.", "guessedname": "boundingBox", "guessedtype": "property"}, "locale": {"default": "\"en\"", "type": "String", "description": "The default locale for the widget. NOTE: Using get\/set on the \"strings\" attribute will\nreturn\/set strings for this locale.", "guessedname": "locale", "guessedtype": "property"}, "contentBox": {"type": "Node", "description": "A DOM node that is a direct descendent of a Widget's bounding box that \nhouses its content.", "guessedname": "contentBox", "guessedtype": "property"}, "strings": {"default": "null", "type": "Object", "description": "Collection of strings used to label elements of the Widget's UI.", "guessedname": "strings", "guessedtype": "property"}, "tabIndex": {"type": "Number", "description": "The tabIndex, applied to the bounding box", "guessedname": "tabIndex", "guessedtype": "property"}}, "methods": {"_uiSetVisible": {"protected": "", "params": [{"type": "boolean", "name": "val", "description": ""}], "description": "Sets the visible state for the UI", "guessedname": "_uiSetVisible", "guessedtype": "function"}, "render": {"description": "Establishes the initial DOM for the widget. Invoking this\nmethod will lead to the creating of all DOM elements for\nthe widget (or the manipulation of existing DOM elements \nfor the progressive enhancement use case).\n<p>\nThis method should only be invoked once for an initialized\nwidget.\n<\/p>\n<p>\nIt delegates to the widget specific renderer method to do\nthe actual work.\n<\/p>", "chainable": "", "params": [{"type": "Object | String", "name": "parentNode", "description": "  Optional. The Node under which the \nWidget is to be rendered. This can be a Node instance or a CSS selector string. \n<p>\nIf the selector string returns more than one Node, the first node will be used \nas the parentNode. NOTE: This argument is required if both the boundingBox and contentBox\nare not currently in the document. If it's not provided, the Widget will be rendered\nto the body of the current document in this case.\n<\/p>"}], "guessedname": "render", "guessedtype": "function", "final": ""}, "show": {"description": "Shows the Module element by setting the \"visible\" attribute to \"true\".", "guessedname": "show", "guessedtype": "function"}, "focus": {"description": "Causes the Widget to receive the focus by setting the \"hasFocus\" \nattribute to \"true\".", "guessedname": "focus", "guessedtype": "function"}, "initializer": {"protected": "", "params": [{"type": "Object", "name": "config", "description": "  Configuration object literal for the widget"}], "description": "Initializer lifecycle implementation for the Widget class. Registers the \nwidget instance, and runs through the Widget's HTML_PARSER definition.", "guessedname": "initializer", "guessedtype": "function"}, "disabled": {"description": "Set the Widget's \"disabled\" attribute to \"true\".", "guessedname": "disable", "guessedtype": "function"}, "_uiSetDisabled": {"protected": "", "params": [{"type": "boolean", "name": "val", "description": ""}], "description": "Sets the disabled state for the UI", "guessedname": "_uiSetDisabled", "guessedtype": "function"}, "_setBox": {"return": {"type": "Node", "description": "The node"}, "description": "Helper method to set the bounding\/content box, or create it from\nthe provided template if not found.", "private": "", "params": [{"type": "Node|String", "name": "node", "description": " The node reference"}, {"type": "String", "name": "template", "description": " HTML string template for the node"}], "guessedname": "_setBox", "guessedtype": "function"}, "_afterHeightChange": {"protected": "", "params": [{"type": "Event.Facade", "name": "evt", "description": " The event facade for the attribute change"}], "description": "Default height attribute state change handler", "guessedname": "_afterHeightChange", "guessedtype": "function"}, "renderer": {"protected": "", "description": "Creates DOM (or manipulates DOM for progressive enhancement)\nThis method is invoked by render() and is not chained \nautomatically for the class hierarchy (like initializer, destructor) \nso it should be chained manually for subclasses if required.", "guessedname": "renderer", "guessedtype": "function"}, "_syncUI": {"protected": "", "description": "Updates the widget UI to reflect the attribute state.", "guessedname": "_syncUI", "guessedtype": "function"}, "_uiSetHeight": {"protected": "", "params": [{"type": "String | Number", "name": "val", "description": ""}], "description": "Sets the height on the widget's bounding box element", "guessedname": "_uiSetHeight", "guessedtype": "function"}, "hide": {"description": "Shows the Module element by setting the \"visible\" attribute to \"false\".", "guessedname": "hide", "guessedtype": "function"}, "getString": {"params": [{"type": "String", "name": "key", "description": " The key."}, {"type": "String", "name": "locale", "description": " (optional) The locale for which the string value is required. Defaults to the current locale, if not provided."}], "description": "Gets the string for a particular key, for a particular locale, performing locale lookup.\n<p>\nIf no values if defined for the key, for the given locale, the value for the \ndefault locale (in initial locale set for the class) is returned.\n<\/p>", "guessedname": "getString", "guessedtype": "function"}, "_bindUI": {"protected": "", "description": "Sets up DOM and CustomEvent listeners for the widget.", "guessedname": "_bindUI", "guessedtype": "function"}, "Widget.getByNode": {"return": {"type": "Widget", "description": "Widget instance, or null if not found."}, "description": "Returns the widget instance whose bounding box contains, or is, the given node. \n<p>\nIn the case of nested widgets, the nearest bounding box ancestor is used to\nreturn the widget instance.\n<\/p>", "static": "", "guessedname": "getByNode", "guessedtype": "function", "params": [{"type": "Node | String", "name": "node", "description": "  The node for which to return a Widget instance. If a selector\nstring is passed in, which selects more than one node, the first node found is used."}]}, "destructor": {"protected": "", "description": "Descructor lifecycle implementation for the Widget class. Purges events attached\nto the bounding box (and all child nodes) and removes the Widget from the \nlist of registered widgets.", "guessedname": "destructor", "guessedtype": "function"}, "getDefaultLocale": {"return": {"type": "String", "description": "The default locale for the widget"}, "description": "Returns the default locale for the widget (the locale value defined by the\nwidget class, or provided by the user during construction).", "guessedname": "getDefaultLocale", "guessedtype": "function"}, "_getStrings": {"protected": "", "params": [{"type": "Object", "name": "locale", "description": ""}], "description": "Returns the strings key\/value hash for a paricular locale, without locale lookup applied.", "guessedname": "_getStrings", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The default string value for the widget [ displays the NAME of the instance, and the unique id ]"}, "description": "Generic toString implementation for all widgets.", "guessedname": "toString", "guessedtype": "function"}, "blur": {"description": "Causes the Widget to lose focus by setting the \"hasFocus\" attribute \nto \"false\"", "guessedname": "blur", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Configures\/Sets up listeners to bind Widget State to UI\/DOM\nThis method is not called by framework and is not chained \nautomatically for the class hierarchy.", "guessedname": "bindUI", "guessedtype": "function"}, "_renderBox": {"guessedname": "_renderBox", "params": [{"type": "Node", "name": "parentNode", "description": " The parentNode to render the widget to. If not provided, and both the boundingBox and\nthe contentBox are not currently in the document, the widget will be rendered to the current document's body."}], "description": "Helper method to collect the boundingBox and contentBox, set styles and append to the provided parentNode, if not\nalready a child. The owner document of the boundingBox, or the owner document of the contentBox will be used \nas the document into which the Widget is rendered if a parentNode is node is not provided. If both the boundingBox and\nthe contentBox are not currently in the document, and no parentNode is provided, the widget will be rendered \nto the current document's body.", "private": "", "guessedtype": "function"}, "_uiSetHasFocus": {"protected": "", "params": [{"type": "boolean", "name": "val", "description": ""}, {"type": "string", "name": "src", "description": " String representing the source that triggered an update to \nthe UI."}], "description": "Sets the hasFocus state for the UI", "guessedname": "_uiSetHasFocus", "guessedtype": "function"}, "_parseHTML": {"return": {"type": "Object", "description": "config  configuration object, with values found in the HTML, populated"}, "description": "Utilitity method used to apply the <code>HTML_PARSER<\/code> configuration for the \ninstance, to retrieve config data values.", "private": "", "params": [{"type": "Node", "name": "node", "description": "  Root node to use to parse markup for configuration data"}], "guessedname": "_parseHTML", "guessedtype": "function"}, "_uiSetTabIndex": {"protected": "", "params": [{"type": "", "name": "Number", "description": ""}], "description": "Set the tabIndex on the widget's rendered UI", "guessedname": "_uiSetTabIndex", "guessedtype": "function"}, "enable": {"description": "Set the Widget's \"disabled\" attribute to \"false\".", "guessedname": "enable", "guessedtype": "function"}, "getStrings": {"params": [{"type": "String", "name": "locale", "description": " (optional) The locale for which the string value is required. Defaults to the current locale, if not provided."}], "description": "Gets the entire strings hash for a particular locale, performing locale lookup.\n<p>\nIf no values of the key are defined for a particular locale the value for the \ndefault locale (in initial locale set for the class) is returned.\n<\/p>"}, "_onFocus": {"protected": "", "params": [{"type": "Event.Facade", "name": "evt", "description": " The event facade for the DOM focus event"}], "description": "DOM focus event handler, used to sync the state of the Widget with the DOM", "guessedname": "_onFocus", "guessedtype": "function"}, "_afterWidthChange": {"protected": "", "params": [{"type": "Event.Facade", "name": "evt", "description": " The event facade for the attribute change"}], "description": "Default widget attribute state change handler", "guessedname": "_afterWidthChange", "guessedtype": "function"}, "_afterHasFocusChange": {"protected": "", "params": [{"type": "Event.Facade", "name": "evt", "description": " The event facade for the attribute change"}], "description": "Default hasFocus attribute state change handler", "guessedname": "_afterHasFocusChange", "guessedtype": "function"}, "_renderBoxClassNames": {"protected": "", "description": "Applies standard class names to the boundingBox and contentBox", "guessedname": "_renderBoxClassNames", "guessedtype": "function"}, "_afterVisibleChange": {"protected": "", "params": [{"type": "Event.Facade", "name": "evt", "description": " The event facade for the attribute change"}], "description": "Default visible attribute state change handler", "guessedname": "_afterVisibleChange", "guessedtype": "function"}, "_renderUI": {"protected": "", "params": [{"type": "Node", "name": "The", "description": " parent node to rendering the widget into"}], "description": "Initializes the UI state for the Widget's bounding\/content boxes.", "guessedname": "_renderUI", "guessedtype": "function"}, "_uiSetWidth": {"protected": "", "params": [{"type": "String | Number", "name": "val", "description": ""}], "description": "Sets the width on the widget's bounding box element", "guessedname": "_uiSetWidth", "guessedtype": "function"}, "_getHtmlParser": {"return": {"type": "Object", "description": "HTML_PARSER definition for this instance"}, "description": "Gets the HTML_PARSER definition for this instance, by merging HTML_PARSER\ndefinitions across the class hierarchy.", "guessedname": "_getHtmlParser", "guessedtype": "function"}, "syncUI": {"description": "Refreshes the rendered UI, based on Widget State\nThis method is not called by framework and is not chained\nautomatically for the class hierarchy.", "guessedname": "syncUI", "guessedtype": "function"}, "_setContentBox": {"return": {"type": "", "description": "Node"}, "description": "Setter for the contentBox attribute", "private": "", "params": [{"type": "Node|String", "name": "node", "description": ""}], "guessedname": "_setContentBox", "guessedtype": "function"}, "_bindDOMListeners": {"protected": "", "description": "Sets up DOM listeners, on elements rendered by the widget.", "guessedname": "_bindDOMListeners", "guessedtype": "function"}, "_defRenderFn": {"protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": " The Event object"}, {"type": "Node", "name": "parentNode", "description": " The parent node to render to, if passed in to the <code>render<\/code> method"}], "description": "Default render handler", "guessedname": "_defRenderFn", "guessedtype": "function"}, "_setStrings": {"protected": "", "params": [{"type": "Object", "name": "strings", "description": " The hash of string key\/values to set"}, {"type": "Object", "name": "locale", "description": " The locale for the string values being set"}], "description": "Sets strings for a particular locale, merging with any existing\nstrings which may already be defined for the locale.", "guessedname": "_setStrings", "guessedtype": "function"}, "_moveStyles": {"guessedname": "_moveStyles", "params": [{"type": "Node", "name": "nodeFrom", "description": " The node to gather the styles from"}, {"type": "Node", "name": "nodeTo", "description": " The node to apply the styles to"}], "description": "Moves a pre-defined set of style rules (WRAP_STYLES) from one node to another.", "private": "", "guessedtype": "function"}, "getClassName": {"param": "{String}+ One or more classname bits to be joined and prefixed", "params": [{"type": "String*", "name": "args*", "description": " 0..n strings which should be concatenated, using the default separator defined by ClassNameManager, to create the class name"}], "description": "Generate a standard prefixed classname for the Widget, prefixed by the default prefix defined\nby the <code>Y.config.classNamePrefix<\/code> attribute used by <code>ClassNameManager<\/code> and \n<code>Widget.NAME.toLowerCase()<\/code> (e.g. \"yui-widget-xxxxx-yyyyy\", based on default values for \nthe prefix and widget class name).\n<p>\nThe instance based version of this method can be used to generate standard prefixed classnames,\nbased on the instances NAME, as opposed to Widget.NAME. This method should be used when you\nneed to use a constant class name across different types instances.\n<\/p>", "guessedname": "getClassName", "guessedtype": "function"}, "_afterDisabledChange": {"protected": "", "params": [{"type": "Event.Facade", "name": "evt", "description": " The event facade for the attribute change"}], "description": "Default disabled attribute state change handler", "guessedname": "_afterDisabledChange", "guessedtype": "function"}, "_onBlur": {"protected": "", "params": [{"type": "Event.Facade", "name": "evt", "description": " The event facade for the DOM blur event"}], "description": "DOM blur event handler, used to sync the state of the Widget with the DOM", "guessedname": "_onBlur", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Adds nodes to the DOM \nThis method is not called by framework and is not chained \nautomatically for the class hierarchy.", "guessedname": "renderUI", "guessedtype": "function"}, "_setBoundingBox": {"return": {"type": "", "description": "Node"}, "description": "Setter for the boundingBox attribute", "private": "", "params": [{"type": "", "name": "Node\/String", "description": ""}], "guessedname": "_setBoundingBox", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "Widget.js", "shortname": "Widget", "properties": {"CONTENT_TEMPLATE": {"type": "String", "description": "Static property defining the markup template for content box.", "guessedname": "CONTENT_TEMPLATE", "guessedtype": "property"}, "_strings": {"guessedname": "_strings", "type": "Object", "description": "Private stings hash, used to store strings in locale specific buckets.", "private": "", "guessedtype": "property"}, "Widget._NAME_LOWERCASE": {"guessedname": "_NAME_LOWERCASE", "static": "", "description": "Cached lowercase version of Widget.NAME", "private": "", "guessedtype": "property"}, "DEF_UNIT": {"description": "Default unit to use for dimension values", "guessedname": "DEF_UNIT", "guessedtype": "property"}, "Widget.HTML_PARSER": {"type": "Object", "static": "", "description": "Object hash, defining how attribute values are to be parsed from\nmarkup contained in the widget's content box. e.g.:\n<pre>\n{\n\/\/ Set single Node references using selector syntax \n\/\/ (selector is run through node.query)\ntitleNode: \"span.yui-title\",\n\/\/ Set NodeList references using selector syntax \n\/\/ (array indicates selector is to be run through node.queryAll)\nlistNodes: [\"li.yui-item\"],\n\/\/ Set other attribute types, using a parse function. \n\/\/ Context is set to the widget instance.\nlabel: function(contentBox) {\nreturn contentBox.query(\"span.title\").get(\"innerHTML\");\n}\n}\n<\/pre>", "guessedname": "HTML_PARSER", "guessedtype": "property"}, "Widget.PLUGINS": {"static": "", "description": "Static registration of default plugins for the class.", "guessedname": "PLUGINS", "guessedtype": "property"}, "BOUNDING_TEMPLATE": {"type": "String", "description": "Static property defining the markup template for bounding box.", "guessedname": "BOUNDING_TEMPLATE", "guessedtype": "property"}, "_buildCfg": {"description": "The build configuration for the Widget class.\n<p>\nDefines the static fields which need to be aggregated,\nwhen this class is used as the main class passed to \nthe <a href=\"Base.html#method_build\">Base.build<\/a> method.\n<\/p>", "private": "", "static": "", "guessedname": "_buildCfg", "guessedtype": "property", "type": "Object", "final": ""}, "Widget.UI_SRC": {"description": "Constant used to identify state changes originating from\nthe DOM (as opposed to the JavaScript model).", "static": "", "guessedname": "UI_SRC", "guessedtype": "property", "type": "String", "final": ""}, "Widget.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration for the Widget.", "guessedname": "ATTRS", "guessedtype": "property"}, "Widget.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.\n<p>\nCurrently used to apply class identifiers to the bounding box \nand to classify events fired by the widget.\n<\/p>", "guessedname": "NAME", "guessedtype": "property"}, "WRAP_STYLES": {"type": "Object", "description": "Static property listing the styles that are mimiced on the bounding box from the content box.", "guessedname": "WRAP_STYLES", "guessedtype": "property"}}, "description": "A base class for widgets, providing:\n<ul>\n<li>The render lifecycle method, in addition to the init and destroy \nlifecycle methods provide by Base<\/li>\n<li>Abstract methods to support consistent MVC structure across \nwidgets: renderer, renderUI, bindUI, syncUI<\/li>\n<li>Support for common widget attributes, such as boundingBox, contentBox, visible, \ndisabled, hasFocus, strings<\/li>\n<\/ul>"}, "ClassNameManager": {"name": "ClassNameManager", "namespace": "", "module": "classnamemanager", "methods": {"getClassName": {"params": [{"type": "String", "name": "+", "description": " one or more classname bits to be joined and prefixed"}], "description": "Returns a class name prefixed with the the value of the \n<code>Y.config.classNamePrefix<\/code> attribute + the provided strings.\nUses the <code>Y.config.classNameDelimiter<\/code> attribute to delimit the \nprovided strings. E.g. Y.ClassNameManager.getClassName('foo','bar'); \/\/ yui-foo-bar", "guessedname": "getClassName", "guessedtype": "function"}}, "static": "", "file": "classnamemanager.js", "shortname": "ClassNameManager", "properties": {"Y.config.classNameDelimiter": {"default": "\"-\"", "type": "{String}", "static": "", "description": "Configuration property indicating the delimiter used to compose all CSS class names in\nthis YUI instance."}, "Y.config.classNamePrefix": {"default": "\"yui\"", "type": "{String}", "static": "", "description": "Configuration property indicating the prefix for all CSS class names in this YUI instance."}}, "description": "A singleton class providing: \n<ul>\n<li>Easy creation of prefixed class names<\/li>\n<li>Caching of previously created class names for improved performance.<\/li>\n<\/ul>"}, "Assert.UnexpectedValue": {"name": "Assert.UnexpectedValue", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}, {"type": "Object", "name": "unexpected", "description": " The unexpected value."}], "description": "UnexpectedValue is subclass of Error that is thrown whenever\na value was unexpected in its scope. This typically means that a test\nwas performed to determine that a value was *not* equal to a certain\nvalue."}], "namespace": "Assert", "module": "yuitest", "guessedname": "UnexpectedValue", "methods": {"getMessage": {"return": {"type": "String", "description": "A string describing the error."}, "description": "Returns a fully formatted error for an assertion failure. The message\ncontains information about the unexpected value that was encountered.", "guessedname": "getMessage", "guessedtype": "function"}}, "extends": "Assert.Error", "superclass": "Assert.Error", "file": "Assert.js", "guessedtype": "function", "shortname": "UnexpectedValue", "properties": {"unexpected": {"type": "Object", "description": "The unexpected value."}, "name": {"type": "String", "description": "The name of the error that occurred."}}, "description": "UnexpectedValue is subclass of Error that is thrown whenever\na value was unexpected in its scope. This typically means that a test\nwas performed to determine that a value was *not* equal to a certain\nvalue."}, "EventTarget": {"name": "EventTarget", "namespace": "", "module": "event", "guessedname": "ET", "methods": {"on": {"return": {"type": "", "description": "the event target or a detach handle per 'chain' config"}, "params": [{"type": "string", "name": "type", "description": "       The type of the event"}, {"type": "Function", "name": "fn", "description": "  The callback"}], "description": "Subscribe to a custom event hosted by this object", "guessedname": "on", "guessedtype": "function"}, "addTarget": {"params": [{"type": "Event.Target", "name": "o", "description": "  the target to add"}], "description": "Registers another Event.Target as a bubble target.  Bubble order\nis determined by the order registered.  Multiple targets can\nbe specified.", "guessedname": "addTarget", "guessedtype": "function"}, "getEvent": {"return": {"type": "Event.Custom", "description": "the custom event or null"}, "params": [{"type": "string", "name": "type", "description": "  the type, or name of the event"}], "description": "Returns the custom event of the provided type has been created, a\nfalsy value otherwise", "guessedname": "getEvent", "guessedtype": "function"}, "removeTarget": {"params": [{"type": "Event.Target", "name": "o", "description": "  the target to remove"}], "description": "Removes a bubble target", "guessedname": "removeTarget", "guessedtype": "function"}, "fire": {"return": {"type": "boolean", "description": "the return value from Event.Custom.fire"}, "params": [{"type": "String|Object", "name": "type", "description": "  The type of the event, or an object that contains\na 'type' property."}, {"type": "Object*", "name": "arguments", "description": "  an arbitrary set of parameters to pass to \nthe handler."}], "description": "Fire a custom event by name.  The callback functions will be executed\nfrom the context specified when the event was created, and with the \nfollowing parameters.\nIf the custom event object hasn't been created, then the event hasn't \nbeen published and it has no subscribers.  For performance sake, we \nimmediate exit in this case.  This means the event won't bubble, so \nif the intention is that a bubble target be notified, the event must \nbe published on this object first.", "guessedname": "fire", "guessedtype": "function"}, "unsubscribeAll": {"description": "Removes all listeners from the specified event.  If the event type\nis not specified, all listeners from all hosted custom events will\nbe removed.", "deprecated": "use detachAll", "param": "type {string}   The type, or name of the event", "params": [{"type": "string", "name": "type", "description": "    The type, or name of the event"}], "guessedname": "detachAll", "guessedtype": "function"}, "after": {"return": {"type": "", "description": "the event target or a detach handle per 'chain' config"}, "params": [{"type": "string", "name": "type", "description": "       The type of the event"}, {"type": "Function", "name": "fn", "description": "  The callback"}], "description": "Subscribe to a custom event hosted by this object.  The\nsupplied callback will execute after any listeners add\nvia the subscribe method, and after the default function,\nif configured for the event, has executed.", "guessedname": "after", "guessedtype": "function"}, "publish": {"return": {"type": "Event.Custom", "description": "the custom event"}, "params": [{"type": "string", "name": "type", "description": "  the type, or name of the event"}, {"type": "object", "name": "opts", "description": "  optional config params.  Valid properties are:\n<ul>\n<li>\n'broadcast': whether or not the YUI instance and YUI global are notified when the event is fired (false)\n<\/li>\n<li>\n'bubbles': whether or not this event bubbles (true)\n<\/li>\n<li>\n'context': the default execution context for the listeners (this)\n<\/li>\n<li>\n'defaultFn': the default function to execute when this event fires if preventDefault was not called\n<\/li>\n<li>\n'emitFacade': whether or not this event emits a facade (false)\n<\/li>\n<li>\n'prefix': the prefix for this targets events, e.g., 'menu' in 'menu:click' \n<\/li>\n<li>\n'fireOnce': if an event is configured to fire once, new subscribers after\nthe fire will be notified immediately.\n<\/li>\n<li>\n'preventable': whether or not preventDefault() has an effect (true)\n<\/li>\n<li>\n'preventedFn': a function that is executed when preventDefault is called\n<\/li>\n<li>\n'queuable': whether or not this event can be queued during bubbling (false)\n<\/li>\n<li>\n'silent': if silent is true, debug messages are not provided for this event.\n<\/li>\n<li>\n'stoppedFn': a function that is executed when stopPropagation is called\n<\/li>\n<li>\n'type': the event type (valid option if not provided as the first parameter to publish)\n<\/li>\n<\/ul>"}], "description": "Creates a new custom event of the specified type.  If a custom event\nby that name already exists, it will not be re-created.  In either\ncase the custom event is returned.", "guessedname": "publish", "guessedtype": "function"}, "subscribe": {"deprecated": "use on", "description": "subscribe to an event", "guessedname": "subscribe", "guessedtype": "function"}, "unsubscribe": {"deprecated": "use detach", "description": "detach a listener", "guessedname": "unsubscribe", "guessedtype": "function"}, "detach": {"return": {"type": "EventTarget", "description": "the host"}, "params": [{"type": "string|Object", "name": "type", "description": "    Either the handle to the subscriber or the \ntype of event.  If the type\nis not specified, it will attempt to remove\nthe listener from all hosted events."}, {"type": "Function", "name": "fn", "description": "    The subscribed function to unsubscribe, if not\nsupplied, all subscribers will be removed."}, {"type": "Object", "name": "context", "description": "     The custom object passed to subscribe.  This is\noptional, but if supplied will be used to\ndisambiguate multiple listeners that are the same\n(e.g., you subscribe many object using a function\nthat lives on the prototype)"}], "description": "Detach one or more listeners the from the specified event", "guessedname": "detach", "guessedtype": "function"}, "bubble": {"return": {"type": "boolean", "description": "the aggregated return value from Event.Custom.fire"}, "params": [{"type": "Event.Custom", "name": "evt", "description": "  the custom event to propagate"}], "description": "Propagate an event", "guessedname": "bubble", "guessedtype": "function"}, "before": {"deprecated": "use the on method", "return": {"type": "", "description": "detach handle"}, "description": "Executes the callback before a DOM event, custom event\nor method.  If the first argument is a function, it\nis assumed the target is a method.  For DOM and custom\nevents, this is an alias for Y.on.\nFor DOM and custom events:\ntype, callback, context, 1-n arguments\nFor methods:\ncallback, object (method host), methodName, context, 1-n arguments", "guessedname": "before", "guessedtype": "function"}}, "param": "opts a configuration object", "file": "event-target.js", "guessedtype": "function", "shortname": "EventTarget", "config": "emitFacade {boolean} if true, all events will emit event \nfacade payloads by default (default false)", "properties": {"Global": {"type": "EventTarget", "description": "Hosts YUI page level events.  This is where events bubble to\nwhen the broadcast config is set to 2.", "guessedname": "Global", "guessedtype": "property"}}, "description": "An event target can fire events and be targeted by events."}, "plugin.Anim": {"name": "plugin.Anim", "configs": {"node": {"type": "Node", "description": "The object to be animated.", "guessedname": "node", "guessedtype": "property"}, "direction": {"default": "\"normal\"", "type": "String", "description": "How iterations of the animation should behave. \nPossible values are \"normal\" and \"alternate\".\nNormal will repeat the animation, alternate will reverse on every other pass.", "guessedname": "direction", "guessedtype": "property"}, "from": {"type": "Object", "description": "The starting values for the animated properties. \nFields may be strings, numbers, or functions.\nIf a function is used, the return value becomes the from value.\nIf no from value is specified, the DEFAULT_GETTER will be used.", "guessedname": "from", "guessedtype": "property"}, "iterations": {"default": "1", "type": "Int", "description": "The number of times the animation should run", "guessedname": "iterations", "guessedtype": "property"}, "iterationCount": {"description": "The number of iterations that have occurred.\nResets when an animation ends (reaches iteration count or stop() called).", "default": "0", "readonly": "", "guessedname": "iterationCount", "guessedtype": "property", "type": "Int"}, "elapsedTime": {"description": "Current time the animation has been running.", "default": "0", "readonly": "", "guessedname": "elapsedTime", "guessedtype": "property", "type": "Int"}, "to": {"type": "Object", "description": "The ending values for the animated properties. \nFields may be strings, numbers, or functions.", "guessedname": "to", "guessedtype": "property"}, "running": {"description": "Whether or not the animation is currently running.", "default": "false", "readonly": "", "guessedname": "running", "guessedtype": "property", "type": "Boolean"}, "startTime": {"description": "Date stamp for the first frame of the animation.", "default": "0", "readonly": "", "guessedname": "startTime", "guessedtype": "property", "type": "Int"}, "duration": {"type": "NUM", "description": "The length of the animation.  Defaults to \"1\" (second).", "guessedname": "duration", "guessedtype": "property"}, "easing": {"type": "Function", "description": "The method that will provide values to the attribute(s) during the animation. \nDefaults to \"Easing.easeNone\".", "guessedname": "easing", "guessedtype": "property"}, "reverse": {"default": "false", "type": "Boolean", "description": "If true, animation begins from last frame", "guessedname": "reverse", "guessedtype": "property"}}, "constructors": [{"description": "Handles animation _queueing and threading."}], "namespace": "plugin", "module": "anim", "properties": {"behaviors": {"static": "", "description": "Bucket for custom getters and setters", "guessedname": "behaviors", "guessedtype": "property"}, "DEFAULT_GETTER": {"static": "", "description": "The default getter to use when getting object properties.", "guessedname": "DEFAULT_GETTER", "guessedtype": "function"}, "DEFAULT_UNIT": {"static": "", "description": "The default unit to use with properties that pass the RE_DEFAULT_UNIT test.", "guessedname": "DEFAULT_UNIT", "guessedtype": "property"}, "RE_DEFAULT_UNIT": {"static": "", "description": "Regex of properties that should use the default unit.", "guessedname": "RE_DEFAULT_UNIT", "guessedtype": "property"}, "DEFAULT_SETTER": {"static": "", "description": "The default setter to use when setting object properties.", "guessedname": "DEFAULT_SETTER", "guessedtype": "function"}}, "guessedname": "RUNNING", "methods": {"_runFrame": {"guessedname": "_runFrame", "static": "", "description": "Called per Interval to handle each animation frame.", "private": "", "guessedtype": "function"}, "stop": {"chainable": "", "static": "", "description": "Stops all animation instances.", "guessedname": "stop", "guessedtype": "function"}, "pause": {"chainable": "", "static": "", "description": "Pauses all animation instances.", "guessedname": "pause", "guessedtype": "function"}, "run": {"chainable": "", "static": "", "description": "Runs all animation instances.", "guessedname": "run", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "anim.js", "guessedtype": "property", "shortname": "Anim", "events": {"iterationCountChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "iterationCountChange", "description": "Fires when the value for the configuration attribute 'iterationCount' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "reverseChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "reverseChange", "description": "Fires when the value for the configuration attribute 'reverse' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "end": {"type": "Event.Custom", "params": [{"type": "Event", "name": "ev", "description": " The end event."}], "description": "fires after the animation completes.", "guessedname": "END", "guessedtype": "property"}, "durationChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "durationChange", "description": "Fires when the value for the configuration attribute 'duration' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "resume": {"type": "Event.Custom", "params": [{"type": "Event", "name": "ev", "description": " The pause event."}], "description": "fires when an animation is resumed (run from pause)."}, "iteration": {"type": "Event.Custom", "params": [{"type": "Event", "name": "ev", "description": " The iteration event."}], "description": "fires when an animation begins an iteration."}, "toChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "toChange", "description": "Fires when the value for the configuration attribute 'to' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "iterationsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "iterationsChange", "description": "Fires when the value for the configuration attribute 'iterations' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "tween": {"type": "Event.Custom", "params": [{"type": "Event", "name": "ev", "description": " The tween event."}], "description": "fires every frame of the animation.", "guessedname": "TWEEN", "guessedtype": "property"}, "start": {"type": "Event.Custom", "params": [{"type": "Event", "name": "ev", "description": " The start event."}], "description": "fires when an animation begins.", "guessedname": "START", "guessedtype": "property"}, "fromChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "fromChange", "description": "Fires when the value for the configuration attribute 'from' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "pause": {"type": "Event.Custom", "params": [{"type": "Event", "name": "ev", "description": " The pause event."}], "description": "fires when an animation is paused."}, "runningChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "runningChange", "description": "Fires when the value for the configuration attribute 'running' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "startTimeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "startTimeChange", "description": "Fires when the value for the configuration attribute 'startTime' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "directionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "directionChange", "description": "Fires when the value for the configuration attribute 'direction' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "elapsedTimeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "elapsedTimeChange", "description": "Fires when the value for the configuration attribute 'elapsedTime' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "easingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "easingChange", "description": "Fires when the value for the configuration attribute 'easing' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}}, "description": "Handles animation _queueing and threading."}, "Assert.ComparisonFailure": {"name": "Assert.ComparisonFailure", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}, {"type": "Object", "name": "expected", "description": " The expected value."}, {"type": "Object", "name": "actual", "description": " The actual value that caused the assertion to fail."}], "description": "ComparisonFailure is subclass of Error that is thrown whenever\na comparison between two values fails. It provides mechanisms to retrieve\nboth the expected and actual value."}], "namespace": "Assert", "module": "yuitest", "guessedname": "ComparisonFailure", "methods": {"toString": {"return": {"type": "String", "description": "A string describing the error."}, "description": "Returns a fully formatted error for an assertion failure. This message\nprovides information about the expected and actual values.", "guessedname": "getMessage", "guessedtype": "function"}}, "extends": "Assert.Error", "superclass": "Assert.Error", "file": "Assert.js", "guessedtype": "function", "shortname": "ComparisonFailure", "properties": {"expected": {"type": "Object", "description": "The expected value."}, "actual": {"type": "Object", "description": "The actual value."}, "name": {"type": "String", "description": "The name of the error that occurred."}}, "description": "ComparisonFailure is subclass of Error that is thrown whenever\na comparison between two values fails. It provides mechanisms to retrieve\nboth the expected and actual value."}, "Assert.ObjectAssert": {"name": "Assert.ObjectAssert", "namespace": "Assert", "module": "yuitest", "guessedname": "ObjectAssert", "methods": {"ownsAll": {"static": "", "params": [{"type": "Object", "name": "refObject", "description": " The object whose properties should be owned by the object to test."}, {"type": "Object", "name": "object", "description": " The object to search."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that all properties on a given object also exist on an object instance (not on its prototype).", "guessedname": "ownsAll", "guessedtype": "function"}, "has": {"static": "", "params": [{"type": "String", "name": "propertyName", "description": " The name of the property to test."}, {"type": "Object", "name": "object", "description": " The object to search."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that an object has a property with the given name.", "guessedname": "has", "guessedtype": "function"}, "owns": {"static": "", "params": [{"type": "String", "name": "propertyName", "description": " The name of the property to test."}, {"type": "Object", "name": "object", "description": " The object to search."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a property with the given name exists on an object instance (not on its prototype).", "guessedname": "owns", "guessedtype": "function"}, "hasAll": {"static": "", "params": [{"type": "Object", "name": "refObject", "description": " The object whose properties should be on the object to test."}, {"type": "Object", "name": "object", "description": " The object to search."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that an object has all properties of a reference object.", "guessedname": "hasAll", "guessedtype": "function"}}, "static": "", "file": "ObjectAssert.js", "guessedtype": "property", "shortname": "ObjectAssert", "description": "The ObjectAssert object provides functions to test JavaScript objects\nfor a variety of cases."}, "WidgetStdMod": {"name": "WidgetStdMod", "namespace": "", "module": "widget-stdmod", "events": {"headerContentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "headerContentChange", "description": "Fires when the value for the configuration attribute 'headerContent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "bodyContentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "bodyContentChange", "description": "Fires when the value for the configuration attribute 'bodyContent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "fillHeightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "fillHeightChange", "description": "Fires when the value for the configuration attribute 'fillHeight' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "footerContentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "footerContentChange", "description": "Fires when the value for the configuration attribute 'footerContent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"bodyContent": {"default": "undefined", "type": "{String | Node}", "description": "The content to be added to the body section. This will replace any existing content\nin the body. If you want to append, or insert new content, use the <a href=\"#method_setStdModContent\">setStdModContent<\/a> method.", "guessedname": "bodyContent", "guessedtype": "property"}, "footerContent": {"default": "undefined", "type": "{String | Node}", "description": "The content to be added to the footer section. This will replace any existing content\nin the footer. If you want to append, or insert new content, use the <a href=\"#method_setStdModContent\">setStdModContent<\/a> method.", "guessedname": "footerContent", "guessedtype": "property"}, "fillHeight": {"default": "WidgetStdMod.BODY", "type": "{String}", "description": "The section (WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER) which should be resized to fill the height of the standard module, when a \nheight is set on the Widget. If a height is not set on the widget, then all sections are sized based on \ntheir content.", "guessedname": "fillHeight", "guessedtype": "property"}, "headerContent": {"default": "undefined", "type": "{String | Node}", "description": "The content to be added to the header section. This will replace any existing content\nin the header. If you want to append, or insert new content, use the <a href=\"#method_setStdModContent\">setStdModContent<\/a> method.", "guessedname": "headerContent", "guessedtype": "property"}}, "methods": {"_addNodeRef": {"guessedname": "_addNodeRef", "params": [{"type": "Node", "name": "node", "description": " The section Node to be updated."}, {"type": "Node", "name": "child", "description": " The new content Node to be added to section Node provided."}, {"type": "String", "name": "where", "description": " Optional. Either WidgetStdMod.AFTER, WidgetStdMod.BEFORE or WidgetStdMod.REPLACE.\nIf not provided, the content will replace existing content in the Node."}], "description": "Helper method to add nodes, to another node.\nThe child node(s) are added either before, after or replaces the existing node content \nbased on the value of the <code>where<\/code> argument.", "private": "", "guessedtype": "function"}, "_afterHeaderChange": {"protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": " The event facade for the attribute change"}], "description": "Default attribute change listener for the headerContent attribute, responsible\nfor updating the UI, in response to attribute changes.", "guessedname": "_afterHeaderChange", "guessedtype": "function"}, "_findStdModSection": {"return": {"type": "Node", "description": "The rendered node for the given section, or null if not found."}, "description": "Helper method to query the rendered contents of the contentBox to find the\nnode for the given section if it exists.", "private": "", "params": [{"type": "String", "name": "section", "description": " The section for which the render Node is to be found. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}], "guessedname": "_findStdModSection", "guessedtype": "function"}, "_afterFooterChange": {"protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": " The event facade for the attribute change"}], "description": "Default attribute change listener for the footerContent attribute, responsible\nfor updating the UI, in response to attribute changes.", "guessedname": "_afterFooterChange", "guessedtype": "function"}, "_syncUIStdMod": {"protected": "", "description": "Synchronizes the UI to match the Widgets standard module state.\n<p>\nThis method is invoked after syncUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n<\/p>", "guessedname": "_syncUIStdMod", "guessedtype": "function"}, "_uiSetStdMod": {"protected": "", "params": [{"type": "String", "name": "section", "description": " The section to be updated. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}, {"type": "String | Node", "name": "content", "description": " The new content (either as an HTML string, or Node reference) to add to the section"}, {"type": "String", "name": "where", "description": " Optional. Either WidgetStdMod.AFTER, WidgetStdMod.BEFORE or WidgetStdMod.REPLACE.\nIf not provided, the content will replace existing content in the section."}], "description": "Updates the rendered UI, adding the provided content (either an HTML string, or node reference),\nto the specified section. The content is either added before, after or replaces existing content\nin the section, based on the value of the <code>where<\/code> argument.", "guessedname": "_uiSetStdMod", "guessedtype": "function"}, "setStdModContent": {"params": [{"type": "String", "name": "section", "description": " The standard module section whose content is to be updated. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}, {"type": "String | Node", "name": "content", "description": " The content to be added, either an HTML string or a Node reference."}, {"type": "String", "name": "where", "description": " Optional. Either WidgetStdMod.AFTER, WidgetStdMod.BEFORE or WidgetStdMod.REPLACE.\nIf not provided, the content will replace existing content in the section."}], "description": "Updates the body section of the standard module with the content provided (either an HTML string, or node reference).\n<p>\nThis method can be used instead of the corresponding section content attribute if you'd like to retain the current content of the section,\nand insert content before or after it, by specifying the <code>where<\/code> argument.\n<\/p>", "guessedname": "setStdModContent", "guessedtype": "function"}, "_insertStdModSection": {"guessedname": "_insertStdModSection", "params": [{"type": "Node", "name": "contentBox", "description": " A reference to the Widgets content box."}, {"type": "String", "name": "section", "description": " The section to create\/render. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}, {"type": "Node", "name": "sectionNode", "description": " The Node for the section."}], "description": "Helper method to insert the Node for the given section into the correct location in the contentBox.", "private": "", "guessedtype": "function"}, "_getPreciseHeight": {"return": {"type": "Number", "description": "The height of the Node including borders and padding, possibly a float."}, "description": "Helper method to obtain the precise height of the node provided, including padding and border.\nThe height could be a sub-pixel value for certain browsers, such as Firefox 3.", "private": "", "params": [{"type": "Node", "name": "node", "description": " The node for which the precise height is required."}], "guessedname": "_getPreciseHeight", "guessedtype": "function"}, "fillHeight": {"params": [{"type": "Node", "name": "node", "description": " The node which should be resized to fill out the height\nof the Widget bounding box. Should be a standard module section node which belongs\nto the widget."}], "description": "Sets the height on the provided header, body or footer element to \nfill out the height of the Widget. It determines the height of the \nwidgets bounding box, based on it's configured height value, and \nsets the height of the provided section to fill out any \nspace remaining after the other standard module section heights \nhave been accounted for.\n<p><strong>NOTE:<\/strong> This method is not designed to work if an explicit \nheight has not been set on the Widget, since for an \"auto\" height Widget, \nthe heights of the header\/body\/footer will drive the height of the Widget.<\/p>", "guessedname": "fillHeight", "guessedtype": "function"}, "_getStdModTemplate": {"return": {"type": "Node", "description": "The new Node instance for the section"}, "description": "Gets a new Node reference for the given standard module section, by cloning\nthe stored template node.", "protected": "", "params": [{"type": "String", "name": "section", "description": " The section to create a new node for. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}], "guessedname": "_getStdModTemplate", "guessedtype": "function"}, "getStdModNode": {"return": {"type": "Node", "description": "The node reference for the section, or null if not set."}, "params": [{"type": "String", "name": "section", "description": " The section whose node reference is required. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}], "description": "Returns the node reference for the given section. Note: The DOM is not queried for the node reference. The reference\nstored by the widget instance is returned if set.", "guessedname": "getStdModNode", "guessedtype": "function"}, "_addNodeHTML": {"guessedname": "_addNodeHTML", "params": [{"type": "Node", "name": "node", "description": " The section Node to be updated."}, {"type": "String", "name": "html", "description": " The new content HTML string to be added to the section Node."}, {"type": "String", "name": "where", "description": " Optional. Either WidgetStdMod.AFTER, WidgetStdMod.BEFORE or WidgetStdMod.REPLACE.\nIf not provided, the content will replace Nodes existing content."}], "description": "Helper method to add the given HTML string to the node reference provided.\nThe HTML is added either before, after or replaces the existing node content \nbased on the value of the <code>where<\/code> argument.", "private": "", "guessedtype": "function"}, "_parseStdModHTML": {"return": {"type": "String", "description": "Inner HTML string with the contents of the section"}, "description": "Utility method, used by WidgetStdMods HTML_PARSER implementation\nto extract data for each section from markup.", "private": "", "params": [{"type": "String", "name": "section", "description": ""}], "guessedname": "_parseStdModHTML", "guessedtype": "function"}, "_renderStdMod": {"return": {"type": "Node", "description": "A reference to the added section node"}, "description": "Creates the DOM node for the given section, and inserts it into the correct location in the contentBox.", "protected": "", "params": [{"type": "String", "name": "section", "description": " The section to create\/render. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}], "guessedname": "_renderStdMod", "guessedtype": "function"}, "_bindUIStdMod": {"protected": "", "description": "Binds event listeners responsible for updating the UI state in response to \nWidget standard module related state changes.\n<p>\nThis method is invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n<\/p>", "guessedname": "_bindUIStdMod", "guessedtype": "function"}, "_fillHeight": {"private": "", "description": "Updates the rendered UI, to resize the current section specified by the fillHeight attribute, so\nthat the standard module fills out the Widget height. If a height has not been set on Widget,\nthe section is not resized (height is set to \"auto\").", "guessedname": "_fillHeight", "guessedtype": "function"}, "_renderUIStdMod": {"protected": "", "description": "Creates\/Initializes the DOM for standard module support.\n<p>\nThis method is invoked after renderUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n<\/p>", "guessedname": "_renderUIStdMod", "guessedtype": "function"}, "_uiSetFillHeight": {"protected": "", "params": [{"type": "String", "name": "fillSection", "description": " A valid section specifier - one of WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER"}], "description": "Updates the rendered UI, to resize the provided section so that the standard module fills out \nthe specified widget height. Note: This method does not check whether or not a height is set \non the Widget.", "guessedname": "_uiSetFillHeight", "guessedtype": "function"}, "_validateFillHeight": {"return": {"type": "", "description": "true if valid, false if not"}, "description": "Default validator for the fillHeight attribute. Verifies that the \nvalue set is a valid section specifier - one of WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER,\nor a falsey value if fillHeight is to be disabled.", "protected": "", "params": [{"type": "String", "name": "val", "description": " The section which should be setup to fill height, or false\/null to disable fillHeight"}], "guessedname": "_validateFillHeight", "guessedtype": "function"}, "_afterBodyChange": {"protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": " The event facade for the attribute change"}], "description": "Default attribute change listener for the bodyContent attribute, responsible\nfor updating the UI, in response to attribute changes.", "guessedname": "_afterBodyChange", "guessedtype": "function"}, "_afterFillHeightChange": {"protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": " The event facade for the attribute change"}], "description": "Default attribute change listener for the fillHeight attribute, responsible\nfor updating the UI, in response to attribute changes.", "guessedname": "_afterFillHeightChange", "guessedtype": "function"}, "_getStdModContent": {"return": {"type": "Node", "description": "The child node collection of the standard module section."}, "description": "Retrieves the child nodes (content) of a standard module section", "private": "", "params": [{"type": "String", "name": "section", "description": " The standard module section whose child nodes are to be retrieved. Either WidgetStdMod.HEADER, WidgetStdMod.BODY or WidgetStdMod.FOOTER."}], "guessedname": "_getStdModContent", "guessedtype": "function"}}, "param": "{Object} The user configuration object", "file": "Widget-StdMod.js", "shortname": "WidgetStdMod", "properties": {"WidgetStdMod.HEADER": {"type": "String", "static": "", "description": "Constant used to refer the the standard module header, in methods which expect a section specifier", "guessedname": "HEADER", "guessedtype": "property"}, "WidgetStdMod.REPLACE": {"type": "String", "static": "", "description": "Constant used to specify insertion position, when adding content to sections of the standard module in\nmethods which expect a \"where\" argument.\n<p>\n<em>Replaces<\/em> the sections existing content, with new content.\n<\/p>", "guessedname": "REPLACE", "guessedtype": "property"}, "WidgetStdMod.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration introduced by WidgetStdMod.", "guessedname": "ATTRS", "guessedtype": "property"}, "WidgetStdMod.BEFORE": {"type": "String", "static": "", "description": "Constant used to specify insertion position, when adding content to sections of the standard module in\nmethods which expect a \"where\" argument.\n<p>\nInserts new content <em>before<\/em> the sections existing content.\n<\/p>", "guessedname": "BEFORE", "guessedtype": "property"}, "WidgetStdMod._TEMPLATES": {"guessedname": "_TEMPLATES", "static": "", "description": "Stores nodes created from the WidgetStdMod.TEMPLATES strings,\nwhich are cloned to create new header, footer, body sections for\nnew instances.", "private": "", "guessedtype": "property"}, "WidgetStdMod.HTML_PARSER": {"type": "Object", "static": "", "description": "The HTML parsing rules for the WidgetStdMod class.", "guessedname": "HTML_PARSER", "guessedtype": "property"}, "WidgetStdMod.SECTION_CLASS_NAMES": {"type": "Object", "static": "", "description": "Static hash of default class names used for the header,\nbody and footer sections of the standard module, keyed by\nthe section identifier (WidgetStdMod.STD_HEADER, WidgetStdMod.STD_BODY, WidgetStdMod.STD_FOOTER)", "guessedname": "SECTION_CLASS_NAMES", "guessedtype": "property"}, "WidgetStdMod.FOOTER": {"type": "String", "static": "", "description": "Constant used to refer the the standard module footer, in methods which expect a section specifier", "guessedname": "FOOTER", "guessedtype": "property"}, "WidgetStdMod.TEMPLATES": {"type": "Object", "static": "", "description": "The template HTML strings for each of the standard module sections. Section entries are keyed by the section constants,\nWidgetStdMod.HEADER, WidgetStdMod.BODY, WidgetStdMod.FOOTER, and contain the HTML to be added for each section.\ne.g.\n<pre>\n{\nheader : '&lt;div class=\"yui-widget-hd\"&gt;&lt;\/div&gt;',\nbody : '&lt;div class=\"yui-widget-bd\"&gt;&lt;\/div&gt;',\nfooter : '&lt;div class=\"yui-widget-ft\"&gt;&lt;\/div&gt;'\n}\n<\/pre>", "guessedname": "TEMPLATES", "guessedtype": "property"}, "WidgetStdMod.BODY": {"type": "String", "static": "", "description": "Constant used to refer the the standard module body, in methods which expect a section specifier", "guessedname": "BODY", "guessedtype": "property"}, "WidgetStdMod.AFTER": {"type": "String", "static": "", "description": "Constant used to specify insertion position, when adding content to sections of the standard module in \nmethods which expect a \"where\" argument.\n<p>\nInserts new content <em>before<\/em> the sections existing content.\n<\/p>", "guessedname": "AFTER", "guessedtype": "property"}}, "description": "Widget extension, which can be used to add Standard Module support to the \nbase Widget class, through the <a href=\"Base.html#method_build\">Base.build<\/a> \nmethod.\n<p>\nThe extension adds header, body and footer sections to the Widget's content box and \nprovides the corresponding methods and attributes to modify the contents of these sections.\n<\/p>"}, "DDM": {"methods": {"_calcTickArray": {"return": {"type": "", "description": "The tick position"}, "description": "This method is used with the tickXArray and tickYArray config options", "private": "", "params": [{"type": "Number", "name": "pos", "description": " The current X or Y position"}, {"type": "Number", "name": "ticks", "description": " The array containing our custom tick positions."}, {"type": "Number", "name": "off1", "description": " The min offset that we can't pass (region)"}, {"type": "Number", "name": "off2", "description": " The max offset that we can't pass (region)"}], "guessedname": "_calcTickArray", "guessedtype": "function"}, "_unregTarget": {"guessedname": "_unregTarget", "params": [{"type": "Object", "name": "drop", "description": " The Target to remove from the targets collection"}], "description": "Remove the passed in Target from the targets collection", "private": "", "guessedtype": "function"}, "_deactivateTargets": {"description": "This method fires the drop:hit, drag:drophit, drag:dropmiss methods and deactivates the shims..", "private": "", "guessedname": "_deactivateTargets", "guessedtype": "function"}, "getDrop": {"return": {"type": "Object", "description": ""}, "params": [{"type": "String\/Object", "name": "node", "description": " The Node instance or Selector string to check for a valid Drop Object"}], "description": "Get a valid Drop instance back from a Node or a selector string, false otherwise", "guessedname": "getDrop", "guessedtype": "function"}, "_dropMove": {"description": "This method is called when the move method is called on the Drag Object.", "private": "", "guessedname": "_dropMove", "guessedtype": "function"}, "clearCache": {"description": "Clears the cache data used for this interaction.", "guessedname": "clearCache", "guessedtype": "function"}, "_hasActiveShim": {"guessedname": "_hasActiveShim", "return": {"type": "Boolean", "description": ""}, "description": "This method checks the _activeShims Object to see if there is a shim active.", "private": "", "guessedtype": "function"}, "_createFrame": {"guessedname": "_createFrame", "description": "Create the proxy element if it doesn't already exist and set the DD.DDM._proxy value", "private": "", "guessedtype": "function"}, "_addActiveShim": {"guessedname": "_addActiveShim", "params": [{"type": "Object", "name": "d", "description": " The Drop instance to add to the list."}], "description": "Adds a Drop Target to the list of active shims", "private": "", "guessedtype": "function"}, "getBestMatch": {"return": {"type": "Object or Array", "description": ""}, "params": [{"type": "Array", "name": "drops", "description": " An Array of drops to scan for the best match."}, {"type": "Boolean", "name": "all", "description": " If present, it returns an Array. First item is best match, second is an Array of the other items in the original Array."}], "description": "This method will gather the area for all potential targets and see which has the hightest covered area and return it.", "guessedname": "getBestMatch", "guessedtype": "function"}, "_removeActiveShim": {"guessedname": "_removeActiveShim", "params": [{"type": "Object", "name": "d", "description": " The Drop instance to remove from the list."}], "description": "Removes a Drop Target to the list of active shims", "private": "", "guessedtype": "function"}, "isOverTarget": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "Object", "name": "drop", "description": " The drop to check against"}], "description": "Check to see if the Drag element is over the target, method varies on current mode", "guessedname": "isOverTarget", "guessedtype": "function"}, "_createPG": {"description": "Creates the shim and adds it's listeners to it.", "private": "", "guessedname": "_createPG", "guessedtype": "function"}, "_activateTargets": {"description": "Clear the cache and activate the shims of all the targets", "private": "", "guessedname": "_activateTargets", "guessedtype": "function"}, "_addValid": {"return": {"type": "Self", "description": ""}, "description": "Add a Drop Target to the list of Valid Targets. This list get's regenerated on each new drag operation.", "chainable": "", "private": "", "params": [{"type": "Object", "name": "drop", "description": ""}], "guessedname": "_addValid", "guessedtype": "function"}, "syncActiveShims": {"params": [{"type": "Boolean", "name": "force", "description": " Resize\/sync all Targets."}], "description": "This method will sync the position of the shims on the Drop Targets that are currently active.", "guessedname": "syncActiveShims", "guessedtype": "function"}, "_removeValid": {"return": {"type": "Self", "description": ""}, "description": "Removes a Drop Target from the list of Valid Targets. This list get's regenerated on each new drag operation.", "chainable": "", "private": "", "params": [{"type": "Object", "name": "drop", "description": ""}], "guessedname": "_removeValid", "guessedtype": "function"}, "_regTarget": {"guessedname": "_regTarget", "params": [{"type": "Object", "name": "t", "description": " The Target to add to the targets collection"}], "description": "Add the passed in Target to the targets collection", "private": "", "guessedtype": "function"}, "_pg_deactivate": {"description": "Deactivates the shim", "private": "", "guessedname": "_pg_deactivate", "guessedtype": "function"}, "_pg_activate": {"description": "Activates the shim", "private": "", "guessedname": "_pg_activate", "guessedtype": "function"}, "_lookup": {"guessedname": "_lookup", "return": {"type": "Array", "description": "The valid Drop Targets that are in the viewport."}, "description": "Filters the list of Drops down to those in the viewport.", "private": "", "guessedtype": "function"}, "_calcTicks": {"return": {"type": "Number", "description": "The new position based on the tick calculation"}, "description": "Helper method to calculate the tick offsets for a given position", "private": "", "params": [{"type": "Number", "name": "pos", "description": " The current X or Y position"}, {"type": "Number", "name": "start", "description": " The start X or Y position"}, {"type": "Number", "name": "tick", "description": " The X or Y tick increment"}, {"type": "Number", "name": "off1", "description": " The min offset that we can't pass (region)"}, {"type": "Number", "name": "off2", "description": " The max offset that we can't pass (region)"}], "guessedname": "_calcTicks", "guessedtype": "function"}, "_setFrame": {"guessedname": "_setFrame", "description": "If resizeProxy is set to true (default) it will resize the proxy element to match the size of the Drag Element.\nIf positionProxy is set to true (default) it will position the proxy element in the same location as the Drag Element.", "private": "", "guessedtype": "function"}, "_pg_size": {"description": "Sizes the shim on: activatation, window:scroll, window:resize", "private": "", "guessedname": "_pg_size", "guessedtype": "function"}, "_handleTargetOver": {"description": "This method execs _handleTargetOver on all valid Drop Targets", "private": "", "guessedname": "_handleTargetOver", "guessedtype": "function"}}, "shortname": "DDM", "namespace": "", "name": "DDM", "properties": {"_noShim": {"guessedname": "_noShim", "type": "{Boolean}", "description": "This flag turns off the use of the mouseover\/mouseout shim. It should not be used unless you know what you are doing.", "private": "", "guessedtype": "property"}, "_pg": {"guessedname": "_pg", "type": "{Node}", "description": "The shim placed over the screen to track the mousemove event.", "private": "", "guessedtype": "property"}, "useHash": {"type": "{Boolean}", "description": "Should we only check targets that are in the viewport on drags (for performance), default: true", "guessedname": "useHash", "guessedtype": "property"}, "POINT": {"guessedname": "POINT", "type": "Number", "description": "In point mode, a Drop is targeted by the cursor being over the Target", "private": "", "guessedtype": "property"}, "_activeShims": {"guessedname": "_activeShims", "type": "{Array}", "description": "Placeholder for all active shims on the page", "private": "", "guessedtype": "property"}, "otherDrops": {"type": "{Object}", "description": "An object literal of Other Drop Targets that we encountered during this interaction (in the case of overlapping Drop Targets)", "guessedname": "otherDrops", "guessedtype": "property"}, "validDrops": {"type": "{Array}", "description": "An array of the valid Drop Targets for this interaction."}, "STRICT": {"guessedname": "STRICT", "type": "Number", "description": "In strict mode, a Drop is targeted by the \"entire\" drag node being over the Target", "private": "", "guessedtype": "property"}, "mode": {"guessedname": "mode", "type": "Number", "description": "The mode that the drag operations will run in 0 for Point, 1 for Intersect, 2 for Strict", "private": "", "guessedtype": "property"}, "INTERSECT": {"guessedname": "INTERSECT", "type": "Number", "description": "In intersect mode, a Drop is targeted by \"part\" of the drag node being over the Target", "private": "", "guessedtype": "property"}, "_debugShim": {"guessedname": "_debugShim", "type": "{Boolean}", "description": "Set this to true to set the shims opacity to .5 for debugging it, default: false.", "private": "", "guessedtype": "property"}, "targets": {"type": "{Array}", "description": "All of the Targets", "guessedname": "targets", "guessedtype": "property"}, "activeDrop": {"type": "{Object}", "description": "A reference to the active Drop Target", "guessedname": "activeDrop", "guessedtype": "property"}}}, "Test.Wait": {"name": "Test.Wait", "constructors": [{"params": [{"type": "Function", "name": "segment", "description": " A function to run when the wait is over."}, {"type": "int", "name": "delay", "description": " The number of milliseconds to wait before running the code."}], "description": "Represents a stoppage in test execution to wait for an amount of time before\ncontinuing."}], "namespace": "Test", "module": "yuitest", "guessedname": "Wait", "file": "TestCase.js", "guessedtype": "function", "shortname": "Wait", "properties": {"delay": {"type": "int", "description": "The delay before running the segment of code."}, "segment": {"type": "Function", "description": "The segment of code to run when the wait is over."}}, "description": "Represents a stoppage in test execution to wait for an amount of time before\ncontinuing."}, "Easing": {"name": "Easing", "namespace": "", "module": "anim", "guessedname": "Easing", "methods": {"easeIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and accelerates towards end. (quadratic)", "guessedname": "easeIn", "guessedtype": "function"}, "easeInStrong": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and accelerates towards end. (quartic)", "guessedname": "easeInStrong", "guessedtype": "function"}, "bounceBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Bounces off start and end.", "guessedname": "bounceBoth", "guessedtype": "function"}, "backOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "s", "description": " Overshoot (optional)"}], "description": "Overshoots end, then reverses and comes back to end.", "guessedname": "backOut", "guessedtype": "function"}, "elasticBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "a", "description": " Amplitude (optional)"}, {"type": "Number", "name": "p", "description": " Period (optional)"}], "description": "Snap both elastic effect.", "guessedname": "elasticBoth", "guessedtype": "function"}, "elasticOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "a", "description": " Amplitude (optional)"}, {"type": "Number", "name": "p", "description": " Period (optional)"}], "description": "Snap out elastic effect.", "guessedname": "elasticOut", "guessedtype": "function"}, "bounceOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Bounces off end.", "guessedname": "bounceOut", "guessedtype": "function"}, "backBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "s", "description": " Overshoot (optional)"}], "description": "Backtracks slightly, then reverses direction, overshoots end, \nthen reverses and comes back to end.", "guessedname": "backBoth", "guessedtype": "function"}, "easeBoth": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and decelerates towards end. (quadratic)", "guessedname": "easeBoth", "guessedtype": "function"}, "bounceIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Bounce off of start.", "guessedname": "bounceIn", "guessedtype": "function"}, "easeOutStrong": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins quickly and decelerates towards end.  (quartic)", "guessedname": "easeOutStrong", "guessedtype": "function"}, "easeNone": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Uniform speed between points.", "guessedname": "easeNone", "guessedtype": "function"}, "elasticIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "a", "description": " Amplitude (optional)"}, {"type": "Number", "name": "p", "description": " Period (optional)"}], "description": "Snap in elastic effect.", "guessedname": "elasticIn", "guessedtype": "function"}, "easeBothStrong": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins slowly and decelerates towards end. (quartic)", "guessedname": "easeBothStrong", "guessedtype": "function"}, "easeOut": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}], "description": "Begins quickly and decelerates towards end.  (quadratic)", "guessedname": "easeOut", "guessedtype": "function"}, "backIn": {"return": {"type": "Number", "description": "The computed value for the current animation frame"}, "params": [{"type": "Number", "name": "t", "description": " Time value used to compute current value"}, {"type": "Number", "name": "b", "description": " Starting value"}, {"type": "Number", "name": "c", "description": " Delta between start and end values"}, {"type": "Number", "name": "d", "description": " Total length of animation"}, {"type": "Number", "name": "s", "description": " Overshoot (optional)"}], "description": "Backtracks slightly, then reverses direction and moves to end.", "guessedname": "backIn", "guessedtype": "function"}}, "file": "anim-easing.js", "guessedtype": "property", "shortname": "Easing", "description": "The easing module provides methods for customizing\nhow an animation behaves during each run."}, "Test.DateAssert": {"name": "Test.DateAssert", "namespace": "Test", "module": "yuitest", "guessedname": "DateAssert", "methods": {"datesAreEqual": {"static": "", "params": [{"type": "Date", "name": "expected", "description": " The expected date."}, {"type": "Date", "name": "actual", "description": " The actual date to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a date's month, day, and year are equal to another date's.", "guessedname": "datesAreEqual", "guessedtype": "function"}, "timesAreEqual": {"static": "", "params": [{"type": "Date", "name": "expected", "description": " The expected date."}, {"type": "Date", "name": "actual", "description": " The actual date to test."}, {"type": "String", "name": "message", "description": " (Optional) The message to display if the assertion fails."}], "description": "Asserts that a date's hour, minutes, and seconds are equal to another date's.", "guessedname": "timesAreEqual", "guessedtype": "function"}}, "static": "", "file": "DateAssert.js", "guessedtype": "property", "shortname": "DateAssert", "description": "The DateAssert object provides functions to test JavaScript Date objects\nfor a variety of cases."}, "Scroll": {"properties": {"_scrollTimer": {"type": "{Y.later}", "description": "Holder for the Timer object returned from Y.later.", "guessedname": "_scrollTimer", "guessedtype": "property"}, "_dimCache": {"type": "Object", "description": "Cache of the dragNode dims.", "guessedname": "_dimCache", "guessedtype": "property"}, "_vpRegionCache": {"type": "Object", "description": "Cache of the Viewport dims.", "guessedname": "_vpRegionCache", "guessedtype": "property"}, "_scrolling": {"type": "Boolean", "description": "Tells if we are actively scrolling or not.", "guessedname": "_scrolling", "guessedtype": "property"}}, "name": "Scroll", "constructors": [{"description": "This class is the base scroller class used to create the plugin.DDNodeScroll and plugin.DDWinScroll.\nThis class should not be called on it's own, it's designed to be a plugin."}], "namespace": "", "module": "dd", "events": {"scrollDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "scrollDelayChange", "description": "Fires when the value for the configuration attribute 'scrollDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "bufferChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "bufferChange", "description": "Fires when the value for the configuration attribute 'buffer' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "S", "methods": {"_cancelScroll": {"description": "Cancel a currently running scroll timer.", "private": "", "guessedname": "_cancelScroll", "guessedtype": "function"}, "_checkWinScroll": {"guessedname": "_checkWinScroll", "params": [{"type": "Boolean", "name": "move", "description": " Should we move the window. From Y.later"}], "description": "Check to see if we need to fire the scroll timer. If scroll timer is running this will scroll the window.", "private": "", "guessedtype": "function"}, "_setDimCache": {"description": "Set the cache of the dragNode dims.", "private": "", "guessedname": "_setDimCache", "guessedtype": "function"}, "toString": {"return": {"type": "", "description": "String name for the object"}, "description": "General toString method for logging", "guessedname": "toString", "guessedtype": "function"}, "_initScroll": {"description": "Cancel a previous scroll timer and init a new one.", "private": "", "guessedname": "_initScroll", "guessedtype": "function"}, "_getVPRegion": {"description": "Sets the _vpRegionCache property with an Object containing the dims from the viewport.", "private": "", "guessedname": "_getVPRegion", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "scroll.js", "guessedtype": "function", "shortname": "Scroll", "configs": {"buffer": {"type": "Number", "description": "The number of pixels from the edge of the screen to turn on scrolling. Default: 30", "guessedname": "buffer", "guessedtype": "property"}, "scrollDelay": {"type": "Number", "description": "The number of milliseconds delay to pass to the auto scroller. Default: 235", "guessedname": "scrollDelay", "guessedtype": "property"}}, "description": "This class is the base scroller class used to create the plugin.DDNodeScroll and plugin.DDWinScroll.\nThis class should not be called on it's own, it's designed to be a plugin."}, "Event.Custom": {"name": "Event.Custom", "constructors": [{"params": [{"type": "String", "name": "type", "description": " The type of event, which is passed to the callback\nwhen the event fires"}, {"type": "", "name": "o", "description": " configuration object"}], "description": "The Event.Custom class lets you define events for your application\nthat can be subscribed to by one or more independent component."}], "namespace": "", "module": "event", "events": {"subscribeEvent": {"type": "Event.Custom", "params": [{"type": "Function", "name": "fn", "description": " The function to execute"}, {"type": "Object", "name": "obj", "description": " An object to be passed along when the event \nfires"}, {"type": "boolean|Object", "name": "override", "description": " If true, the obj passed in becomes \nthe execution context of the listener.\nif an object, that object becomes the\nthe execution context."}], "description": "Custom events provide a custom event that fires whenever there is\na new subscriber to the event.  This provides an opportunity to\nhandle the case where there is a non-repeating event that has\nalready fired has a new subscriber.", "guessedname": "subscribeEvent", "guessedtype": "property"}}, "guessedname": "CustomEvent", "methods": {"on": {"return": {"type": "EventHandle|EventTarget", "description": "unsubscribe handle or a\nchainable event target depending on the 'chain' config."}, "params": [{"type": "Function", "name": "fn", "description": "        The function to execute"}], "description": "Listen for this event", "guessedname": "on", "guessedtype": "function"}, "_notify": {"guessedname": "_notify", "params": [{"type": "Subscriber", "name": "s", "description": "  the subscriber"}, {"type": "Array", "name": "args", "description": "  the arguments array to apply to the listener"}], "description": "Notify a single subscriber", "private": "", "guessedtype": "function"}, "log": {"params": [{"type": "string", "name": "msg", "description": "  message to log"}, {"type": "string", "name": "cat", "description": "  log category"}], "description": "Logger abstraction to centralize the application of the silent flag", "guessedname": "log", "guessedtype": "function"}, "_delete": {"params": [{"type": "", "name": "subscriber", "description": " object"}], "private": "", "guessedname": "_delete", "guessedtype": "function"}, "fire": {"return": {"type": "boolean", "description": "false if one of the subscribers returned false, \ntrue otherwise"}, "params": [{"type": "Object*", "name": "arguments", "description": " an arbitrary set of parameters to pass to \nthe handler."}], "description": "Notifies the subscribers.  The callback functions will be executed\nfrom the context specified when the event was created, and with the \nfollowing parameters:\n<ul>\n<li>The type of event<\/li>\n<li>All of the arguments fire() was executed with as an array<\/li>\n<li>The custom object (if any) that was passed into the subscribe() \nmethod<\/li>\n<\/ul>", "guessedname": "fire", "guessedtype": "function"}, "unsubscribeAll": {"deprecated": "use detachAll", "return": {"type": "int", "description": "The number of listeners unsubscribed"}, "description": "Removes all listeners", "guessedname": "unsubscribeAll", "guessedtype": "function"}, "after": {"return": {"type": "EventHandle|EventTarget", "description": "unsubscribe handle or a\nchainable event target depending on the 'chain' config."}, "params": [{"type": "Function", "name": "fn", "description": "        The function to execute"}], "description": "Listen for this event after the normal subscribers have been notified and\nthe default behavior has been applied.  If a normal subscriber prevents the \ndefault behavior, it also prevents after listeners from firing.", "guessedname": "after", "guessedtype": "function"}, "applyConfig": {"params": [{"type": "", "name": "o", "description": " hash of properties to apply"}, {"type": "boolean", "name": "force", "description": "  if true, properties that exist on the event \nwill be overwritten."}], "description": "Apply configuration properties.  Only applies the CONFIG whitelist", "guessedname": "applyConfig", "guessedtype": "function"}, "preventDefault": {"description": "Prevents the execution of this event's defaultFn", "guessedname": "preventDefault", "guessedtype": "function"}, "detachAll": {"return": {"type": "int", "description": "The number of listeners unsubscribed"}, "description": "Removes all listeners", "guessedname": "detachAll", "guessedtype": "function"}, "subscribe": {"return": {"type": "EventHandle|EventTarget", "description": "unsubscribe handle or a\nchainable event target depending on the 'chain' config."}, "description": "Listen for this event", "deprecated": "use on", "params": [{"type": "Function", "name": "fn", "description": "        The function to execute"}], "guessedname": "subscribe", "guessedtype": "function"}, "unsubscribe": {"return": {"type": "boolean|EventTarget", "description": "returns a chainable event target\nor a boolean for legacy detach support."}, "description": "Detach listeners.", "deprecated": "use detach", "params": [{"type": "Function", "name": "fn", "description": "  The subscribed function to remove, if not supplied\nall will be removed"}, {"type": "Object", "name": "context", "description": " The context object passed to subscribe."}], "guessedname": "unsubscribe", "guessedtype": "function"}, "stopImmediatePropagation": {"description": "Stops propagation to bubble targets, and prevents any remaining\nsubscribers on the current target from executing.", "guessedname": "stopImmediatePropagation", "guessedtype": "function"}, "toString": {"guessedname": "toString", "guessedtype": "function"}, "detach": {"return": {"type": "boolean|EventTarget", "description": "returns a chainable event target\nor a boolean for legacy detach support."}, "params": [{"type": "Function", "name": "fn", "description": "  The subscribed function to remove, if not supplied\nall will be removed"}, {"type": "Object", "name": "context", "description": " The context object passed to subscribe."}], "description": "Detach listeners.", "guessedname": "detach", "guessedtype": "function"}, "stopPropagation": {"description": "Stop propagation to bubble targets", "guessedname": "stopPropagation", "guessedtype": "function"}, "halt": {"params": [{"type": "boolean", "name": "immediate", "description": "  if true additional listeners\non the current target will not be executed"}], "description": "Stops the event propagation and prevents the default\nevent behavior.", "guessedname": "halt", "guessedtype": "function"}}, "file": "event-custom.js", "guessedtype": "function", "shortname": "Event.Custom", "properties": {"silent": {"type": "boolean", "description": "By default all custom events are logged in the debug build, set silent\nto true to disable debug outpu for this event.", "guessedname": "silent", "guessedtype": "property"}, "defaultFn": {"type": "Function", "description": "The default function to execute after event listeners\nhave fire, but only if the default action was not\nprevented.", "guessedname": "defaultFn", "guessedtype": "property"}, "fireOnce": {"default": "false;", "type": "boolean", "description": "This event should only fire one time if true, and if\nit has fired, any new subscribers should be notified\nimmediately.", "guessedname": "fireOnce", "guessedtype": "property"}, "prevented": {"type": "int", "description": "Flag for preventDefault that is modified during fire().\nif it is not 0, the default behavior for this event", "guessedname": "prevented", "guessedtype": "property"}, "preventedFn": {"type": "Function", "description": "The function to execute if a subscriber calls\npreventDefault", "guessedname": "preventedFn", "guessedtype": "property"}, "subscribers": {"type": "Subscriber{}", "description": "The subscribers to this event", "guessedname": "subscribers", "guessedtype": "property"}, "emitFacade": {"default": "false", "type": "boolean", "description": "If set to true, the custom event will deliver an EventFacade object\nthat is similar to a DOM event object.", "guessedname": "emitFacade", "guessedtype": "property"}, "broadcast": {"type": "int", "description": "If 0, this event does not broadcast.  If 1, the YUI instance is notified\nevery time this event fires.  If 2, the YUI instance and the YUI global\n(if event is enabled on the global) are notified every time this event\nfires.", "guessedname": "broadcast", "guessedtype": "property"}, "host": {"type": "Event.Target", "description": "Specifies the host for this custom event.  This is used\nto enable event bubbling", "guessedname": "host", "guessedtype": "property"}, "stopped": {"type": "int", "description": "Flag for stopPropagation that is modified during fire()\n1 means to stop propagation to bubble targets.  2 means\nto also stop additional subscribers on this target.", "guessedname": "stopped", "guessedtype": "property"}, "context": {"type": "object", "description": "The context the the event will fire from by default.  Defaults to the YUI\ninstance.", "guessedname": "context", "guessedtype": "property"}, "signature": {"default": "9", "type": "int", "description": "Supports multiple options for listener signatures in order to\nport YUI 2 apps.", "guessedname": "signature", "guessedtype": "property"}, "preventable": {"default": "true", "type": "boolean", "description": "Specifies whether or not this event's default function\ncan be cancelled by a subscriber by executing preventDefault() \non the event facade", "guessedname": "preventable", "guessedtype": "property"}, "stoppedFn": {"type": "Function", "description": "The function to execute if a subscriber calls\nstopPropagation or stopImmediatePropagation", "guessedname": "stoppedFn", "guessedtype": "property"}, "fired": {"default": "false;", "type": "boolean", "description": "This event has fired if true", "guessedname": "fired", "guessedtype": "property"}, "type": {"type": "string", "description": "The type of event, returned to subscribers when the event fires", "guessedname": "type", "guessedtype": "property"}, "bubbles": {"default": "true", "type": "boolean", "description": "Specifies whether or not a subscriber can stop the event propagation\nvia stopPropagation(), stopImmediatePropagation(), or halt()", "guessedname": "bubbles", "guessedtype": "property"}, "afters": {"type": "Subscriber{}", "description": "'After' subscribers", "guessedname": "afters", "guessedtype": "property"}}, "description": "The Event.Custom class lets you define events for your application\nthat can be subscribed to by one or more independent component."}, "EventHandle": {"name": "EventHandle", "constructors": [{"params": [{"type": "Event.Custom", "name": "evt", "description": "  the custom event"}, {"type": "Subscriber", "name": "sub", "description": "  the subscriber"}], "description": "Return value from all subscribe operations"}], "namespace": "", "module": "event", "guessedname": "onsubscribeType", "methods": {"detach": {"description": "Detaches this subscriber", "guessedname": "detach", "guessedtype": "function"}}, "file": "event-custom.js", "guessedtype": "property", "shortname": "EventHandle", "properties": {"evt": {"type": "Event.Custom", "description": "The custom event", "guessedname": "evt", "guessedtype": "property"}, "sub": {"type": "Subscriber", "description": "The subscriber object", "guessedname": "sub", "guessedtype": "property"}}, "description": "Return value from all subscribe operations"}, "Do.Error": {"name": "Do.Error", "deprecated": "", "namespace": "", "module": "event", "guessedname": "Error", "file": "event-do.js", "guessedtype": "property", "shortname": "Do.Error", "description": "Return an Error object when you want to terminate the execution\nof all subsequent method calls."}, "WidgetPositionExt": {"name": "WidgetPositionExt", "namespace": "", "module": "widget-position-ext", "events": {"alignChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "alignChange", "description": "Fires when the value for the configuration attribute 'align' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "centeredChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "centeredChange", "description": "Fires when the value for the configuration attribute 'centered' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"centered": {"default": "false", "type": "{boolean | node}", "description": "A convenience attribute, which can be used as a shortcut for the align attribute.\nIf set to true, the Widget is centered in the viewport. If set to a node reference or valid selector string,\nthe Widget will be centered within the node. If set the false, no center positioning is applied.", "guessedname": "centered", "guessedtype": "property"}, "align": {"default": "null", "type": "Object", "desciption": "The align attribute is used to align a reference point on the widget, with the refernce point on another node, or the viewport. \nThe object which align expects has the following properties:\n<dl>\n<dt>node<\/dt>\n<dd>\nThe node to which the Widget is to be aligned. If set to null, or not provided, the Widget is aligned to the viewport\n<\/dd>\n<dt>points<\/dt>\n<dd>\n<p>\nA two element array, defining the two points on the Widget and node\/viewport which are to be aligned. The first element is the point on the Widget, and the second element is the point on the node\/viewport.\nSupported alignment points are defined as static properties on <code>WidgetPositionExt<\/code>.\n<\/p>\n<p>\ne.g. <code>[WidgetPositionExt.TR, WidgetPositionExt.TL]<\/code> aligns the Top-Right corner of the Widget with the\nTop-Left corner of the node\/viewport, and <code>[WidgetPositionExt.CC, WidgetPositionExt.TC]<\/code> aligns the Center of the \nWidget with the Top-Center edge of the node\/viewport.\n<\/p>\n<\/dd>\n<\/dl>", "guessedname": "align", "guessedtype": "property"}}, "methods": {"_doAlign": {"guessedname": "_doAlign", "params": [{"type": "String", "name": "widgetPoint", "description": " Supported point constant (e.g. WidgetPositionExt.TL)"}, {"type": "Number", "name": "x", "description": " X page co-ordinate to align to"}, {"type": "Number", "name": "y", "description": " Y page co-ordinate to align to"}], "description": "Helper method, used to align the given point on the widget, with the XY page co-ordinates provided.", "private": "", "guessedtype": "function"}, "_syncUIPosExtras": {"protected": "", "description": "Synchronizes the UI to match the Widgets extended positioning state.\nThis method in invoked after syncUI is invoked for the Widget class\nusing YUI's aop infrastructure.", "guessedname": "_syncUIPosExtras", "guessedtype": "function"}, "centered": {"params": [{"type": "Node | String", "name": "node", "description": " Optional. A node reference or selector string defining the node \ninside which the Widget is to be centered. If not passed in, the Widget will be centered in the \nviewport."}], "description": "Centers the container in the viewport, or if a node is passed in,\nthe node.", "guessedname": "centered", "guessedtype": "function"}, "align": {"params": [{"type": "Node | String | null", "name": "node", "description": " A reference (or selector string) for the Node which with the Widget is to be aligned.\nIf null is passed in, the Widget will be aligned with the viewport."}, {"type": "Array[2]", "name": "points", "description": " A two element array, specifying the points on the Widget and node\/viewport which need to be aligned. \nThe first entry is the point on the Widget, and the second entry is the point on the node\/viewport which need to align.\nValid point references are defined as static constants on the WidgetPositionExt class. \ne.g. [WidgetPositionExt.TL, WidgetPositionExt.TR] will align the top-left corner of the Widget with the top-right corner of the node\/viewport."}], "description": "Aligns the Widget to the provided node (or viewport) using the provided\npoints. The method can be invoked directly, however it will result in \nthe align attribute being out of sync with current position of the of Widget.", "guessedname": "align", "guessedtype": "function"}, "_setAlignCenter": {"return": {"type": "Number", "description": "The attribute value being set."}, "description": "Default setter for center attribute changes. Sets up the appropriate value, and passes \nit through the to the align attribute.", "protected": "", "params": [{"type": "boolean | node", "name": "The", "description": " attribute value being set."}], "guessedname": "_setAlignCenter", "guessedtype": "function"}, "_bindUIStack": {"protected": "", "description": "Binds event listeners responsible for updating the UI state in response to \nWidget extended positioning related state changes.\n<p>\nThis method is invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n<\/p>", "guessedname": "_bindUIPosExtras", "guessedtype": "function"}, "_uiSetAlign": {"protected": "", "params": [{"type": "Node | null", "name": "The", "description": " node to align to, or null to indicate the viewport"}], "description": "Updates the UI to reflect the align value passed in (see the align attribute documentation, for the object stucture expected)", "guessedname": "_uiSetAlign", "guessedtype": "function"}, "_afterAlignChange": {"protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": " The event facade for the attribute change"}], "description": "Default attribute change listener for the align attribute, responsible\nfor updating the UI, in response to attribute changes.", "guessedname": "_afterAlignChange", "guessedtype": "function"}}, "param": "{Object} User configuration object", "file": "Widget-PositionExt.js", "shortname": "WidgetPositionExt", "properties": {"WidgetPositionExt.CC": {"description": "Constant used to specify the center of widget\/node\/viewport for alignment", "value": "\"cc\"", "static": "", "guessedname": "CC", "guessedtype": "property", "type": "String"}, "WidgetPositionExt.BC": {"description": "Constant used to specify the bottom edge, center point for alignment", "value": "\"bc\"", "static": "", "guessedname": "BC", "guessedtype": "property", "type": "String"}, "WidgetPositionExt.TC": {"description": "Constant used to specify the top edge-center point for alignment", "value": "\"tc\"", "static": "", "guessedname": "TC", "guessedtype": "property", "type": "String"}, "WidgetPositionExt.TL": {"description": "Constant used to specify the top-left corner for alignment", "value": "\"tl\"", "static": "", "guessedname": "TL", "guessedtype": "property", "type": "String"}, "WidgetPositionExt.BL": {"description": "Constant used to specify the bottom-left corner for alignment", "value": "\"bl\"", "static": "", "guessedname": "BL", "guessedtype": "property", "type": "String"}, "WidgetPositionExt.LC": {"description": "Constant used to specify the left edge, center point for alignment", "value": "\"lc\"", "static": "", "guessedname": "LC", "guessedtype": "property", "type": "String"}, "WidgetPositionExt.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration introduced by WidgetPositionExt.", "guessedname": "ATTRS", "guessedtype": "property"}, "WidgetPositionExt.BR": {"description": "Constant used to specify the bottom-right corner for alignment", "value": "\"br\"", "static": "", "guessedname": "BR", "guessedtype": "property", "type": "String"}, "WidgetPositionExt.RC": {"description": "Constant used to specify the right edge, center point for alignment", "value": "\"rc\"", "static": "", "guessedname": "RC", "guessedtype": "property", "type": "String"}, "WidgetPositionExt.TR": {"description": "Constant used to specify the top-right corner for alignment", "value": "\"tr\"", "static": "", "guessedname": "TR", "guessedtype": "property", "type": "String"}}, "description": "Widget extension, which can be used to add extended XY positioning support to the base Widget class,\nthrough the <a href=\"Base.html#method_build\">Base.build<\/a> method."}, "YUI~dump": {"name": "YUI~dump", "namespace": "", "module": "dump", "methods": {"dump": {"return": {"type": "string", "description": "the dump result"}, "description": "Returns a simple string representation of the object or array.\nOther types of objects will be returned unprocessed.  Arrays\nare expected to be indexed.  Use object notation for\nassociative arrays.", "params": [{"type": "object", "name": "o", "description": "  The object to dump"}, {"type": "int", "name": "d", "description": "  How deep to recurse child objects, default 3"}], "guessedname": "dump", "guessedtype": "function", "todo": "dumping a window is causing an unhandled exception in\nFireFox.\nThis method is in the 'dump' module, which is not bundled with\nthe core YUI object"}}, "file": "dump.js", "shortname": "YUI~dump", "description": "The following methods are added to the YUI instance"}, "WidgetStack": {"name": "WidgetStack", "namespace": "", "module": "widget-stack", "events": {"shimChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "shimChange", "description": "Fires when the value for the configuration attribute 'shim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "zIndexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "zIndexChange", "description": "Fires when the value for the configuration attribute 'zIndex' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"zIndex": {"default": "0", "type": "number", "description": "The z-index to apply to the Widgets boundingBox. Non-numerical values for \nzIndex will be converted to 0", "guessedname": "zIndex", "guessedtype": "property"}, "shim": {"default": "false, for all browsers other than IE6, for which a shim is enabled by default.", "type": "boolean", "description": "Boolean flag to indicate whether or not a shim should be added to the Widgets\nboundingBox, to protect it from select box bleedthrough.", "guessedname": "shim", "guessedtype": "property"}}, "methods": {"sizeShim": {"description": "For IE6, synchronizes the size and position of iframe shim to that of \nWidget bounding box which it is protecting. For all other browsers,\nthis method does not do anything.", "guessedname": "sizeShim", "guessedtype": "function"}, "_renderShim": {"private": "", "description": "Creates the shim element and adds it to the DOM", "guessedname": "_renderShim", "guessedtype": "function"}, "_detachStackHandles": {"guessedname": "_detachStackHandles", "params": [{"type": "", "name": "String", "description": " handleKey The key defining the group of handles which should be detached"}], "description": "Detaches any handles stored for the provided key", "private": "", "guessedtype": "function"}, "_fixMacGeckoScrollbars": {"private": "", "description": "Applies the CSS classes required to fix scrollbar bleedthrough, for FF2\/Mac", "guessedname": "_fixMacGeckoScrollbars", "guessedtype": "function"}, "_uiSetZIndex": {"protected": "", "params": [{"type": "number", "name": "zIndex", "description": " The zindex to be reflected in the UI"}], "description": "Updates the UI to reflect the zIndex value passed in.", "guessedname": "_uiSetZIndex", "guessedtype": "function"}, "_syncUIStack": {"protected": "", "description": "Synchronizes the UI to match the Widgets stack state. This method in \ninvoked after syncUI is invoked for the Widget class using YUI's aop infrastructure.", "guessedname": "_syncUIStack", "guessedtype": "function"}, "_setZIndex": {"return": {"type": "Number", "description": "Normalized zIndex"}, "description": "Default setter for zIndex attribute changes. Normalizes zIndex values to \nnumbers, converting non-numerical values to 0.", "protected": "", "params": [{"type": "String | Number", "name": "zIndex", "description": ""}], "guessedname": "_setZIndex", "guessedtype": "function"}, "_destroyShim": {"private": "", "description": "Removes the shim from the DOM, and detaches any related event\nlisteners.", "guessedname": "_destroyShim", "guessedtype": "function"}, "_uiSetShim": {"protected": "", "params": [{"type": "boolean", "name": "enable", "description": " If true, creates\/renders the shim, if false, removes it."}], "description": "Updates the UI to enable\/disable the shim. If the widget is not currently visible,\ncreation of the shim is deferred until it is made visible, for performance reasons.", "guessedname": "_uiSetShim", "guessedtype": "function"}, "_hideMacGeckoScrollbars": {"private": "", "description": "Set CSS classes on the Widgets boundingBox, to prevent scrollbar bleedthrough on FF2\/Mac, when the Widget is hidden.", "guessedname": "_hideMacGeckoScrollbars", "guessedtype": "function"}, "_getShimTemplate": {"guessedname": "_getShimTemplate", "return": {"type": "Node", "description": "node A new shim Node instance."}, "description": "Creates a cloned shim node, using the SHIM_TEMPLATE html template, for use on a new instance.", "private": "", "guessedtype": "function"}, "_renderUIStack": {"protected": "", "description": "Creates\/Initializes the DOM to support stackability.\n<p>\nThis method in invoked after renderUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n<\/p>", "guessedname": "_renderUIStack", "guessedtype": "function"}, "_renderShimDeferred": {"private": "", "description": "Sets up change handlers for the visible attribute, to defer shim creation\/rendering \nuntil the Widget is made visible.", "guessedname": "_renderShimDeferred", "guessedtype": "function"}, "_afterZIndexChange": {"protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": " The event facade for the attribute change"}], "description": "Default attribute change listener for the zIndex attribute, responsible\nfor updating the UI, in response to attribute changes.", "guessedname": "_afterZIndexChange", "guessedtype": "function"}, "_afterShimChange": {"protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": " The event facade for the attribute change"}], "description": "Default attribute change listener for the shim attribute, responsible\nfor updating the UI, in response to attribute changes.", "guessedname": "_afterShimChange", "guessedtype": "function"}, "_toggleMacGeckoScrollbars": {"private": "", "description": "Flip the hide\/show scrollbar classes applied to the Widget based on visibility, \nto prevent scrollbar bleedthrough on FF2\/Mac,", "guessedname": "_toggleMacGeckoScrollbars", "guessedtype": "function"}, "_bindUIStack": {"protected": "", "description": "Binds event listeners responsible for updating the UI state in response to \nWidget stack related state changes.\n<p>\nThis method is invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n<\/p>", "guessedname": "_bindUIStack", "guessedtype": "function"}, "_addShimResizeHandlers": {"private": "", "description": "Sets up event listeners to resize the shim when the size of the Widget changes.\n<p>\nNOTE: This method is only used for IE6 currently, since IE6 doesn't support a way to\nresize the shim purely through CSS, when the Widget does not have an explicit width\/height \nset.\n<\/p>", "guessedname": "_addShimResizeHandlers", "guessedtype": "function"}}, "param": "{Object} User configuration object", "file": "Widget-Stack.js", "shortname": "WidgetStack", "properties": {"WidgetStack.SHIM_TEMPLATE": {"type": "String", "static": "", "description": "Default markup template used to generate the shim element.", "guessedname": "SHIM_TEMPLATE", "guessedtype": "property"}, "WidgetStack.STACKED_CLASS_NAME": {"description": "Default class used to mark the boundingBox of a stacked widget.", "default": "\"yui-widget-stacked\"", "static": "", "guessedname": "STACKED_CLASS_NAME", "guessedtype": "property", "type": "String"}, "WidgetStack.SHIM_CLASS_NAME": {"description": "Default class used to mark the shim element", "default": "\"yui-widget-shim\"", "static": "", "guessedname": "SHIM_CLASS_NAME", "guessedtype": "property", "type": "String"}, "WidgetStack.HTML_PARSER": {"type": "Object", "static": "", "description": "The HTML parsing rules for the WidgetStack class.", "guessedname": "HTML_PARSER", "guessedtype": "property"}, "WidgetStack.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration introduced by WidgetStack.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "Widget extension, which can be used to add stackable (z-index) support to the \nbase Widget class along with a shimming solution, through the \n<a href=\"Base.html#method_build\">Base.build<\/a> method."}, "Attribute": {"name": "Attribute", "namespace": "", "module": "attribute", "methods": {"reset": {"chainable": "", "params": [{"type": "String", "name": "name", "description": " optional An attribute to reset.  If omitted, all attributes are reset."}], "description": "Resets the given attribute or all attributes to the initial value.", "guessedname": "reset", "guessedtype": "function"}, "set": {"return": {"type": "Object", "description": "Reference to the host object"}, "description": "Sets the value of an attribute.", "chainable": "", "params": [{"type": "String", "name": "name", "description": " The name of the attribute. Note, if the \nvalue of the attribute is an Object, dot notation can be used\nto set the value of a property within the object (e.g. <code>set(\"x.y.z\", 5)<\/code>)."}, {"type": "Any", "name": "value", "description": " The value to apply to the attribute"}, {"type": "Object", "name": "opts", "description": " Optional event data. This object will be mixed into\nthe event facade passed as the first argument to subscribers \nof attribute change events"}], "guessedname": "set", "guessedtype": "function"}, "attrAdded": {"return": {"type": "", "description": "boolean, true if an attribute with the given name has been added."}, "params": [{"type": "String", "name": "name", "description": " The name of the attribute to check."}], "description": "Tests if the given attribute has been added to the host", "guessedname": "attrAdded", "guessedtype": "function"}, "getAttrs": {"return": {"type": "Object", "description": "A hash of attributes: name\/value pairs"}, "params": [{"type": "Array | Boolean", "name": "attrs", "description": " Optional. An array of attribute names, whose values are required. If omitted, all attribute values are\nreturned. If set to true, all attributes modified from their original values are returned."}], "description": "Gets multiple attribute values.", "guessedname": "getAttrs", "guessedtype": "function"}, "get": {"return": {"type": "Any", "description": "The current value of the attribute"}, "params": [{"type": "String", "name": "key", "description": " The attribute whose value will be returned. If\nthe value of the attribute is an Object, dot notation can be used to\nobtain the value of a property of the object (e.g. <code>get(\"x.y.z\")<\/code>)"}], "description": "Returns the current value of the attribute. If the attribute\nhas been configured with a 'getter' function, this method will delegate\nto the 'getter' to obtain the value of the attribute.\nThe 'getter' will be passed the current value of the attribute \nas the only argument.", "guessedname": "get", "guessedtype": "function"}, "_splitAttrValues": {"return": {"type": "Object", "description": "Object literal with 2 properties - \"simple\" and \"complex\",\ncontaining simple and complex attribute values respectively keyed \nby attribute the top level attribute name."}, "description": "Utility to split out regular attribute values\nfrom complex attribute values, so that complex\nattributes can be keyed by top level attribute name.", "private": "", "params": [{"type": "Object", "name": "valueHash", "description": " Name\/value hash of initial values"}], "guessedname": "_splitAttrVals", "guessedtype": "function"}, "_fireAttrChange": {"guessedname": "_fireAttrChange", "params": [{"type": "String", "name": "type", "description": " The event name"}, {"type": "Any", "name": "currVal", "description": " The current value of the attribute"}, {"type": "Any", "name": "newVal", "description": " The new value of the attribute"}, {"type": "String", "name": "attrName", "description": " The name of the attribute"}, {"type": "String", "name": "strFullPath", "description": " The full path of the property being changed, \nif this is a sub-attribute value being change"}, {"type": "Object", "name": "opts", "description": " Any additional event data to mix into the attribute change event's event facade."}], "description": "Utility method to help setup the event payload and \nfire the attribute change event.", "private": "", "guessedtype": "function"}, "addAttr": {"chainable": "", "params": [{"type": "String", "name": "name", "description": " The attribute key"}, {"type": "Object", "name": "config", "description": " (optional) An object literal specifying the configuration for the attribute.\n<strong>NOTE:<\/strong> The config object is modified when adding an attribute, \nso if you need to protect the original values, you will need to merge or clone the object."}], "description": "<p>\nAdds an attribute with the provided configuration to the host object. Intended\nto be used by the host object to setup it's set of available attributes.\n<\/p>\n<p>\nThe config argument object literal supports the following optional properties:\n<\/p>\n<dl>\n<dt>value &#60;Any&#62;<\/dt>\n<dd>The initial value to set on the attribute<\/dd>\n<dt>readOnly &#60;Boolean&#62;<\/dt>\n<dd>Whether or not the attribute is read only. Attributes having readOnly set to true\ncannot be set by invoking the set method.<\/dd>\n<dt>writeOnce &#60;Boolean&#62;<\/dt>\n<dd>Whether or not the attribute is \"write once\". Attributes having writeOnce set to true, \ncan only have their values set once, be it through the default configuration, \nconstructor configuration arguments, or by invoking set.<\/dd>\n<dt>setter &#60;Function&#62;<\/dt>\n<dd>The setter function to be invoked (within the context of the host object) before \nthe attribute is stored by a call to the setter method. The value returned by the \nsetter function will be the finally stored value.<\/dd>\n<dt>getter &#60;Function&#62;<\/dt>\n<dd>The getter function to be invoked (within the context of the host object) before\nthe stored values is returned to a user invoking the getter method for the attribute.\nThe value returned by the getter function is the final value which will be returned to the \nuser when they invoke get.<\/dd>\n<dt>validator &#60;Function&#62;<\/dt>\n<dd>The validator function which is invoked prior to setting the stored value. Returning\nfalse from the validator function will prevent the value from being stored<\/dd>\n<\/dl>", "guessedname": "addAttr", "guessedtype": "function"}, "setAttrs": {"chainable": "", "params": [{"type": "Object", "name": "attrs", "description": "  A hash of attributes: name\/value pairs"}], "description": "Sets multiple attribute values.", "guessedname": "setAttrs", "guessedtype": "function"}, "removeAttr": {"params": [{"type": "String", "name": "name", "description": " The attribute key"}], "description": "Removes an attribute.", "guessedname": "removeAttr", "guessedtype": "function"}, "addAttrs": {"chainable": "", "params": [{"type": "Object", "name": "cfgs", "description": " Name\/value hash of attribute configuration literals."}, {"type": "Object", "name": "values", "description": " Name\/value hash of initial values to apply. Values defined in the configuration hash will be over-written by the initial values hash unless read-only."}], "description": "Configures attributes, and sets initial values", "guessedname": "addAttrs", "guessedtype": "function"}, "_defAttrChangeFn": {"guessedname": "_defAttrChangeFn", "params": [{"type": "Event.Facade", "name": "e", "description": " The event object for the custom event"}], "description": "Default handler implementation for Attribute change events", "private": "", "guessedtype": "function"}, "_setAttr": {"return": {"type": "Object", "description": "Reference to the host object"}, "description": "Internal set implementation", "chainable": "", "protected": "", "params": [{"type": "String", "name": "name", "description": " The name of the attribute. Note, if the \nvalue of the attribute is an Object, dot notation can be used\nto set the value of a property within the object \n(e.g. <code>set(\"x.y.z\", 5)<\/code>)."}, {"type": "Any", "name": "value", "description": " The value to apply to the attribute"}, {"type": "Object", "name": "opts", "description": " Optional event data. This object will be mixed into\nthe event facade passed as the first argument to subscribers \nof attribute change events"}, {"type": "boolean", "name": "force", "description": " If true, allows the caller to set values for \nreadOnly or writeOnce attributes which have already been set."}], "guessedname": "_setAttr", "guessedtype": "function"}, "_getAttrInitVal": {"return": {"type": "Any", "description": "Initial value of the attribute."}, "description": "Returns the initial value of the given attribute from\neither the default configuration provided, or the \nover-ridden value if it exists in the initValues \nhash provided, if the attribute is not read-only.", "private": "", "params": [{"type": "String", "name": "attr", "description": " Attribute name"}, {"type": "Object", "name": "cfg", "description": " Default attribute configuration object literal"}, {"type": "Object", "name": "initValues", "description": " Name\/Value hash of initial attribute values from _splitAttrVals"}], "guessedname": "_getAttrInitVal", "guessedtype": "function"}, "_set": {"return": {"type": "Object", "description": "Reference to the host object"}, "description": "Allows setting of readOnly\/writeOnce attributes.", "chainable": "", "protected": "", "guessedname": "_set", "guessedtype": "function"}}, "uses": ["Event.Target"], "file": "Attribute.js", "shortname": "Attribute", "description": "<p>\nAttribute provides managed attribute support.\n<\/p>\n<p>\nThe class is designed to be augmented onto a host class,\nand allows the host to support getter\/setter methods for attributes,\ninitial configuration support and attribute change events.\n<\/p>\n<p>Attributes added to the host can:<\/p>\n<ul>\n<li>Be defined as read-only.<\/li>\n<li>Be defined as write-once.<\/li>\n<li>Be defined with a setter function, used to manipulate\nvalues passed to Attribute's set method, before they are stored.<\/li>\n<li>Be defined with a validator function, to validate values before they are stored.<\/li>\n<li>Be defined with a getter function, which can be used to manipulate stored values,\nbefore they are returned by Attribute's get method.<\/li>\n<\/ul>\n<p>See the <a href=\"#method_addAtt\">addAttr<\/a> method, for details about how to add attributes with\na specific configuration<\/p>"}, "Assert.ShouldError": {"name": "Assert.ShouldError", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}], "description": "ShouldError is subclass of Error that is thrown whenever\na test is expected to throw an error but doesn't."}], "namespace": "Assert", "module": "yuitest", "guessedname": "ShouldError", "extends": "Assert.Error", "superclass": "Assert.Error", "file": "Assert.js", "guessedtype": "function", "shortname": "ShouldError", "properties": {"name": {"type": "String", "description": "The name of the error that occurred."}}, "description": "ShouldError is subclass of Error that is thrown whenever\na test is expected to throw an error but doesn't."}, "Do.AlterReturn": {"name": "Do.AlterReturn", "namespace": "", "module": "event", "guessedname": "AlterReturn", "file": "event-do.js", "guessedtype": "function", "shortname": "Do.AlterReturn", "description": "Return an AlterReturn object when you want to change the result returned\nfrom the core method to the caller"}, "Loader": {"name": "Loader", "constructors": [{"params": [{"type": "", "name": "o", "description": " an optional set of configuration options.  Valid options:\n<ul>\n<li>base:\nThe base dir<\/li>\n<li>secureBase:\nThe secure base dir (not implemented)<\/li>\n<li>comboBase:\nThe YUI combo service base dir. Ex: http:\/\/yui.yahooapis.com\/combo?<\/li>\n<li>root:\nThe root path to prepend to module names for the combo service. Ex: 2.5.2\/build\/<\/li>\n<li>filter:\nA filter to apply to result urls.  This filter will modify the default\npath for all modules.  The default path for the YUI library is the\nminified version of the files (e.g., event-min.js).  The filter property\ncan be a predefined filter or a custom filter.  The valid predefined \nfilters are:\n<dl>\n<dt>DEBUG<\/dt>\n<dd>Selects the debug versions of the library (e.g., event-debug.js).\nThis option will automatically include the Logger widget<\/dd>\n<dt>RAW<\/dt>\n<dd>Selects the non-minified version of the library (e.g., event.js).<\/dd>\n<\/dl>\nYou can also define a custom filter, which must be an object literal \ncontaining a search expression and a replace string:\n<pre>\nmyFilter: &#123; \n'searchExp': \"-min\\\\.js\", \n'replaceStr': \"-debug.js\"\n&#125;\n<\/pre>\n<\/li>\n<li>combine:\nUse the YUI combo service to reduce the number of http connections required to load your dependencies<\/li>\n<li>ignore:\nA list of modules that should never be dynamically loaded<\/li>\n<li>force:\nA list of modules that should always be loaded when required, even if already present on the page<\/li>\n<li>insertBefore:\nNode or id for a node that should be used as the insertion point for new nodes<\/li>\n<li>charset:\ncharset for dynamic nodes<\/li>\n<li>timeout:\nnumber of milliseconds before a timeout occurs when dynamically loading nodes.  in not set, there is no timeout<\/li>\n<li>context:\nexecution context for all callbacks<\/li>\n<li>onSuccess:\ncallback for the 'success' event<\/li>\n<li>onFailure:\ncallback for the 'failure' event<\/li>\n<li>onTimeout:\ncallback for the 'timeout' event<\/li>\n<li>onProgress:\ncallback executed each time a script or css file is loaded<\/li>\n<li>modules:\nA list of module definitions.  See Loader.addModule for the supported module metadata<\/li>\n<\/ul>"}], "description": "Loader dynamically loads script and css files.  It includes the dependency\ninfo for the version of the library in use, and will automatically pull in\ndependencies for the modules requested.  It supports rollup files and will\nautomatically use these when appropriate in order to minimize the number of\nhttp connections required to load all of the dependencies.  It can load the\nfiles from the Yahoo! CDN, and it can utilize the combo service provided on\nthis network to reduce the number of http connections required to download \nYUI files."}], "namespace": "", "module": "yui", "file": "loader.js", "shortname": "Loader", "description": "Loader dynamically loads script and css files.  It includes the dependency\ninfo for the version of the library in use, and will automatically pull in\ndependencies for the modules requested.  It supports rollup files and will\nautomatically use these when appropriate in order to minimize the number of\nhttp connections required to load all of the dependencies.  It can load the\nfiles from the Yahoo! CDN, and it can utilize the combo service provided on\nthis network to reduce the number of http connections required to download \nYUI files."}, "YUI~oop": {"name": "YUI~oop", "namespace": "", "module": "oop", "methods": {"augment": {"return": {"type": "object", "description": "the augmented object"}, "description": "Applies prototype properties from the supplier to the receiver.\nThe receiver can be a constructor or an instance.", "params": [{"type": "Function", "name": "r", "description": "  the object to receive the augmentation"}, {"type": "Function", "name": "s", "description": "  the object that supplies the properties to augment"}, {"type": "boolean", "name": "ov", "description": "  if true, properties already on the receiver\nwill be overwritten if found on the supplier."}, {"type": "string[]", "name": "wl", "description": "  a whitelist.  If supplied, only properties in \nthis list will be applied to the receiver."}, {"type": "Array | Any", "name": "args", "description": "  arg or arguments to apply to the supplier\nconstructor when initializing."}], "guessedname": "augment", "guessedtype": "function", "todo": "constructor optional?"}, "extend": {"return": {"type": "YUI", "description": "the YUI instance"}, "params": [{"type": "Function", "name": "r", "description": "   the object to modify"}, {"type": "Function", "name": "s", "description": " the object to inherit"}, {"type": "Object", "name": "px", "description": " prototype properties to add\/override"}, {"type": "Object", "name": "sx", "description": " static properties to add\/override"}], "description": "Utility to set up the prototype, constructor and superclass properties to\nsupport an inheritance strategy that can chain constructors and methods.\nStatic members will not be inherited.", "guessedname": "extend", "guessedtype": "function"}, "bind": {"return": {"type": "function", "description": "the wrapped function"}, "params": [{"type": "Function|String", "name": "f", "description": "  the function to bind, or a function name\nto execute on the context object"}, {"type": "", "name": "c", "description": " the execution context"}, {"type": "", "name": "args*", "description": " 0..n arguments to include before the arguments the \nfunction is executed with."}], "description": "Returns a function that will execute the supplied function in the\nsupplied object's context, optionally adding any additional\nsupplied parameters to the beginning of the arguments collection the \nsupplied to the function.", "guessedname": "bind", "guessedtype": "function"}, "clone": {"return": {"type": "Array|Object", "description": "the cloned object"}, "description": "Deep obj\/array copy.  Functions will are cloned with Y.bind.\nArray-like objects are treated as arrays.\nprimitives are returned untouched.  Optionally a\nfunction can be provided to handle other data types,\nfilter keys, validate values, etc.", "params": [{"type": "", "name": "o", "description": " what to clone"}, {"type": "boolean", "name": "safe", "description": "  if true, objects will not have prototype\nitems from the source.  If false, it does.  In this case, the\noriginal is initally protected, but the clone is not completely immune\nfrom changes to the source object prototype.  Also, cloned prototype\nitems that are deleted from the clone will result in the value\nof the source prototype to be exposed.  If operating on a non-safe\nclone, items should be nulled out rather than deleted."}, {"type": "", "name": "f", "description": " optional function to apply to each item in a collection\nit will be executed prior to applying the value to\nthe new object.  Return false to prevent the copy."}, {"type": "", "name": "c", "description": " optional execution context for f"}, {"type": "", "name": "owner", "description": " Owner object passed when clone is iterating an\nobject.  Used to set up context for cloned functions."}], "guessedname": "clone", "guessedtype": "function", "todo": "review"}, "rbind": {"return": {"type": "function", "description": "the wrapped function"}, "params": [{"type": "Function|String", "name": "f", "description": "  the function to bind, or a function name\nto execute on the context object"}, {"type": "", "name": "c", "description": " the execution context"}, {"type": "", "name": "args*", "description": " 0..n arguments to append to the end of arguments collection\nsupplied to the function"}], "description": "Returns a function that will execute the supplied function in the\nsupplied object's context, optionally adding any additional\nsupplied parameters to the end of the arguments the function\nis executed with.", "guessedname": "rbind", "guessedtype": "function"}, "each": {"return": {"type": "YUI", "description": "the YUI instance"}, "params": [{"type": "", "name": "o", "description": " the object to iterate"}, {"type": "", "name": "f", "description": " the function to execute.  This function\nreceives the value, key, and object as parameters"}, {"type": "", "name": "proto", "description": " if true, prototype properties are\niterated on objects"}], "description": "Executes the supplied function for each item in\na collection.  Supports arrays, objects, and\nY.NodeLists", "guessedname": "each", "guessedtype": "function"}, "aggregate": {"return": {"type": "object", "description": "the extended object"}, "params": [{"type": "Function", "name": "r", "description": "  the object to receive the augmentation"}, {"type": "Function", "name": "s", "description": "  the object that supplies the properties to augment"}, {"type": "boolean", "name": "ov", "description": "  if true, properties already on the receiver\nwill be overwritten if found on the supplier."}, {"type": "string[]", "name": "wl", "description": "  a whitelist.  If supplied, only properties in \nthis list will be applied to the receiver."}], "description": "Applies object properties from the supplier to the receiver.  If\nthe target has the property, and the property is an object, the target\nobject will be augmented with the supplier's value.  If the property\nis an array, the suppliers value will be appended to the target.", "guessedname": "aggregate", "guessedtype": "function"}}, "file": "oop.js", "shortname": "YUI~oop", "description": "The following methods are added to the YUI instance"}, "PluginHost": {"name": "PluginHost", "namespace": "", "module": "widget", "guessedname": "L", "methods": {"plug": {"chainable": "", "params": [{"type": "String | Object |Array", "name": "p", "description": "  Accepts the registered \nnamespace for the Plugin or an object literal with an \"fn\" property\nspecifying the Plugin class and a \"cfg\" property specifying\nthe configuration for the Plugin.\n<p>\nAdditionally an Array can also be passed in, with either the above String or \nObject literal values, allowing for multiple plugin registration in \na single call.\n<\/p>"}], "description": "Register and instantiate a plugin with the Widget.", "guessedname": "plug", "guessedtype": "function"}, "hasPlugin": {"public": "", "return": {"type": "Boolean", "description": "returns true, if the plugin has been applied\nto this widget."}, "description": "Determines if a plugin has been registered and instantiated \nfor this widget.", "guessedname": "hasPlugin", "guessedtype": "function"}, "_destroyPlugins": {"private": "", "description": "Private method used to unplug and destroy all plugins on the host", "guessedname": "_destroyPlugins", "guessedtype": "function"}, "unplug": {"chainable": "", "params": [{"type": "String | Function", "name": "plugin", "description": " The namespace of the Plugin, or the Plugin class with the static NS namespace property defined. If not provided,\nall registered plugins are unplugged."}], "description": "Unregister and destroy a plugin already instantiated with the Widget.", "guessedname": "unplug", "guessedtype": "function"}, "_unplug": {"guessedname": "_unplug", "params": [{"type": "String | Function", "name": "plugin", "description": " The namespace for the Plugin, or a Plugin class, with the static NS property defined."}], "description": "Private method used to unregister and destroy a plugin already instantiated with the host.", "private": "", "guessedtype": "function"}, "_plug": {"guessedname": "_plug", "params": [{"type": "Function", "name": "PluginClass", "description": " The plugin class to instantiate"}, {"type": "Object", "name": "config", "description": " The configuration object for the plugin"}], "description": "Private method used to instantiate and attach plugins to the host", "private": "", "guessedtype": "function"}, "_initPlugins": {"guessedname": "_initPlugins", "params": [{"type": "Config", "name": "the", "description": " user configuration object for the host."}], "description": "Initializes static plugins registered on the host (the\n\"PLUGINS\" static property) and any plugins passed in \nfor the instance through the \"plugins\" configuration property.", "private": "", "guessedtype": "function"}}, "file": "PluginHost.js", "guessedtype": "property", "shortname": "PluginHost", "description": "An augmentable class, which when added to a \"Base\" based class, allows \nthe class to support Plugins, providing plug and unplug methods and performing\ninstantiation and cleanup during the init and destroy lifecycle phases respectively."}, "plugin.DDWindowScroll": {"name": "plugin.DDWindowScroll", "constructors": [{"description": "Extends the Scroll class to make the window scroll while dragging."}], "namespace": "plugin", "module": "dd", "events": {"windowScrollChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "windowScrollChange", "description": "Fires when the value for the configuration attribute 'windowScroll' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "WS", "extends": "DD.Scroll", "superclass": "DD.Scroll", "file": "scroll.js", "guessedtype": "function", "shortname": "DDWindowScroll", "configs": {"windowScroll": {"type": "Boolean", "description": "Turn on window scroll support", "guessedname": "windowScroll", "guessedtype": "property"}}, "description": "Extends the Scroll class to make the window scroll while dragging."}, "Test.Reporter": {"name": "Test.Reporter", "constructors": [{"params": [{"type": "String", "name": "url", "description": " The URL to submit the results to."}, {"type": "Function", "name": "format", "description": " (Optiona) A function that outputs the results in a specific format.\nDefault is Y.Test.Format.XML."}], "description": "An object capable of sending test results to a server."}], "namespace": "Test", "module": "yuitest", "guessedname": "Reporter", "methods": {"report": {"return": {"type": "Void", "description": ""}, "params": [{"type": "Object", "name": "results", "description": " The results object created by TestRunner."}], "description": "Sends the report to the server.", "guessedname": "report", "guessedtype": "function"}, "destroy": {"return": {"type": "Void", "description": ""}, "description": "Cleans up the memory associated with the TestReporter, removing DOM elements\nthat were created.", "guessedname": "destroy", "guessedtype": "function"}, "addField": {"return": {"type": "Void", "description": ""}, "params": [{"type": "String", "name": "name", "description": " The name of the field."}, {"type": "Variant", "name": "value", "description": " The value of the field."}], "description": "Adds a field to the form that submits the results.", "guessedname": "addField", "guessedtype": "function"}}, "file": "TestReporter.js", "guessedtype": "function", "shortname": "Reporter", "properties": {"url": {"type": "String", "description": "The URL to submit the data to."}, "_form": {"type": "HTMLFormElement", "description": "The form element used to submit the results.", "private": ""}, "_fields": {"type": "Object", "description": "Extra fields to submit with the request.", "private": ""}, "_iframe": {"type": "HTMLIFrameElement", "description": "Iframe used as a target for form submission.", "private": ""}, "format": {"type": "Function", "description": "The formatting function to call when submitting the data."}}, "description": "An object capable of sending test results to a server."}, "Assert.Error": {"name": "Assert.Error", "constructors": [{"params": [{"type": "String", "name": "message", "description": " The message to display when the error occurs."}], "description": "Error is thrown whenever an assertion fails. It provides methods\nto more easily get at error information and also provides a base class\nfrom which more specific assertion errors can be derived."}], "namespace": "Assert", "module": "yuitest", "guessedname": "Error", "methods": {"valueOf": {"return": {"type": "String", "description": "A primitive value version of the error."}, "description": "Returns a primitive value version of the error. Same as toString().", "guessedname": "valueOf", "guessedtype": "function"}, "getMessage": {"return": {"type": "String", "description": "A string describing the error."}, "description": "Returns a fully formatted error for an assertion failure. This should\nbe overridden by all subclasses to provide specific information.", "guessedname": "getMessage", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "A string representation of the error."}, "description": "Returns a string representation of the error.", "guessedname": "toString", "guessedtype": "function"}}, "file": "Assert.js", "guessedtype": "function", "shortname": "Error", "properties": {"name": {"type": "String", "description": "The name of the error that occurred."}}, "description": "Error is thrown whenever an assertion fails. It provides methods\nto more easily get at error information and also provides a base class\nfrom which more specific assertion errors can be derived."}, "WidgetPosition": {"name": "WidgetPosition", "namespace": "", "module": "widget-position", "events": {"yChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "yChange", "description": "Fires when the value for the configuration attribute 'y' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "xyChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "xyChange", "description": "Fires when the value for the configuration attribute 'xy' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}, "xChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal<\/dt>\t\t<dd>The value of the attribute, prior to it being set<\/dd>\t\t<dt>newVal<\/dt>\t\t<dd>The value the attribute is to be set to<\/dd>\t\t<dt>attrName<\/dt>\t\t<dd>The name of the attribute being set<\/dd>\t\t<dt>subAttrName<\/dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set<\/dd>\t<\/dl>"}], "name": "xChange", "description": "Fires when the value for the configuration attribute 'x' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on<\/a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after<\/a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"y": {"default": "0", "type": "number", "description": "Page Y co-ordinate for the widget. This attribute acts as a facade for the \nxy attribute. Changes in position can be monitored by listening for xyChange events.", "guessedname": "y", "guessedtype": "property"}, "x": {"default": "0", "type": "number", "description": "Page X co-ordinate for the widget. This attribute acts as a facade for the \nxy attribute. Changes in position can be monitored by listening for xyChange events.", "guessedname": "x", "guessedtype": "property"}, "xy": {"default": "[0,0]", "type": "Array", "description": "Page XY co-ordinate pair for the widget.", "guessedname": "xy", "guessedtype": "property"}}, "methods": {"_getX": {"return": {"type": "Number", "description": "The X page co-ordinate value"}, "description": "Default getter for the X attribute. The value is retrieved from \nthe XY attribute, which is the sole store for the XY state.", "guessedname": "_getX", "guessedtype": "function"}, "_validateXY": {"return": {"type": "boolean", "description": "true if valid, false if not."}, "params": [{"type": "Array", "name": "val", "description": " The XY page co-ordinate value which is being set."}], "description": "Default validator for the XY attribute", "guessedname": "_validateXY", "guessedtype": "function"}, "_setX": {"params": [{"type": "Number", "name": "val", "description": " The X page co-ordinate value"}], "description": "Default setter for the X attribute. The setter passes the X value through\nto the XY attribute, which is the sole store for the XY state.", "guessedname": "_setX", "guessedtype": "function"}, "_uiSetXY": {"protected": "", "params": [{"type": "String", "name": "val", "description": " The XY page co-ordinates value to be reflected in the UI"}], "description": "Updates the UI to reflect the XY page co-ordinates passed in.", "guessedname": "_uiSetXY", "guessedtype": "function"}, "move": {"params": [{"type": "Number", "name": "x", "description": " The new x position"}, {"type": "Number", "name": "y", "description": " The new y position\n<p>Or<\/p>"}, {"type": "Array", "name": "x,", "description": " y values passed as an array ([x, y]), to support\nsimple pass through of Node.getXY results"}], "description": "Moves the Widget to the specified page xy co-ordinate position.", "guessedname": "move", "guessedtype": "function"}, "_syncUIPosition": {"protected": "", "description": "Synchronizes the UI to match the Widgets xy page position state.\n<p>\nThis method in invoked after syncUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n<\/p>", "guessedname": "_syncUIPosition", "guessedtype": "function"}, "_getY": {"return": {"type": "Number", "description": "The Y page co-ordinate value"}, "description": "Default getter for the Y attribute. The value is retrieved from \nthe XY attribute, which is the sole store for the XY state.", "guessedname": "_getY", "guessedtype": "function"}, "syncXY": {"description": "Synchronizes the Panel's \"xy\", \"x\", and \"y\" properties with the \nWidget's position in the DOM.", "guessedname": "syncXY", "guessedtype": "function"}, "_setY": {"params": [{"type": "Number", "name": "val", "description": " The Y page co-ordinate value"}], "description": "Default setter for the Y attribute. The setter passes the Y value through\nto the XY attribute, which is the sole store for the XY state.", "guessedname": "_setY", "guessedtype": "function"}, "_afterXYChange": {"protected": "", "params": [{"type": "Event.Facade", "name": "e", "description": " The event facade for the attribute change"}], "description": "Default attribute change listener for the xy attribute, responsible\nfor updating the UI, in response to attribute changes.", "guessedname": "_afterXYChange", "guessedtype": "function"}, "_renderUIPosition": {"protected": "", "description": "Creates\/Initializes the DOM to support xy page positioning.\n<p>\nThis method in invoked after renderUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n<\/p>", "guessedname": "_renderUIPosition", "guessedtype": "function"}, "_bindUIPosition": {"protected": "", "description": "Binds event listeners responsible for updating the UI state in response to \nWidget position related state changes.\n<p>\nThis method in invoked after bindUI is invoked for the Widget class\nusing YUI's aop infrastructure.\n<\/p>", "guessedname": "_bindUIPosition", "guessedtype": "function"}}, "param": "{Object} config User configuration object", "file": "Widget-Position.js", "shortname": "WidgetPosition", "properties": {"WidgetPosition.POSITIONED_CLASS_NAME": {"description": "Default class used to mark the boundingBox of a positioned widget.", "default": "\"yui-widget-positioned\"", "static": "", "guessedname": "POSITIONED_CLASS_NAME", "guessedtype": "property", "type": "String"}, "WidgetPosition.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute \nconfiguration introduced by WidgetPosition.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "Widget extension, which can be used to add positioning support to the base Widget class, \nthrough the <a href=\"Base.html#method_build\">Base.build<\/a> method."}, "UA": {"name": "UA", "namespace": "", "module": "yui", "guessedname": "UA", "static": "", "file": "yui-ua.js", "guessedtype": "function", "shortname": "UA", "properties": {"secure": {"type": "boolean", "static": "", "description": "Set to true if the page appears to be in SSL", "guessedname": "secure", "guessedtype": "property"}, "opera": {"type": "float", "static": "", "description": "Opera version number or 0.  Example: 9.2", "guessedname": "opera", "guessedtype": "property"}, "ie": {"type": "float", "static": "", "description": "Internet Explorer version number or 0.  Example: 6", "guessedname": "ie", "guessedtype": "property"}, "air": {"type": "float", "description": "Adobe AIR version number or 0.  Only populated if webkit is detected.\nExample: 1.0", "guessedname": "air", "guessedtype": "property"}, "mobile": {"type": "string", "static": "", "description": "The mobile property will be set to a string containing any relevant\nuser agent information when a modern mobile browser is detected.\nCurrently limited to Safari on the iPhone\/iPod Touch, Nokia N-series\ndevices with the WebKit-based browser, and Opera Mini.", "guessedname": "mobile", "guessedtype": "property"}, "caja": {"type": "float", "description": "Google Caja version number or 0.", "guessedname": "caja", "guessedtype": "property"}, "os": {"type": "string", "static": "", "description": "The operating system.  Currently only detecting windows or macintosh", "guessedname": "os", "guessedtype": "property"}, "webkit": {"type": "float", "static": "", "description": "AppleWebKit version.  KHTML browsers that are not WebKit browsers \nwill evaluate to 1, other browsers 0.  Example: 418.9\n<pre>\nSafari 1.3.2 (312.6): 312.8.1 <-- Reports 312.8 -- currently the \nlatest available for Mac OSX 10.3.\nSafari 2.0.2:         416     <-- hasOwnProperty introduced\nSafari 2.0.4:         418     <-- preventDefault fixed\nSafari 2.0.4 (419.3): 418.9.1 <-- One version of Safari may run\ndifferent versions of webkit\nSafari 2.0.4 (419.3): 419     <-- Tiger installations that have been\nupdated, but not updated\nto the latest patch.\nWebkit 212 nightly:   522+    <-- Safari 3.0 precursor (with native SVG\nand many major issues fixed).\nSafari 3.0.4 (523.12) 523.12  <-- First Tiger release - automatic update\nfrom 2.x via the 10.4.11 OS patch\nWebkit nightly 1\/2008:525+    <-- Supports DOMContentLoaded event.\nyahoo.com user agent hack removed.\n<\/pre>\nhttp:\/\/en.wikipedia.org\/wiki\/Safari_(web_browser)#Version_history", "guessedname": "webkit", "guessedtype": "property"}, "gecko": {"type": "float", "static": "", "description": "Gecko engine revision number.  Will evaluate to 1 if Gecko \nis detected but the revision could not be found. Other browsers\nwill be 0.  Example: 1.8\n<pre>\nFirefox 1.0.0.4: 1.7.8   <-- Reports 1.7\nFirefox 1.5.0.9: 1.8.0.9 <-- Reports 1.8\nFirefox 2.0.0.3: 1.8.1.3 <-- Reports 1.8\nFirefox 3 alpha: 1.9a4   <-- Reports 1.9\n<\/pre>", "guessedname": "gecko", "guessedtype": "property"}}, "description": "YUI user agent detection.\nDo not fork for a browser if it can be avoided.  Use feature detection when\nyou can.  Use the user agent as a last resort.  UA stores a version\nnumber for the browser engine, 0 otherwise.  This value may or may not map\nto the version number of the browser using the engine.  The value is \npresented as a float so that it can easily be used for boolean evaluation \nas well as for looking for a particular range of versions.  Because of this, \nsome of the granularity of the version info may be lost (e.g., Gecko 1.8.0.9 \nreports 1.8)."}, "Event": {"name": "Event", "namespace": "", "module": "event", "methods": {"generateId": {"return": {"type": "string", "description": "the resulting id of the element"}, "description": "Generates an unique ID for the element if it does not already \nhave one.", "static": "", "guessedname": "generateId", "guessedtype": "function", "params": [{"type": "", "name": "el", "description": " the element to create the id for"}]}, "mouseup": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to act on."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a mouseup on a particular element."}, "click": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to click on."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a click on a particular element."}, "keypress": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to act on."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a keypress on a particular element."}, "keyup": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to act on."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a keyup event on a particular element."}, "_isValidCollection": {"return": {"type": "boolean", "description": "true if the object is array-like and populated"}, "description": "We want to be able to use getElementsByTagName as a collection\nto attach a group of events to.  Unfortunately, different \nbrowsers return different types of collections.  This function\ntests to determine if the object is array-like.  It will also \nfail if the object is an array, but is empty.", "private": "", "static": "", "guessedname": "_isValidCollection", "guessedtype": "function", "params": [{"type": "", "name": "o", "description": " the object to test"}]}, "attach": {"return": {"type": "Boolean", "description": "True if the action was successful or defered,\nfalse if one or more of the elements \ncould not have the listener attached,\nor if the operation throws an exception."}, "description": "Appends an event handler", "static": "", "guessedname": "attach", "guessedtype": "function", "params": [{"type": "String", "name": "type", "description": "     The type of event to append"}, {"type": "Function", "name": "fn", "description": "        The method the event invokes"}, {"type": "String|HTMLElement|Array|NodeList", "name": "el", "description": " An id, an element \nreference, or a collection of ids and\/or elements to assign the \nlistener to."}, {"type": "Object", "name": "obj", "description": "    An arbitrary object that will be \npassed as a parameter to the handler"}, {"type": "Boolean|object", "name": "args", "description": " 0..n arguments to pass to the callback"}]}, "mouseout": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to act on."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a mouseout event on a particular element. Use \"relatedTarget\"\non the options object to specify where the mouse moved to.\nQuirks: Firefox less than 2.0 doesn't set relatedTarget properly, so\ntoElement is assigned in its place. IE doesn't allow toElement to be\nbe assigned, so relatedTarget is assigned in its place. Both of these\nconcessions allow YAHOO.util.Event.getRelatedTarget() to work correctly\nin both browsers."}, "nativeRemove": {"description": "Basic remove listener", "private": "", "static": "", "guessedname": "nativeRemove", "guessedtype": "property", "params": [{"type": "HTMLElement", "name": "el", "description": "      the element to bind the handler to"}, {"type": "string", "name": "type", "description": "   the type of event handler"}, {"type": "function", "name": "fn", "description": "      the callback to invoke"}, {"type": "boolen", "name": "capture", "description": " capture or bubble phase"}]}, "nativeAdd": {"description": "Adds a DOM event directly without the caching, cleanup, context adj, etc", "private": "", "static": "", "guessedname": "nativeAdd", "guessedtype": "property", "params": [{"type": "HTMLElement", "name": "el", "description": "      the element to bind the handler to"}, {"type": "string", "name": "type", "description": "   the type of event handler"}, {"type": "function", "name": "fn", "description": "      the callback to invoke"}, {"type": "boolen", "name": "capture", "description": " capture or bubble phase"}]}, "_unload": {"guessedname": "_unload", "static": "", "description": "Removes all listeners registered by pe.event.  Called \nautomatically during the unload event.", "private": "", "guessedtype": "function"}, "keydown": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to act on."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a keydown event on a particular element."}, "mousemove": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to act on."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a mousemove on a particular element."}, "onContentReady": {"deprecated": "Use Y.on(\"contentready\")", "static": "", "params": [{"type": "string", "name": "id", "description": " the id of the element to look for."}, {"type": "function", "name": "fn", "description": " what to execute when the element is ready."}, {"type": "object", "name": "p_obj", "description": " an optional object to be passed back as\na parameter to fn."}, {"type": "boolean|object", "name": "p_override", "description": " If set to true, fn will execute\nin the context of p_obj.  If an object, fn will\nexectute in the context of that object"}], "description": "Works the same way as onAvailable, but additionally checks the\nstate of sibling elements to determine if the content of the\navailable element is safe to modify.\n<p>The callback is executed with a single parameter:\nthe custom object parameter, if provided.<\/p>"}, "startInterval": {"static": "", "private": "", "guessedname": "startInterval", "guessedtype": "function"}, "mousedown": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to act on."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a mousedown on a particular element."}, "simulate": {"return": {"type": "void", "description": ""}, "description": "Simulates the event with the given name on a target.", "static": "", "guessedname": "simulate", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "target", "description": " The DOM element that's the target of the event."}, {"type": "String", "name": "type", "description": " The type of event to simulate (i.e., \"click\")."}, {"type": "Object", "name": "options", "description": " (Optional) Extra options to copy onto the event object."}]}, "onAvailable": {"deprecated": "Use Y.on(\"available\")", "static": "", "params": [{"type": "string||string[]", "name": "id", "description": " the id of the element, or an array\nof ids to look for."}, {"type": "function", "name": "fn", "description": " what to execute when the element is found."}, {"type": "object", "name": "p_obj", "description": " an optional object to be passed back as\na parameter to fn."}, {"type": "boolean|object", "name": "p_override", "description": " If set to true, fn will execute\nin the context of p_obj, if set to an object it\nwill execute in the context of that object"}, {"type": "boolean", "name": "checkContent", "description": "  check child node readiness (onContentReady)"}], "description": "Executes the supplied callback when the item with the supplied\nid is found.  This is meant to be used to execute behavior as\nsoon as possible as the page loads.  If you use this after the\ninitial page load it will poll for a fixed time for the element.\nThe number of times it will poll and the frequency are\nconfigurable.  By default it will poll for 10 seconds.\n<p>The callback is executed with a single parameter:\nthe custom object parameter, if provided.<\/p>"}, "detach": {"return": {"type": "boolean", "description": "true if the unbind was successful, false *  otherwise."}, "description": "Removes an event listener.  Supports the signature the event was bound\nwith, but the preferred way to remove listeners is using the handle\nthat is returned when using Y.on", "static": "", "guessedname": "detach", "guessedtype": "function", "params": [{"type": "String|HTMLElement|Array|NodeList", "name": "el", "description": " An id, an element \nreference, or a collection of ids and\/or elements to remove\nthe listener from."}, {"type": "String", "name": "type", "description": " the type of event to remove."}, {"type": "Function", "name": "fn", "description": " the method the event invokes.  If fn is\nundefined, then all event handlers for the type of event are *  removed."}]}, "_load": {"guessedname": "_load", "static": "", "description": "hook up any deferred listeners", "private": "", "guessedtype": "function"}, "getListeners": {"return": {"type": "Y.Custom.Event", "description": "the custom event wrapper for the DOM event(s)"}, "description": "Returns all listeners attached to the given element via addListener.\nOptionally, you can specify a specific type of event to return.", "static": "", "guessedname": "getListeners", "guessedtype": "function", "params": [{"type": "HTMLElement|string", "name": "el", "description": "  the element or element id to inspect"}, {"type": "string", "name": "type", "description": "  optional type of listener to return. If\nleft out, all listeners will be returned"}]}, "getEvent": {"return": {"type": "Event", "description": "the event"}, "description": "Finds the event in the window object, the caller's arguments, or\nin the arguments of another method in the callstack.  This is\nexecuted automatically for events registered through the event\nmanager, so the implementer should not normally need to execute\nthis function at all.", "static": "", "guessedname": "getEvent", "guessedtype": "function", "params": [{"type": "Event", "name": "e", "description": " the event parameter from the handler"}, {"type": "HTMLElement", "name": "el", "description": " the element the listener was attached to"}]}, "purgeElement": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": " the element to purge"}, {"type": "boolean", "name": "recurse", "description": " recursively purge this element's children\nas well.  Use with caution."}, {"type": "string", "name": "type", "description": " optional type of listener to purge. If\nleft out, all listeners will be removed"}], "description": "Removes all listeners attached to the given element via addListener.\nOptionally, the node's children can also be purged.\nOptionally, you can specify a specific type of event to remove.", "guessedname": "purgeElement", "guessedtype": "function"}, "_tryPreloadAttach": {"guessedname": "_tryPreloadAttach", "static": "", "description": "Polling function that runs before the onload event fires, \nattempting to attach to DOM Nodes as soon as they are \navailable", "private": "", "guessedtype": "function"}, "mouseover": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to act on."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a mouseover event on a particular element. Use \"relatedTarget\"\non the options object to specify where the mouse moved from.\nQuirks: Firefox less than 2.0 doesn't set relatedTarget properly, so\nfromElement is assigned in its place. IE doesn't allow fromElement to be\nbe assigned, so relatedTarget is assigned in its place. Both of these\nconcessions allow YAHOO.util.Event.getRelatedTarget() to work correctly\nin both browsers."}, "dblclick": {"static": "", "params": [{"type": "HTMLElement", "name": "target", "description": " The element to double click on."}, {"type": "Object", "name": "options", "description": " Additional event options (use DOM standard names)."}], "description": "Simulates a double click on a particular element."}}, "static": "", "file": "event-dom.js", "shortname": "Event", "properties": {"DOMReady": {"type": "boolean", "static": "", "description": "True when the document is initially usable", "guessedname": "DOMReady", "guessedtype": "property"}, "_retryCount": {"guessedname": "_retryCount", "static": "", "description": "The number of times to poll after window.onload.  This number is\nincreased if additional late-bound handlers are requested after\nthe page load.", "private": "", "guessedtype": "property"}, "POLL_RETRYS": {"description": "The number of times we should look for elements that are not\nin the DOM at the time the event is requested after the document\nhas been loaded.  The default is 2000@amp;20 ms, so it will poll\nfor 40 seconds or until all outstanding handlers are bound\n(whichever comes first).", "static": "", "guessedname": "POLL_RETRYS", "guessedtype": "property", "type": "int", "final": ""}, "_dri": {"guessedname": "_dri", "static": "", "description": "document readystate poll handle", "private": "", "guessedtype": "property"}, "_wrappers": {"description": "Custom event wrappers for DOM events.  Key is \n'event:' + Element uid stamp + event type", "private": "", "static": "", "guessedname": "_wrappers", "guessedtype": "property", "type": "Y.Event.Custom"}, "_loadComplete": {"description": "True after the onload event has fired", "private": "", "static": "", "guessedname": "_loadComplete", "guessedtype": "property", "type": "boolean"}, "POLL_INTERVAL": {"description": "The poll interval in milliseconds", "static": "", "guessedname": "POLL_INTERVAL", "guessedtype": "property", "type": "int", "final": ""}, "_interval": {"guessedname": "_interval", "static": "", "description": "poll handle", "private": "", "guessedtype": "property"}, "_el_events": {"guessedname": "_el_events", "static": "", "description": "Custom event wrapper map DOM events.  Key is \nElement uid stamp.  Each item is a hash of custom event\nwrappers as provided in the _wrappers collection.  This\nprovides the infrastructure for getListeners.", "private": "", "guessedtype": "property"}, "lastError": {"type": "Error", "static": "", "description": "addListener\/removeListener can throw errors in unexpected scenarios.\nThese errors are suppressed, the method returns false, and this property\nis set", "guessedname": "lastError", "guessedtype": "property"}, "_avail": {"guessedname": "_avail", "static": "", "description": "onAvailable listeners", "private": "", "guessedtype": "property"}}, "description": "The event utility provides functions to add and remove event listeners,\nevent cleansing.  It also tries to automatically remove listeners it\nregisters during the unload event."}, "plugin.DragPlugin": {"name": "plugin.DragPlugin", "constructors": [{"description": "This is a simple Drag plugin that can be attached to a Node via the plug method."}], "namespace": "plugin", "module": "dd-plugin", "guessedname": "Drag", "extends": "Drag", "superclass": "Drag", "file": "dd-plugin.js", "guessedtype": "function", "shortname": "DragPlugin", "properties": {"NS": {"type": "{String}", "description": "The Drag instance will be placed on the Node instance under the dd namespace. It can be accessed via Node.dd;", "guessedname": "NS", "guessedtype": "property"}, "NAME": {"type": "{String}", "description": "dd-plugin", "guessedname": "NAME", "guessedtype": "property"}}, "description": "This is a simple Drag plugin that can be attached to a Node via the plug method."}}, "version": "3.0.0b1", "namespaces": ["plugin", "Assert", "Test", "Test.Format"]}