{"majorversion": 3, "filemap": {"editor-base.js": {"classlist": ["Plugin.EditorBase"], "name": "editor-base.js", "module": "editor"}, "editor-tab.js": {"classlist": ["Plugin.EditorTab"], "name": "editor-tab.js", "module": "editor"}, "createlink-base.js": {"classlist": ["Plugin.CreateLinkBase"], "name": "createlink-base.js", "module": "editor"}, "exec-command.js": {"classlist": ["Plugin.ExecCommand"], "name": "exec-command.js", "module": "editor"}, "lists.js": {"classlist": ["Plugin.EditorLists"], "name": "lists.js", "module": "editor"}, "selection.js": {"classlist": ["Plugin.Selection"], "name": "selection.js", "module": "editor"}, "frame.js": {"classlist": ["Plugin.Frame"], "name": "frame.js", "module": "editor"}}, "modules": {"editor": {"description": "Adds prompt style link creation. Adds an override for the <a href=\"Plugin.ExecCommand.html#method_COMMANDS.createlink\">createlink execCommand</a>.", "submodules": ["createlink-base", "editor-base", "editor-tab", "exec-command", "frame", "editor-lists", "selection"], "classlist": ["Plugin.CreateLinkBase", "Plugin.EditorBase", "Plugin.EditorTab", "Plugin.ExecCommand", "Plugin.Frame", "Plugin.EditorLists", "Plugin.Selection"], "filelist": ["createlink-base.js", "editor-base.js", "editor-tab.js", "exec-command.js", "frame.js", "lists.js", "selection.js"], "subdata": {"editor-tab": {"name": "Plugin.EditorTab", "description": "Handles tab and shift-tab indent/outdent support."}, "editor-base": {"name": "Plugin.EditorBase", "description": "Base class for Editor. Handles the business logic of Editor, no GUI involved only utility methods and events."}, "frame": {"name": "Plugin.Frame", "description": "Creates a wrapper around an iframe. It loads the content either from a local\nfile or from script and creates a local YUI instance bound to that new window and document."}, "editor-lists": {"name": "Plugin.EditorLists", "description": "Handles list manipulation inside the Editor. Adds keyboard manipulation and execCommand support. Adds overrides for the <a href=\"Plugin.ExecCommand.html#method_COMMANDS.insertorderedlist\">insertorderedlist</a> and <a href=\"Plugin.ExecCommand.html#method_COMMANDS.insertunorderedlist\">insertunorderedlist</a> execCommands."}, "exec-command": {"name": "Plugin.ExecCommand", "description": "Plugin for the frame module to handle execCommands for Editor"}, "selection": {"name": "Plugin.Selection", "description": "Wraps some common Selection/Range functionality into a simple object"}, "createlink-base": {"name": "Plugin.CreateLinkBase", "description": "Adds prompt style link creation. Adds an override for the <a href=\"Plugin.ExecCommand.html#method_COMMANDS.createlink\">createlink execCommand</a>."}}, "name": "editor"}}, "classmap": {"Plugin.EditorLists": {"name": "Plugin.EditorLists", "constructors": [{"description": "Handles list manipulation inside the Editor. Adds keyboard manipulation and execCommand support. Adds overrides for the <a href=\"Plugin.ExecCommand.html#method_COMMANDS.insertorderedlist\">insertorderedlist</a> and <a href=\"Plugin.ExecCommand.html#method_COMMANDS.insertunorderedlist\">insertunorderedlist</a> execCommands."}], "namespace": "Plugin", "module": "editor", "guessedname": "EditorLists", "methods": {"_onNodeChange": {"guessedname": "_onNodeChange", "params": [{"type": "Event", "name": "e", "description": " The Event facade passed from the host."}], "description": "Listener for host's nodeChange event and captures the tabkey interaction only when inside a list node.", "private": "", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "lists.js", "guessedtype": "function", "shortname": "EditorLists", "properties": {"NS": {"static": "", "description": "lists", "guessedname": "NS", "guessedtype": "property"}, "NAME": {"static": "", "description": "editorLists", "guessedname": "NAME", "guessedtype": "property"}, "REMOVE": {"static": "", "description": "The items to removed from a list when a list item is moved, currently removes BR nodes", "guessedname": "REMOVE", "guessedtype": "property"}}, "description": "Handles list manipulation inside the Editor. Adds keyboard manipulation and execCommand support. Adds overrides for the <a href=\"Plugin.ExecCommand.html#method_COMMANDS.insertorderedlist\">insertorderedlist</a> and <a href=\"Plugin.ExecCommand.html#method_COMMANDS.insertunorderedlist\">insertunorderedlist</a> execCommands."}, "Plugin.EditorBase": {"name": "Plugin.EditorBase", "configs": {"content": {"description": "The content to load into the Editor Frame", "guessedname": "content", "guessedtype": "property"}, "dir": {"description": "The value of the dir attribute on the HTML element of the frame. Default: ltr", "guessedname": "dir", "guessedtype": "property"}}, "constructors": [{"description": "Base class for Editor. Handles the business logic of Editor, no GUI involved only utility methods and events."}], "namespace": "Plugin", "module": "editor", "events": {"dirChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dirChange", "description": "Fires when the value for the configuration attribute 'dir' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "contentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "contentChange", "description": "Fires when the value for the configuration attribute 'content' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodeChange": {"type": "{Event.Custom}", "params": [{"type": "Event.Facade", "name": "event", "description": " An Event Facade object with the following specific property added:\n<dl><dt>node</dt><dd>The node currently being interacted with</dd></dl>"}], "description": "Fired from mouseup & keyup.", "guessedname": "requires", "guessedtype": "property"}}, "guessedname": "EditorBase", "methods": {"_onFrameMouseDown": {"private": "", "description": "Fires nodeChange event", "guessedname": "_onFrameMouseDown", "guessedtype": "function"}, "_afterFrameReady": {"private": "", "description": "After frame ready, bind mousedown & keyup listeners", "guessedname": "_afterFrameReady", "guessedtype": "function"}, "render": {"return": {"type": "EditorBase", "description": ""}, "description": "Renders the Y.Frame to the passed node.", "chainable": "", "params": [{"type": "Selector/HTMLElement/Node", "name": "node", "description": " The node to append the Editor to"}], "guessedname": "render", "guessedtype": "function"}, "getInstance": {"return": {"type": "YUI", "description": "The YUI instance bound to the frame."}, "description": "Get the YUI instance of the frame", "guessedname": "getInstance", "guessedtype": "function"}, "execCommand": {"return": {"type": "Node/NodeList", "description": "The Node or Nodelist affected by the command. Only returns on override commands, not browser defined commands."}, "params": [{"type": "String", "name": "cmd", "description": " The command to pass: inserthtml, insertimage, bold"}, {"type": "String", "name": "val", "description": " The optional value of the command: Helvetica"}], "description": "Pass through to the frame.execCommand method", "guessedname": "execCommand", "guessedtype": "function"}, "focus": {"chainable": "", "return": {"type": "EditorBase", "description": ""}, "description": "Focus the contentWindow of the iframe", "guessedname": "focus", "guessedtype": "function"}, "_defNodeChangeFn": {"guessedname": "_defNodeChangeFn", "params": [{"type": "Event", "name": "e", "description": " The event"}], "description": "The default handler for the nodeChange event.", "private": "", "guessedtype": "function"}, "_onFrameKeyUp": {"private": "", "description": "Fires nodeChange event via _onKeyUpTimer on a timer for performance", "guessedname": "_onFrameKeyUp", "guessedtype": "function"}, "_onFrameKeyDown": {"private": "", "description": "Fires nodeChange event", "guessedname": "_onFrameKeyDown", "guessedtype": "function"}, "getContent": {"return": {"type": "String", "description": "The filtered content of the Editor"}, "description": "(Un)Filters the content of the Editor, cleaning YUI related code. //TODO better filtering", "guessedname": "getContent", "guessedtype": "function"}, "_onKeyUpTimer": {"guessedname": "_onKeyUpTimer", "params": [{"type": "Boolean", "name": "fromTimer", "description": " If it's from the timer, kill the _keyUpTimer property"}], "description": "Fires nodeChange event from _onKeyUpTimer on a timer for performance", "private": "", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "editor-base.js", "guessedtype": "function", "shortname": "EditorBase", "properties": {"USE": {"type": "Array", "static": "", "description": "The default modules to use inside the Frame", "guessedname": "USE", "guessedtype": "property"}, "NAME": {"static": "", "description": "The Class Name: editorBase", "guessedname": "NAME", "guessedtype": "property"}, "frame": {"description": "Internal reference to the Y.Frame instance", "guessedname": "frame", "guessedtype": "property"}, "NC_KEYS": {"type": "Object", "static": "", "description": "Hash table of keys to fire a nodeChange event for.", "guessedname": "NC_KEYS", "guessedtype": "property"}, "_keyUpTimer": {"private": "", "description": "The Y.later handle to determine if there is an active timer running.", "guessedname": "_keyupTimer", "guessedtype": "property"}, "STRINGS.title": {"static": "", "description": "Title of frame document: Rich Text Editor", "guessedname": "title", "guessedtype": "property"}, "STRINGS": {"static": "", "description": "Editor Strings", "guessedname": "STRINGS", "guessedtype": "property"}}, "description": "Base class for Editor. Handles the business logic of Editor, no GUI involved only utility methods and events."}, "Plugin.CreateLinkBase": {"name": "Plugin.CreateLinkBase", "namespace": "Plugin", "module": "editor", "guessedname": "CreateLinkBase", "static": "", "file": "createlink-base.js", "guessedtype": "property", "shortname": "CreateLinkBase", "properties": {"DEFAULT": {"static": "", "description": "String used as the default value of the Prompt", "guessedname": "DEFAULT", "guessedtype": "property"}, "PROMPT": {"static": "", "description": "String used for the Prompt", "guessedname": "PROMPT", "guessedtype": "property"}, "STRINGS": {"static": "", "description": "Strings used by the plugin", "guessedname": "STRINGS", "guessedtype": "property"}}, "description": "Adds prompt style link creation. Adds an override for the <a href=\"Plugin.ExecCommand.html#method_COMMANDS.createlink\">createlink execCommand</a>."}, "Plugin.Selection": {"name": "Plugin.Selection", "constructors": [{"description": "Wraps some common Selection/Range functionality into a simple object"}], "namespace": "Plugin", "module": "editor", "methods": {"insertAtCursor": {"return": {"type": "Node", "description": "The inserted Node."}, "params": [{"type": "String", "name": "html", "description": " The HTML to insert."}, {"type": "Node", "name": "node", "description": " The text node to break when inserting."}, {"type": "Number", "name": "offset", "description": " The left offset of the text node to break and insert the new content."}, {"type": "Boolean", "name": "collapse", "description": " Should the range be collapsed after insertion. default: false"}], "description": "Insert HTML at the current cursor position, this method gives you control over the text node to insert into and the offset where to put it.", "guessedname": "insertAtCursor", "guessedtype": "function"}, "wrapContent": {"return": {"type": "NodeList", "description": "A NodeList of all items in the selection."}, "params": [{"type": "String", "name": "tag", "description": " The tag to wrap all selected items with."}], "description": "Get all elements inside a selection and wrap them with a new element and return a NodeList of all elements touched.", "guessedname": "wrapContent", "guessedtype": "function"}, "resolve": {"return": {"type": "Node", "description": "The Resolved node"}, "description": "Resolve a node from the selection object and return a Node instance", "static": "", "guessedname": "resolve", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "n", "description": " The HTMLElement to resolve. Might be a TextNode, gives parentNode."}]}, "unfilter": {"static": "", "return": {"type": "String", "description": "The filtered HTML"}, "description": "Undoes what filter does enough to return the HTML from the Editor, then re-applies the filter.", "guessedname": "unfilter", "guessedtype": "function"}, "remove": {"chainable": "", "return": {"type": "Y.Selection", "description": ""}, "description": "Destroy the range.", "guessedname": "remove", "guessedtype": "function"}, "replace": {"return": {"type": "Node", "description": "The node inserted."}, "params": [{"type": "String", "name": "se", "description": " The string to search for."}, {"type": "String", "name": "re", "description": " The string of HTML to replace it with."}, {"type": "Node", "name": "node", "description": " A Node instance of the text node to interact with."}], "description": "Find and replace a string inside a text node and replace it with HTML focusing the node after \nto allow you to continue to type.", "guessedname": "replace", "guessedtype": "function"}, "filter": {"static": "", "description": "Performs a prefilter on all nodes in the editor. Looks for nodes with a style: fontFamily or font face\nIt then creates a dynamic class assigns it and removed the property. This is so that we don't lose\nthe fontFamily when selecting nodes.", "guessedname": "filter", "guessedtype": "function"}, "getCursor": {"return": {"type": "Node", "description": ""}, "description": "Get the placeholder in the DOM at the current cursor position: NOT FINISHED", "guessedname": "getCursor", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": ""}, "description": "Generic toString for logging.", "guessedname": "toString", "guessedtype": "function"}, "selectNode": {"return": {"type": "Y.Selection", "description": ""}, "description": "Select a Node (hilighting it).", "chainable": "", "params": [{"type": "Node", "name": "node", "description": " The node to select"}, {"type": "Boolean", "name": "collapse", "description": " Should the range be collapsed after insertion. default: false"}], "guessedname": "selectNode", "guessedtype": "function"}, "_swap": {"return": {"type": "HTMLElement", "description": "The new node"}, "description": "Swap an element, with another element", "private": "", "params": [{"type": "HTMLElement", "name": "n", "description": " The node to swap"}, {"type": "String", "name": "tag", "description": " The tag to use when creating the new element."}], "guessedname": "_swap", "guessedtype": "function"}, "createRange": {"return": {"type": "RangeObject", "description": ""}, "description": "Wrapper for the different range creation methods.", "guessedname": "createRange", "guessedtype": "function"}, "_wrap": {"return": {"type": "HTMLElement", "description": "The wrapped node"}, "description": "Wrap an element, with another element", "private": "", "params": [{"type": "HTMLElement", "name": "n", "description": " The node to wrap"}, {"type": "String", "name": "tag", "description": " The tag to use when creating the new element."}], "guessedname": "_wrap", "guessedtype": "function"}, "insertContent": {"return": {"type": "Node", "description": "The inserted Node."}, "params": [{"type": "String", "name": "html", "description": " The HTML to insert."}], "description": "Insert HTML at the current cursor position and return a Node instance of the newly inserted element.", "guessedname": "insertContent", "guessedtype": "function"}, "getSelected": {"return": {"type": "NodeList", "description": "A NodeList of all items in the selection."}, "description": "Get all the nodes in the current selection. This method will actually perform a filter first.\nThen it calls doc.execCommand('fontname', null, 'yui-tmp') to touch all nodes in the selection.\nThe it compiles a list of all nodes affected by the execCommand and builds a NodeList to return.", "guessedname": "getSelected", "guessedtype": "function"}, "setCursor": {"return": {"type": "Node", "description": ""}, "description": "Put a placeholder in the DOM at the current cursor position: NOT FINISHED", "guessedname": "setCursor", "guessedtype": "function"}}, "file": "selection.js", "shortname": "Selection", "properties": {"TMP": {"static": "", "description": "The temporary fontname applied to a selection to retrieve their values: yui-tmp", "guessedname": "TMP", "guessedtype": "property"}, "isCollapsed": {"type": "Boolean", "description": "Flag to show if the range is collapsed or not", "guessedname": "isCollapsed", "guessedtype": "property"}, "ALL": {"static": "", "description": "The selector to use when looking for Nodes to cache the value of: [style],font[face]", "guessedname": "ALL", "guessedtype": "property"}, "focusNode": {"type": "Node", "description": "A Node instance of the parentNode of the focusNode of the range", "guessedname": "focusNode", "guessedtype": "property"}, "anchorOffset": {"type": "Number", "description": "The offset from the range object", "guessedname": "anchorOffset", "guessedtype": "property"}, "focusTextNode": {"type": "Node", "description": "A Node instance of the actual textNode of the range.", "guessedname": "focusTextNode", "guessedtype": "property"}, "text": {"type": "String", "description": "Range text value", "guessedname": "text", "guessedtype": "property"}, "focusOffset": {"type": "Number", "description": "The offset from the range object", "guessedname": "focusOffset", "guessedtype": "property"}, "anchorTextNode": {"type": "Node", "description": "A Node instance of the actual textNode of the range.", "guessedname": "anchorTextNode", "guessedtype": "property"}, "_selection": {"private": "", "description": "The actual Selection/Range object", "guessedname": "_selection", "guessedtype": "property"}, "anchorNode": {"type": "Node", "description": "A Node instance of the parentNode of the anchorNode of the range", "guessedname": "anchorNode", "guessedtype": "property"}, "DEFAULT_TAG": {"static": "", "description": "The default tag to use when creating elements: span", "guessedname": "DEFAULT_TAG", "guessedtype": "property"}}, "description": "Wraps some common Selection/Range functionality into a simple object"}, "Plugin.EditorTab": {"name": "Plugin.EditorTab", "constructors": [{"description": "Handles tab and shift-tab indent/outdent support."}], "namespace": "Plugin", "module": "editor", "guessedname": "EditorTab", "methods": {"_onNodeChange": {"guessedname": "_onNodeChange", "params": [{"type": "Event", "name": "e", "description": " The Event facade passed from the host."}], "description": "Listener for host's nodeChange event and captures the tabkey interaction.", "private": "", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "editor-tab.js", "guessedtype": "function", "shortname": "EditorTab", "properties": {"NS": {"static": "", "description": "tab", "guessedname": "NS", "guessedtype": "property"}, "NAME": {"static": "", "description": "editorTab", "guessedname": "NAME", "guessedtype": "property"}}, "description": "Handles tab and shift-tab indent/outdent support."}, "Plugin.Frame": {"name": "Plugin.Frame", "configs": {"lang": {"type": "String", "description": "The default language. Default: en-US", "guessedname": "lang", "guessedtype": "property"}, "src": {"type": "String", "description": "The src of the iframe/window. Defaults to javascript:;", "guessedname": "src", "guessedtype": "property"}, "use": {"guessedtype": "property", "type": "Array", "description": "Array of modules to include in the scoped YUI instance at render time. Default: ['none', 'selector-css2']", "guessedname": "use", "writeonce": ""}, "container": {"type": "String/HTMLElement/Node", "description": "The container to append the iFrame to on render.", "guessedname": "container", "guessedtype": "property"}, "title": {"type": "String", "description": "The title to give the blank page.", "guessedname": "title", "guessedtype": "property"}, "content": {"type": "String", "description": "The string to inject into the body of the new frame/window.", "guessedname": "content", "guessedtype": "property"}, "designMode": {"guessedtype": "property", "type": "Boolean", "description": "Should designMode be turned on after creation.", "guessedname": "designMode", "writeonce": ""}, "basehref": {"type": "String", "description": "The base href to use in the iframe.", "guessedname": "basehref", "guessedtype": "property"}, "id": {"guessedtype": "property", "type": "String", "description": "Set the id of the new Node. (optional)", "guessedname": "id", "writeonce": ""}, "dir": {"type": "String", "description": "The default text direction for this new frame. Default: ltr", "guessedname": "dir", "guessedtype": "property"}}, "constructors": [{"description": "Creates a wrapper around an iframe. It loads the content either from a local\nfile or from script and creates a local YUI instance bound to that new window and document."}], "namespace": "Plugin", "module": "editor", "events": {"contentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "contentChange", "description": "Fires when the value for the configuration attribute 'content' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "designModeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "designModeChange", "description": "Fires when the value for the configuration attribute 'designMode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dirChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dirChange", "description": "Fires when the value for the configuration attribute 'dir' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "langChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "langChange", "description": "Fires when the value for the configuration attribute 'lang' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "useChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "useChange", "description": "Fires when the value for the configuration attribute 'use' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "basehrefChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "basehrefChange", "description": "Fires when the value for the configuration attribute 'basehref' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "idChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "idChange", "description": "Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "titleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "titleChange", "description": "Fires when the value for the configuration attribute 'title' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "containerChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "containerChange", "description": "Fires when the value for the configuration attribute 'container' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "srcChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "srcChange", "description": "Fires when the value for the configuration attribute 'src' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Frame", "methods": {"_create": {"guessedname": "_create", "return": {"type": "Object", "description": "Hash table containing references to the new Document & Window"}, "description": "Create the iframe or Window and get references to the Document & Window", "private": "", "guessedtype": "function"}, "use": {"description": "This is a scoped version of the normal YUI.use method & is bound to this frame/window.\nAt setup, the inst.use method is mapped to this method.", "guessedname": "use", "guessedtype": "function"}, "render": {"return": {"type": "Y.Frame", "description": ""}, "description": "Render the iframe into the container config option or open the window.", "chainable": "", "params": [{"type": "String/HTMLElement/Node", "name": "node", "description": " The node to render to"}], "guessedname": "render", "guessedtype": "function"}, "getInstance": {"return": {"type": "YUI", "description": "The internal YUI instance"}, "description": "Get a reference to the internal YUI instance.", "guessedname": "getInstance", "guessedtype": "function"}, "_setHTML": {"return": {"type": "String", "description": ""}, "description": "Set the content of the iframe", "private": "", "params": [{"type": "String", "name": "html", "description": " The raw HTML to set the body of the iframe to."}], "guessedname": "_setHTML", "guessedtype": "function"}, "_onContentReady": {"description": "Called once the content is available in the frame/window and calls the final use call\non the internal instance so that the modules are loaded properly.", "private": "", "guessedname": "_onContentReady", "guessedtype": "function"}, "focus": {"description": "Set the focus to the iframe", "guessedname": "focus", "guessedtype": "function"}, "_instanceLoaded": {"guessedname": "_instanceLoaded", "params": [{"type": "YUI", "name": "inst", "description": " The internal YUI instance bound to the frame/window"}], "description": "Called from the first YUI instance that sets up the internal instance.\nThis loads the content into the window/frame and attaches the contentready event.", "private": "", "guessedtype": "function"}, "_resolveBaseHref": {"return": {"type": "String", "description": ""}, "description": "Resolves the basehref of the page the frame is created on. Only applies to dynamic content.", "private": "", "params": [{"type": "String", "name": "href", "description": " The new value to use, if empty it will be resolved from the current url."}], "guessedname": "_resolveBaseHref", "guessedtype": "function"}, "delegate": {"return": {"type": "EventHandle", "description": "The Event handle returned from Y.delegate"}, "params": [{"type": "String", "name": "type", "description": " The type of event to listen for"}, {"type": "Function", "name": "fn", "description": " The method to attach"}, {"type": "String", "name": "cont", "description": " The container to act as a delegate, if no \"sel\" passed, the body is assumed as the container."}, {"type": "String", "name": "sel", "description": " The selector to match in the event (optional)"}], "description": "A delegate method passed to the instance's delegate method", "guessedname": "delegate", "guessedtype": "function"}, "_defReadyFn": {"description": "Binds DOM events, sets the iframe to visible and fires the ready event", "private": "", "guessedname": "_defReadyFn", "guessedtype": "function"}, "_resolveWinDoc": {"return": {"type": "Object", "description": "Object hash of window and document references, if a YUI config was passed, it is returned."}, "description": "Resolves the document and window from an iframe or window instance", "private": "", "params": [{"type": "Object", "name": "c", "description": " The YUI Config to add the window and document to"}], "guessedname": "_resolveWinDoc", "guessedtype": "function"}, "_getHTML": {"return": {"type": "String", "description": ""}, "description": "Get the content from the iframe", "private": "", "params": [{"type": "String", "name": "html", "description": " The raw HTML from the body of the iframe."}], "guessedname": "_getHTML", "guessedtype": "function"}, "_onDomEvent": {"guessedname": "_onDomEvent", "params": [{"type": "Event.Facade", "name": "e", "description": ""}], "description": "Generic handler for all DOM events fired by the iframe or window. This handler\ntakes the current EventFacade and augments it to fire on the Frame host. It adds two new properties\nto the EventFacade called frameX and frameY which adds the scroll and xy position of the iframe\nto the original pageX and pageY of the event so external nodes can be positioned over the frame.", "private": "", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "frame.js", "guessedtype": "function", "shortname": "Frame", "properties": {"DOC_TYPE": {"type": "String", "static": "", "description": "The DOCTYPE to prepend to the new document when created. Should match the one on the page being served.", "guessedname": "DOC_TYPE", "guessedtype": "property"}, "NAME": {"type": "String", "static": "", "description": "The name of the class (frame)", "guessedname": "NAME", "guessedtype": "property"}, "META": {"type": "String", "static": "", "description": "The meta-tag for Content-Type to add to the dynamic document", "guessedname": "META", "guessedtype": "property"}, "_instance": {"guessedname": "_instance", "type": "YUI", "description": "Internal reference to the YUI instance bound to the iFrame or window", "private": "", "guessedtype": "property"}, "_rendered": {"guessedname": "_rendered", "type": "Boolean", "description": "Internal reference set when render is called.", "private": "", "guessedtype": "property"}, "_ready": {"guessedname": "_ready", "type": "Boolean", "description": "Internal reference set when the content is ready.", "private": "", "guessedtype": "property"}, "HTML": {"type": "String", "static": "", "description": "The template string used to create the iframe", "guessedname": "HTML", "guessedtype": "property"}, "_iframe": {"guessedname": "_iframe", "type": "Node", "description": "Internal Node reference to the iFrame or the window", "private": "", "guessedtype": "property"}, "PAGE_HTML": {"type": "String", "static": "", "description": "The template used to create the page when created dynamically.", "guessedname": "PAGE_HTML", "guessedtype": "property"}}, "description": "Creates a wrapper around an iframe. It loads the content either from a local\nfile or from script and creates a local YUI instance bound to that new window and document."}, "Plugin.ExecCommand": {"name": "Plugin.ExecCommand", "description": "Plugin for the frame module to handle execCommands for Editor", "constructors": [{"description": "Plugin for the frame module to handle execCommands for Editor"}], "namespace": "Plugin", "module": "editor", "guessedname": "ExecCommand", "extends": "Base", "superclass": "Base", "file": "exec-command.js", "guessedtype": "function", "shortname": "ExecCommand", "properties": {"COMMANDS": {"static": "", "description": "Static object literal of execCommand overrides", "guessedname": "COMMANDS", "guessedtype": "property"}, "NS": {"static": "", "description": "exec", "guessedname": "NS", "guessedtype": "property"}, "NAME": {"static": "", "description": "execCommand", "guessedname": "NAME", "guessedtype": "property"}, "_inst": {"private": "", "description": "An internal reference to the instance of the frame plugged into.", "guessedname": "_inst", "guessedtype": "property"}}, "methods": {"COMMANDS.wrap": {"return": {"type": "NodeList", "description": "NodeList of the items touched by this command."}, "description": "Wraps the content with a new element of type (tag)", "static": "", "guessedname": "wrap", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: wrap"}, {"type": "String", "name": "tag", "description": " The tag to wrap the selection with"}]}, "COMMANDS.inserthtml": {"return": {"type": "Node", "description": "Node instance of the item touched by this command."}, "description": "Inserts the provided HTML at the cursor, should be a single element.", "static": "", "guessedname": "inserthtml", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: inserthtml"}, {"type": "String", "name": "html", "description": " The html to insert"}]}, "COMMANDS.removeclass": {"return": {"type": "NodeList", "description": "NodeList of the items touched by this command."}, "description": "Remove a class from all of the elements in the selection", "static": "", "guessedname": "removeclass", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: removeclass"}, {"type": "String", "name": "cls", "description": " The className to remove"}]}, "COMMANDS.addclass": {"return": {"type": "NodeList", "description": "NodeList of the items touched by this command."}, "description": "Add a class to all of the elements in the selection", "static": "", "guessedname": "addclass", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: addclass"}, {"type": "String", "name": "cls", "description": " The className to add"}]}, "getInstance": {"return": {"type": "YUI", "description": "The YUI instance bound to the parent frame"}, "description": "Get's the instance of YUI bound to the parent frame", "guessedname": "getInstance", "guessedtype": "function"}, "COMMANDS.insertorderedlist": {"return": {"type": "Node", "description": "Node instance of the item touched by this command."}, "description": "Override for the insertorderedlist method from the <a href=\"Plugin.EditorLists.html\">EditorLists</a> plugin.", "static": "", "guessedname": "insertorderedlist", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: insertorderedlist"}]}, "COMMANDS.insertimage": {"return": {"type": "Node", "description": "Node instance of the item touched by this command."}, "description": "Inserts an image at the cursor position", "static": "", "guessedname": "insertimage", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: insertimage"}, {"type": "String", "name": "img", "description": " The url of the image to be inserted"}]}, "command": {"return": {"type": "Node/NodeList", "description": "Should return the Node/Nodelist affected"}, "params": [{"type": "String", "name": "action", "description": " The action to perform (bold, italic, fontname)"}, {"type": "String", "name": "value", "description": " The optional value (helvetica)"}], "description": "Execute a command on the frame's document.", "guessedname": "command", "guessedtype": "function"}, "_command": {"guessedname": "_command", "params": [{"type": "String", "name": "action", "description": " The action to perform (bold, italic, fontname)"}, {"type": "String", "name": "value", "description": " The optional value (helvetica)"}], "description": "The private version of execCommand that doesn't filter for overrides.", "private": "", "guessedtype": "function"}, "COMMANDS.insertunorderedlist": {"return": {"type": "Node", "description": "Node instance of the item touched by this command."}, "description": "Override for the insertunorderedlist method from the <a href=\"Plugin.EditorLists.html\">EditorLists</a> plugin.", "static": "", "guessedname": "insertunorderedlist", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: insertunorderedlist"}]}, "COMMANDS.createlink": {"return": {"type": "Node", "description": "Node instance of the item touched by this command."}, "description": "Override for the createlink method from the <a href=\"Plugin.CreateLinkBase.html\">CreateLinkBase</a> plugin.", "static": "", "guessedname": "createlink", "guessedtype": "function", "params": [{"type": "String", "name": "cmd", "description": " The command executed: createlink"}]}}}}, "version": "3.2.0", "namespaces": ["Plugin"]}