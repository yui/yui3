[{"name": "_afterFrameReady", "url": "Plugin.EditorBase.html#method__afterFrameReady", "access": "private", "host": "Plugin.EditorBase", "params": "", "type": "method", "description": "After frame ready, bind mousedown & keyup listeners"}, {"name": "ALL", "url": "Plugin.Selection.html#property_ALL", "access": "", "host": "Plugin.Selection", "params": "", "type": "property", "description": "The selector to use when looking for Nodes to cache the value of: [style],font[face]"}, {"name": "anchorNode", "url": "Plugin.Selection.html#property_anchorNode", "access": "", "host": "Plugin.Selection", "params": "", "type": "property", "description": "A Node instance of the parentNode of the anchorNode of the range"}, {"name": "anchorOffset", "url": "Plugin.Selection.html#property_anchorOffset", "access": "", "host": "Plugin.Selection", "params": "", "type": "property", "description": "The offset from the range object"}, {"name": "anchorTextNode", "url": "Plugin.Selection.html#property_anchorTextNode", "access": "", "host": "Plugin.Selection", "params": "", "type": "property", "description": "A Node instance of the actual textNode of the range."}, {"name": "basehref", "url": "Plugin.Frame.html#config_basehref", "access": "", "host": "Plugin.Frame", "params": "", "type": "config", "description": "The base href to use in the iframe."}, {"name": "basehrefChange", "url": "Plugin.Frame.html#event_basehrefChange", "access": "", "host": "Plugin.Frame", "params": "event <Event.Facade> An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>", "type": "event", "description": "Fires when the value for the configuration attribute 'basehref' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, {"name": "_command", "url": "Plugin.ExecCommand.html#method__command", "access": "private", "host": "Plugin.ExecCommand", "params": "action <String>  The action to perform (bold, italic, fontname), value <String>  The optional value (helvetica)", "type": "method", "description": "The private version of execCommand that doesn't filter for overrides."}, {"name": "command", "url": "Plugin.ExecCommand.html#method_command", "access": "", "host": "Plugin.ExecCommand", "params": "action <String>  The action to perform (bold, italic, fontname), value <String>  The optional value (helvetica)", "type": "method", "description": "Execute a command on the frame's document."}, {"name": "COMMANDS", "url": "Plugin.ExecCommand.html#property_COMMANDS", "access": "", "host": "Plugin.ExecCommand", "params": "", "type": "property", "description": "Static object literal of execCommand overrides"}, {"name": "COMMANDS.addclass", "url": "Plugin.ExecCommand.html#method_COMMANDS.addclass", "access": "", "host": "Plugin.ExecCommand", "params": "cmd <String>  The command executed: addclass, cls <String>  The className to add", "type": "method", "description": "Add a class to all of the elements in the selection"}, {"name": "COMMANDS.createlink", "url": "Plugin.ExecCommand.html#method_COMMANDS.createlink", "access": "", "host": "Plugin.ExecCommand", "params": "cmd <String>  The command executed: createlink", "type": "method", "description": "Override for the createlink method from the <a href=\"Plugin.CreateLinkBase.html\">CreateLinkBase</a> plugin."}, {"name": "COMMANDS.inserthtml", "url": "Plugin.ExecCommand.html#method_COMMANDS.inserthtml", "access": "", "host": "Plugin.ExecCommand", "params": "cmd <String>  The command executed: inserthtml, html <String>  The html to insert", "type": "method", "description": "Inserts the provided HTML at the cursor, should be a single element."}, {"name": "COMMANDS.insertimage", "url": "Plugin.ExecCommand.html#method_COMMANDS.insertimage", "access": "", "host": "Plugin.ExecCommand", "params": "cmd <String>  The command executed: insertimage, img <String>  The url of the image to be inserted", "type": "method", "description": "Inserts an image at the cursor position"}, {"name": "COMMANDS.insertorderedlist", "url": "Plugin.ExecCommand.html#method_COMMANDS.insertorderedlist", "access": "", "host": "Plugin.ExecCommand", "params": "cmd <String>  The command executed: insertorderedlist", "type": "method", "description": "Override for the insertorderedlist method from the <a href=\"Plugin.EditorLists.html\">EditorLists</a> plugin."}, {"name": "COMMANDS.insertunorderedlist", "url": "Plugin.ExecCommand.html#method_COMMANDS.insertunorderedlist", "access": "", "host": "Plugin.ExecCommand", "params": "cmd <String>  The command executed: insertunorderedlist", "type": "method", "description": "Override for the insertunorderedlist method from the <a href=\"Plugin.EditorLists.html\">EditorLists</a> plugin."}, {"name": "COMMANDS.removeclass", "url": "Plugin.ExecCommand.html#method_COMMANDS.removeclass", "access": "", "host": "Plugin.ExecCommand", "params": "cmd <String>  The command executed: removeclass, cls <String>  The className to remove", "type": "method", "description": "Remove a class from all of the elements in the selection"}, {"name": "COMMANDS.wrap", "url": "Plugin.ExecCommand.html#method_COMMANDS.wrap", "access": "", "host": "Plugin.ExecCommand", "params": "cmd <String>  The command executed: wrap, tag <String>  The tag to wrap the selection with", "type": "method", "description": "Wraps the content with a new element of type (tag)"}, {"name": "container", "url": "Plugin.Frame.html#config_container", "access": "", "host": "Plugin.Frame", "params": "", "type": "config", "description": "The container to append the iFrame to on render."}, {"name": "containerChange", "url": "Plugin.Frame.html#event_containerChange", "access": "", "host": "Plugin.Frame", "params": "event <Event.Facade> An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>", "type": "event", "description": "Fires when the value for the configuration attribute 'container' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, {"name": "content", "url": "Plugin.EditorBase.html#config_content", "access": "", "host": "Plugin.EditorBase", "params": "", "type": "config", "description": "The content to load into the Editor Frame"}, {"name": "content", "url": "Plugin.Frame.html#config_content", "access": "", "host": "Plugin.Frame", "params": "", "type": "config", "description": "The string to inject into the body of the new frame/window."}, {"name": "contentChange", "url": "Plugin.EditorBase.html#event_contentChange", "access": "", "host": "Plugin.EditorBase", "params": "event <Event.Facade> An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>", "type": "event", "description": "Fires when the value for the configuration attribute 'content' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, {"name": "contentChange", "url": "Plugin.Frame.html#event_contentChange", "access": "", "host": "Plugin.Frame", "params": "event <Event.Facade> An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>", "type": "event", "description": "Fires when the value for the configuration attribute 'content' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, {"name": "_create", "url": "Plugin.Frame.html#method__create", "access": "private", "host": "Plugin.Frame", "params": "", "type": "method", "description": "Create the iframe or Window and get references to the Document & Window"}, {"name": "createRange", "url": "Plugin.Selection.html#method_createRange", "access": "", "host": "Plugin.Selection", "params": "", "type": "method", "description": "Wrapper for the different range creation methods."}, {"name": "DEFAULT", "url": "Plugin.CreateLinkBase.html#property_DEFAULT", "access": "", "host": "Plugin.CreateLinkBase", "params": "", "type": "property", "description": "String used as the default value of the Prompt"}, {"name": "DEFAULT_TAG", "url": "Plugin.Selection.html#property_DEFAULT_TAG", "access": "", "host": "Plugin.Selection", "params": "", "type": "property", "description": "The default tag to use when creating elements: span"}, {"name": "_defNodeChangeFn", "url": "Plugin.EditorBase.html#method__defNodeChangeFn", "access": "private", "host": "Plugin.EditorBase", "params": "e <Event>  The event", "type": "method", "description": "The default handler for the nodeChange event."}, {"name": "_defReadyFn", "url": "Plugin.Frame.html#method__defReadyFn", "access": "private", "host": "Plugin.Frame", "params": "", "type": "method", "description": "Binds DOM events, sets the iframe to visible and fires the ready event"}, {"name": "delegate", "url": "Plugin.Frame.html#method_delegate", "access": "", "host": "Plugin.Frame", "params": "type <String>  The type of event to listen for, fn <Function>  The method to attach, cont <String>  The container to act as a delegate, if no \"sel\" passed, the body is assumed as the container., sel <String>  The selector to match in the event (optional)", "type": "method", "description": "A delegate method passed to the instance's delegate method"}, {"name": "designMode", "url": "Plugin.Frame.html#config_designMode", "access": "", "host": "Plugin.Frame", "params": "", "type": "config", "description": "Should designMode be turned on after creation."}, {"name": "designModeChange", "url": "Plugin.Frame.html#event_designModeChange", "access": "", "host": "Plugin.Frame", "params": "event <Event.Facade> An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>", "type": "event", "description": "Fires when the value for the configuration attribute 'designMode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, {"name": "dir", "url": "Plugin.EditorBase.html#config_dir", "access": "", "host": "Plugin.EditorBase", "params": "", "type": "config", "description": "The value of the dir attribute on the HTML element of the frame. Default: ltr"}, {"name": "dir", "url": "Plugin.Frame.html#config_dir", "access": "", "host": "Plugin.Frame", "params": "", "type": "config", "description": "The default text direction for this new frame. Default: ltr"}, {"name": "dirChange", "url": "Plugin.EditorBase.html#event_dirChange", "access": "", "host": "Plugin.EditorBase", "params": "event <Event.Facade> An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>", "type": "event", "description": "Fires when the value for the configuration attribute 'dir' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, {"name": "dirChange", "url": "Plugin.Frame.html#event_dirChange", "access": "", "host": "Plugin.Frame", "params": "event <Event.Facade> An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>", "type": "event", "description": "Fires when the value for the configuration attribute 'dir' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, {"name": "DOC_TYPE", "url": "Plugin.Frame.html#property_DOC_TYPE", "access": "", "host": "Plugin.Frame", "params": "", "type": "property", "description": "The DOCTYPE to prepend to the new document when created. Should match the one on the page being served."}, {"name": "execCommand", "url": "Plugin.EditorBase.html#method_execCommand", "access": "", "host": "Plugin.EditorBase", "params": "cmd <String>  The command to pass: inserthtml, insertimage, bold, val <String>  The optional value of the command: Helvetica", "type": "method", "description": "Pass through to the frame.execCommand method"}, {"name": "filter", "url": "Plugin.Selection.html#method_filter", "access": "", "host": "Plugin.Selection", "params": "", "type": "method", "description": "Performs a prefilter on all nodes in the editor. Looks for nodes with a style: fontFamily or font face\nIt then creates a dynamic class assigns it and removed the property. This is so that we don't lose\nthe fontFamily when selecting nodes."}, {"name": "focus", "url": "Plugin.EditorBase.html#method_focus", "access": "", "host": "Plugin.EditorBase", "params": "", "type": "method", "description": "Focus the contentWindow of the iframe"}, {"name": "focus", "url": "Plugin.Frame.html#method_focus", "access": "", "host": "Plugin.Frame", "params": "", "type": "method", "description": "Set the focus to the iframe"}, {"name": "focusNode", "url": "Plugin.Selection.html#property_focusNode", "access": "", "host": "Plugin.Selection", "params": "", "type": "property", "description": "A Node instance of the parentNode of the focusNode of the range"}, {"name": "focusOffset", "url": "Plugin.Selection.html#property_focusOffset", "access": "", "host": "Plugin.Selection", "params": "", "type": "property", "description": "The offset from the range object"}, {"name": "focusTextNode", "url": "Plugin.Selection.html#property_focusTextNode", "access": "", "host": "Plugin.Selection", "params": "", "type": "property", "description": "A Node instance of the actual textNode of the range."}, {"name": "frame", "url": "Plugin.EditorBase.html#property_frame", "access": "", "host": "Plugin.EditorBase", "params": "", "type": "property", "description": "Internal reference to the Y.Frame instance"}, {"name": "getContent", "url": "Plugin.EditorBase.html#method_getContent", "access": "", "host": "Plugin.EditorBase", "params": "", "type": "method", "description": "(Un)Filters the content of the Editor, cleaning YUI related code. //TODO better filtering"}, {"name": "getCursor", "url": "Plugin.Selection.html#method_getCursor", "access": "", "host": "Plugin.Selection", "params": "", "type": "method", "description": "Get the placeholder in the DOM at the current cursor position: NOT FINISHED"}, {"name": "_getHTML", "url": "Plugin.Frame.html#method__getHTML", "access": "private", "host": "Plugin.Frame", "params": "html <String>  The raw HTML from the body of the iframe.", "type": "method", "description": "Get the content from the iframe"}, {"name": "getInstance", "url": "Plugin.EditorBase.html#method_getInstance", "access": "", "host": "Plugin.EditorBase", "params": "", "type": "method", "description": "Get the YUI instance of the frame"}, {"name": "getInstance", "url": "Plugin.ExecCommand.html#method_getInstance", "access": "", "host": "Plugin.ExecCommand", "params": "", "type": "method", "description": "Get's the instance of YUI bound to the parent frame"}, {"name": "getInstance", "url": "Plugin.Frame.html#method_getInstance", "access": "", "host": "Plugin.Frame", "params": "", "type": "method", "description": "Get a reference to the internal YUI instance."}, {"name": "getSelected", "url": "Plugin.Selection.html#method_getSelected", "access": "", "host": "Plugin.Selection", "params": "", "type": "method", "description": "Get all the nodes in the current selection. This method will actually perform a filter first.\nThen it calls doc.execCommand('fontname', null, 'yui-tmp') to touch all nodes in the selection.\nThe it compiles a list of all nodes affected by the execCommand and builds a NodeList to return."}, {"name": "HTML", "url": "Plugin.Frame.html#property_HTML", "access": "", "host": "Plugin.Frame", "params": "", "type": "property", "description": "The template string used to create the iframe"}, {"name": "id", "url": "Plugin.Frame.html#config_id", "access": "", "host": "Plugin.Frame", "params": "", "type": "config", "description": "Set the id of the new Node. (optional)"}, {"name": "idChange", "url": "Plugin.Frame.html#event_idChange", "access": "", "host": "Plugin.Frame", "params": "event <Event.Facade> An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>", "type": "event", "description": "Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, {"name": "_iframe", "url": "Plugin.Frame.html#property__iframe", "access": "private", "host": "Plugin.Frame", "params": "", "type": "property", "description": "Internal Node reference to the iFrame or the window"}, {"name": "insertAtCursor", "url": "Plugin.Selection.html#method_insertAtCursor", "access": "", "host": "Plugin.Selection", "params": "html <String>  The HTML to insert., node <Node>  The text node to break when inserting., offset <Number>  The left offset of the text node to break and insert the new content., collapse <Boolean>  Should the range be collapsed after insertion. default: false", "type": "method", "description": "Insert HTML at the current cursor position, this method gives you control over the text node to insert into and the offset where to put it."}, {"name": "insertContent", "url": "Plugin.Selection.html#method_insertContent", "access": "", "host": "Plugin.Selection", "params": "html <String>  The HTML to insert.", "type": "method", "description": "Insert HTML at the current cursor position and return a Node instance of the newly inserted element."}, {"name": "_inst", "url": "Plugin.ExecCommand.html#property__inst", "access": "private", "host": "Plugin.ExecCommand", "params": "", "type": "property", "description": "An internal reference to the instance of the frame plugged into."}, {"name": "_instance", "url": "Plugin.Frame.html#property__instance", "access": "private", "host": "Plugin.Frame", "params": "", "type": "property", "description": "Internal reference to the YUI instance bound to the iFrame or window"}, {"name": "_instanceLoaded", "url": "Plugin.Frame.html#method__instanceLoaded", "access": "private", "host": "Plugin.Frame", "params": "inst <YUI>  The internal YUI instance bound to the frame/window", "type": "method", "description": "Called from the first YUI instance that sets up the internal instance.\nThis loads the content into the window/frame and attaches the contentready event."}, {"name": "isCollapsed", "url": "Plugin.Selection.html#property_isCollapsed", "access": "", "host": "Plugin.Selection", "params": "", "type": "property", "description": "Flag to show if the range is collapsed or not"}, {"name": "_keyUpTimer", "url": "Plugin.EditorBase.html#property__keyUpTimer", "access": "private", "host": "Plugin.EditorBase", "params": "", "type": "property", "description": "The Y.later handle to determine if there is an active timer running."}, {"name": "lang", "url": "Plugin.Frame.html#config_lang", "access": "", "host": "Plugin.Frame", "params": "", "type": "config", "description": "The default language. Default: en-US"}, {"name": "langChange", "url": "Plugin.Frame.html#event_langChange", "access": "", "host": "Plugin.Frame", "params": "event <Event.Facade> An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>", "type": "event", "description": "Fires when the value for the configuration attribute 'lang' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, {"name": "META", "url": "Plugin.Frame.html#property_META", "access": "", "host": "Plugin.Frame", "params": "", "type": "property", "description": "The meta-tag for Content-Type to add to the dynamic document"}, {"name": "NAME", "url": "Plugin.EditorBase.html#property_NAME", "access": "", "host": "Plugin.EditorBase", "params": "", "type": "property", "description": "The Class Name: editorBase"}, {"name": "NAME", "url": "Plugin.EditorTab.html#property_NAME", "access": "", "host": "Plugin.EditorTab", "params": "", "type": "property", "description": "editorTab"}, {"name": "NAME", "url": "Plugin.ExecCommand.html#property_NAME", "access": "", "host": "Plugin.ExecCommand", "params": "", "type": "property", "description": "execCommand"}, {"name": "NAME", "url": "Plugin.Frame.html#property_NAME", "access": "", "host": "Plugin.Frame", "params": "", "type": "property", "description": "The name of the class (frame)"}, {"name": "NAME", "url": "Plugin.EditorLists.html#property_NAME", "access": "", "host": "Plugin.EditorLists", "params": "", "type": "property", "description": "editorLists"}, {"name": "NC_KEYS", "url": "Plugin.EditorBase.html#property_NC_KEYS", "access": "", "host": "Plugin.EditorBase", "params": "", "type": "property", "description": "Hash table of keys to fire a nodeChange event for."}, {"name": "nodeChange", "url": "Plugin.EditorBase.html#event_nodeChange", "access": "", "host": "Plugin.EditorBase", "params": "event <Event.Facade>  An Event Facade object with the following specific property added:\n<dl><dt>node</dt><dd>The node currently being interacted with</dd></dl>", "type": "event", "description": "Fired from mouseup & keyup."}, {"name": "NS", "url": "Plugin.EditorTab.html#property_NS", "access": "", "host": "Plugin.EditorTab", "params": "", "type": "property", "description": "tab"}, {"name": "NS", "url": "Plugin.ExecCommand.html#property_NS", "access": "", "host": "Plugin.ExecCommand", "params": "", "type": "property", "description": "exec"}, {"name": "NS", "url": "Plugin.EditorLists.html#property_NS", "access": "", "host": "Plugin.EditorLists", "params": "", "type": "property", "description": "lists"}, {"name": "_onContentReady", "url": "Plugin.Frame.html#method__onContentReady", "access": "private", "host": "Plugin.Frame", "params": "", "type": "method", "description": "Called once the content is available in the frame/window and calls the final use call\non the internal instance so that the modules are loaded properly."}, {"name": "_onDomEvent", "url": "Plugin.Frame.html#method__onDomEvent", "access": "private", "host": "Plugin.Frame", "params": "e <Event.Facade> ", "type": "method", "description": "Generic handler for all DOM events fired by the iframe or window. This handler\ntakes the current EventFacade and augments it to fire on the Frame host. It adds two new properties\nto the EventFacade called frameX and frameY which adds the scroll and xy position of the iframe\nto the original pageX and pageY of the event so external nodes can be positioned over the frame."}, {"name": "_onFrameKeyDown", "url": "Plugin.EditorBase.html#method__onFrameKeyDown", "access": "private", "host": "Plugin.EditorBase", "params": "", "type": "method", "description": "Fires nodeChange event"}, {"name": "_onFrameKeyUp", "url": "Plugin.EditorBase.html#method__onFrameKeyUp", "access": "private", "host": "Plugin.EditorBase", "params": "", "type": "method", "description": "Fires nodeChange event via _onKeyUpTimer on a timer for performance"}, {"name": "_onFrameMouseDown", "url": "Plugin.EditorBase.html#method__onFrameMouseDown", "access": "private", "host": "Plugin.EditorBase", "params": "", "type": "method", "description": "Fires nodeChange event"}, {"name": "_onKeyUpTimer", "url": "Plugin.EditorBase.html#method__onKeyUpTimer", "access": "private", "host": "Plugin.EditorBase", "params": "fromTimer <Boolean>  If it's from the timer, kill the _keyUpTimer property", "type": "method", "description": "Fires nodeChange event from _onKeyUpTimer on a timer for performance"}, {"name": "_onNodeChange", "url": "Plugin.EditorTab.html#method__onNodeChange", "access": "private", "host": "Plugin.EditorTab", "params": "e <Event>  The Event facade passed from the host.", "type": "method", "description": "Listener for host's nodeChange event and captures the tabkey interaction."}, {"name": "_onNodeChange", "url": "Plugin.EditorLists.html#method__onNodeChange", "access": "private", "host": "Plugin.EditorLists", "params": "e <Event>  The Event facade passed from the host.", "type": "method", "description": "Listener for host's nodeChange event and captures the tabkey interaction only when inside a list node."}, {"name": "PAGE_HTML", "url": "Plugin.Frame.html#property_PAGE_HTML", "access": "", "host": "Plugin.Frame", "params": "", "type": "property", "description": "The template used to create the page when created dynamically."}, {"name": "PROMPT", "url": "Plugin.CreateLinkBase.html#property_PROMPT", "access": "", "host": "Plugin.CreateLinkBase", "params": "", "type": "property", "description": "String used for the Prompt"}, {"name": "_ready", "url": "Plugin.Frame.html#property__ready", "access": "private", "host": "Plugin.Frame", "params": "", "type": "property", "description": "Internal reference set when the content is ready."}, {"name": "REMOVE", "url": "Plugin.EditorLists.html#property_REMOVE", "access": "", "host": "Plugin.EditorLists", "params": "", "type": "property", "description": "The items to removed from a list when a list item is moved, currently removes BR nodes"}, {"name": "remove", "url": "Plugin.Selection.html#method_remove", "access": "", "host": "Plugin.Selection", "params": "", "type": "method", "description": "Destroy the range."}, {"name": "render", "url": "Plugin.EditorBase.html#method_render", "access": "", "host": "Plugin.EditorBase", "params": "node <Selector/HTMLElement/Node>  The node to append the Editor to", "type": "method", "description": "Renders the Y.Frame to the passed node."}, {"name": "render", "url": "Plugin.Frame.html#method_render", "access": "", "host": "Plugin.Frame", "params": "node <String/HTMLElement/Node>  The node to render to", "type": "method", "description": "Render the iframe into the container config option or open the window."}, {"name": "_rendered", "url": "Plugin.Frame.html#property__rendered", "access": "private", "host": "Plugin.Frame", "params": "", "type": "property", "description": "Internal reference set when render is called."}, {"name": "replace", "url": "Plugin.Selection.html#method_replace", "access": "", "host": "Plugin.Selection", "params": "se <String>  The string to search for., re <String>  The string of HTML to replace it with., node <Node>  A Node instance of the text node to interact with.", "type": "method", "description": "Find and replace a string inside a text node and replace it with HTML focusing the node after \nto allow you to continue to type."}, {"name": "resolve", "url": "Plugin.Selection.html#method_resolve", "access": "", "host": "Plugin.Selection", "params": "n <HTMLElement>  The HTMLElement to resolve. Might be a TextNode, gives parentNode.", "type": "method", "description": "Resolve a node from the selection object and return a Node instance"}, {"name": "_resolveBaseHref", "url": "Plugin.Frame.html#method__resolveBaseHref", "access": "private", "host": "Plugin.Frame", "params": "href <String>  The new value to use, if empty it will be resolved from the current url.", "type": "method", "description": "Resolves the basehref of the page the frame is created on. Only applies to dynamic content."}, {"name": "_resolveWinDoc", "url": "Plugin.Frame.html#method__resolveWinDoc", "access": "private", "host": "Plugin.Frame", "params": "c <Object>  The YUI Config to add the window and document to", "type": "method", "description": "Resolves the document and window from an iframe or window instance"}, {"name": "_selection", "url": "Plugin.Selection.html#property__selection", "access": "private", "host": "Plugin.Selection", "params": "", "type": "property", "description": "The actual Selection/Range object"}, {"name": "selectNode", "url": "Plugin.Selection.html#method_selectNode", "access": "", "host": "Plugin.Selection", "params": "node <Node>  The node to select, collapse <Boolean>  Should the range be collapsed after insertion. default: false", "type": "method", "description": "Select a Node (hilighting it)."}, {"name": "setCursor", "url": "Plugin.Selection.html#method_setCursor", "access": "", "host": "Plugin.Selection", "params": "", "type": "method", "description": "Put a placeholder in the DOM at the current cursor position: NOT FINISHED"}, {"name": "_setHTML", "url": "Plugin.Frame.html#method__setHTML", "access": "private", "host": "Plugin.Frame", "params": "html <String>  The raw HTML to set the body of the iframe to.", "type": "method", "description": "Set the content of the iframe"}, {"name": "src", "url": "Plugin.Frame.html#config_src", "access": "", "host": "Plugin.Frame", "params": "", "type": "config", "description": "The src of the iframe/window. Defaults to javascript:;"}, {"name": "srcChange", "url": "Plugin.Frame.html#event_srcChange", "access": "", "host": "Plugin.Frame", "params": "event <Event.Facade> An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>", "type": "event", "description": "Fires when the value for the configuration attribute 'src' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, {"name": "STRINGS", "url": "Plugin.CreateLinkBase.html#property_STRINGS", "access": "", "host": "Plugin.CreateLinkBase", "params": "", "type": "property", "description": "Strings used by the plugin"}, {"name": "STRINGS", "url": "Plugin.EditorBase.html#property_STRINGS", "access": "", "host": "Plugin.EditorBase", "params": "", "type": "property", "description": "Editor Strings"}, {"name": "STRINGS.title", "url": "Plugin.EditorBase.html#property_STRINGS.title", "access": "", "host": "Plugin.EditorBase", "params": "", "type": "property", "description": "Title of frame document: Rich Text Editor"}, {"name": "_swap", "url": "Plugin.Selection.html#method__swap", "access": "private", "host": "Plugin.Selection", "params": "n <HTMLElement>  The node to swap, tag <String>  The tag to use when creating the new element.", "type": "method", "description": "Swap an element, with another element"}, {"name": "text", "url": "Plugin.Selection.html#property_text", "access": "", "host": "Plugin.Selection", "params": "", "type": "property", "description": "Range text value"}, {"name": "title", "url": "Plugin.Frame.html#config_title", "access": "", "host": "Plugin.Frame", "params": "", "type": "config", "description": "The title to give the blank page."}, {"name": "titleChange", "url": "Plugin.Frame.html#event_titleChange", "access": "", "host": "Plugin.Frame", "params": "event <Event.Facade> An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>", "type": "event", "description": "Fires when the value for the configuration attribute 'title' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, {"name": "TMP", "url": "Plugin.Selection.html#property_TMP", "access": "", "host": "Plugin.Selection", "params": "", "type": "property", "description": "The temporary fontname applied to a selection to retrieve their values: yui-tmp"}, {"name": "toString", "url": "Plugin.Selection.html#method_toString", "access": "", "host": "Plugin.Selection", "params": "", "type": "method", "description": "Generic toString for logging."}, {"name": "unfilter", "url": "Plugin.Selection.html#method_unfilter", "access": "", "host": "Plugin.Selection", "params": "", "type": "method", "description": "Undoes what filter does enough to return the HTML from the Editor, then re-applies the filter."}, {"name": "USE", "url": "Plugin.EditorBase.html#property_USE", "access": "", "host": "Plugin.EditorBase", "params": "", "type": "property", "description": "The default modules to use inside the Frame"}, {"name": "use", "url": "Plugin.Frame.html#method_use", "access": "", "host": "Plugin.Frame", "params": "", "type": "method", "description": "This is a scoped version of the normal YUI.use method & is bound to this frame/window.\nAt setup, the inst.use method is mapped to this method."}, {"name": "use", "url": "Plugin.Frame.html#config_use", "access": "", "host": "Plugin.Frame", "params": "", "type": "config", "description": "Array of modules to include in the scoped YUI instance at render time. Default: ['none', 'selector-css2']"}, {"name": "useChange", "url": "Plugin.Frame.html#event_useChange", "access": "", "host": "Plugin.Frame", "params": "event <Event.Facade> An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>", "type": "event", "description": "Fires when the value for the configuration attribute 'use' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, {"name": "_wrap", "url": "Plugin.Selection.html#method__wrap", "access": "private", "host": "Plugin.Selection", "params": "n <HTMLElement>  The node to wrap, tag <String>  The tag to use when creating the new element.", "type": "method", "description": "Wrap an element, with another element"}, {"name": "wrapContent", "url": "Plugin.Selection.html#method_wrapContent", "access": "", "host": "Plugin.Selection", "params": "tag <String>  The tag to wrap all selected items with.", "type": "method", "description": "Get all elements inside a selection and wrap them with a new element and return a NodeList of all elements touched."}]