./attribute/js/Attribute.js:    var O = Y.Object,
./attribute/tests/attribute.html:                Y.ObjectAssert.areEqual(o1, o2);
./attribute/tests/attribute.html:                Y.ObjectAssert.areEqual(o2, o1);
./base/js/Base.js:    var O = Y.Object,
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("one", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("two", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("three", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("one", h2);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("two", h2);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("one", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("two", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("three", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("one", h2);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("two", h2);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("one", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("two", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("two", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("one", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("two", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("one", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("one", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("two", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("three", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("one", h2);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("two", h2);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("two", h3);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("three", h3);
./compat/js/yui-compat.js:L.hasOwnProperty = Y.Object.owns;
./cookie/js/Cookie.js:        O       = Y.Object,
./cookie/tests/cookie.html:            ObjectAssert    = Y.ObjectAssert;
./dataschema/tests/index.html:            OBJECTASSERT = Y.ObjectAssert,
./datasource/tests/index.html:            OBJECTASSERT = Y.ObjectAssert,
./dump/tests/dump.html:            ObjectAssert = Y.ObjectAssert;
./event-custom/build_tmp/event-custom-debug.js:        Y.Object.each(PROPS, function(v, k) {
./event-custom/build_tmp/event-custom.js:        Y.Object.each(PROPS, function(v, k) {
./event-custom/js/event-facade.js:        Y.Object.each(PROPS, function(v, k) {
./event-simulate/tests/event-simulate.html:            ObjectAssert    = Y.ObjectAssert;
./history/js/history.js:        Y.Object.each(G._modules, function (module, moduleId) {
./history/js/history.js:            Y.Object.each(G._modules, function (module, moduleId) {
./history/js/history.js:        Y.Object.each(G._modules, function (module, moduleId) {
./history/js/history.js:                    Y.Object.each(G._modules, function (module, moduleId) {
./history/js/history.js:            Y.Object.each(G._modules, function (module, moduleId) {
./history/js/history.js:                if (!Y.Object.owns(states, decodedModuleId)) {
./json/js/json-stringify.js:                k = isArray(w) ? w : Y.Object.keys(o);
./node/build_rollup_tmp/node-debug.js:        Y.Object.setValue(node, name, val);
./node/build_rollup_tmp/node-debug.js:        val = Y.Object.getValue(node, name.split(DOT));
./node/build_rollup_tmp/node.js:        Y.Object.setValue(node, name, val);
./node/build_rollup_tmp/node.js:        val = Y.Object.getValue(node, name.split(DOT));
./node/js/node.js:        Y.Object.setValue(node, name, val);
./node/js/node.js:        val = Y.Object.getValue(node, name.split(DOT));
./oop/build_tmp/oop-debug.js:        var sp = s.prototype, rp=Y.Object(sp);
./oop/build_tmp/oop-debug.js:                    return Y.Object.each(o, f, c, proto);
./oop/build_tmp/oop-debug.js:        // return Y.Object.each(o, f, c);
./oop/build_tmp/oop-debug.js:                o2 = (safe) ? {} : Y.Object(o);
./oop/build_tmp/oop.js:        var sp = s.prototype, rp=Y.Object(sp);
./oop/build_tmp/oop.js:                    return Y.Object.each(o, f, c, proto);
./oop/build_tmp/oop.js:        // return Y.Object.each(o, f, c);
./oop/build_tmp/oop.js:                o2 = (safe) ? {} : Y.Object(o);
./oop/js/oop.js:        var sp = s.prototype, rp=Y.Object(sp);
./oop/js/oop.js:                    return Y.Object.each(o, f, c, proto);
./oop/js/oop.js:        // return Y.Object.each(o, f, c);
./oop/js/oop.js:                o2 = (safe) ? {} : Y.Object(o);
./oop/tests/oop.html:            ObjectAssert = Y.ObjectAssert;
./substitute/tests/substitute.html:            ObjectAssert = Y.ObjectAssert;
./test/build_tmp/test-debug.js:    Y.ObjectAssert = {
./test/build_tmp/test-debug.js:            Y.Object.each(expected, function(value, name){
./test/build_tmp/test-debug.js:            if (!Y.Object.hasKey(object, propertyName)){
./test/build_tmp/test-debug.js:                if (!Y.Object.hasKey(object, properties[i])){
./test/build_tmp/test-debug.js:            var keys = Y.Object.keys(object);
./test/build_tmp/test-debug.js:            Y.Object.each(results, function(value, prop){
./test/build_tmp/test-debug.js:            Y.Object.each(this._fields, function(value, prop){
./test/build_tmp/test-debug.js:            mock = Y.Object(template);
./test/build_tmp/test-debug.js:        Y.Object.each(template, function(name){
./test/build_tmp/test-debug.js:        Y.Object.each(mock.__expectations, function(expectation){
./test/build_tmp/test.js:    Y.ObjectAssert = {
./test/build_tmp/test.js:            Y.Object.each(expected, function(value, name){
./test/build_tmp/test.js:            if (!Y.Object.hasKey(object, propertyName)){
./test/build_tmp/test.js:                if (!Y.Object.hasKey(object, properties[i])){
./test/build_tmp/test.js:            var keys = Y.Object.keys(object);
./test/build_tmp/test.js:            Y.Object.each(results, function(value, prop){
./test/build_tmp/test.js:            Y.Object.each(this._fields, function(value, prop){
./test/build_tmp/test.js:            mock = Y.Object(template);
./test/build_tmp/test.js:        Y.Object.each(template, function(name){
./test/build_tmp/test.js:        Y.Object.each(mock.__expectations, function(expectation){
./test/js/Mock.js:            mock = Y.Object(template);
./test/js/Mock.js:        Y.Object.each(template, function(name){
./test/js/Mock.js:        Y.Object.each(mock.__expectations, function(expectation){
./test/js/ObjectAssert.js:    Y.ObjectAssert = {
./test/js/ObjectAssert.js:            Y.Object.each(expected, function(value, name){
./test/js/ObjectAssert.js:            if (!Y.Object.hasKey(object, propertyName)){
./test/js/ObjectAssert.js:                if (!Y.Object.hasKey(object, properties[i])){
./test/js/ObjectAssert.js:            var keys = Y.Object.keys(object);
./test/js/TestFormat.js:            Y.Object.each(results, function(value, prop){
./test/js/TestReporter.js:            Y.Object.each(this._fields, function(value, prop){
./test/README:    * Removed dependencies on Y.Object.owns().
./test/README:    * Renamed Y.ObjectAssert.has() to Y.ObjectAssert.hasKey() to better match Y.Object.hasKey().
./test/README:    * Removed Y.ObjectAssert.hasAll() and replaced with Y.ObjectAssert.hasKeys() to better match Y.Object.hasKey().
./test/README:    * Renamed Y.ObjectAssert.owns() to Y.ObjectAssert.ownsKey() to better match Y.Object.hasKey().
./test/README:    * Removed Y.ObjectAssert.ownsAll() and replaced with Y.ObjectAssert.ownsKeys() to better match Y.Object.hasKey().
./test/README:    * Added Y.ObjectAssert.ownsNoKeys() (trac# 2527849).
./test/tests/mock.html:            ObjectAssert    = Y.ObjectAssert;
./test/tests/objectassert.html:            ObjectAssert    = Y.ObjectAssert;
./test/tests/objectassert.html:                var object = Y.Object(proto);
./test/tests/objectassert.html:                var object = Y.Object(proto);
./test/tests/objectassert.html:                var object = Y.Object(proto);
./test/tests/objectassert.html:                var object = Y.Object(proto);
./test/tests/objectassert.html:                var object = Y.Object(proto);
./test/tests/objectassert.html:                var object = Y.Object(proto);
./test/tests/objectassert.html:                var object = Y.Object(proto);
./widget/js/Widget.js:    O = Y.Object,
./yui/build_rollup_tmp/yui-debug.js: * Y.Object(o) returns a new object based upon the supplied object.  
./yui/build_rollup_tmp/yui-debug.js:Y.Object = function(o) {
./yui/build_rollup_tmp/yui-debug.js:var O = Y.Object,
./yui/build_rollup_tmp/yui-debug.js:        mod.expanded = Y.Object.keys(Y.Array.hash(d));
./yui/build_rollup_tmp/yui-debug.js:        var s=Y.Object.keys(this.required), info=this.moduleInfo, loaded=this.loaded,
./yui/build_rollup_tmp/yui.js: * Y.Object(o) returns a new object based upon the supplied object.  
./yui/build_rollup_tmp/yui.js:Y.Object = function(o) {
./yui/build_rollup_tmp/yui.js:var O = Y.Object,
./yui/build_rollup_tmp/yui.js:        mod.expanded = Y.Object.keys(Y.Array.hash(d));
./yui/build_rollup_tmp/yui.js:        var s=Y.Object.keys(this.required), info=this.moduleInfo, loaded=this.loaded,
./yui/build_tmp/loader-debug.js:        mod.expanded = Y.Object.keys(Y.Array.hash(d));
./yui/build_tmp/loader-debug.js:        var s=Y.Object.keys(this.required), info=this.moduleInfo, loaded=this.loaded,
./yui/build_tmp/loader.js:        mod.expanded = Y.Object.keys(Y.Array.hash(d));
./yui/build_tmp/loader.js:        var s=Y.Object.keys(this.required), info=this.moduleInfo, loaded=this.loaded,
./yui/js/loader.js:        mod.expanded = Y.Object.keys(Y.Array.hash(d));
./yui/js/loader.js:        var s=Y.Object.keys(this.required), info=this.moduleInfo, loaded=this.loaded,
./yui/js/yui-object.js: * Y.Object(o) returns a new object based upon the supplied object.  
./yui/js/yui-object.js:Y.Object = function(o) {
./yui/js/yui-object.js:var O = Y.Object,
./yui/tests/object.html:                Y.Assert.areEqual('c', Y.Object.getValue(o, 'c1'));
./yui/tests/object.html:                Y.Assert.areEqual('a', Y.Object.getValue(o, ['a1', 'a2', 'a3']));
./yui/tests/object.html:                Y.Assert.areEqual(undefined, Y.Object.getValue(o, ['b1', 'b2', 'b3']));
./yui/tests/object.html:                Y.Object.setValue(o, 'c1', 'changed_c');
./yui/tests/object.html:                Y.Object.setValue(o, ['a1', 'a2', 'a3'], 'changed_a');
./yui/tests/object.html:                Y.Object.setValue(o, ['b1', 'b2', 'b3'], 'changed_b');
./yui/tests/object.html:                Y.Assert.areEqual('changed_c', Y.Object.getValue(o, 'c1'));
./yui/tests/object.html:                Y.Assert.areEqual('changed_a', Y.Object.getValue(o, ['a1', 'a2', 'a3']));
./yui/tests/object.html:                Y.Assert.areEqual(undefined, Y.Object.getValue(o, ['b1', 'b2', 'b3']));
./attribute/js/Attribute.js:    var O = Y.Object,
./attribute/tests/attribute.html:                Y.ObjectAssert.areEqual(o1, o2);
./attribute/tests/attribute.html:                Y.ObjectAssert.areEqual(o2, o1);
./attribute/js/Attribute.js:    var O = Y.Object,
./attribute/tests/attribute.html:                Y.ObjectAssert.areEqual(o1, o2);
./attribute/tests/attribute.html:                Y.ObjectAssert.areEqual(o2, o1);
./base/js/Base.js:    var O = Y.Object,
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("one", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("two", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("three", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("one", h2);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("two", h2);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("one", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("two", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("three", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("one", h2);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("two", h2);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("one", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("two", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("two", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("one", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("two", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("one", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("one", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("two", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("three", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("one", h2);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("two", h2);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("two", h3);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("three", h3);
./base/js/Base.js:    var O = Y.Object,
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("one", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("two", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("three", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("one", h2);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("two", h2);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("one", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("two", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("three", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("one", h2);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("two", h2);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("one", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("two", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("two", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("one", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("two", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("one", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("one", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("two", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("three", h1);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("one", h2);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("two", h2);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("two", h3);
./base/tests/plugins.html:                    Y.ObjectAssert.ownsKey("three", h3);
./compat/js/yui-compat.js:L.hasOwnProperty = Y.Object.owns;
./compat/js/yui-compat.js:L.hasOwnProperty = Y.Object.owns;
./cookie/js/Cookie.js:        O       = Y.Object,
./cookie/tests/cookie.html:            ObjectAssert    = Y.ObjectAssert;
./cookie/js/Cookie.js:        O       = Y.Object,
./cookie/tests/cookie.html:            ObjectAssert    = Y.ObjectAssert;
./dataschema/tests/index.html:            OBJECTASSERT = Y.ObjectAssert,
./dataschema/tests/index.html:            OBJECTASSERT = Y.ObjectAssert,
./datasource/tests/index.html:            OBJECTASSERT = Y.ObjectAssert,
./datasource/tests/index.html:            OBJECTASSERT = Y.ObjectAssert,
./dump/tests/dump.html:            ObjectAssert = Y.ObjectAssert;
./dump/tests/dump.html:            ObjectAssert = Y.ObjectAssert;
./event-custom/build_tmp/event-custom-debug.js:        Y.Object.each(PROPS, function(v, k) {
./event-custom/build_tmp/event-custom.js:        Y.Object.each(PROPS, function(v, k) {
./event-custom/js/event-facade.js:        Y.Object.each(PROPS, function(v, k) {
./event-custom/build_tmp/event-custom-debug.js:        Y.Object.each(PROPS, function(v, k) {
./event-custom/build_tmp/event-custom.js:        Y.Object.each(PROPS, function(v, k) {
./event-custom/js/event-facade.js:        Y.Object.each(PROPS, function(v, k) {
./event-simulate/tests/event-simulate.html:            ObjectAssert    = Y.ObjectAssert;
./event-simulate/tests/event-simulate.html:            ObjectAssert    = Y.ObjectAssert;
./history/js/history.js:        Y.Object.each(G._modules, function (module, moduleId) {
./history/js/history.js:            Y.Object.each(G._modules, function (module, moduleId) {
./history/js/history.js:        Y.Object.each(G._modules, function (module, moduleId) {
./history/js/history.js:                    Y.Object.each(G._modules, function (module, moduleId) {
./history/js/history.js:            Y.Object.each(G._modules, function (module, moduleId) {
./history/js/history.js:                if (!Y.Object.owns(states, decodedModuleId)) {
./history/js/history.js:        Y.Object.each(G._modules, function (module, moduleId) {
./history/js/history.js:            Y.Object.each(G._modules, function (module, moduleId) {
./history/js/history.js:        Y.Object.each(G._modules, function (module, moduleId) {
./history/js/history.js:                    Y.Object.each(G._modules, function (module, moduleId) {
./history/js/history.js:            Y.Object.each(G._modules, function (module, moduleId) {
./history/js/history.js:                if (!Y.Object.owns(states, decodedModuleId)) {
./json/js/json-stringify.js:                k = isArray(w) ? w : Y.Object.keys(o);
./json/js/json-stringify.js:                k = isArray(w) ? w : Y.Object.keys(o);
./node/build_rollup_tmp/node-debug.js:        Y.Object.setValue(node, name, val);
./node/build_rollup_tmp/node-debug.js:        val = Y.Object.getValue(node, name.split(DOT));
./node/build_rollup_tmp/node.js:        Y.Object.setValue(node, name, val);
./node/build_rollup_tmp/node.js:        val = Y.Object.getValue(node, name.split(DOT));
./node/js/node.js:        Y.Object.setValue(node, name, val);
./node/js/node.js:        val = Y.Object.getValue(node, name.split(DOT));
./node/build_rollup_tmp/node-debug.js:        Y.Object.setValue(node, name, val);
./node/build_rollup_tmp/node-debug.js:        val = Y.Object.getValue(node, name.split(DOT));
./node/build_rollup_tmp/node.js:        Y.Object.setValue(node, name, val);
./node/build_rollup_tmp/node.js:        val = Y.Object.getValue(node, name.split(DOT));
./node/js/node.js:        Y.Object.setValue(node, name, val);
./node/js/node.js:        val = Y.Object.getValue(node, name.split(DOT));
./oop/build_tmp/oop-debug.js:        var sp = s.prototype, rp=Y.Object(sp);
./oop/build_tmp/oop-debug.js:                    return Y.Object.each(o, f, c, proto);
./oop/build_tmp/oop-debug.js:        // return Y.Object.each(o, f, c);
./oop/build_tmp/oop-debug.js:                o2 = (safe) ? {} : Y.Object(o);
./oop/build_tmp/oop.js:        var sp = s.prototype, rp=Y.Object(sp);
./oop/build_tmp/oop.js:                    return Y.Object.each(o, f, c, proto);
./oop/build_tmp/oop.js:        // return Y.Object.each(o, f, c);
./oop/build_tmp/oop.js:                o2 = (safe) ? {} : Y.Object(o);
./oop/js/oop.js:        var sp = s.prototype, rp=Y.Object(sp);
./oop/js/oop.js:                    return Y.Object.each(o, f, c, proto);
./oop/js/oop.js:        // return Y.Object.each(o, f, c);
./oop/js/oop.js:                o2 = (safe) ? {} : Y.Object(o);
./oop/tests/oop.html:            ObjectAssert = Y.ObjectAssert;
./oop/build_tmp/oop-debug.js:        var sp = s.prototype, rp=Y.Object(sp);
./oop/build_tmp/oop-debug.js:                    return Y.Object.each(o, f, c, proto);
./oop/build_tmp/oop-debug.js:        // return Y.Object.each(o, f, c);
./oop/build_tmp/oop-debug.js:                o2 = (safe) ? {} : Y.Object(o);
./oop/build_tmp/oop.js:        var sp = s.prototype, rp=Y.Object(sp);
./oop/build_tmp/oop.js:                    return Y.Object.each(o, f, c, proto);
./oop/build_tmp/oop.js:        // return Y.Object.each(o, f, c);
./oop/build_tmp/oop.js:                o2 = (safe) ? {} : Y.Object(o);
./oop/js/oop.js:        var sp = s.prototype, rp=Y.Object(sp);
./oop/js/oop.js:                    return Y.Object.each(o, f, c, proto);
./oop/js/oop.js:        // return Y.Object.each(o, f, c);
./oop/js/oop.js:                o2 = (safe) ? {} : Y.Object(o);
./oop/tests/oop.html:            ObjectAssert = Y.ObjectAssert;
./substitute/tests/substitute.html:            ObjectAssert = Y.ObjectAssert;
./substitute/tests/substitute.html:            ObjectAssert = Y.ObjectAssert;
./test/build_tmp/test-debug.js:    Y.ObjectAssert = {
./test/build_tmp/test-debug.js:            Y.Object.each(expected, function(value, name){
./test/build_tmp/test-debug.js:            if (!Y.Object.hasKey(object, propertyName)){
./test/build_tmp/test-debug.js:                if (!Y.Object.hasKey(object, properties[i])){
./test/build_tmp/test-debug.js:            var keys = Y.Object.keys(object);
./test/build_tmp/test-debug.js:            Y.Object.each(results, function(value, prop){
./test/build_tmp/test-debug.js:            Y.Object.each(this._fields, function(value, prop){
./test/build_tmp/test-debug.js:            mock = Y.Object(template);
./test/build_tmp/test-debug.js:        Y.Object.each(template, function(name){
./test/build_tmp/test-debug.js:        Y.Object.each(mock.__expectations, function(expectation){
./test/build_tmp/test.js:    Y.ObjectAssert = {
./test/build_tmp/test.js:            Y.Object.each(expected, function(value, name){
./test/build_tmp/test.js:            if (!Y.Object.hasKey(object, propertyName)){
./test/build_tmp/test.js:                if (!Y.Object.hasKey(object, properties[i])){
./test/build_tmp/test.js:            var keys = Y.Object.keys(object);
./test/build_tmp/test.js:            Y.Object.each(results, function(value, prop){
./test/build_tmp/test.js:            Y.Object.each(this._fields, function(value, prop){
./test/build_tmp/test.js:            mock = Y.Object(template);
./test/build_tmp/test.js:        Y.Object.each(template, function(name){
./test/build_tmp/test.js:        Y.Object.each(mock.__expectations, function(expectation){
./test/js/Mock.js:            mock = Y.Object(template);
./test/js/Mock.js:        Y.Object.each(template, function(name){
./test/js/Mock.js:        Y.Object.each(mock.__expectations, function(expectation){
./test/js/ObjectAssert.js:    Y.ObjectAssert = {
./test/js/ObjectAssert.js:            Y.Object.each(expected, function(value, name){
./test/js/ObjectAssert.js:            if (!Y.Object.hasKey(object, propertyName)){
./test/js/ObjectAssert.js:                if (!Y.Object.hasKey(object, properties[i])){
./test/js/ObjectAssert.js:            var keys = Y.Object.keys(object);
./test/js/TestFormat.js:            Y.Object.each(results, function(value, prop){
./test/js/TestReporter.js:            Y.Object.each(this._fields, function(value, prop){
./test/README:    * Removed dependencies on Y.Object.owns().
./test/README:    * Renamed Y.ObjectAssert.has() to Y.ObjectAssert.hasKey() to better match Y.Object.hasKey().
./test/README:    * Removed Y.ObjectAssert.hasAll() and replaced with Y.ObjectAssert.hasKeys() to better match Y.Object.hasKey().
./test/README:    * Renamed Y.ObjectAssert.owns() to Y.ObjectAssert.ownsKey() to better match Y.Object.hasKey().
./test/README:    * Removed Y.ObjectAssert.ownsAll() and replaced with Y.ObjectAssert.ownsKeys() to better match Y.Object.hasKey().
./test/README:    * Added Y.ObjectAssert.ownsNoKeys() (trac# 2527849).
./test/tests/mock.html:            ObjectAssert    = Y.ObjectAssert;
./test/tests/objectassert.html:            ObjectAssert    = Y.ObjectAssert;
./test/tests/objectassert.html:                var object = Y.Object(proto);
./test/tests/objectassert.html:                var object = Y.Object(proto);
./test/tests/objectassert.html:                var object = Y.Object(proto);
./test/tests/objectassert.html:                var object = Y.Object(proto);
./test/tests/objectassert.html:                var object = Y.Object(proto);
./test/tests/objectassert.html:                var object = Y.Object(proto);
./test/tests/objectassert.html:                var object = Y.Object(proto);
./test/build_tmp/test-debug.js:    Y.ObjectAssert = {
./test/build_tmp/test-debug.js:            Y.Object.each(expected, function(value, name){
./test/build_tmp/test-debug.js:            if (!Y.Object.hasKey(object, propertyName)){
./test/build_tmp/test-debug.js:                if (!Y.Object.hasKey(object, properties[i])){
./test/build_tmp/test-debug.js:            var keys = Y.Object.keys(object);
./test/build_tmp/test-debug.js:            Y.Object.each(results, function(value, prop){
./test/build_tmp/test-debug.js:            Y.Object.each(this._fields, function(value, prop){
./test/build_tmp/test-debug.js:            mock = Y.Object(template);
./test/build_tmp/test-debug.js:        Y.Object.each(template, function(name){
./test/build_tmp/test-debug.js:        Y.Object.each(mock.__expectations, function(expectation){
./test/build_tmp/test.js:    Y.ObjectAssert = {
./test/build_tmp/test.js:            Y.Object.each(expected, function(value, name){
./test/build_tmp/test.js:            if (!Y.Object.hasKey(object, propertyName)){
./test/build_tmp/test.js:                if (!Y.Object.hasKey(object, properties[i])){
./test/build_tmp/test.js:            var keys = Y.Object.keys(object);
./test/build_tmp/test.js:            Y.Object.each(results, function(value, prop){
./test/build_tmp/test.js:            Y.Object.each(this._fields, function(value, prop){
./test/build_tmp/test.js:            mock = Y.Object(template);
./test/build_tmp/test.js:        Y.Object.each(template, function(name){
./test/build_tmp/test.js:        Y.Object.each(mock.__expectations, function(expectation){
./test/js/Mock.js:            mock = Y.Object(template);
./test/js/Mock.js:        Y.Object.each(template, function(name){
./test/js/Mock.js:        Y.Object.each(mock.__expectations, function(expectation){
./test/js/ObjectAssert.js:    Y.ObjectAssert = {
./test/js/ObjectAssert.js:            Y.Object.each(expected, function(value, name){
./test/js/ObjectAssert.js:            if (!Y.Object.hasKey(object, propertyName)){
./test/js/ObjectAssert.js:                if (!Y.Object.hasKey(object, properties[i])){
./test/js/ObjectAssert.js:            var keys = Y.Object.keys(object);
./test/js/TestFormat.js:            Y.Object.each(results, function(value, prop){
./test/js/TestReporter.js:            Y.Object.each(this._fields, function(value, prop){
./test/tests/mock.html:            ObjectAssert    = Y.ObjectAssert;
./test/tests/objectassert.html:            ObjectAssert    = Y.ObjectAssert;
./test/tests/objectassert.html:                var object = Y.Object(proto);
./test/tests/objectassert.html:                var object = Y.Object(proto);
./test/tests/objectassert.html:                var object = Y.Object(proto);
./test/tests/objectassert.html:                var object = Y.Object(proto);
./test/tests/objectassert.html:                var object = Y.Object(proto);
./test/tests/objectassert.html:                var object = Y.Object(proto);
./test/tests/objectassert.html:                var object = Y.Object(proto);
./widget/js/Widget.js:    O = Y.Object,
./widget/js/Widget.js:    O = Y.Object,
./yui/build_rollup_tmp/yui-debug.js: * Y.Object(o) returns a new object based upon the supplied object.  
./yui/build_rollup_tmp/yui-debug.js:Y.Object = function(o) {
./yui/build_rollup_tmp/yui-debug.js:var O = Y.Object,
./yui/build_rollup_tmp/yui-debug.js:        mod.expanded = Y.Object.keys(Y.Array.hash(d));
./yui/build_rollup_tmp/yui-debug.js:        var s=Y.Object.keys(this.required), info=this.moduleInfo, loaded=this.loaded,
./yui/build_rollup_tmp/yui.js: * Y.Object(o) returns a new object based upon the supplied object.  
./yui/build_rollup_tmp/yui.js:Y.Object = function(o) {
./yui/build_rollup_tmp/yui.js:var O = Y.Object,
./yui/build_rollup_tmp/yui.js:        mod.expanded = Y.Object.keys(Y.Array.hash(d));
./yui/build_rollup_tmp/yui.js:        var s=Y.Object.keys(this.required), info=this.moduleInfo, loaded=this.loaded,
./yui/build_tmp/loader-debug.js:        mod.expanded = Y.Object.keys(Y.Array.hash(d));
./yui/build_tmp/loader-debug.js:        var s=Y.Object.keys(this.required), info=this.moduleInfo, loaded=this.loaded,
./yui/build_tmp/loader.js:        mod.expanded = Y.Object.keys(Y.Array.hash(d));
./yui/build_tmp/loader.js:        var s=Y.Object.keys(this.required), info=this.moduleInfo, loaded=this.loaded,
./yui/js/loader.js:        mod.expanded = Y.Object.keys(Y.Array.hash(d));
./yui/js/loader.js:        var s=Y.Object.keys(this.required), info=this.moduleInfo, loaded=this.loaded,
./yui/js/yui-object.js: * Y.Object(o) returns a new object based upon the supplied object.  
./yui/js/yui-object.js:Y.Object = function(o) {
./yui/js/yui-object.js:var O = Y.Object,
./yui/tests/object.html:                Y.Assert.areEqual('c', Y.Object.getValue(o, 'c1'));
./yui/tests/object.html:                Y.Assert.areEqual('a', Y.Object.getValue(o, ['a1', 'a2', 'a3']));
./yui/tests/object.html:                Y.Assert.areEqual(undefined, Y.Object.getValue(o, ['b1', 'b2', 'b3']));
./yui/tests/object.html:                Y.Object.setValue(o, 'c1', 'changed_c');
./yui/tests/object.html:                Y.Object.setValue(o, ['a1', 'a2', 'a3'], 'changed_a');
./yui/tests/object.html:                Y.Object.setValue(o, ['b1', 'b2', 'b3'], 'changed_b');
./yui/tests/object.html:                Y.Assert.areEqual('changed_c', Y.Object.getValue(o, 'c1'));
./yui/tests/object.html:                Y.Assert.areEqual('changed_a', Y.Object.getValue(o, ['a1', 'a2', 'a3']));
./yui/tests/object.html:                Y.Assert.areEqual(undefined, Y.Object.getValue(o, ['b1', 'b2', 'b3']));
./yui/build_rollup_tmp/yui-debug.js: * Y.Object(o) returns a new object based upon the supplied object.  
./yui/build_rollup_tmp/yui-debug.js:Y.Object = function(o) {
./yui/build_rollup_tmp/yui-debug.js:var O = Y.Object,
./yui/build_rollup_tmp/yui-debug.js:        mod.expanded = Y.Object.keys(Y.Array.hash(d));
./yui/build_rollup_tmp/yui-debug.js:        var s=Y.Object.keys(this.required), info=this.moduleInfo, loaded=this.loaded,
./yui/build_rollup_tmp/yui.js: * Y.Object(o) returns a new object based upon the supplied object.  
./yui/build_rollup_tmp/yui.js:Y.Object = function(o) {
./yui/build_rollup_tmp/yui.js:var O = Y.Object,
./yui/build_rollup_tmp/yui.js:        mod.expanded = Y.Object.keys(Y.Array.hash(d));
./yui/build_rollup_tmp/yui.js:        var s=Y.Object.keys(this.required), info=this.moduleInfo, loaded=this.loaded,
./yui/build_tmp/loader-debug.js:        mod.expanded = Y.Object.keys(Y.Array.hash(d));
./yui/build_tmp/loader-debug.js:        var s=Y.Object.keys(this.required), info=this.moduleInfo, loaded=this.loaded,
./yui/build_tmp/loader.js:        mod.expanded = Y.Object.keys(Y.Array.hash(d));
./yui/build_tmp/loader.js:        var s=Y.Object.keys(this.required), info=this.moduleInfo, loaded=this.loaded,
./yui/js/loader.js:        mod.expanded = Y.Object.keys(Y.Array.hash(d));
./yui/js/loader.js:        var s=Y.Object.keys(this.required), info=this.moduleInfo, loaded=this.loaded,
./yui/js/yui-object.js: * Y.Object(o) returns a new object based upon the supplied object.  
./yui/js/yui-object.js:Y.Object = function(o) {
./yui/js/yui-object.js:var O = Y.Object,
./yui/tests/object.html:                Y.Assert.areEqual('c', Y.Object.getValue(o, 'c1'));
./yui/tests/object.html:                Y.Assert.areEqual('a', Y.Object.getValue(o, ['a1', 'a2', 'a3']));
./yui/tests/object.html:                Y.Assert.areEqual(undefined, Y.Object.getValue(o, ['b1', 'b2', 'b3']));
./yui/tests/object.html:                Y.Object.setValue(o, 'c1', 'changed_c');
./yui/tests/object.html:                Y.Object.setValue(o, ['a1', 'a2', 'a3'], 'changed_a');
./yui/tests/object.html:                Y.Object.setValue(o, ['b1', 'b2', 'b3'], 'changed_b');
./yui/tests/object.html:                Y.Assert.areEqual('changed_c', Y.Object.getValue(o, 'c1'));
./yui/tests/object.html:                Y.Assert.areEqual('changed_a', Y.Object.getValue(o, ['a1', 'a2', 'a3']));
./yui/tests/object.html:                Y.Assert.areEqual(undefined, Y.Object.getValue(o, ['b1', 'b2', 'b3']));
