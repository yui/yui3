./anim/js/anim-node-plugin.js:    config = (config) ? Y.merge(config) : {};
./attribute/js/Attribute.js:            facade = (opts) ? Y.merge(opts) : this._ATTR_E_FACADE;
./attribute/tests/attribute.html:            basicTemplate = Y.merge(basicTemplate, sharedEventTests);
./attribute/tests/attribute.html:            extendedTemplate = Y.merge(extendedTemplate, sharedEventTests);
./base/js/Base.js:                            cfg = Y.merge(attrs[attr]);
./base/js/Base.js:                                    cfg.value = Y.merge(val);
./base/README:     Use Y.merge, to protect the default value.
./compat/js/yui-compat.js:    // merge: Y.bind(Y.merge, Y)
./compat/js/yui-compat.js:    merge: Y.merge
./compat/js/yui-compat.js:// L.merge = Y.merge;
./console/build_tmp/console-debug.js:    merge      = Y.merge,
./console/build_tmp/console.js:    merge      = Y.merge,
./console/js/console.js:    merge      = Y.merge,
./console/js/filter.js:        var info = Y.merge(ConsoleFilters.CHROME_CLASSES, {
./cookie/js/Cookie.js:            options = Y.merge(options || {}, {
./datatype/js/date-locales.js: *   Y.merge, and add your own localisations where needed.</li>
./datatype/js/date-locales.js: *      Y.DataType.Date.Locale["fr"] = Y.merge(Y.DataType.Date.Locale, {
./datatype/js/date-locales.js: *      Y.DataType.Date.Locale["fr-CA"] = Y.merge(Y.DataType.Date.Locale["fr"], {
./datatype/js/date-locales.js:Y.DataType.Date.Locale["en-US"] = Y.merge(YDateEn, {
./datatype/js/date-locales.js:Y.DataType.Date.Locale["en-GB"] = Y.merge(YDateEn, {
./datatype/js/date-locales.js:Y.DataType.Date.Locale["en-AU"] = Y.merge(YDateEn);
./dd/js/scroll.js:    WS.ATTRS = Y.merge(S.ATTRS, {
./dd/js/scroll.js:    NS.ATTRS = Y.merge(S.ATTRS, {
./event-custom/build_tmp/event-custom-debug.js:                subs = Y.merge(this.subscribers);
./event-custom/build_tmp/event-custom-debug.js:                subs = Y.merge(this.afters);
./event-custom/build_tmp/event-custom.js:                subs = Y.merge(this.subscribers);
./event-custom/build_tmp/event-custom.js:                subs = Y.merge(this.afters);
./event-custom/js/event-custom.js:                subs = Y.merge(this.subscribers);
./event-custom/js/event-custom.js:                subs = Y.merge(this.afters);
./event-custom/tests/event_sequence.html:    m = Y.merge(
./json/tests/json.html:    m = Y.merge(
./oop/tests/oop.html:                    o123 = Y.merge(o1, o2, o3);
./queue/build_rollup_tmp/queue-debug.js:        var config = Y.merge(
./queue/build_rollup_tmp/queue.js:        var config = Y.merge(
./queue/js/queue-run.js:        var config = Y.merge(
./stylesheet/js/stylesheet.js:        css = Y.merge(css);
./stylesheet/js/stylesheet.js:                css = Y.merge(css,{
./stylesheet/tests/stylesheet.html:    m = Y.merge(
./widget/js/Widget.js:            strs = (defStrs) ? Y.merge(defStrs) : {},
./yui/build_rollup_tmp/yui-debug.js:Y.merge = function() {
./yui/build_rollup_tmp/yui-debug.js:        queues[id] = Y.merge(opts, {
./yui/build_rollup_tmp/yui-debug.js:    // this.moduleInfo = Y.merge(Y.Env.meta.moduleInfo);
./yui/build_rollup_tmp/yui-debug.js:     this.skin = Y.merge(Y.Env.meta.skin);
./yui/build_rollup_tmp/yui-debug.js:        m[PROV] = Y.merge(o);
./yui/build_rollup_tmp/yui-debug.js:        l = Y.merge(this.inserted); // shallow clone
./yui/build_rollup_tmp/yui-debug.js:        copy = Y.merge(this, true);
./yui/build_rollup_tmp/yui.js:Y.merge = function() {
./yui/build_rollup_tmp/yui.js:        queues[id] = Y.merge(opts, {
./yui/build_rollup_tmp/yui.js:    // this.moduleInfo = Y.merge(Y.Env.meta.moduleInfo);
./yui/build_rollup_tmp/yui.js:     this.skin = Y.merge(Y.Env.meta.skin);
./yui/build_rollup_tmp/yui.js:        m[PROV] = Y.merge(o);
./yui/build_rollup_tmp/yui.js:        l = Y.merge(this.inserted); // shallow clone
./yui/build_rollup_tmp/yui.js:        copy = Y.merge(this, true);
./yui/build_tmp/loader-debug.js:    // this.moduleInfo = Y.merge(Y.Env.meta.moduleInfo);
./yui/build_tmp/loader-debug.js:     this.skin = Y.merge(Y.Env.meta.skin);
./yui/build_tmp/loader-debug.js:        m[PROV] = Y.merge(o);
./yui/build_tmp/loader-debug.js:        l = Y.merge(this.inserted); // shallow clone
./yui/build_tmp/loader-debug.js:        copy = Y.merge(this, true);
./yui/build_tmp/loader.js:    // this.moduleInfo = Y.merge(Y.Env.meta.moduleInfo);
./yui/build_tmp/loader.js:     this.skin = Y.merge(Y.Env.meta.skin);
./yui/build_tmp/loader.js:        m[PROV] = Y.merge(o);
./yui/build_tmp/loader.js:        l = Y.merge(this.inserted); // shallow clone
./yui/build_tmp/loader.js:        copy = Y.merge(this, true);
./yui/js/get.js:        queues[id] = Y.merge(opts, {
./yui/js/loader.js:    // this.moduleInfo = Y.merge(Y.Env.meta.moduleInfo);
./yui/js/loader.js:     this.skin = Y.merge(Y.Env.meta.skin);
./yui/js/loader.js:        m[PROV] = Y.merge(o);
./yui/js/loader.js:        l = Y.merge(this.inserted); // shallow clone
./yui/js/loader.js:        copy = Y.merge(this, true);
./yui/js/yui-core.js:Y.merge = function() {
./anim/js/anim-node-plugin.js:    config = (config) ? Y.merge(config) : {};
./anim/js/anim-node-plugin.js:    config = (config) ? Y.merge(config) : {};
./attribute/js/Attribute.js:            facade = (opts) ? Y.merge(opts) : this._ATTR_E_FACADE;
./attribute/tests/attribute.html:            basicTemplate = Y.merge(basicTemplate, sharedEventTests);
./attribute/tests/attribute.html:            extendedTemplate = Y.merge(extendedTemplate, sharedEventTests);
./attribute/js/Attribute.js:            facade = (opts) ? Y.merge(opts) : this._ATTR_E_FACADE;
./attribute/tests/attribute.html:            basicTemplate = Y.merge(basicTemplate, sharedEventTests);
./attribute/tests/attribute.html:            extendedTemplate = Y.merge(extendedTemplate, sharedEventTests);
./base/js/Base.js:                            cfg = Y.merge(attrs[attr]);
./base/js/Base.js:                                    cfg.value = Y.merge(val);
./base/README:     Use Y.merge, to protect the default value.
./base/js/Base.js:                            cfg = Y.merge(attrs[attr]);
./base/js/Base.js:                                    cfg.value = Y.merge(val);
./compat/js/yui-compat.js:    // merge: Y.bind(Y.merge, Y)
./compat/js/yui-compat.js:    merge: Y.merge
./compat/js/yui-compat.js:// L.merge = Y.merge;
./compat/js/yui-compat.js:    // merge: Y.bind(Y.merge, Y)
./compat/js/yui-compat.js:    merge: Y.merge
./compat/js/yui-compat.js:// L.merge = Y.merge;
./console/build_tmp/console-debug.js:    merge      = Y.merge,
./console/build_tmp/console.js:    merge      = Y.merge,
./console/js/console.js:    merge      = Y.merge,
./console/js/filter.js:        var info = Y.merge(ConsoleFilters.CHROME_CLASSES, {
./console/build_tmp/console-debug.js:    merge      = Y.merge,
./console/build_tmp/console.js:    merge      = Y.merge,
./console/js/console.js:    merge      = Y.merge,
./console/js/filter.js:        var info = Y.merge(ConsoleFilters.CHROME_CLASSES, {
./cookie/js/Cookie.js:            options = Y.merge(options || {}, {
./cookie/js/Cookie.js:            options = Y.merge(options || {}, {
./datatype/js/date-locales.js: *   Y.merge, and add your own localisations where needed.</li>
./datatype/js/date-locales.js: *      Y.DataType.Date.Locale["fr"] = Y.merge(Y.DataType.Date.Locale, {
./datatype/js/date-locales.js: *      Y.DataType.Date.Locale["fr-CA"] = Y.merge(Y.DataType.Date.Locale["fr"], {
./datatype/js/date-locales.js:Y.DataType.Date.Locale["en-US"] = Y.merge(YDateEn, {
./datatype/js/date-locales.js:Y.DataType.Date.Locale["en-GB"] = Y.merge(YDateEn, {
./datatype/js/date-locales.js:Y.DataType.Date.Locale["en-AU"] = Y.merge(YDateEn);
./datatype/js/date-locales.js: *   Y.merge, and add your own localisations where needed.</li>
./datatype/js/date-locales.js: *      Y.DataType.Date.Locale["fr"] = Y.merge(Y.DataType.Date.Locale, {
./datatype/js/date-locales.js: *      Y.DataType.Date.Locale["fr-CA"] = Y.merge(Y.DataType.Date.Locale["fr"], {
./datatype/js/date-locales.js:Y.DataType.Date.Locale["en-US"] = Y.merge(YDateEn, {
./datatype/js/date-locales.js:Y.DataType.Date.Locale["en-GB"] = Y.merge(YDateEn, {
./datatype/js/date-locales.js:Y.DataType.Date.Locale["en-AU"] = Y.merge(YDateEn);
./dd/js/scroll.js:    WS.ATTRS = Y.merge(S.ATTRS, {
./dd/js/scroll.js:    NS.ATTRS = Y.merge(S.ATTRS, {
./dd/js/scroll.js:    WS.ATTRS = Y.merge(S.ATTRS, {
./dd/js/scroll.js:    NS.ATTRS = Y.merge(S.ATTRS, {
./event-custom/build_tmp/event-custom-debug.js:                subs = Y.merge(this.subscribers);
./event-custom/build_tmp/event-custom-debug.js:                subs = Y.merge(this.afters);
./event-custom/build_tmp/event-custom.js:                subs = Y.merge(this.subscribers);
./event-custom/build_tmp/event-custom.js:                subs = Y.merge(this.afters);
./event-custom/js/event-custom.js:                subs = Y.merge(this.subscribers);
./event-custom/js/event-custom.js:                subs = Y.merge(this.afters);
./event-custom/tests/event_sequence.html:    m = Y.merge(
./event-custom/build_tmp/event-custom-debug.js:                subs = Y.merge(this.subscribers);
./event-custom/build_tmp/event-custom-debug.js:                subs = Y.merge(this.afters);
./event-custom/build_tmp/event-custom.js:                subs = Y.merge(this.subscribers);
./event-custom/build_tmp/event-custom.js:                subs = Y.merge(this.afters);
./event-custom/js/event-custom.js:                subs = Y.merge(this.subscribers);
./event-custom/js/event-custom.js:                subs = Y.merge(this.afters);
./event-custom/tests/event_sequence.html:    m = Y.merge(
./json/tests/json.html:    m = Y.merge(
./json/tests/json.html:    m = Y.merge(
./oop/tests/oop.html:                    o123 = Y.merge(o1, o2, o3);
./oop/tests/oop.html:                    o123 = Y.merge(o1, o2, o3);
./queue/build_rollup_tmp/queue-debug.js:        var config = Y.merge(
./queue/build_rollup_tmp/queue.js:        var config = Y.merge(
./queue/js/queue-run.js:        var config = Y.merge(
./queue/build_rollup_tmp/queue-debug.js:        var config = Y.merge(
./queue/build_rollup_tmp/queue.js:        var config = Y.merge(
./queue/js/queue-run.js:        var config = Y.merge(
./stylesheet/js/stylesheet.js:        css = Y.merge(css);
./stylesheet/js/stylesheet.js:                css = Y.merge(css,{
./stylesheet/tests/stylesheet.html:    m = Y.merge(
./stylesheet/js/stylesheet.js:        css = Y.merge(css);
./stylesheet/js/stylesheet.js:                css = Y.merge(css,{
./stylesheet/tests/stylesheet.html:    m = Y.merge(
./widget/js/Widget.js:            strs = (defStrs) ? Y.merge(defStrs) : {},
./widget/js/Widget.js:            strs = (defStrs) ? Y.merge(defStrs) : {},
./yui/build_rollup_tmp/yui-debug.js:Y.merge = function() {
./yui/build_rollup_tmp/yui-debug.js:        queues[id] = Y.merge(opts, {
./yui/build_rollup_tmp/yui-debug.js:    // this.moduleInfo = Y.merge(Y.Env.meta.moduleInfo);
./yui/build_rollup_tmp/yui-debug.js:     this.skin = Y.merge(Y.Env.meta.skin);
./yui/build_rollup_tmp/yui-debug.js:        m[PROV] = Y.merge(o);
./yui/build_rollup_tmp/yui-debug.js:        l = Y.merge(this.inserted); // shallow clone
./yui/build_rollup_tmp/yui-debug.js:        copy = Y.merge(this, true);
./yui/build_rollup_tmp/yui.js:Y.merge = function() {
./yui/build_rollup_tmp/yui.js:        queues[id] = Y.merge(opts, {
./yui/build_rollup_tmp/yui.js:    // this.moduleInfo = Y.merge(Y.Env.meta.moduleInfo);
./yui/build_rollup_tmp/yui.js:     this.skin = Y.merge(Y.Env.meta.skin);
./yui/build_rollup_tmp/yui.js:        m[PROV] = Y.merge(o);
./yui/build_rollup_tmp/yui.js:        l = Y.merge(this.inserted); // shallow clone
./yui/build_rollup_tmp/yui.js:        copy = Y.merge(this, true);
./yui/build_tmp/loader-debug.js:    // this.moduleInfo = Y.merge(Y.Env.meta.moduleInfo);
./yui/build_tmp/loader-debug.js:     this.skin = Y.merge(Y.Env.meta.skin);
./yui/build_tmp/loader-debug.js:        m[PROV] = Y.merge(o);
./yui/build_tmp/loader-debug.js:        l = Y.merge(this.inserted); // shallow clone
./yui/build_tmp/loader-debug.js:        copy = Y.merge(this, true);
./yui/build_tmp/loader.js:    // this.moduleInfo = Y.merge(Y.Env.meta.moduleInfo);
./yui/build_tmp/loader.js:     this.skin = Y.merge(Y.Env.meta.skin);
./yui/build_tmp/loader.js:        m[PROV] = Y.merge(o);
./yui/build_tmp/loader.js:        l = Y.merge(this.inserted); // shallow clone
./yui/build_tmp/loader.js:        copy = Y.merge(this, true);
./yui/js/get.js:        queues[id] = Y.merge(opts, {
./yui/js/loader.js:    // this.moduleInfo = Y.merge(Y.Env.meta.moduleInfo);
./yui/js/loader.js:     this.skin = Y.merge(Y.Env.meta.skin);
./yui/js/loader.js:        m[PROV] = Y.merge(o);
./yui/js/loader.js:        l = Y.merge(this.inserted); // shallow clone
./yui/js/loader.js:        copy = Y.merge(this, true);
./yui/js/yui-core.js:Y.merge = function() {
./yui/build_rollup_tmp/yui-debug.js:Y.merge = function() {
./yui/build_rollup_tmp/yui-debug.js:        queues[id] = Y.merge(opts, {
./yui/build_rollup_tmp/yui-debug.js:    // this.moduleInfo = Y.merge(Y.Env.meta.moduleInfo);
./yui/build_rollup_tmp/yui-debug.js:     this.skin = Y.merge(Y.Env.meta.skin);
./yui/build_rollup_tmp/yui-debug.js:        m[PROV] = Y.merge(o);
./yui/build_rollup_tmp/yui-debug.js:        l = Y.merge(this.inserted); // shallow clone
./yui/build_rollup_tmp/yui-debug.js:        copy = Y.merge(this, true);
./yui/build_rollup_tmp/yui.js:Y.merge = function() {
./yui/build_rollup_tmp/yui.js:        queues[id] = Y.merge(opts, {
./yui/build_rollup_tmp/yui.js:    // this.moduleInfo = Y.merge(Y.Env.meta.moduleInfo);
./yui/build_rollup_tmp/yui.js:     this.skin = Y.merge(Y.Env.meta.skin);
./yui/build_rollup_tmp/yui.js:        m[PROV] = Y.merge(o);
./yui/build_rollup_tmp/yui.js:        l = Y.merge(this.inserted); // shallow clone
./yui/build_rollup_tmp/yui.js:        copy = Y.merge(this, true);
./yui/build_tmp/loader-debug.js:    // this.moduleInfo = Y.merge(Y.Env.meta.moduleInfo);
./yui/build_tmp/loader-debug.js:     this.skin = Y.merge(Y.Env.meta.skin);
./yui/build_tmp/loader-debug.js:        m[PROV] = Y.merge(o);
./yui/build_tmp/loader-debug.js:        l = Y.merge(this.inserted); // shallow clone
./yui/build_tmp/loader-debug.js:        copy = Y.merge(this, true);
./yui/build_tmp/loader.js:    // this.moduleInfo = Y.merge(Y.Env.meta.moduleInfo);
./yui/build_tmp/loader.js:     this.skin = Y.merge(Y.Env.meta.skin);
./yui/build_tmp/loader.js:        m[PROV] = Y.merge(o);
./yui/build_tmp/loader.js:        l = Y.merge(this.inserted); // shallow clone
./yui/build_tmp/loader.js:        copy = Y.merge(this, true);
./yui/js/get.js:        queues[id] = Y.merge(opts, {
./yui/js/loader.js:    // this.moduleInfo = Y.merge(Y.Env.meta.moduleInfo);
./yui/js/loader.js:     this.skin = Y.merge(Y.Env.meta.skin);
./yui/js/loader.js:        m[PROV] = Y.merge(o);
./yui/js/loader.js:        l = Y.merge(this.inserted); // shallow clone
./yui/js/loader.js:        copy = Y.merge(this, true);
./yui/js/yui-core.js:Y.merge = function() {
