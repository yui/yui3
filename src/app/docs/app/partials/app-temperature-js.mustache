YUI().use('model', 'view', 'event-valuechange', function (Y) {
    // Usually the TemperatureModel and TemperatureView classes should be
    // implemented in separate files as modules. For the sake of the simplicity
    // those classes are here as local variables and not in a namespace as
    // Y.TemperatureModel and Y.TemperatureView.
    var TemperatureModel,
        TemperatureView,
        myTemperatureModel,
        myTemperatureView;

// -- Model --------------------------------------------------------------------

    // The TemperatureModel class extends Y.Model and customizes it to catch the
    // changes of the properties, setting the value of the conversion for the
    // rest of the temperature properties.

    TemperatureModel = Y.Base.create('temperatureModel', Y.Model, [], {
        // The initializer runs when a TemperatureModel instance is created and
        // gives us an opportunity to set up the events for the attributes.
        initializer: function () {
            this.after('fahrenheitChange', this._afterFahrenheitChange);
            this.after('celsiusChange', this._afterCelsiusChange);
            this.after('kelvinChange', this._afterKelvinChange);
        },

        // Event handlers for the event 'change'.
        _afterFahrenheitChange: function (e) {
            var value = e.newVal,
                fahrenheitToKelvin = (value + 459.67) * 5 / 9,
                fahrenheitToCelsius = (value - 32) * 5 / 9,
                conversion = this.get('_CONVERSION');

            // The `src` property identifies who initiated the `set()` action
            // and prevent infinite loops or other similar situations.
            if (e.src !== conversion) {
                this.set('kelvin', fahrenheitToKelvin, {src: conversion});
                this.set('celsius', fahrenheitToCelsius, {src: conversion});
            }
        },

        _afterCelsiusChange: function (e) {
            var value = e.newVal,
                celsiusToFahrenheit = (value * 9 / 5) + 32,
                celsiusToKelvin = value + 273.15,
                conversion = this.get('_CONVERSION');

            if (e.src !== conversion) {
                this.set('fahrenheit', celsiusToFahrenheit, {src: conversion});
                this.set('kelvin', celsiusToKelvin, {src: conversion});
            }
        },

        _afterKelvinChange: function (e) {
            var value = e.newVal,
                kelvinToFahrenheit = (value * 9 / 5) - 459.67,
                kelvinToCelsius = value - 273.15,
                conversion = this.get('_CONVERSION');

            if (e.src !== conversion) {
                this.set('fahrenheit', kelvinToFahrenheit, {src: conversion});
                this.set('celsius', kelvinToCelsius, {src: conversion});
            }
        }

    }, {
        // The attributes of the model with the default value and the validation
        // method, called when the attribute is modified. The default value is
        // not zero because the first conversion would not work if the input
        // user would be zero.
        ATTRS: {
            fahrenheit: {
                value: NaN,
                validator: Y.Lang.isNumber
            },
            celsius: {
                value: NaN,
                validator: Y.Lang.isNumber
            },
            kelvin: {
                value: NaN,
                validator: Y.Lang.isNumber
            },
            // This attribute would be a private variable if the model would be
            // contained in a module, used as value in the `src` attribute of
            // the `set` method.
            _CONVERSION: {
                value: 'conversion'
            }
        }
    });

// -- View ---------------------------------------------------------------------

    // The TemperatureView class extends Y.View and customizes it to represent
    // the form containing the input fields of the temperatures. It also handles
    // DOM events to allow the conversion.

    TemperatureView = Y.Base.create('temperatureView', Y.View, [], {
        // These are custom attribute that we will use to hold a reference to
        // the DOM input field.
        fahrenheitNode: Y.one('#fahrenheit'),
        celsiusNode: Y.one('#celsius'),
        kelvinNode: Y.one('#kelvin'),

        // This is where we attach DOM events for the view. The `events` object
        // is a mapping of selectors to an object containing one or more events
        // to attach to the node(s) matching each selector.
        events: {
            '#fahrenheit': { valuechange: 'fahrenheitChange' },
            '#celsius': { valuechange: 'celsiusChange' },
            '#kelvin': { valuechange: 'kelvinChange' }
        },

        // Clear the input fields.
        clear: function () {
            this.fahrenheitNode.set("value", "");
            this.celsiusNode.set("value", "");
            this.kelvinNode.set("value", "");
        },

        // The initializer runs when a TemperatureView instance is created and
        // gives us an opportunity to set up the view.
        initializer: function () {
            // The model property is set to a TemperatureModel instance when
            // this view, TemperatureView, is created.
            var temperature = this.get('model');

            // Update the display when a temperature in the model is changed.
            temperature.after("change", this.render, this);

            // Clear the input fields.
            this.clear();

            // Events are attached lazily. They will be attached on the first
            // call to getting the container node.
            this.get('container');
        },

        // We round the value to display.
        round: function (value) {
            return Math.round(value * 1000) / 1000;
        },

        // The render function is called whenever a temperature item is changed,
        // thanks to the list event handler we attached in the initializer
        // above.
        render: function () {
            // The model provides the temperature values.
            var temperatureModel = this.get('model'),
                fahrenheit = temperatureModel.get('fahrenheit'),
                celsius = temperatureModel.get('celsius'),
                kelvin = temperatureModel.get('kelvin');

            // The temperatures are displayed.
            this.fahrenheitNode.set('value', this.round(fahrenheit));
            this.celsiusNode.set('value', this.round(celsius));
            this.kelvinNode.set('value', this.round(kelvin));
        },

        // The common method of the event handlers.
        temperatureUpdate: function (e, node) {
            var temperatureType,
                temperatureValue,
                temperatureModel = this.get('model');

            // We trim the value to remove the spaces and force the input field
            // to contain only numbers. A more robust approach is suggested, but
            // it is out of scope of this example.
            temperatureValue = parseFloat(Y.Lang.trim(node.get('value')));

            if (!Y.Lang.isNumber(temperatureValue)) {
                // If an input field is empty or is not a number, all the input
                // fields are cleared.
                this.clear();
            } else {
                // The type values are the following: fahrenheit, celsius or
                // kelvin.
                temperatureType = node.get('id');

                // Update the temperature in the model.
                temperatureModel.set(temperatureType, temperatureValue);
            }
        },

        // Event handlers for the event 'valuechange'.
        fahrenheitChange: function (e) {
            this.temperatureUpdate(e, this.fahrenheitNode);
        },

        celsiusChange: function (e) {
            this.temperatureUpdate(e, this.celsiusNode);
        },

        kelvinChange: function (e) {
            this.temperatureUpdate(e, this.kelvinNode);
        }
    });

// -- Start your engines! ------------------------------------------------------

    myTemperatureModel = new TemperatureModel();
    myTemperatureView = new TemperatureView({
        container: Y.one('#temperatureView'),
        model: myTemperatureModel
    });
});
