YUI().use('model', 'view', 'event-valuechange', function (Y) {
    var TemperatureModel,
        TemperatureView,
        myTemperatureModel,
        myTemperatureView;

    TemperatureModel = Y.Base.create('temperatureModel', Y.Model, [], {
        // A method to check the validity of the value in the model: only
        // numbers are valid values.
        check: function (value) {
            return Y.Lang.isNumber(value);
        },

        // We need to round the value to avoid an infinite loop when 
        // the value of the attribute changes.
        round: function (value) {
            return Math.round(value * 1000) / 1000;
        },

        // The conversion of the temperatures: the attributes are updated using
        // the set method to propagate the conversion to the rest of the attrs.
        convertFahrenheitToCelsius: function (value) {
            this.set('celsius', this.round((value - 32) * 5 / 9));
        },

        convertFahrenheitToKelvin: function (value) {
            this.set('kelvin', this.round((value + 459.67) * 5 / 9));
        },

        convertCelsiusToFahrenheit: function (value) {
            this.set('fahrenheit', this.round((value * 9 / 5) + 32));
        },

        convertCelsiusToKelvin: function (value) {
            this.set('kelvin', this.round(value + 273.15));
        },

        convertKelvinToFahrenheit: function (value) {
            this.set('fahrenheit', this.round((value * 9 / 5) - 459.67));
        },

        convertKelvinToCelsius: function (value) {
            this.set('celsius', this.round(value - 273.15));
        }

    }, {
        // The attributes of the model with the default value and
        // the validation method, called when the attribute is modified.
        ATTRS: {
            fahrenheit: {
                value: 0,
                validator: function (value, what) {
                    return this.check(value, what);
                }
            },
            celsius: {
                value: 0,
                validator: function (value, what) {
                    return this.check(value, what);
                }
            },
            kelvin: {
                value: 0,
                validator: function (value, what) {
                    return this.check(value, what);
                }
            }
        }
    });

    TemperatureView = Y.Base.create('temperatureView', Y.View, [], {
        // These are custom attribute that we will use to hold a reference to
        // the DOM input field.
        fahrenheitNode: Y.one("#fahrenheit"),
        celsiusNode: Y.one("#celsius"),
        kelvinNode: Y.one("#kelvin"),

        // This is where we attach DOM events for the view. The `events` object
        // is a mapping of selectors to an object containing one or more events
        // to attach to the node(s) matching each selector.
        events: {
            '#fahrenheit': { valuechange: 'fahrenheitChange' },
            '#celsius': { valuechange: 'celsiusChange' },
            '#kelvin': { valuechange: 'kelvinChange' }
        },

        // Clear the input fields.
        clear: function () {
            this.fahrenheitNode.set("value", "");
            this.celsiusNode.set("value", "");
            this.kelvinNode.set("value", "");
        },

        // The initializer runs when a TemperatureView instance is created and
        // gives us an opportunity to set up the view.
        initializer: function () {
            var temperature = this.get('model');

            // Update the attributes of the model when a temperature is changed,
            // calculating the conversion of the other temperatures.
            temperature.after('fahrenheitChange', function (e) {
                var value = e.newVal;

                temperature.convertFahrenheitToCelsius(value);
                temperature.convertFahrenheitToKelvin(value);
            });

            temperature.after('celsiusChange', function (e) {
                var value = e.newVal;

                temperature.convertCelsiusToFahrenheit(value);
                temperature.convertCelsiusToKelvin(value);
            });

            temperature.after('kelvinChange', function (e) {
                var value = e.newVal;

                temperature.convertKelvinToCelsius(value);
                temperature.convertKelvinToFahrenheit(value);
            });

            // Update the display when a temperature is changed.
            temperature.after("change", this.render, this);

            this.clear();
        },

        // The render function is called whenever a temperature item is changed,
        // thanks to the list event handler we attached in the initializer
        // above.
        render: function () {
            var temperature = this.get('model');

            this.fahrenheitNode.set("value", temperature.get('fahrenheit'));
            this.celsiusNode.set("value", temperature.get('celsius'));
            this.kelvinNode.set("value", temperature.get('kelvin'));
        },

        // The common method of the event handlers.
        temperatureUpdate: function (e, node) {
            var temperatureType,
                temperatureValue,
                temperatureModel = this.get('model');

            // The type values are the following: fahrenheit, celsius or kelvin.
            temperatureType = node.get('id');

            // We trim the value just in case the input field contains trailing
            // spaces.
            temperatureValue = Y.Lang.trim(node.get('value'));

            if (!temperatureValue) {
                // If an input field is empty, all the input fields are
                // cleared.
                this.clear();
            } else {
                // Force the input field to contain only numbers. A more robust
                // approach is suggested, but it is out of scope of this
                // example.
                temperatureValue = parseFloat(temperatureValue);

                // Update the temperature in the model.
                temperatureModel.set(temperatureType, temperatureValue);
            }
        },

        // Event handlers for the event 'valuechange'.
        fahrenheitChange: function (e) {
            this.temperatureUpdate(e, this.fahrenheitNode);
        },

        celsiusChange: function (e) {
            this.temperatureUpdate(e, this.celsiusNode);
        },

        kelvinChange: function (e) {
            this.temperatureUpdate(e, this.kelvinNode);
        }
    });

    myTemperatureModel = new TemperatureModel();
    myTemperatureView = new TemperatureView({
        container: Y.one("#temperatureView"),
        model: myTemperatureModel
    });

    // Events are attached lazily.
    // They will be attached on the first call to getting the container node.
    myTemperatureView.get('container');
});
