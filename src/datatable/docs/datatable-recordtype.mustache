<style scoped>
/* custom styles for this example */
.example .yui3-datatable {
    margin-bottom: 1em;
}

/* css to counter global site css */
.example table {
    width: auto;
}
.example caption {
    display: table-caption;
}
.example th,
.example td {
    text-transform: none;
    border: 0 none;
}
{{>datatable-recordtype-css}}
</style>

<div class="intro">
    <p>
    	This example shows how to use the DataTable's `recordType` attribute to create columns whose values are calculated from other columns.
	</p>
</div>

<div class="example yui3-skin-sam">
    {{>datatable-recordtype-html}}
    <script>
    	{{>datatable-recordtype-js}}
    </script>
</div>

<h2>`recordType` sets the Model</h2>

<p>
    DataTable's `recordType` attribute is used as the storage class for the records in your table.  If you don't configure your DataTable's `recordType`, it will create one for you, based on the keys in the data that you fill the table with.
</p>

<p>
    `recordType` can be passed either a Model subclass, an array of attribute names, or an object that corresponds to the `ATTRS` collection for a Model  subclass.  Passing either an array or object will influence how DataTable builds your table's Model class.
</p>

<h2>Use attribute `getter`s to populate custom columns</h2>

<p>
    Another benefit of the object value support for `recordType` is that it can be used to create fields whose values are defined by `getter`s.
</p>

```
var table = new Y.DataTable({
    columns: ['cost', 'price', 'profit'],
    recordType: {
        cost: {},
        price: {},
        profit: {
            getter: function () {
                return this.get('price') - this.get('cost');
            },
            readOnly: true
        }
    },
    ...
});
```

<p>
   The `data` populating the table need only include `cost` and `price`.  The `profit` column will be populated automatically based on the other two.
</p>

<h2>Sorting for free</h2>

<p>
    By adding columns to the `recordType` instead of defining them purely in column `formatter`s, you don't need to define a `sortFn` for the column to be sortable (normally required for columns that don't have a `key`).
</p>

<h2>Full Code Listing</h2>

<h3>JavaScript</h3>

```
{{>datatable-recordtype-js}}
```

<h3>CSS</h3>

```
{{>datatable-recordtype-css}}
```
<h3>HTML</h3>

```
{{>datatable-recordtype-html}}
```
