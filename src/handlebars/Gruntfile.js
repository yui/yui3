module.exports = function(grunt) {
    
    var path = require('path'),
        HANDLEBARS_LIB = path.join(process.cwd(), '../../../', 'handlebars.js/lib'),
        baseFiles = [
            'handlebars/base.js',
            'handlebars/utils.js',
            'handlebars/runtime.js'
        ],
        prependComment = '/* THIS FILE IS GENERATED BY A BUILD SCRIPT - DO NOT EDIT! */\n',
        compilerFiles = [
            'handlebars/compiler/parser.js',
            'handlebars/compiler/base.js',
            'handlebars/compiler/ast.js',
            'handlebars/compiler/compiler.js'
        ];

    grunt.registerTask('clean', 'Clean Source Tree', function() {
        var files = grunt.file.expand('js/handlebars-*.js');
        files.forEach(function(file) {
            grunt.log.writeln('Deleting: '.red + file.cyan);
            grunt.file['delete'](file);
        });
    });

    grunt.registerTask('import-base', 'Import Base Handlebars Source', function() {
        baseFiles.forEach(function(file) {
            var src = path.join(HANDLEBARS_LIB, file),
                dest = path.join('js', 'handlebars-' + path.basename(file));

            if (!grunt.file.exists(src)) {
                grunt.fail.fatal('Did you build Handlebars.js yet?');
            }
            grunt.log.writeln('Copying: '.green + file.cyan + ' to ' + dest.cyan);
            grunt.file.copy(src, dest, { force: true });
        });
    });

    grunt.registerTask('import-compiler', 'Import Base Handlebars Source', function() {
        compilerFiles.forEach(function(file) {
            var src = path.join(HANDLEBARS_LIB, file),
                dest = path.join('js', 'handlebars-compiler-' + path.basename(file));

            if (!grunt.file.exists(src)) {
                grunt.fail.fatal('Did you build Handlebars.js yet?');
            }
            grunt.log.writeln('Copying: '.green + file.cyan + ' to ' + dest.cyan);
            grunt.file.copy(src, dest, { force: true });
        });
    });

    grunt.registerTask('process', 'Post Process JS Files', function() {
        var files = grunt.file.expand('js/handlebars-*.js');
        files.forEach(function(file) {
            grunt.log.writeln('Post-processing: '.green + file.cyan);
            var data = grunt.file.read(file).split('\n'),
                start = false,
                str = [prependComment];
            
            data.forEach(function(line) {
                if (line.indexOf('BEGIN(BROWSER)') > -1) {
                    start = true;
                }
                if (start) {
                    line = line.replace('this.Handlebars =', 'var Handlebars =');
                    line = line.replace('this.Handlebars', 'Handlebars');
                    str.push(line);
                }
                if (line.indexOf('END(BROWSER)') > -1) {
                    str.push('');
                    start = false;
                }
            });

            grunt.file.write(file, str.join('\n'));

        });
    });

    grunt.registerTask('prep', 'Prep Handlebars.js import', function() {
        grunt.log.write('Looking for Handlebars.js'.green);
        if (!grunt.file.exists(HANDLEBARS_LIB)) {
            grunt.log.writeln('');
            grunt.fail.fatal('Could not locate Handlebars repo: ' + HANDLEBARS_LIB + '\nDid you clone it above the yui3 repo?');
        }
        grunt.log.writeln('...OK'.white);
    });

    grunt.registerTask('all', [
        'prep',
        'clean',
        'import',
        'process'
    ]);
    
    grunt.registerTask('import', [
        'import-base',
        'import-compiler'
    ]);
    
    grunt.registerTask('default', ['all']);

};

