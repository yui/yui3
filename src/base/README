3.0.0 beta1

* Config argument for init event now merged into the event facade, 
  instead of being passed separately (available as e.cfg).
  
* Removed Base.create. On review considered to be overkill.

* Moved PluginHost down from Widget to Base, since utils and 
  Node will also support Plugins.
  
* PluginHost.plug and unplug now accept the plugin class as arguments.
  [ plug(pluginClass, cfg) and unplug(pluginClass) ]

* Split base module up into base-base and base-build.

* Added "Initialize on Demand" feature for ATTRS processing, which
  removes order dependency when processing ATTRS for a particular class.

  If a get call is made for an uninitialized attribute A, in the 
  getter/setter/validator or valueFns of another attribute B, A will 
  be intiailized on the fly and it's value returned. 

  NOTE: This functionality only applies to attributes which are part of 
  the same class' ATTRS configuration, since attributes from superclasses
  will already have been configured based on the class hierarchy 
  initialization.

* Added ability to subscribe to on/after events through the constructor
  config object, e.g.:
  
      new MyBaseObject({ 
         on: {
            init: handlerFn,
            myAttrChange: handlerFn
	 },
	 after: {
	    init: handlerFn,
	    myAttrChange: handlerFn
	 },
	 ...
	 
      });

3.0.0PR1 - Initial release

Module Name: "base"
Documentation: http://developer.yahoo.com/yui/3/base

Base is designed to be a low level class from which other attribute 
and event target based classes in the YUI library can be derived. 
It provides a standard template for creating attribute based objects 
across the library and provides a consistent init() and destroy() 
sequence, by chaining initialization (initializer) and destruction 
(destructor) methods for the class hierarcy.
