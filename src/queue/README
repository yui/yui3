Queue
    The Queue module allows you create a chain of function callbacks executed in order via setTimeout.  Also supports timeout chained iterations for each item in the Queue.

3.0.0 beta1
Queue overhaul.  Breaking into submodules queue-base, queue-promote, and queue-run.
queue-base
    * tiny
    * basic synchronous queuing
    * Constructor takes 0..n callbacks
    * supported callbacks are functions only
    * API includes add, next, and size

queue-promote
    * adds to queue-base API methods promote, remove, and indexOf

queue-run
    * emits events add, remove, promote, execute, shift, and complete, all but
      complete are preventable
    * callbacks can be functions or config objects
    * supported config object properties include:
        - fn: the function to execute
        - context: the callback context (default is the Queue instance)
        - args: args to pass into the callback
        - iterations: fixed number of times to execute the fn
        - until: (alt to iterations) true/false function to trigger looping
        - timeout: ms timeout to schedule each execution of the fn. Negative
          numbers trigger synchronous execution.  Default -1.
        - autoContinue: whether to run the next callback in the queue after the
          current one completes (in run mode)
        - name: string used to retrieve, promote, or remove a callback
    * cascading defaults support (in increasing priority):
        - static Y.Queue.defaults object to set defaults for all callbacks in
          all instances for this YUI instance
        - instance.defaults object to set instance level defaults
    * default operation is now synchronous.  Set { timeout : 10 } in class or
      instance defaults to return to async default behavior.
    * iterations now handled by default until function
    * API includes run, pause, stop, isRunning, and getCallback

3.0.0pr2
    No changes

3.0.0pr1
    Initial release
