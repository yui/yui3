if (typeof __coverage__ === 'undefined') { __coverage__ = {}; }
if (!__coverage__['build/tree-openable/tree-openable.js']) {
   __coverage__['build/tree-openable/tree-openable.js'] = {"path":"build/tree-openable/tree-openable.js","s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":25},"end":{"line":1,"column":44}}},"2":{"name":"Openable","line":41,"loc":{"start":{"line":41,"column":0},"end":{"line":41,"column":20}}},"3":{"name":"(anonymous_3)","line":45,"loc":{"start":{"line":45,"column":17},"end":{"line":45,"column":29}}},"4":{"name":"(anonymous_4)","line":64,"loc":{"start":{"line":64,"column":15},"end":{"line":64,"column":40}}},"5":{"name":"(anonymous_5)","line":91,"loc":{"start":{"line":91,"column":14},"end":{"line":91,"column":39}}},"6":{"name":"(anonymous_6)","line":120,"loc":{"start":{"line":120,"column":20},"end":{"line":120,"column":45}}},"7":{"name":"(anonymous_7)","line":134,"loc":{"start":{"line":134,"column":17},"end":{"line":134,"column":30}}},"8":{"name":"(anonymous_8)","line":145,"loc":{"start":{"line":145,"column":16},"end":{"line":145,"column":29}}},"9":{"name":"NodeOpenable","line":165,"loc":{"start":{"line":165,"column":0},"end":{"line":165,"column":24}}},"10":{"name":"(anonymous_10)","line":181,"loc":{"start":{"line":181,"column":11},"end":{"line":181,"column":30}}},"11":{"name":"(anonymous_11)","line":194,"loc":{"start":{"line":194,"column":12},"end":{"line":194,"column":24}}},"12":{"name":"(anonymous_12)","line":211,"loc":{"start":{"line":211,"column":10},"end":{"line":211,"column":29}}},"13":{"name":"(anonymous_13)","line":230,"loc":{"start":{"line":230,"column":16},"end":{"line":230,"column":35}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":239,"column":40}},"2":{"start":{"line":29,"column":0},"end":{"line":29,"column":24}},"3":{"start":{"line":39,"column":0},"end":{"line":39,"column":22}},"4":{"start":{"line":41,"column":0},"end":{"line":41,"column":22}},"5":{"start":{"line":43,"column":0},"end":{"line":148,"column":2}},"6":{"start":{"line":46,"column":8},"end":{"line":46,"column":79}},"7":{"start":{"line":65,"column":8},"end":{"line":73,"column":9}},"8":{"start":{"line":66,"column":12},"end":{"line":72,"column":15}},"9":{"start":{"line":75,"column":8},"end":{"line":75,"column":20}},"10":{"start":{"line":92,"column":8},"end":{"line":100,"column":9}},"11":{"start":{"line":93,"column":12},"end":{"line":99,"column":15}},"12":{"start":{"line":102,"column":8},"end":{"line":102,"column":20}},"13":{"start":{"line":121,"column":8},"end":{"line":122,"column":41}},"14":{"start":{"line":135,"column":8},"end":{"line":135,"column":33}},"15":{"start":{"line":146,"column":8},"end":{"line":146,"column":33}},"16":{"start":{"line":150,"column":0},"end":{"line":150,"column":27}},"17":{"start":{"line":165,"column":0},"end":{"line":165,"column":26}},"18":{"start":{"line":167,"column":0},"end":{"line":234,"column":2}},"19":{"start":{"line":182,"column":8},"end":{"line":182,"column":43}},"20":{"start":{"line":183,"column":8},"end":{"line":183,"column":20}},"21":{"start":{"line":195,"column":8},"end":{"line":195,"column":50}},"22":{"start":{"line":212,"column":8},"end":{"line":212,"column":42}},"23":{"start":{"line":213,"column":8},"end":{"line":213,"column":20}},"24":{"start":{"line":231,"column":8},"end":{"line":231,"column":48}},"25":{"start":{"line":232,"column":8},"end":{"line":232,"column":20}},"26":{"start":{"line":236,"column":0},"end":{"line":236,"column":36}}},"branchMap":{"1":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":8},"end":{"line":65,"column":8}},{"start":{"line":65,"column":8},"end":{"line":65,"column":8}}]},"2":{"line":65,"type":"binary-expr","locations":[{"start":{"line":65,"column":12},"end":{"line":65,"column":32}},{"start":{"line":65,"column":36},"end":{"line":65,"column":49}}]},"3":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":22},"end":{"line":68,"column":29}},{"start":{"line":68,"column":33},"end":{"line":68,"column":44}}]},"4":{"line":71,"type":"binary-expr","locations":[{"start":{"line":71,"column":27},"end":{"line":71,"column":34}},{"start":{"line":71,"column":38},"end":{"line":71,"column":52}}]},"5":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":8},"end":{"line":92,"column":8}},{"start":{"line":92,"column":8},"end":{"line":92,"column":8}}]},"6":{"line":92,"type":"binary-expr","locations":[{"start":{"line":92,"column":12},"end":{"line":92,"column":32}},{"start":{"line":92,"column":36},"end":{"line":92,"column":50}}]},"7":{"line":95,"type":"binary-expr","locations":[{"start":{"line":95,"column":22},"end":{"line":95,"column":29}},{"start":{"line":95,"column":33},"end":{"line":95,"column":44}}]},"8":{"line":98,"type":"binary-expr","locations":[{"start":{"line":98,"column":27},"end":{"line":98,"column":34}},{"start":{"line":98,"column":38},"end":{"line":98,"column":52}}]},"9":{"line":121,"type":"cond-expr","locations":[{"start":{"line":121,"column":31},"end":{"line":121,"column":60}},{"start":{"line":122,"column":12},"end":{"line":122,"column":40}}]},"10":{"line":195,"type":"binary-expr","locations":[{"start":{"line":195,"column":15},"end":{"line":195,"column":32}},{"start":{"line":195,"column":36},"end":{"line":195,"column":49}}]}},"code":["(function () { YUI.add('tree-openable', function (Y, NAME) {","","/*jshint expr:true, onevar:false */\r","\r","/**\r","Extension for `Tree` that adds the concept of open/closed state for nodes.\r","\r","@module tree\r","@submodule tree-openable\r","@main tree-openable\r","**/\r","\r","/**\r","Extension for `Tree` that adds the concept of open/closed state for nodes.\r","\r","@class Tree.Openable\r","@constructor\r","@extensionfor Tree\r","**/\r","\r","/**\r","Fired when a node is closed.\r","\r","@event close\r","@param {Tree.Node} node Node being closed.\r","@param {String} src Source of the event.\r","@preventable _defCloseFn\r","**/\r","var EVT_CLOSE = 'close';\r","\r","/**\r","Fired when a node is opened.\r","\r","@event open\r","@param {Tree.Node} node Node being opened.\r","@param {String} src Source of the event.\r","@preventable _defOpenFn\r","**/\r","var EVT_OPEN = 'open';\r","\r","function Openable() {}\r","\r","Openable.prototype = {\r","    // -- Lifecycle ------------------------------------------------------------\r","    initializer: function () {\r","        this.nodeExtensions = this.nodeExtensions.concat(Y.Tree.Node.Openable);\r","    },\r","\r","    // -- Public Methods -------------------------------------------------------\r","\r","    /**\r","    Closes the specified node if it isn't already closed.\r","\r","    @method closeNode\r","    @param {Object} [options] Options.\r","        @param {Boolean} [options.silent=false] If `true`, the `close` event\r","            will be suppressed.\r","        @param {String} [options.src] Source of the change, to be passed along\r","            to the event facade of the resulting event. This can be used to\r","            distinguish between changes triggered by a user and changes\r","            triggered programmatically, for example.\r","    @chainable\r","    **/\r","    closeNode: function (node, options) {\r","        if (node.canHaveChildren && node.isOpen()) {\r","            this._fireTreeEvent(EVT_CLOSE, {\r","                node: node,\r","                src : options && options.src\r","            }, {\r","                defaultFn: this._defCloseFn,\r","                silent   : options && options.silent\r","            });\r","        }\r","\r","        return this;\r","    },\r","\r","    /**\r","    Opens the specified node if it isn't already open.\r","\r","    @method openNode\r","    @param {Object} [options] Options.\r","        @param {Boolean} [options.silent=false] If `true`, the `open` event\r","            will be suppressed.\r","        @param {String} [options.src] Source of the change, to be passed along\r","            to the event facade of the resulting event. This can be used to\r","            distinguish between changes triggered by a user and changes\r","            triggered programmatically, for example.\r","    @chainable\r","    **/\r","    openNode: function (node, options) {\r","        if (node.canHaveChildren && !node.isOpen()) {\r","            this._fireTreeEvent(EVT_OPEN, {\r","                node: node,\r","                src : options && options.src\r","            }, {\r","                defaultFn: this._defOpenFn,\r","                silent   : options && options.silent\r","            });\r","        }\r","\r","        return this;\r","    },\r","\r","    /**\r","    Toggles the open/closed state of the specified node, closing it if it's\r","    currently open or opening it if it's currently closed.\r","\r","    @method toggleOpenNode\r","    @param {Tree.Node} node Node to toggle.\r","    @param {Object} [options] Options.\r","        @param {Boolean} [options.silent=false] If `true`, events will be\r","            suppressed.\r","        @param {String} [options.src] Source of the change, to be passed along\r","            to the event facade of the resulting event. This can be used to\r","            distinguish between changes triggered by a user and changes\r","            triggered programmatically, for example.\r","    @chainable\r","    **/\r","    toggleOpenNode: function (node, options) {\r","        return node.isOpen() ? this.closeNode(node, options) :\r","            this.openNode(node, options);\r","    },\r","\r","    // -- Default Event Handlers -----------------------------------------------\r","\r","    /**\r","    Default handler for the `close` event.\r","\r","    @method _defCloseFn\r","    @param {EventFacade} e\r","    @protected\r","    **/\r","    _defCloseFn: function (e) {\r","        delete e.node.state.open;\r","    },\r","\r","    /**\r","    Default handler for the `open` event.\r","\r","    @method _defOpenFn\r","    @param {EventFacade} e\r","    @protected\r","    **/\r","    _defOpenFn: function (e) {\r","        e.node.state.open = true;\r","    }\r","};\r","\r","Y.Tree.Openable = Openable;\r","/**\r","@module tree\r","@submodule tree-openable\r","**/\r","\r","/**\r","`Tree.Node` extension that adds methods useful for nodes in trees that use the\r","`Tree.Openable` extension.\r","\r","@class Tree.Node.Openable\r","@constructor\r","@extensionfor Tree.Node\r","**/\r","\r","function NodeOpenable() {}\r","\r","NodeOpenable.prototype = {\r","    /**\r","    Closes this node if it's currently open.\r","\r","    @method close\r","    @param {Object} [options] Options.\r","        @param {Boolean} [options.silent=false] If `true`, the `close` event\r","            will be suppressed.\r","        @param {String} [options.src] Source of the change, to be passed along\r","            to the event facade of the resulting event. This can be used to\r","            distinguish between changes triggered by a user and changes\r","            triggered programmatically, for example.\r","    @chainable\r","    **/\r","    close: function (options) {\r","        this.tree.closeNode(this, options);\r","        return this;\r","    },\r","\r","    /**\r","    Returns `true` if this node is currently open.\r","\r","    Note: the root node of a tree is always considered to be open.\r","\r","    @method isOpen\r","    @return {Boolean} `true` if this node is currently open, `false` otherwise.\r","    **/\r","    isOpen: function () {\r","        return !!this.state.open || this.isRoot();\r","    },\r","\r","    /**\r","    Opens this node if it's currently closed.\r","\r","    @method open\r","    @param {Object} [options] Options.\r","        @param {Boolean} [options.silent=false] If `true`, the `open` event\r","            will be suppressed.\r","        @param {String} [options.src] Source of the change, to be passed along\r","            to the event facade of the resulting event. This can be used to\r","            distinguish between changes triggered by a user and changes\r","            triggered programmatically, for example.\r","    @chainable\r","    **/\r","    open: function (options) {\r","        this.tree.openNode(this, options);\r","        return this;\r","    },\r","\r","    /**\r","    Toggles the open/closed state of this node, closing it if it's currently\r","    open or opening it if it's currently closed.\r","\r","    @method toggleOpen\r","    @param {Object} [options] Options.\r","        @param {Boolean} [options.silent=false] If `true`, events will be\r","            suppressed.\r","        @param {String} [options.src] Source of the change, to be passed along\r","            to the event facade of the resulting event. This can be used to\r","            distinguish between changes triggered by a user and changes\r","            triggered programmatically, for example.\r","    @chainable\r","    **/\r","    toggleOpen: function (options) {\r","        this.tree.toggleOpenNode(this, options);\r","        return this;\r","    }\r","};\r","\r","Y.Tree.Node.Openable = NodeOpenable;\r","","","}, '@VERSION@', {\"requires\": [\"tree\"]});","","}());"]};
}
var __cov_TqaujPOKnZXSPa1iI_f4sA = __coverage__['build/tree-openable/tree-openable.js'];
__cov_TqaujPOKnZXSPa1iI_f4sA.s['1']++;YUI.add('tree-openable',function(Y,NAME){__cov_TqaujPOKnZXSPa1iI_f4sA.f['1']++;__cov_TqaujPOKnZXSPa1iI_f4sA.s['2']++;var EVT_CLOSE='close';__cov_TqaujPOKnZXSPa1iI_f4sA.s['3']++;var EVT_OPEN='open';__cov_TqaujPOKnZXSPa1iI_f4sA.s['4']++;function Openable(){__cov_TqaujPOKnZXSPa1iI_f4sA.f['2']++;}__cov_TqaujPOKnZXSPa1iI_f4sA.s['5']++;Openable.prototype={initializer:function(){__cov_TqaujPOKnZXSPa1iI_f4sA.f['3']++;__cov_TqaujPOKnZXSPa1iI_f4sA.s['6']++;this.nodeExtensions=this.nodeExtensions.concat(Y.Tree.Node.Openable);},closeNode:function(node,options){__cov_TqaujPOKnZXSPa1iI_f4sA.f['4']++;__cov_TqaujPOKnZXSPa1iI_f4sA.s['7']++;if((__cov_TqaujPOKnZXSPa1iI_f4sA.b['2'][0]++,node.canHaveChildren)&&(__cov_TqaujPOKnZXSPa1iI_f4sA.b['2'][1]++,node.isOpen())){__cov_TqaujPOKnZXSPa1iI_f4sA.b['1'][0]++;__cov_TqaujPOKnZXSPa1iI_f4sA.s['8']++;this._fireTreeEvent(EVT_CLOSE,{node:node,src:(__cov_TqaujPOKnZXSPa1iI_f4sA.b['3'][0]++,options)&&(__cov_TqaujPOKnZXSPa1iI_f4sA.b['3'][1]++,options.src)},{defaultFn:this._defCloseFn,silent:(__cov_TqaujPOKnZXSPa1iI_f4sA.b['4'][0]++,options)&&(__cov_TqaujPOKnZXSPa1iI_f4sA.b['4'][1]++,options.silent)});}else{__cov_TqaujPOKnZXSPa1iI_f4sA.b['1'][1]++;}__cov_TqaujPOKnZXSPa1iI_f4sA.s['9']++;return this;},openNode:function(node,options){__cov_TqaujPOKnZXSPa1iI_f4sA.f['5']++;__cov_TqaujPOKnZXSPa1iI_f4sA.s['10']++;if((__cov_TqaujPOKnZXSPa1iI_f4sA.b['6'][0]++,node.canHaveChildren)&&(__cov_TqaujPOKnZXSPa1iI_f4sA.b['6'][1]++,!node.isOpen())){__cov_TqaujPOKnZXSPa1iI_f4sA.b['5'][0]++;__cov_TqaujPOKnZXSPa1iI_f4sA.s['11']++;this._fireTreeEvent(EVT_OPEN,{node:node,src:(__cov_TqaujPOKnZXSPa1iI_f4sA.b['7'][0]++,options)&&(__cov_TqaujPOKnZXSPa1iI_f4sA.b['7'][1]++,options.src)},{defaultFn:this._defOpenFn,silent:(__cov_TqaujPOKnZXSPa1iI_f4sA.b['8'][0]++,options)&&(__cov_TqaujPOKnZXSPa1iI_f4sA.b['8'][1]++,options.silent)});}else{__cov_TqaujPOKnZXSPa1iI_f4sA.b['5'][1]++;}__cov_TqaujPOKnZXSPa1iI_f4sA.s['12']++;return this;},toggleOpenNode:function(node,options){__cov_TqaujPOKnZXSPa1iI_f4sA.f['6']++;__cov_TqaujPOKnZXSPa1iI_f4sA.s['13']++;return node.isOpen()?(__cov_TqaujPOKnZXSPa1iI_f4sA.b['9'][0]++,this.closeNode(node,options)):(__cov_TqaujPOKnZXSPa1iI_f4sA.b['9'][1]++,this.openNode(node,options));},_defCloseFn:function(e){__cov_TqaujPOKnZXSPa1iI_f4sA.f['7']++;__cov_TqaujPOKnZXSPa1iI_f4sA.s['14']++;delete e.node.state.open;},_defOpenFn:function(e){__cov_TqaujPOKnZXSPa1iI_f4sA.f['8']++;__cov_TqaujPOKnZXSPa1iI_f4sA.s['15']++;e.node.state.open=true;}};__cov_TqaujPOKnZXSPa1iI_f4sA.s['16']++;Y.Tree.Openable=Openable;__cov_TqaujPOKnZXSPa1iI_f4sA.s['17']++;function NodeOpenable(){__cov_TqaujPOKnZXSPa1iI_f4sA.f['9']++;}__cov_TqaujPOKnZXSPa1iI_f4sA.s['18']++;NodeOpenable.prototype={close:function(options){__cov_TqaujPOKnZXSPa1iI_f4sA.f['10']++;__cov_TqaujPOKnZXSPa1iI_f4sA.s['19']++;this.tree.closeNode(this,options);__cov_TqaujPOKnZXSPa1iI_f4sA.s['20']++;return this;},isOpen:function(){__cov_TqaujPOKnZXSPa1iI_f4sA.f['11']++;__cov_TqaujPOKnZXSPa1iI_f4sA.s['21']++;return(__cov_TqaujPOKnZXSPa1iI_f4sA.b['10'][0]++,!!this.state.open)||(__cov_TqaujPOKnZXSPa1iI_f4sA.b['10'][1]++,this.isRoot());},open:function(options){__cov_TqaujPOKnZXSPa1iI_f4sA.f['12']++;__cov_TqaujPOKnZXSPa1iI_f4sA.s['22']++;this.tree.openNode(this,options);__cov_TqaujPOKnZXSPa1iI_f4sA.s['23']++;return this;},toggleOpen:function(options){__cov_TqaujPOKnZXSPa1iI_f4sA.f['13']++;__cov_TqaujPOKnZXSPa1iI_f4sA.s['24']++;this.tree.toggleOpenNode(this,options);__cov_TqaujPOKnZXSPa1iI_f4sA.s['25']++;return this;}};__cov_TqaujPOKnZXSPa1iI_f4sA.s['26']++;Y.Tree.Node.Openable=NodeOpenable;},'@VERSION@',{'requires':['tree']});
