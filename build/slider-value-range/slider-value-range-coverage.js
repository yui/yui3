if (typeof __coverage__ === 'undefined') { __coverage__ = {}; }
if (!__coverage__['build/slider-value-range/slider-value-range.js']) {
   __coverage__['build/slider-value-range/slider-value-range.js'] = {"path":"build/slider-value-range/slider-value-range.js","s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":30},"end":{"line":1,"column":49}}},"2":{"name":"SliderValueRange","line":30,"loc":{"start":{"line":30,"column":0},"end":{"line":30,"column":28}}},"3":{"name":"(anonymous_3)","line":55,"loc":{"start":{"line":55,"column":31},"end":{"line":55,"column":43}}},"4":{"name":"(anonymous_4)","line":65,"loc":{"start":{"line":65,"column":25},"end":{"line":65,"column":37}}},"5":{"name":"(anonymous_5)","line":81,"loc":{"start":{"line":81,"column":28},"end":{"line":81,"column":40}}},"6":{"name":"(anonymous_6)","line":95,"loc":{"start":{"line":95,"column":26},"end":{"line":95,"column":38}}},"7":{"name":"(anonymous_7)","line":120,"loc":{"start":{"line":120,"column":25},"end":{"line":120,"column":40}}},"8":{"name":"(anonymous_8)","line":140,"loc":{"start":{"line":140,"column":24},"end":{"line":140,"column":44}}},"9":{"name":"(anonymous_9)","line":157,"loc":{"start":{"line":157,"column":24},"end":{"line":157,"column":43}}},"10":{"name":"(anonymous_10)","line":170,"loc":{"start":{"line":170,"column":18},"end":{"line":170,"column":30}}},"11":{"name":"(anonymous_11)","line":184,"loc":{"start":{"line":184,"column":18},"end":{"line":184,"column":35}}},"12":{"name":"(anonymous_12)","line":197,"loc":{"start":{"line":197,"column":25},"end":{"line":197,"column":40}}},"13":{"name":"(anonymous_13)","line":212,"loc":{"start":{"line":212,"column":25},"end":{"line":212,"column":40}}},"14":{"name":"(anonymous_14)","line":226,"loc":{"start":{"line":226,"column":22},"end":{"line":226,"column":34}}},"15":{"name":"(anonymous_15)","line":246,"loc":{"start":{"line":246,"column":27},"end":{"line":246,"column":42}}},"16":{"name":"(anonymous_16)","line":260,"loc":{"start":{"line":260,"column":22},"end":{"line":260,"column":50}}},"17":{"name":"(anonymous_17)","line":275,"loc":{"start":{"line":275,"column":25},"end":{"line":275,"column":44}}},"18":{"name":"(anonymous_18)","line":288,"loc":{"start":{"line":288,"column":25},"end":{"line":288,"column":44}}},"19":{"name":"(anonymous_19)","line":302,"loc":{"start":{"line":302,"column":22},"end":{"line":302,"column":41}}},"20":{"name":"(anonymous_20)","line":317,"loc":{"start":{"line":317,"column":23},"end":{"line":317,"column":42}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":415,"column":47}},"2":{"start":{"line":13,"column":0},"end":{"line":19,"column":23}},"3":{"start":{"line":30,"column":0},"end":{"line":32,"column":1}},"4":{"start":{"line":31,"column":4},"end":{"line":31,"column":33}},"5":{"start":{"line":34,"column":0},"end":{"line":412,"column":10}},"6":{"start":{"line":66,"column":12},"end":{"line":70,"column":16}},"7":{"start":{"line":82,"column":12},"end":{"line":82,"column":36}},"8":{"start":{"line":84,"column":12},"end":{"line":84,"column":51}},"9":{"start":{"line":96,"column":12},"end":{"line":99,"column":44}},"10":{"start":{"line":105,"column":12},"end":{"line":105,"column":49}},"11":{"start":{"line":106,"column":12},"end":{"line":106,"column":54}},"12":{"start":{"line":108,"column":12},"end":{"line":108,"column":66}},"13":{"start":{"line":122,"column":12},"end":{"line":124,"column":13}},"14":{"start":{"line":123,"column":16},"end":{"line":123,"column":63}},"15":{"start":{"line":142,"column":12},"end":{"line":142,"column":73}},"16":{"start":{"line":144,"column":12},"end":{"line":144,"column":56}},"17":{"start":{"line":158,"column":12},"end":{"line":158,"column":77}},"18":{"start":{"line":160,"column":12},"end":{"line":160,"column":26}},"19":{"start":{"line":171,"column":12},"end":{"line":171,"column":37}},"20":{"start":{"line":185,"column":12},"end":{"line":185,"column":42}},"21":{"start":{"line":198,"column":12},"end":{"line":198,"column":32}},"22":{"start":{"line":200,"column":12},"end":{"line":200,"column":38}},"23":{"start":{"line":213,"column":12},"end":{"line":213,"column":32}},"24":{"start":{"line":215,"column":12},"end":{"line":215,"column":38}},"25":{"start":{"line":227,"column":12},"end":{"line":228,"column":54}},"26":{"start":{"line":230,"column":12},"end":{"line":235,"column":13}},"27":{"start":{"line":234,"column":16},"end":{"line":234,"column":43}},"28":{"start":{"line":247,"column":12},"end":{"line":247,"column":31}},"29":{"start":{"line":248,"column":12},"end":{"line":248,"column":56}},"30":{"start":{"line":261,"column":12},"end":{"line":261,"column":71}},"31":{"start":{"line":262,"column":12},"end":{"line":262,"column":51}},"32":{"start":{"line":263,"column":12},"end":{"line":263,"column":52}},"33":{"start":{"line":276,"column":12},"end":{"line":276,"column":44}},"34":{"start":{"line":289,"column":12},"end":{"line":289,"column":44}},"35":{"start":{"line":303,"column":12},"end":{"line":303,"column":56}},"36":{"start":{"line":318,"column":12},"end":{"line":320,"column":20}},"37":{"start":{"line":323,"column":12},"end":{"line":323,"column":44}},"38":{"start":{"line":324,"column":12},"end":{"line":324,"column":44}},"39":{"start":{"line":325,"column":12},"end":{"line":325,"column":22}},"40":{"start":{"line":327,"column":12},"end":{"line":331,"column":30}}},"branchMap":{"1":{"line":105,"type":"binary-expr","locations":[{"start":{"line":105,"column":21},"end":{"line":105,"column":41}},{"start":{"line":105,"column":45},"end":{"line":105,"column":48}}]},"2":{"line":106,"type":"binary-expr","locations":[{"start":{"line":106,"column":24},"end":{"line":106,"column":47}},{"start":{"line":106,"column":51},"end":{"line":106,"column":53}}]},"3":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":12},"end":{"line":122,"column":12}},{"start":{"line":122,"column":12},"end":{"line":122,"column":12}}]},"4":{"line":230,"type":"if","locations":[{"start":{"line":230,"column":12},"end":{"line":230,"column":12}},{"start":{"line":230,"column":12},"end":{"line":230,"column":12}}]},"5":{"line":323,"type":"cond-expr","locations":[{"start":{"line":323,"column":34},"end":{"line":323,"column":37}},{"start":{"line":323,"column":40},"end":{"line":323,"column":43}}]},"6":{"line":324,"type":"cond-expr","locations":[{"start":{"line":324,"column":34},"end":{"line":324,"column":37}},{"start":{"line":324,"column":40},"end":{"line":324,"column":43}}]},"7":{"line":327,"type":"cond-expr","locations":[{"start":{"line":328,"column":20},"end":{"line":328,"column":23}},{"start":{"line":329,"column":20},"end":{"line":331,"column":29}}]},"8":{"line":329,"type":"cond-expr","locations":[{"start":{"line":330,"column":24},"end":{"line":330,"column":27}},{"start":{"line":331,"column":24},"end":{"line":331,"column":29}}]}},"code":["(function () { YUI.add('slider-value-range', function (Y, NAME) {","","/**\r"," * Adds value support for Slider as a range of integers between a configured\r"," * minimum and maximum value.  For use with <code>Y.Base.build(..)</code> to\r"," * add the plumbing to <code>Y.SliderBase</code>.\r"," *\r"," * @module slider\r"," * @submodule slider-value-range\r"," */\r","\r","// Constants for compression or performance\r","var MIN       = 'min',\r","    MAX       = 'max',\r","    VALUE     = 'value',\r","//     MINORSTEP = 'minorStep',\r","//     MAJORSTEP = 'majorStep',\r","\r","    round = Math.round;\r","\r","/**\r"," * One class of value algorithm that can be built onto SliderBase.  By default,\r"," * values range between 0 and 100, but you can configure these on the\r"," * built Slider class by setting the <code>min</code> and <code>max</code>\r"," * configurations.  Set the initial value (will cause the thumb to move to the\r"," * appropriate location on the rail) in configuration as well if appropriate.\r"," *\r"," * @class SliderValueRange\r"," */\r","function SliderValueRange() {\r","    this._initSliderValueRange();\r","}\r","\r","Y.SliderValueRange = Y.mix( SliderValueRange, {\r","\r","    // Prototype properties and methods that will be added onto host class\r","    prototype: {\r","\r","        /**\r","         * Factor used to translate value -&gt; position -&gt; value.\r","         *\r","         * @property _factor\r","         * @type {Number}\r","         * @protected\r","         */\r","        _factor: 1,\r","\r","        /**\r","         * Stub for construction logic.  Override if extending this class and\r","         * you need to set something up during the initializer phase.\r","         *\r","         * @method _initSliderValueRange\r","         * @protected\r","         */\r","        _initSliderValueRange: function () {},\r","\r","        /**\r","         * Override of stub method in SliderBase that is called at the end of\r","         * its bindUI stage of render().  Subscribes to internal events to\r","         * trigger UI and related state updates.\r","         *\r","         * @method _bindValueLogic\r","         * @protected\r","         */\r","        _bindValueLogic: function () {\r","            this.after( {\r","                minChange  : this._afterMinChange,\r","                maxChange  : this._afterMaxChange,\r","                valueChange: this._afterValueChange\r","            } );\r","        },\r","\r","        /**\r","         * Move the thumb to appropriate position if necessary.  Also resets\r","         * the cached offsets and recalculates the conversion factor to\r","         * translate position to value.\r","         *\r","         * @method _syncThumbPosition\r","         * @protected\r","         */\r","        _syncThumbPosition: function () {\r","            this._calculateFactor();\r","\r","            this._setPosition( this.get( VALUE ) );\r","        },\r","\r","        /**\r","         * Calculates and caches\r","         * (range between max and min) / (rail length)\r","         * for fast runtime calculation of position -&gt; value.\r","         *\r","         * @method _calculateFactor\r","         * @protected\r","         */\r","        _calculateFactor: function () {\r","            var length    = this.get( 'length' ),\r","                thumbSize = this.thumb.getStyle( this._key.dim ),\r","                min       = this.get( MIN ),\r","                max       = this.get( MAX );\r","\r","            // The default thumb width is based on Sam skin's thumb dimension.\r","            // This attempts to allow for rendering off-DOM, then attaching\r","            // without the need to call syncUI().  It is still recommended\r","            // to call syncUI() in these cases though, just to be sure.\r","            length = parseFloat( length ) || 150;\r","            thumbSize = parseFloat( thumbSize ) || 15;\r","\r","            this._factor = ( max - min ) / ( length - thumbSize );\r","\r","        },\r","\r","        /**\r","         * Dispatch the new position of the thumb into the value setting\r","         * operations.\r","         *\r","         * @method _defThumbMoveFn\r","         * @param e { EventFacade } The host's thumbMove event\r","         * @protected\r","         */\r","        _defThumbMoveFn: function ( e ) {\r","            // To prevent set('value', x) from looping back around\r","            if (e.source !== 'set') {\r","                this.set(VALUE, this._offsetToValue(e.offset));\r","            }\r","        },\r","\r","        /**\r","         * <p>Converts a pixel position into a value.  Calculates current\r","         * thumb offset from the leading edge of the rail multiplied by the\r","         * ratio of <code>(max - min) / (constraining dim)</code>.</p>\r","         *\r","         * <p>Override this if you want to use a different value mapping\r","         * algorithm.</p>\r","         *\r","         * @method _offsetToValue\r","         * @param offset { Number } X or Y pixel offset\r","         * @return { mixed } Value corresponding to the provided pixel offset\r","         * @protected\r","         */\r","        _offsetToValue: function ( offset ) {\r","\r","            var value = round( offset * this._factor ) + this.get( MIN );\r","\r","            return round( this._nearestValue( value ) );\r","        },\r","\r","        /**\r","         * Converts a value into a pixel offset for use in positioning\r","         * the thumb according to the reverse of the\r","         * <code>_offsetToValue( xy )</code> operation.\r","         *\r","         * @method _valueToOffset\r","         * @param val { Number } The value to map to pixel X or Y position\r","         * @return { Number } The pixel offset \r","         * @protected\r","         */\r","        _valueToOffset: function ( value ) {\r","            var offset = round( ( value - this.get( MIN ) ) / this._factor );\r","\r","            return offset;\r","        },\r","\r","        /**\r","         * Returns the current value.  Override this if you want to introduce\r","         * output formatting. Otherwise equivalent to slider.get( \"value\" );\r","         *\r","         * @method getValue\r","         * @return {Number}\r","         */\r","        getValue: function () {\r","            return this.get( VALUE );\r","        },\r","\r","        /**\r","         * Updates the current value.  Override this if you want to introduce\r","         * input value parsing or preprocessing.  Otherwise equivalent to\r","         * slider.set( \"value\", v );\r","         *\r","         * @method setValue\r","         * @param val {Number} The new value\r","         * @return {Slider}\r","         * @chainable\r","         */\r","        setValue: function ( val ) {\r","            return this.set( VALUE, val );\r","        },\r","\r","        /**\r","         * Update position according to new min value.  If the new min results\r","         * in the current value being out of range, the value is set to the\r","         * closer of min or max.\r","         *\r","         * @method _afterMinChange\r","         * @param e { EventFacade } The <code>min</code> attribute change event.\r","         * @protected\r","         */\r","        _afterMinChange: function ( e ) {\r","            this._verifyValue();\r","\r","            this._syncThumbPosition();\r","        },\r","\r","        /**\r","         * Update position according to new max value.  If the new max results\r","         * in the current value being out of range, the value is set to the\r","         * closer of min or max.\r","         *\r","         * @method _afterMaxChange\r","         * @param e { EventFacade } The <code>max</code> attribute change event.\r","         * @protected\r","         */\r","        _afterMaxChange: function ( e ) {\r","            this._verifyValue();\r","\r","            this._syncThumbPosition();\r","        },\r","\r","        /**\r","         * Verifies that the current value is within the min - max range.  If\r","         * not, value is set to either min or max, depending on which is\r","         * closer.\r","         *\r","         * @method _verifyValue\r","         * @protected\r","         */\r","        _verifyValue: function () {\r","            var value   = this.get( VALUE ),\r","                nearest = this._nearestValue( value );\r","\r","            if ( value !== nearest ) {\r","                // @TODO Can/should valueChange, minChange, etc be queued\r","                // events? To make dd.set( 'min', n ); execute after minChange\r","                // subscribers before on/after valueChange subscribers.\r","                this.set( VALUE, nearest );\r","            }\r","        },\r","\r","        /**\r","         * Propagate change to the thumb position unless the change originated\r","         * from the thumbMove event.\r","         *\r","         * @method _afterValueChange\r","         * @param e { EventFacade } The <code>valueChange</code> event.\r","         * @protected\r","         */\r","        _afterValueChange: function ( e ) {\r","            var val = e.newVal;\r","            this._setPosition( val, { source: 'set' } );\r","        },\r","\r","        /**\r","         * Positions the thumb and its ARIA attributes in accordance with the \r","         * translated value.\r","         *\r","         * @method _setPosition\r","         * @param value {Number} Value to translate to a pixel position\r","         * @param [options] {Object} Details object to pass to `_uiMoveThumb`\r","         * @protected\r","         */\r","        _setPosition: function ( value, options ) {\r","            this._uiMoveThumb( this._valueToOffset( value ), options );\r","            this.thumb.set('aria-valuenow', value);\r","            this.thumb.set('aria-valuetext', value);\r","        },\r","\r","        /**\r","         * Validates new values assigned to <code>min</code> attribute.  Numbers\r","         * are acceptable.  Override this to enforce different rules.\r","         *\r","         * @method _validateNewMin\r","         * @param value {Any} Value assigned to <code>min</code> attribute.\r","         * @return {Boolean} True for numbers.  False otherwise.\r","         * @protected\r","         */\r","        _validateNewMin: function ( value ) {\r","            return Y.Lang.isNumber( value );\r","        },\r","\r","        /**\r","         * Validates new values assigned to <code>max</code> attribute.  Numbers\r","         * are acceptable.  Override this to enforce different rules.\r","         *\r","         * @method _validateNewMax\r","         * @param value { mixed } Value assigned to <code>max</code> attribute.\r","         * @return { Boolean } True for numbers.  False otherwise.\r","         * @protected\r","         */\r","        _validateNewMax: function ( value ) {\r","            return Y.Lang.isNumber( value );\r","        },\r","\r","        /**\r","         * Restricts new values assigned to <code>value</code> attribute to be\r","         * between the configured <code>min</code> and <code>max</code>.\r","         * Rounds to nearest integer value.\r","         *\r","         * @method _setNewValue\r","         * @param value { Number } Value assigned to <code>value</code> attribute\r","         * @return { Number } Normalized and constrained value\r","         * @protected\r","         */\r","        _setNewValue: function ( value ) {\r","            return round( this._nearestValue( value ) );\r","        },\r","\r","        /**\r","         * Returns the nearest valid value to the value input.  If the provided\r","         * value is outside the min - max range, accounting for min > max\r","         * scenarios, the nearest of either min or max is returned.  Otherwise,\r","         * the provided value is returned.\r","         *\r","         * @method _nearestValue\r","         * @param value { mixed } Value to test against current min - max range\r","         * @return { Number } Current min, max, or value if within range\r","         * @protected\r","         */\r","        _nearestValue: function ( value ) {\r","            var min = this.get( MIN ),\r","                max = this.get( MAX ),\r","                tmp;\r","\r","            // Account for reverse value range (min > max)\r","            tmp = ( max > min ) ? max : min;\r","            min = ( max > min ) ? min : max;\r","            max = tmp;\r","\r","            return ( value < min ) ?\r","                    min :\r","                    ( value > max ) ?\r","                        max :\r","                        value;\r","        }\r","\r","    },\r","\r","    /**\r","     * Attributes that will be added onto host class.\r","     *\r","     * @property ATTRS\r","     * @type {Object}\r","     * @static\r","     * @protected\r","     */\r","    ATTRS: {\r","        /**\r","         * The value associated with the farthest top, left position of the\r","         * rail.  Can be greater than the configured <code>max</code> if you\r","         * want values to increase from right-to-left or bottom-to-top.\r","         *\r","         * @attribute min\r","         * @type { Number }\r","         * @default 0\r","         */\r","        min: {\r","            value    : 0,\r","            validator: '_validateNewMin'\r","        },\r","\r","        /**\r","         * The value associated with the farthest bottom, right position of\r","         * the rail.  Can be less than the configured <code>min</code> if\r","         * you want values to increase from right-to-left or bottom-to-top.\r","         *\r","         * @attribute max\r","         * @type { Number }\r","         * @default 100\r","         */\r","        max: {\r","            value    : 100,\r","            validator: '_validateNewMax'\r","        },\r","        \r","        /**\r","         * amount to increment/decrement the Slider value\r","         * when the arrow up/down/left/right keys are pressed\r","         *\r","         * @attribute minorStep\r","         * @type {Number}\r","         * @default 1\r","         */\r","        minorStep : {\r","            value: 1\r","        },\r","\r","        /**\r","         * amount to increment/decrement the Slider value\r","         * when the page up/down keys are pressed\r","         *\r","         * @attribute majorStep\r","         * @type {Number}\r","         * @default 10\r","         */\r","        majorStep : {\r","            value: 10\r","        },\r","\r","        /**\r","         * The value associated with the thumb's current position on the\r","         * rail. Defaults to the value inferred from the thumb's current\r","         * position. Specifying value in the constructor will move the\r","         * thumb to the position that corresponds to the supplied value.\r","         *\r","         * @attribute value\r","         * @type { Number }\r","         * @default (inferred from current thumb position)\r","         */\r","        value: {\r","            value : 0,\r","            setter: '_setNewValue'\r","        }\r","    }\r","}, true );\r","","","}, '@VERSION@', {\"requires\": [\"slider-base\"]});","","}());"]};
}
var __cov_hPjVhmdw4NNLE4IFeTii3A = __coverage__['build/slider-value-range/slider-value-range.js'];
__cov_hPjVhmdw4NNLE4IFeTii3A.s['1']++;YUI.add('slider-value-range',function(Y,NAME){__cov_hPjVhmdw4NNLE4IFeTii3A.f['1']++;__cov_hPjVhmdw4NNLE4IFeTii3A.s['2']++;var MIN='min',MAX='max',VALUE='value',round=Math.round;__cov_hPjVhmdw4NNLE4IFeTii3A.s['3']++;function SliderValueRange(){__cov_hPjVhmdw4NNLE4IFeTii3A.f['2']++;__cov_hPjVhmdw4NNLE4IFeTii3A.s['4']++;this._initSliderValueRange();}__cov_hPjVhmdw4NNLE4IFeTii3A.s['5']++;Y.SliderValueRange=Y.mix(SliderValueRange,{prototype:{_factor:1,_initSliderValueRange:function(){__cov_hPjVhmdw4NNLE4IFeTii3A.f['3']++;},_bindValueLogic:function(){__cov_hPjVhmdw4NNLE4IFeTii3A.f['4']++;__cov_hPjVhmdw4NNLE4IFeTii3A.s['6']++;this.after({minChange:this._afterMinChange,maxChange:this._afterMaxChange,valueChange:this._afterValueChange});},_syncThumbPosition:function(){__cov_hPjVhmdw4NNLE4IFeTii3A.f['5']++;__cov_hPjVhmdw4NNLE4IFeTii3A.s['7']++;this._calculateFactor();__cov_hPjVhmdw4NNLE4IFeTii3A.s['8']++;this._setPosition(this.get(VALUE));},_calculateFactor:function(){__cov_hPjVhmdw4NNLE4IFeTii3A.f['6']++;__cov_hPjVhmdw4NNLE4IFeTii3A.s['9']++;var length=this.get('length'),thumbSize=this.thumb.getStyle(this._key.dim),min=this.get(MIN),max=this.get(MAX);__cov_hPjVhmdw4NNLE4IFeTii3A.s['10']++;length=(__cov_hPjVhmdw4NNLE4IFeTii3A.b['1'][0]++,parseFloat(length))||(__cov_hPjVhmdw4NNLE4IFeTii3A.b['1'][1]++,150);__cov_hPjVhmdw4NNLE4IFeTii3A.s['11']++;thumbSize=(__cov_hPjVhmdw4NNLE4IFeTii3A.b['2'][0]++,parseFloat(thumbSize))||(__cov_hPjVhmdw4NNLE4IFeTii3A.b['2'][1]++,15);__cov_hPjVhmdw4NNLE4IFeTii3A.s['12']++;this._factor=(max-min)/(length-thumbSize);},_defThumbMoveFn:function(e){__cov_hPjVhmdw4NNLE4IFeTii3A.f['7']++;__cov_hPjVhmdw4NNLE4IFeTii3A.s['13']++;if(e.source!=='set'){__cov_hPjVhmdw4NNLE4IFeTii3A.b['3'][0]++;__cov_hPjVhmdw4NNLE4IFeTii3A.s['14']++;this.set(VALUE,this._offsetToValue(e.offset));}else{__cov_hPjVhmdw4NNLE4IFeTii3A.b['3'][1]++;}},_offsetToValue:function(offset){__cov_hPjVhmdw4NNLE4IFeTii3A.f['8']++;__cov_hPjVhmdw4NNLE4IFeTii3A.s['15']++;var value=round(offset*this._factor)+this.get(MIN);__cov_hPjVhmdw4NNLE4IFeTii3A.s['16']++;return round(this._nearestValue(value));},_valueToOffset:function(value){__cov_hPjVhmdw4NNLE4IFeTii3A.f['9']++;__cov_hPjVhmdw4NNLE4IFeTii3A.s['17']++;var offset=round((value-this.get(MIN))/this._factor);__cov_hPjVhmdw4NNLE4IFeTii3A.s['18']++;return offset;},getValue:function(){__cov_hPjVhmdw4NNLE4IFeTii3A.f['10']++;__cov_hPjVhmdw4NNLE4IFeTii3A.s['19']++;return this.get(VALUE);},setValue:function(val){__cov_hPjVhmdw4NNLE4IFeTii3A.f['11']++;__cov_hPjVhmdw4NNLE4IFeTii3A.s['20']++;return this.set(VALUE,val);},_afterMinChange:function(e){__cov_hPjVhmdw4NNLE4IFeTii3A.f['12']++;__cov_hPjVhmdw4NNLE4IFeTii3A.s['21']++;this._verifyValue();__cov_hPjVhmdw4NNLE4IFeTii3A.s['22']++;this._syncThumbPosition();},_afterMaxChange:function(e){__cov_hPjVhmdw4NNLE4IFeTii3A.f['13']++;__cov_hPjVhmdw4NNLE4IFeTii3A.s['23']++;this._verifyValue();__cov_hPjVhmdw4NNLE4IFeTii3A.s['24']++;this._syncThumbPosition();},_verifyValue:function(){__cov_hPjVhmdw4NNLE4IFeTii3A.f['14']++;__cov_hPjVhmdw4NNLE4IFeTii3A.s['25']++;var value=this.get(VALUE),nearest=this._nearestValue(value);__cov_hPjVhmdw4NNLE4IFeTii3A.s['26']++;if(value!==nearest){__cov_hPjVhmdw4NNLE4IFeTii3A.b['4'][0]++;__cov_hPjVhmdw4NNLE4IFeTii3A.s['27']++;this.set(VALUE,nearest);}else{__cov_hPjVhmdw4NNLE4IFeTii3A.b['4'][1]++;}},_afterValueChange:function(e){__cov_hPjVhmdw4NNLE4IFeTii3A.f['15']++;__cov_hPjVhmdw4NNLE4IFeTii3A.s['28']++;var val=e.newVal;__cov_hPjVhmdw4NNLE4IFeTii3A.s['29']++;this._setPosition(val,{source:'set'});},_setPosition:function(value,options){__cov_hPjVhmdw4NNLE4IFeTii3A.f['16']++;__cov_hPjVhmdw4NNLE4IFeTii3A.s['30']++;this._uiMoveThumb(this._valueToOffset(value),options);__cov_hPjVhmdw4NNLE4IFeTii3A.s['31']++;this.thumb.set('aria-valuenow',value);__cov_hPjVhmdw4NNLE4IFeTii3A.s['32']++;this.thumb.set('aria-valuetext',value);},_validateNewMin:function(value){__cov_hPjVhmdw4NNLE4IFeTii3A.f['17']++;__cov_hPjVhmdw4NNLE4IFeTii3A.s['33']++;return Y.Lang.isNumber(value);},_validateNewMax:function(value){__cov_hPjVhmdw4NNLE4IFeTii3A.f['18']++;__cov_hPjVhmdw4NNLE4IFeTii3A.s['34']++;return Y.Lang.isNumber(value);},_setNewValue:function(value){__cov_hPjVhmdw4NNLE4IFeTii3A.f['19']++;__cov_hPjVhmdw4NNLE4IFeTii3A.s['35']++;return round(this._nearestValue(value));},_nearestValue:function(value){__cov_hPjVhmdw4NNLE4IFeTii3A.f['20']++;__cov_hPjVhmdw4NNLE4IFeTii3A.s['36']++;var min=this.get(MIN),max=this.get(MAX),tmp;__cov_hPjVhmdw4NNLE4IFeTii3A.s['37']++;tmp=max>min?(__cov_hPjVhmdw4NNLE4IFeTii3A.b['5'][0]++,max):(__cov_hPjVhmdw4NNLE4IFeTii3A.b['5'][1]++,min);__cov_hPjVhmdw4NNLE4IFeTii3A.s['38']++;min=max>min?(__cov_hPjVhmdw4NNLE4IFeTii3A.b['6'][0]++,min):(__cov_hPjVhmdw4NNLE4IFeTii3A.b['6'][1]++,max);__cov_hPjVhmdw4NNLE4IFeTii3A.s['39']++;max=tmp;__cov_hPjVhmdw4NNLE4IFeTii3A.s['40']++;return value<min?(__cov_hPjVhmdw4NNLE4IFeTii3A.b['7'][0]++,min):(__cov_hPjVhmdw4NNLE4IFeTii3A.b['7'][1]++,value>max?(__cov_hPjVhmdw4NNLE4IFeTii3A.b['8'][0]++,max):(__cov_hPjVhmdw4NNLE4IFeTii3A.b['8'][1]++,value));}},ATTRS:{min:{value:0,validator:'_validateNewMin'},max:{value:100,validator:'_validateNewMax'},minorStep:{value:1},majorStep:{value:10},value:{value:0,setter:'_setNewValue'}}},true);},'@VERSION@',{'requires':['slider-base']});
