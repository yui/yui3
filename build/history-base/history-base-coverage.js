if (typeof __coverage__ === 'undefined') { __coverage__ = {}; }
if (!__coverage__['build/history-base/history-base.js']) {
   __coverage__['build/history-base/history-base.js'] = {"path":"build/history-base/history-base.js","s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0},"b":{"1":[0,0],"2":[0,0,0,0,0,0,0],"3":[0,0,0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":24},"end":{"line":1,"column":43}}},"2":{"name":"HistoryBase","line":57,"loc":{"start":{"line":57,"column":0},"end":{"line":57,"column":23}}},"3":{"name":"_isSimpleObject","line":83,"loc":{"start":{"line":83,"column":0},"end":{"line":83,"column":32}}},"4":{"name":"(anonymous_4)","line":168,"loc":{"start":{"line":168,"column":11},"end":{"line":168,"column":29}}},"5":{"name":"(anonymous_5)","line":295,"loc":{"start":{"line":295,"column":9},"end":{"line":295,"column":21}}},"6":{"name":"(anonymous_6)","line":315,"loc":{"start":{"line":315,"column":14},"end":{"line":315,"column":45}}},"7":{"name":"(anonymous_7)","line":331,"loc":{"start":{"line":331,"column":9},"end":{"line":331,"column":24}}},"8":{"name":"(anonymous_8)","line":353,"loc":{"start":{"line":353,"column":13},"end":{"line":353,"column":25}}},"9":{"name":"(anonymous_9)","line":371,"loc":{"start":{"line":371,"column":18},"end":{"line":371,"column":49}}},"10":{"name":"(anonymous_10)","line":392,"loc":{"start":{"line":392,"column":13},"end":{"line":392,"column":44}}},"11":{"name":"(anonymous_11)","line":416,"loc":{"start":{"line":416,"column":17},"end":{"line":416,"column":50}}},"12":{"name":"(anonymous_12)","line":428,"loc":{"start":{"line":428,"column":34},"end":{"line":428,"column":56}}},"13":{"name":"(anonymous_13)","line":432,"loc":{"start":{"line":432,"column":34},"end":{"line":432,"column":56}}},"14":{"name":"(anonymous_14)","line":448,"loc":{"start":{"line":448,"column":22},"end":{"line":448,"column":49}}},"15":{"name":"(anonymous_15)","line":506,"loc":{"start":{"line":506,"column":22},"end":{"line":506,"column":49}}},"16":{"name":"(anonymous_16)","line":559,"loc":{"start":{"line":559,"column":21},"end":{"line":559,"column":55}}},"17":{"name":"(anonymous_17)","line":570,"loc":{"start":{"line":570,"column":31},"end":{"line":570,"column":54}}},"18":{"name":"(anonymous_18)","line":584,"loc":{"start":{"line":584,"column":32},"end":{"line":584,"column":56}}},"19":{"name":"(anonymous_19)","line":617,"loc":{"start":{"line":617,"column":17},"end":{"line":617,"column":42}}},"20":{"name":"(anonymous_20)","line":632,"loc":{"start":{"line":632,"column":18},"end":{"line":632,"column":31}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":640,"column":56}},"2":{"start":{"line":43,"column":0},"end":{"line":55,"column":32}},"3":{"start":{"line":57,"column":0},"end":{"line":59,"column":1}},"4":{"start":{"line":58,"column":4},"end":{"line":58,"column":38}},"5":{"start":{"line":61,"column":0},"end":{"line":66,"column":3}},"6":{"start":{"line":68,"column":0},"end":{"line":70,"column":1}},"7":{"start":{"line":69,"column":4},"end":{"line":69,"column":26}},"8":{"start":{"line":83,"column":0},"end":{"line":85,"column":1}},"9":{"start":{"line":84,"column":4},"end":{"line":84,"column":41}},"10":{"start":{"line":96,"column":0},"end":{"line":96,"column":33}},"11":{"start":{"line":107,"column":0},"end":{"line":107,"column":30}},"12":{"start":{"line":118,"column":0},"end":{"line":118,"column":38}},"13":{"start":{"line":131,"column":0},"end":{"line":133,"column":48}},"14":{"start":{"line":154,"column":0},"end":{"line":155,"column":34}},"15":{"start":{"line":157,"column":0},"end":{"line":635,"column":9}},"16":{"start":{"line":169,"column":8},"end":{"line":169,"column":25}},"17":{"start":{"line":180,"column":8},"end":{"line":180,"column":45}},"18":{"start":{"line":190,"column":9},"end":{"line":190,"column":37}},"19":{"start":{"line":204,"column":8},"end":{"line":205,"column":44}},"20":{"start":{"line":254,"column":8},"end":{"line":257,"column":11}},"21":{"start":{"line":260,"column":8},"end":{"line":262,"column":9}},"22":{"start":{"line":261,"column":12},"end":{"line":261,"column":39}},"23":{"start":{"line":296,"column":8},"end":{"line":296,"column":46}},"24":{"start":{"line":297,"column":8},"end":{"line":297,"column":30}},"25":{"start":{"line":298,"column":8},"end":{"line":298,"column":46}},"26":{"start":{"line":316,"column":8},"end":{"line":316,"column":23}},"27":{"start":{"line":317,"column":8},"end":{"line":317,"column":27}},"28":{"start":{"line":318,"column":8},"end":{"line":318,"column":53}},"29":{"start":{"line":332,"column":8},"end":{"line":333,"column":46}},"30":{"start":{"line":335,"column":8},"end":{"line":339,"column":9}},"31":{"start":{"line":336,"column":12},"end":{"line":336,"column":77}},"32":{"start":{"line":338,"column":12},"end":{"line":338,"column":61}},"33":{"start":{"line":354,"column":8},"end":{"line":354,"column":46}},"34":{"start":{"line":355,"column":8},"end":{"line":355,"column":34}},"35":{"start":{"line":356,"column":8},"end":{"line":356,"column":46}},"36":{"start":{"line":372,"column":8},"end":{"line":372,"column":23}},"37":{"start":{"line":373,"column":8},"end":{"line":373,"column":27}},"38":{"start":{"line":374,"column":8},"end":{"line":374,"column":57}},"39":{"start":{"line":393,"column":8},"end":{"line":393,"column":80}},"40":{"start":{"line":395,"column":8},"end":{"line":398,"column":9}},"41":{"start":{"line":397,"column":12},"end":{"line":397,"column":53}},"42":{"start":{"line":400,"column":8},"end":{"line":400,"column":50}},"43":{"start":{"line":401,"column":8},"end":{"line":401,"column":20}},"44":{"start":{"line":418,"column":8},"end":{"line":425,"column":11}},"45":{"start":{"line":428,"column":8},"end":{"line":430,"column":17}},"46":{"start":{"line":429,"column":12},"end":{"line":429,"column":51}},"47":{"start":{"line":432,"column":8},"end":{"line":434,"column":17}},"48":{"start":{"line":433,"column":12},"end":{"line":433,"column":51}},"49":{"start":{"line":489,"column":8},"end":{"line":493,"column":11}},"50":{"start":{"line":540,"column":8},"end":{"line":543,"column":11}},"51":{"start":{"line":560,"column":8},"end":{"line":563,"column":27}},"52":{"start":{"line":565,"column":8},"end":{"line":565,"column":36}},"53":{"start":{"line":566,"column":8},"end":{"line":566,"column":36}},"54":{"start":{"line":568,"column":8},"end":{"line":593,"column":9}},"55":{"start":{"line":570,"column":12},"end":{"line":581,"column":21}},"56":{"start":{"line":571,"column":16},"end":{"line":571,"column":45}},"57":{"start":{"line":573,"column":16},"end":{"line":580,"column":17}},"58":{"start":{"line":574,"column":20},"end":{"line":577,"column":22}},"59":{"start":{"line":579,"column":20},"end":{"line":579,"column":37}},"60":{"start":{"line":584,"column":12},"end":{"line":590,"column":21}},"61":{"start":{"line":585,"column":16},"end":{"line":589,"column":17}},"62":{"start":{"line":586,"column":20},"end":{"line":586,"column":41}},"63":{"start":{"line":587,"column":20},"end":{"line":587,"column":43}},"64":{"start":{"line":588,"column":20},"end":{"line":588,"column":37}},"65":{"start":{"line":592,"column":12},"end":{"line":592,"column":47}},"66":{"start":{"line":595,"column":8},"end":{"line":602,"column":9}},"67":{"start":{"line":596,"column":12},"end":{"line":601,"column":24}},"68":{"start":{"line":620,"column":8},"end":{"line":620,"column":42}},"69":{"start":{"line":633,"column":8},"end":{"line":633,"column":54}},"70":{"start":{"line":637,"column":0},"end":{"line":637,"column":28}}},"branchMap":{"1":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":0},"end":{"line":68,"column":0}},{"start":{"line":68,"column":0},"end":{"line":68,"column":0}}]},"2":{"line":131,"type":"binary-expr","locations":[{"start":{"line":131,"column":23},"end":{"line":131,"column":34}},{"start":{"line":131,"column":38},"end":{"line":131,"column":59}},{"start":{"line":132,"column":8},"end":{"line":132,"column":32}},{"start":{"line":132,"column":37},"end":{"line":132,"column":56}},{"start":{"line":132,"column":60},"end":{"line":132,"column":75}},{"start":{"line":133,"column":9},"end":{"line":133,"column":22}},{"start":{"line":133,"column":26},"end":{"line":133,"column":45}}]},"3":{"line":154,"type":"binary-expr","locations":[{"start":{"line":154,"column":32},"end":{"line":154,"column":53}},{"start":{"line":154,"column":57},"end":{"line":154,"column":78}},{"start":{"line":155,"column":9},"end":{"line":155,"column":17}},{"start":{"line":155,"column":21},"end":{"line":155,"column":32}}]},"4":{"line":180,"type":"binary-expr","locations":[{"start":{"line":180,"column":32},"end":{"line":180,"column":38}},{"start":{"line":180,"column":42},"end":{"line":180,"column":44}}]},"5":{"line":204,"type":"binary-expr","locations":[{"start":{"line":204,"column":44},"end":{"line":204,"column":62}},{"start":{"line":205,"column":16},"end":{"line":205,"column":35}},{"start":{"line":205,"column":39},"end":{"line":205,"column":43}}]},"6":{"line":260,"type":"if","locations":[{"start":{"line":260,"column":8},"end":{"line":260,"column":8}},{"start":{"line":260,"column":8},"end":{"line":260,"column":8}}]},"7":{"line":335,"type":"if","locations":[{"start":{"line":335,"column":8},"end":{"line":335,"column":8}},{"start":{"line":335,"column":8},"end":{"line":335,"column":8}}]},"8":{"line":336,"type":"cond-expr","locations":[{"start":{"line":336,"column":54},"end":{"line":336,"column":64}},{"start":{"line":336,"column":67},"end":{"line":336,"column":76}}]},"9":{"line":336,"type":"binary-expr","locations":[{"start":{"line":336,"column":19},"end":{"line":336,"column":27}},{"start":{"line":336,"column":31},"end":{"line":336,"column":51}}]},"10":{"line":338,"type":"cond-expr","locations":[{"start":{"line":338,"column":30},"end":{"line":338,"column":52}},{"start":{"line":338,"column":55},"end":{"line":338,"column":60}}]},"11":{"line":393,"type":"cond-expr","locations":[{"start":{"line":393,"column":28},"end":{"line":393,"column":61}},{"start":{"line":393,"column":64},"end":{"line":393,"column":79}}]},"12":{"line":395,"type":"if","locations":[{"start":{"line":395,"column":8},"end":{"line":395,"column":8}},{"start":{"line":395,"column":8},"end":{"line":395,"column":8}}]},"13":{"line":395,"type":"binary-expr","locations":[{"start":{"line":395,"column":12},"end":{"line":395,"column":25}},{"start":{"line":395,"column":29},"end":{"line":395,"column":51}},{"start":{"line":396,"column":16},"end":{"line":396,"column":49}}]},"14":{"line":565,"type":"binary-expr","locations":[{"start":{"line":565,"column":8},"end":{"line":565,"column":16}},{"start":{"line":565,"column":21},"end":{"line":565,"column":34}}]},"15":{"line":566,"type":"binary-expr","locations":[{"start":{"line":566,"column":8},"end":{"line":566,"column":15}},{"start":{"line":566,"column":21},"end":{"line":566,"column":34}}]},"16":{"line":568,"type":"if","locations":[{"start":{"line":568,"column":8},"end":{"line":568,"column":8}},{"start":{"line":568,"column":8},"end":{"line":568,"column":8}}]},"17":{"line":568,"type":"binary-expr","locations":[{"start":{"line":568,"column":12},"end":{"line":568,"column":37}},{"start":{"line":568,"column":41},"end":{"line":568,"column":67}}]},"18":{"line":573,"type":"if","locations":[{"start":{"line":573,"column":16},"end":{"line":573,"column":16}},{"start":{"line":573,"column":16},"end":{"line":573,"column":16}}]},"19":{"line":585,"type":"if","locations":[{"start":{"line":585,"column":16},"end":{"line":585,"column":16}},{"start":{"line":585,"column":16},"end":{"line":585,"column":16}}]},"20":{"line":585,"type":"binary-expr","locations":[{"start":{"line":585,"column":20},"end":{"line":585,"column":44}},{"start":{"line":585,"column":48},"end":{"line":585,"column":70}}]},"21":{"line":595,"type":"if","locations":[{"start":{"line":595,"column":8},"end":{"line":595,"column":8}},{"start":{"line":595,"column":8},"end":{"line":595,"column":8}}]},"22":{"line":595,"type":"binary-expr","locations":[{"start":{"line":595,"column":12},"end":{"line":595,"column":21}},{"start":{"line":595,"column":25},"end":{"line":595,"column":35}}]},"23":{"line":620,"type":"binary-expr","locations":[{"start":{"line":620,"column":27},"end":{"line":620,"column":35}},{"start":{"line":620,"column":39},"end":{"line":620,"column":41}}]}},"code":["(function () { YUI.add('history-base', function (Y, NAME) {","","/**\r"," * Provides browser history management functionality using a simple\r"," * add/replace/get paradigm. This can be used to ensure that the browser's back\r"," * and forward buttons work as the user expects and to provide bookmarkable URLs\r"," * that return the user to the current application state, even in an Ajax\r"," * application that doesn't perform full-page refreshes.\r"," *\r"," * @module history\r"," * @main history\r"," * @since 3.2.0\r"," */\r","\r","/**\r"," * Provides global state management backed by an object, but with no browser\r"," * history integration. For actual browser history integration and back/forward\r"," * support, use the history-html5 or history-hash modules.\r"," *\r"," * @module history\r"," * @submodule history-base\r"," * @class HistoryBase\r"," * @uses EventTarget\r"," * @constructor\r"," * @param {Object} config (optional) configuration object, which may contain\r"," *   zero or more of the following properties:\r"," *\r"," * <dl>\r"," *   <dt>force (Boolean)</dt>\r"," *   <dd>\r"," *     If `true`, a `history:change` event will be fired whenever the URL\r"," *     changes, even if there is no associated state change. Default is `false`.\r"," *   </dd>\r"," *\r"," *   <dt>initialState (Object)</dt>\r"," *   <dd>\r"," *     Initial state to set, as an object hash of key/value pairs. This will be\r"," *     merged into the current global state.\r"," *   </dd>\r"," * </dl>\r"," */\r","\r","var Lang      = Y.Lang,\r","    Obj       = Y.Object,\r","    GlobalEnv = YUI.namespace('Env.History'),\r","    YArray    = Y.Array,\r","\r","    doc       = Y.config.doc,\r","    docMode   = doc.documentMode,\r","    win       = Y.config.win,\r","\r","    DEFAULT_OPTIONS = {merge: true},\r","    EVT_CHANGE      = 'change',\r","    SRC_ADD         = 'add',\r","    SRC_REPLACE     = 'replace';\r","\r","function HistoryBase() {\r","    this._init.apply(this, arguments);\r","}\r","\r","Y.augment(HistoryBase, Y.EventTarget, null, null, {\r","    emitFacade : true,\r","    prefix     : 'history',\r","    preventable: false,\r","    queueable  : true\r","});\r","\r","if (!GlobalEnv._state) {\r","    GlobalEnv._state = {};\r","}\r","\r","// -- Private Methods ----------------------------------------------------------\r","\r","/**\r"," * Returns <code>true</code> if <i>value</i> is a simple object and not a\r"," * function or an array.\r"," *\r"," * @method _isSimpleObject\r"," * @param {mixed} value\r"," * @return {Boolean}\r"," * @private\r"," */\r","function _isSimpleObject(value) {\r","    return Lang.type(value) === 'object';\r","}\r","\r","// -- Public Static Properties -------------------------------------------------\r","\r","/**\r"," * Name of this component.\r"," *\r"," * @property NAME\r"," * @type String\r"," * @static\r"," */\r","HistoryBase.NAME = 'historyBase';\r","\r","/**\r"," * Constant used to identify state changes originating from the\r"," * <code>add()</code> method.\r"," *\r"," * @property SRC_ADD\r"," * @type String\r"," * @static\r"," * @final\r"," */\r","HistoryBase.SRC_ADD = SRC_ADD;\r","\r","/**\r"," * Constant used to identify state changes originating from the\r"," * <code>replace()</code> method.\r"," *\r"," * @property SRC_REPLACE\r"," * @type String\r"," * @static\r"," * @final\r"," */\r","HistoryBase.SRC_REPLACE = SRC_REPLACE;\r","\r","/**\r"," * Whether or not this browser supports the HTML5 History API.\r"," *\r"," * @property html5\r"," * @type Boolean\r"," * @static\r"," */\r","\r","// All HTML5-capable browsers except Gecko 2+ (Firefox 4+) correctly return\r","// true for 'onpopstate' in win. In order to support Gecko 2, we fall back to a\r","// UA sniff for now. (current as of Firefox 4.0b2)\r","HistoryBase.html5 = !!(win.history && win.history.pushState &&\r","        win.history.replaceState && ('onpopstate' in win || Y.UA.gecko >= 2) &&\r","        (!Y.UA.android || Y.UA.android >= 2.4));\r","\r","/**\r"," * Whether or not this browser supports the <code>window.onhashchange</code>\r"," * event natively. Note that even if this is <code>true</code>, you may\r"," * still want to use HistoryHash's synthetic <code>hashchange</code> event\r"," * since it normalizes implementation differences and fixes spec violations\r"," * across various browsers.\r"," *\r"," * @property nativeHashChange\r"," * @type Boolean\r"," * @static\r"," */\r","\r","// Most browsers that support hashchange expose it on the window. Opera 10.6+\r","// exposes it on the document (but you can still attach to it on the window).\r","//\r","// IE8 supports the hashchange event, but only in IE8 Standards\r","// Mode. However, IE8 in IE7 compatibility mode still defines the\r","// event but never fires it, so we can't just detect the event. We also can't\r","// just UA sniff for IE8, since other browsers support this event as well.\r","HistoryBase.nativeHashChange = ('onhashchange' in win || 'onhashchange' in doc) &&\r","        (!docMode || docMode > 7);\r","\r","Y.mix(HistoryBase.prototype, {\r","    // -- Initialization -------------------------------------------------------\r","\r","    /**\r","     * Initializes this HistoryBase instance. This method is called by the\r","     * constructor.\r","     *\r","     * @method _init\r","     * @param {Object} config configuration object\r","     * @protected\r","     */\r","    _init: function (config) {\r","        var initialState;\r","\r","        /**\r","         * Configuration object provided by the user on instantiation, or an\r","         * empty object if one wasn't provided.\r","         *\r","         * @property _config\r","         * @type Object\r","         * @default {}\r","         * @protected\r","         */\r","        config = this._config = config || {};\r","\r","        /**\r","         * If `true`, a `history:change` event will be fired whenever the URL\r","         * changes, even if there is no associated state change.\r","         *\r","         * @property force\r","         * @type Boolean\r","         * @default false\r","         */\r","         this.force = !!config.force;\r","\r","        /**\r","         * Resolved initial state: a merge of the user-supplied initial state\r","         * (if any) and any initial state provided by a subclass. This may\r","         * differ from <code>_config.initialState</code>. If neither the config\r","         * nor a subclass supplies an initial state, this property will be\r","         * <code>null</code>.\r","         *\r","         * @property _initialState\r","         * @type Object|null\r","         * @default {}\r","         * @protected\r","         */\r","        initialState = this._initialState = this._initialState ||\r","                config.initialState || null;\r","\r","        /**\r","         * Fired when the state changes. To be notified of all state changes\r","         * regardless of the History or YUI instance that generated them,\r","         * subscribe to this event on <code>Y.Global</code>. If you would rather\r","         * be notified only about changes generated by this specific History\r","         * instance, subscribe to this event on the instance.\r","         *\r","         * @event history:change\r","         * @param {EventFacade} e Event facade with the following additional\r","         *   properties:\r","         *\r","         * <dl>\r","         *   <dt>changed (Object)</dt>\r","         *   <dd>\r","         *     Object hash of state items that have been added or changed. The\r","         *     key is the item key, and the value is an object containing\r","         *     <code>newVal</code> and <code>prevVal</code> properties\r","         *     representing the values of the item both before and after the\r","         *     change. If the item was newly added, <code>prevVal</code> will be\r","         *     <code>undefined</code>.\r","         *   </dd>\r","         *\r","         *   <dt>newVal (Object)</dt>\r","         *   <dd>\r","         *     Object hash of key/value pairs of all state items after the\r","         *     change.\r","         *   </dd>\r","         *\r","         *   <dt>prevVal (Object)</dt>\r","         *   <dd>\r","         *     Object hash of key/value pairs of all state items before the\r","         *     change.\r","         *   </dd>\r","         *\r","         *   <dt>removed (Object)</dt>\r","         *   <dd>\r","         *     Object hash of key/value pairs of state items that have been\r","         *     removed. Values are the old values prior to removal.\r","         *   </dd>\r","         *\r","         *   <dt>src (String)</dt>\r","         *   <dd>\r","         *     The source of the event. This can be used to selectively ignore\r","         *     events generated by certain sources.\r","         *   </dd>\r","         * </dl>\r","         */\r","        this.publish(EVT_CHANGE, {\r","            broadcast: 2,\r","            defaultFn: this._defChangeFn\r","        });\r","\r","        // If initialState was provided, merge it into the current state.\r","        if (initialState) {\r","            this.replace(initialState);\r","        }\r","    },\r","\r","    // -- Public Methods -------------------------------------------------------\r","\r","    /**\r","     * Adds a state entry with new values for the specified keys. By default,\r","     * the new state will be merged into the existing state, and new values will\r","     * override existing values. Specifying a <code>null</code> or\r","     * <code>undefined</code> value will cause that key to be removed from the\r","     * new state entry.\r","     *\r","     * @method add\r","     * @param {Object} state Object hash of key/value pairs.\r","     * @param {Object} options (optional) Zero or more of the following options:\r","     *   <dl>\r","     *     <dt>merge (Boolean)</dt>\r","     *     <dd>\r","     *       <p>\r","     *       If <code>true</code> (the default), the new state will be merged\r","     *       into the existing state. New values will override existing values,\r","     *       and <code>null</code> or <code>undefined</code> values will be\r","     *       removed from the state.\r","     *       </p>\r","     *\r","     *       <p>\r","     *       If <code>false</code>, the existing state will be discarded as a\r","     *       whole and the new state will take its place.\r","     *       </p>\r","     *     </dd>\r","     *   </dl>\r","     * @chainable\r","     */\r","    add: function () {\r","        var args = YArray(arguments, 0, true);\r","        args.unshift(SRC_ADD);\r","        return this._change.apply(this, args);\r","    },\r","\r","    /**\r","     * Adds a state entry with a new value for a single key. By default, the new\r","     * value will be merged into the existing state values, and will override an\r","     * existing value with the same key if there is one. Specifying a\r","     * <code>null</code> or <code>undefined</code> value will cause the key to\r","     * be removed from the new state entry.\r","     *\r","     * @method addValue\r","     * @param {String} key State parameter key.\r","     * @param {String} value New value.\r","     * @param {Object} options (optional) Zero or more options. See\r","     *   <code>add()</code> for a list of supported options.\r","     * @chainable\r","     */\r","    addValue: function (key, value, options) {\r","        var state = {};\r","        state[key] = value;\r","        return this._change(SRC_ADD, state, options);\r","    },\r","\r","    /**\r","     * Returns the current value of the state parameter specified by <i>key</i>,\r","     * or an object hash of key/value pairs for all current state parameters if\r","     * no key is specified.\r","     *\r","     * @method get\r","     * @param {String} key (optional) State parameter key.\r","     * @return {Object|String} Value of the specified state parameter, or an\r","     *   object hash of key/value pairs for all current state parameters.\r","     */\r","    get: function (key) {\r","        var state    = GlobalEnv._state,\r","            isObject = _isSimpleObject(state);\r","\r","        if (key) {\r","            return isObject && Obj.owns(state, key) ? state[key] : undefined;\r","        } else {\r","            return isObject ? Y.mix({}, state, true) : state; // mix provides a fast shallow clone.\r","        }\r","    },\r","\r","    /**\r","     * Same as <code>add()</code> except that a new browser history entry will\r","     * not be created. Instead, the current history entry will be replaced with\r","     * the new state.\r","     *\r","     * @method replace\r","     * @param {Object} state Object hash of key/value pairs.\r","     * @param {Object} options (optional) Zero or more options. See\r","     *   <code>add()</code> for a list of supported options.\r","     * @chainable\r","     */\r","    replace: function () {\r","        var args = YArray(arguments, 0, true);\r","        args.unshift(SRC_REPLACE);\r","        return this._change.apply(this, args);\r","    },\r","\r","    /**\r","     * Same as <code>addValue()</code> except that a new browser history entry\r","     * will not be created. Instead, the current history entry will be replaced\r","     * with the new state.\r","     *\r","     * @method replaceValue\r","     * @param {String} key State parameter key.\r","     * @param {String} value New value.\r","     * @param {Object} options (optional) Zero or more options. See\r","     *   <code>add()</code> for a list of supported options.\r","     * @chainable\r","     */\r","    replaceValue: function (key, value, options) {\r","        var state = {};\r","        state[key] = value;\r","        return this._change(SRC_REPLACE, state, options);\r","    },\r","\r","    // -- Protected Methods ----------------------------------------------------\r","\r","    /**\r","     * Changes the state. This method provides a common implementation shared by\r","     * the public methods for changing state.\r","     *\r","     * @method _change\r","     * @param {String} src Source of the change, for inclusion in event facades\r","     *   to facilitate filtering.\r","     * @param {Object} state Object hash of key/value pairs.\r","     * @param {Object} options (optional) Zero or more options. See\r","     *   <code>add()</code> for a list of supported options.\r","     * @protected\r","     * @chainable\r","     */\r","    _change: function (src, state, options) {\r","        options = options ? Y.merge(DEFAULT_OPTIONS, options) : DEFAULT_OPTIONS;\r","\r","        if (options.merge && _isSimpleObject(state) &&\r","                _isSimpleObject(GlobalEnv._state)) {\r","            state = Y.merge(GlobalEnv._state, state);\r","        }\r","\r","        this._resolveChanges(src, state, options);\r","        return this;\r","    },\r","\r","    /**\r","     * Called by _resolveChanges() when the state has changed. This method takes\r","     * care of actually firing the necessary events.\r","     *\r","     * @method _fireEvents\r","     * @param {String} src Source of the changes, for inclusion in event facades\r","     *   to facilitate filtering.\r","     * @param {Object} changes Resolved changes.\r","     * @param {Object} options Zero or more options. See <code>add()</code> for\r","     *   a list of supported options.\r","     * @protected\r","     */\r","    _fireEvents: function (src, changes, options) {\r","        // Fire the global change event.\r","        this.fire(EVT_CHANGE, {\r","            _options: options,\r","            changed : changes.changed,\r","            newVal  : changes.newState,\r","            prevVal : changes.prevState,\r","            removed : changes.removed,\r","            src     : src\r","        });\r","\r","        // Fire change/remove events for individual items.\r","        Obj.each(changes.changed, function (value, key) {\r","            this._fireChangeEvent(src, key, value);\r","        }, this);\r","\r","        Obj.each(changes.removed, function (value, key) {\r","            this._fireRemoveEvent(src, key, value);\r","        }, this);\r","    },\r","\r","    /**\r","     * Fires a dynamic \"[key]Change\" event.\r","     *\r","     * @method _fireChangeEvent\r","     * @param {String} src source of the change, for inclusion in event facades\r","     *   to facilitate filtering\r","     * @param {String} key key of the item that was changed\r","     * @param {Object} value object hash containing <i>newVal</i> and\r","     *   <i>prevVal</i> properties for the changed item\r","     * @protected\r","     */\r","    _fireChangeEvent: function (src, key, value) {\r","        /**\r","         * <p>\r","         * Dynamic event fired when an individual history item is added or\r","         * changed. The name of this event depends on the name of the key that\r","         * changed. To listen to change events for a key named \"foo\", subscribe\r","         * to the <code>fooChange</code> event; for a key named \"bar\", subscribe\r","         * to <code>barChange</code>, etc.\r","         * </p>\r","         *\r","         * <p>\r","         * Key-specific events are only fired for instance-level changes; that\r","         * is, changes that were made via the same History instance on which the\r","         * event is subscribed. To be notified of changes made by other History\r","         * instances, subscribe to the global <code>history:change</code> event.\r","         * </p>\r","         *\r","         * @event [key]Change\r","         * @param {EventFacade} e Event facade with the following additional\r","         *   properties:\r","         *\r","         * <dl>\r","         *   <dt>newVal (mixed)</dt>\r","         *   <dd>\r","         *     The new value of the item after the change.\r","         *   </dd>\r","         *\r","         *   <dt>prevVal (mixed)</dt>\r","         *   <dd>\r","         *     The previous value of the item before the change, or\r","         *     <code>undefined</code> if the item was just added and has no\r","         *     previous value.\r","         *   </dd>\r","         *\r","         *   <dt>src (String)</dt>\r","         *   <dd>\r","         *     The source of the event. This can be used to selectively ignore\r","         *     events generated by certain sources.\r","         *   </dd>\r","         * </dl>\r","         */\r","        this.fire(key + 'Change', {\r","            newVal : value.newVal,\r","            prevVal: value.prevVal,\r","            src    : src\r","        });\r","    },\r","\r","    /**\r","     * Fires a dynamic \"[key]Remove\" event.\r","     *\r","     * @method _fireRemoveEvent\r","     * @param {String} src source of the change, for inclusion in event facades\r","     *   to facilitate filtering\r","     * @param {String} key key of the item that was removed\r","     * @param {mixed} value value of the item prior to its removal\r","     * @protected\r","     */\r","    _fireRemoveEvent: function (src, key, value) {\r","        /**\r","         * <p>\r","         * Dynamic event fired when an individual history item is removed. The\r","         * name of this event depends on the name of the key that was removed.\r","         * To listen to remove events for a key named \"foo\", subscribe to the\r","         * <code>fooRemove</code> event; for a key named \"bar\", subscribe to\r","         * <code>barRemove</code>, etc.\r","         * </p>\r","         *\r","         * <p>\r","         * Key-specific events are only fired for instance-level changes; that\r","         * is, changes that were made via the same History instance on which the\r","         * event is subscribed. To be notified of changes made by other History\r","         * instances, subscribe to the global <code>history:change</code> event.\r","         * </p>\r","         *\r","         * @event [key]Remove\r","         * @param {EventFacade} e Event facade with the following additional\r","         *   properties:\r","         *\r","         * <dl>\r","         *   <dt>prevVal (mixed)</dt>\r","         *   <dd>\r","         *     The value of the item before it was removed.\r","         *   </dd>\r","         *\r","         *   <dt>src (String)</dt>\r","         *   <dd>\r","         *     The source of the event. This can be used to selectively ignore\r","         *     events generated by certain sources.\r","         *   </dd>\r","         * </dl>\r","         */\r","        this.fire(key + 'Remove', {\r","            prevVal: value,\r","            src    : src\r","        });\r","    },\r","\r","    /**\r","     * Resolves the changes (if any) between <i>newState</i> and the current\r","     * state and fires appropriate events if things have changed.\r","     *\r","     * @method _resolveChanges\r","     * @param {String} src source of the changes, for inclusion in event facades\r","     *   to facilitate filtering\r","     * @param {Object} newState object hash of key/value pairs representing the\r","     *   new state\r","     * @param {Object} options Zero or more options. See <code>add()</code> for\r","     *   a list of supported options.\r","     * @protected\r","     */\r","    _resolveChanges: function (src, newState, options) {\r","        var changed   = {},\r","            isChanged,\r","            prevState = GlobalEnv._state,\r","            removed   = {};\r","\r","        newState || (newState = {});\r","        options  || (options  = {});\r","\r","        if (_isSimpleObject(newState) && _isSimpleObject(prevState)) {\r","            // Figure out what was added or changed.\r","            Obj.each(newState, function (newVal, key) {\r","                var prevVal = prevState[key];\r","\r","                if (newVal !== prevVal) {\r","                    changed[key] = {\r","                        newVal : newVal,\r","                        prevVal: prevVal\r","                    };\r","\r","                    isChanged = true;\r","                }\r","            }, this);\r","\r","            // Figure out what was removed.\r","            Obj.each(prevState, function (prevVal, key) {\r","                if (!Obj.owns(newState, key) || newState[key] === null) {\r","                    delete newState[key];\r","                    removed[key] = prevVal;\r","                    isChanged = true;\r","                }\r","            }, this);\r","        } else {\r","            isChanged = newState !== prevState;\r","        }\r","\r","        if (isChanged || this.force) {\r","            this._fireEvents(src, {\r","                changed  : changed,\r","                newState : newState,\r","                prevState: prevState,\r","                removed  : removed\r","            }, options);\r","        }\r","    },\r","\r","    /**\r","     * Stores the specified state. Don't call this method directly; go through\r","     * _resolveChanges() to ensure that changes are resolved and all events are\r","     * fired properly.\r","     *\r","     * @method _storeState\r","     * @param {String} src source of the changes\r","     * @param {Object} newState new state to store\r","     * @param {Object} options Zero or more options. See <code>add()</code> for\r","     *   a list of supported options.\r","     * @protected\r","     */\r","    _storeState: function (src, newState) {\r","        // Note: the src and options params aren't used here, but they are used\r","        // by subclasses.\r","        GlobalEnv._state = newState || {};\r","    },\r","\r","    // -- Protected Event Handlers ---------------------------------------------\r","\r","    /**\r","     * Default <code>history:change</code> event handler.\r","     *\r","     * @method _defChangeFn\r","     * @param {EventFacade} e state change event facade\r","     * @protected\r","     */\r","    _defChangeFn: function (e) {\r","        this._storeState(e.src, e.newVal, e._options);\r","    }\r","}, true);\r","\r","Y.HistoryBase = HistoryBase;\r","","","}, '@VERSION@', {\"requires\": [\"event-custom-complex\"]});","","}());"]};
}
var __cov_tUpnrk9X1lAU31qwSqNljg = __coverage__['build/history-base/history-base.js'];
__cov_tUpnrk9X1lAU31qwSqNljg.s['1']++;YUI.add('history-base',function(Y,NAME){__cov_tUpnrk9X1lAU31qwSqNljg.f['1']++;__cov_tUpnrk9X1lAU31qwSqNljg.s['2']++;var Lang=Y.Lang,Obj=Y.Object,GlobalEnv=YUI.namespace('Env.History'),YArray=Y.Array,doc=Y.config.doc,docMode=doc.documentMode,win=Y.config.win,DEFAULT_OPTIONS={merge:true},EVT_CHANGE='change',SRC_ADD='add',SRC_REPLACE='replace';__cov_tUpnrk9X1lAU31qwSqNljg.s['3']++;function HistoryBase(){__cov_tUpnrk9X1lAU31qwSqNljg.f['2']++;__cov_tUpnrk9X1lAU31qwSqNljg.s['4']++;this._init.apply(this,arguments);}__cov_tUpnrk9X1lAU31qwSqNljg.s['5']++;Y.augment(HistoryBase,Y.EventTarget,null,null,{emitFacade:true,prefix:'history',preventable:false,queueable:true});__cov_tUpnrk9X1lAU31qwSqNljg.s['6']++;if(!GlobalEnv._state){__cov_tUpnrk9X1lAU31qwSqNljg.b['1'][0]++;__cov_tUpnrk9X1lAU31qwSqNljg.s['7']++;GlobalEnv._state={};}else{__cov_tUpnrk9X1lAU31qwSqNljg.b['1'][1]++;}__cov_tUpnrk9X1lAU31qwSqNljg.s['8']++;function _isSimpleObject(value){__cov_tUpnrk9X1lAU31qwSqNljg.f['3']++;__cov_tUpnrk9X1lAU31qwSqNljg.s['9']++;return Lang.type(value)==='object';}__cov_tUpnrk9X1lAU31qwSqNljg.s['10']++;HistoryBase.NAME='historyBase';__cov_tUpnrk9X1lAU31qwSqNljg.s['11']++;HistoryBase.SRC_ADD=SRC_ADD;__cov_tUpnrk9X1lAU31qwSqNljg.s['12']++;HistoryBase.SRC_REPLACE=SRC_REPLACE;__cov_tUpnrk9X1lAU31qwSqNljg.s['13']++;HistoryBase.html5=!!((__cov_tUpnrk9X1lAU31qwSqNljg.b['2'][0]++,win.history)&&(__cov_tUpnrk9X1lAU31qwSqNljg.b['2'][1]++,win.history.pushState)&&(__cov_tUpnrk9X1lAU31qwSqNljg.b['2'][2]++,win.history.replaceState)&&((__cov_tUpnrk9X1lAU31qwSqNljg.b['2'][3]++,'onpopstate'in win)||(__cov_tUpnrk9X1lAU31qwSqNljg.b['2'][4]++,Y.UA.gecko>=2))&&((__cov_tUpnrk9X1lAU31qwSqNljg.b['2'][5]++,!Y.UA.android)||(__cov_tUpnrk9X1lAU31qwSqNljg.b['2'][6]++,Y.UA.android>=2.4)));__cov_tUpnrk9X1lAU31qwSqNljg.s['14']++;HistoryBase.nativeHashChange=((__cov_tUpnrk9X1lAU31qwSqNljg.b['3'][0]++,'onhashchange'in win)||(__cov_tUpnrk9X1lAU31qwSqNljg.b['3'][1]++,'onhashchange'in doc))&&((__cov_tUpnrk9X1lAU31qwSqNljg.b['3'][2]++,!docMode)||(__cov_tUpnrk9X1lAU31qwSqNljg.b['3'][3]++,docMode>7));__cov_tUpnrk9X1lAU31qwSqNljg.s['15']++;Y.mix(HistoryBase.prototype,{_init:function(config){__cov_tUpnrk9X1lAU31qwSqNljg.f['4']++;__cov_tUpnrk9X1lAU31qwSqNljg.s['16']++;var initialState;__cov_tUpnrk9X1lAU31qwSqNljg.s['17']++;config=this._config=(__cov_tUpnrk9X1lAU31qwSqNljg.b['4'][0]++,config)||(__cov_tUpnrk9X1lAU31qwSqNljg.b['4'][1]++,{});__cov_tUpnrk9X1lAU31qwSqNljg.s['18']++;this.force=!!config.force;__cov_tUpnrk9X1lAU31qwSqNljg.s['19']++;initialState=this._initialState=(__cov_tUpnrk9X1lAU31qwSqNljg.b['5'][0]++,this._initialState)||(__cov_tUpnrk9X1lAU31qwSqNljg.b['5'][1]++,config.initialState)||(__cov_tUpnrk9X1lAU31qwSqNljg.b['5'][2]++,null);__cov_tUpnrk9X1lAU31qwSqNljg.s['20']++;this.publish(EVT_CHANGE,{broadcast:2,defaultFn:this._defChangeFn});__cov_tUpnrk9X1lAU31qwSqNljg.s['21']++;if(initialState){__cov_tUpnrk9X1lAU31qwSqNljg.b['6'][0]++;__cov_tUpnrk9X1lAU31qwSqNljg.s['22']++;this.replace(initialState);}else{__cov_tUpnrk9X1lAU31qwSqNljg.b['6'][1]++;}},add:function(){__cov_tUpnrk9X1lAU31qwSqNljg.f['5']++;__cov_tUpnrk9X1lAU31qwSqNljg.s['23']++;var args=YArray(arguments,0,true);__cov_tUpnrk9X1lAU31qwSqNljg.s['24']++;args.unshift(SRC_ADD);__cov_tUpnrk9X1lAU31qwSqNljg.s['25']++;return this._change.apply(this,args);},addValue:function(key,value,options){__cov_tUpnrk9X1lAU31qwSqNljg.f['6']++;__cov_tUpnrk9X1lAU31qwSqNljg.s['26']++;var state={};__cov_tUpnrk9X1lAU31qwSqNljg.s['27']++;state[key]=value;__cov_tUpnrk9X1lAU31qwSqNljg.s['28']++;return this._change(SRC_ADD,state,options);},get:function(key){__cov_tUpnrk9X1lAU31qwSqNljg.f['7']++;__cov_tUpnrk9X1lAU31qwSqNljg.s['29']++;var state=GlobalEnv._state,isObject=_isSimpleObject(state);__cov_tUpnrk9X1lAU31qwSqNljg.s['30']++;if(key){__cov_tUpnrk9X1lAU31qwSqNljg.b['7'][0]++;__cov_tUpnrk9X1lAU31qwSqNljg.s['31']++;return(__cov_tUpnrk9X1lAU31qwSqNljg.b['9'][0]++,isObject)&&(__cov_tUpnrk9X1lAU31qwSqNljg.b['9'][1]++,Obj.owns(state,key))?(__cov_tUpnrk9X1lAU31qwSqNljg.b['8'][0]++,state[key]):(__cov_tUpnrk9X1lAU31qwSqNljg.b['8'][1]++,undefined);}else{__cov_tUpnrk9X1lAU31qwSqNljg.b['7'][1]++;__cov_tUpnrk9X1lAU31qwSqNljg.s['32']++;return isObject?(__cov_tUpnrk9X1lAU31qwSqNljg.b['10'][0]++,Y.mix({},state,true)):(__cov_tUpnrk9X1lAU31qwSqNljg.b['10'][1]++,state);}},replace:function(){__cov_tUpnrk9X1lAU31qwSqNljg.f['8']++;__cov_tUpnrk9X1lAU31qwSqNljg.s['33']++;var args=YArray(arguments,0,true);__cov_tUpnrk9X1lAU31qwSqNljg.s['34']++;args.unshift(SRC_REPLACE);__cov_tUpnrk9X1lAU31qwSqNljg.s['35']++;return this._change.apply(this,args);},replaceValue:function(key,value,options){__cov_tUpnrk9X1lAU31qwSqNljg.f['9']++;__cov_tUpnrk9X1lAU31qwSqNljg.s['36']++;var state={};__cov_tUpnrk9X1lAU31qwSqNljg.s['37']++;state[key]=value;__cov_tUpnrk9X1lAU31qwSqNljg.s['38']++;return this._change(SRC_REPLACE,state,options);},_change:function(src,state,options){__cov_tUpnrk9X1lAU31qwSqNljg.f['10']++;__cov_tUpnrk9X1lAU31qwSqNljg.s['39']++;options=options?(__cov_tUpnrk9X1lAU31qwSqNljg.b['11'][0]++,Y.merge(DEFAULT_OPTIONS,options)):(__cov_tUpnrk9X1lAU31qwSqNljg.b['11'][1]++,DEFAULT_OPTIONS);__cov_tUpnrk9X1lAU31qwSqNljg.s['40']++;if((__cov_tUpnrk9X1lAU31qwSqNljg.b['13'][0]++,options.merge)&&(__cov_tUpnrk9X1lAU31qwSqNljg.b['13'][1]++,_isSimpleObject(state))&&(__cov_tUpnrk9X1lAU31qwSqNljg.b['13'][2]++,_isSimpleObject(GlobalEnv._state))){__cov_tUpnrk9X1lAU31qwSqNljg.b['12'][0]++;__cov_tUpnrk9X1lAU31qwSqNljg.s['41']++;state=Y.merge(GlobalEnv._state,state);}else{__cov_tUpnrk9X1lAU31qwSqNljg.b['12'][1]++;}__cov_tUpnrk9X1lAU31qwSqNljg.s['42']++;this._resolveChanges(src,state,options);__cov_tUpnrk9X1lAU31qwSqNljg.s['43']++;return this;},_fireEvents:function(src,changes,options){__cov_tUpnrk9X1lAU31qwSqNljg.f['11']++;__cov_tUpnrk9X1lAU31qwSqNljg.s['44']++;this.fire(EVT_CHANGE,{_options:options,changed:changes.changed,newVal:changes.newState,prevVal:changes.prevState,removed:changes.removed,src:src});__cov_tUpnrk9X1lAU31qwSqNljg.s['45']++;Obj.each(changes.changed,function(value,key){__cov_tUpnrk9X1lAU31qwSqNljg.f['12']++;__cov_tUpnrk9X1lAU31qwSqNljg.s['46']++;this._fireChangeEvent(src,key,value);},this);__cov_tUpnrk9X1lAU31qwSqNljg.s['47']++;Obj.each(changes.removed,function(value,key){__cov_tUpnrk9X1lAU31qwSqNljg.f['13']++;__cov_tUpnrk9X1lAU31qwSqNljg.s['48']++;this._fireRemoveEvent(src,key,value);},this);},_fireChangeEvent:function(src,key,value){__cov_tUpnrk9X1lAU31qwSqNljg.f['14']++;__cov_tUpnrk9X1lAU31qwSqNljg.s['49']++;this.fire(key+'Change',{newVal:value.newVal,prevVal:value.prevVal,src:src});},_fireRemoveEvent:function(src,key,value){__cov_tUpnrk9X1lAU31qwSqNljg.f['15']++;__cov_tUpnrk9X1lAU31qwSqNljg.s['50']++;this.fire(key+'Remove',{prevVal:value,src:src});},_resolveChanges:function(src,newState,options){__cov_tUpnrk9X1lAU31qwSqNljg.f['16']++;__cov_tUpnrk9X1lAU31qwSqNljg.s['51']++;var changed={},isChanged,prevState=GlobalEnv._state,removed={};__cov_tUpnrk9X1lAU31qwSqNljg.s['52']++;(__cov_tUpnrk9X1lAU31qwSqNljg.b['14'][0]++,newState)||(__cov_tUpnrk9X1lAU31qwSqNljg.b['14'][1]++,newState={});__cov_tUpnrk9X1lAU31qwSqNljg.s['53']++;(__cov_tUpnrk9X1lAU31qwSqNljg.b['15'][0]++,options)||(__cov_tUpnrk9X1lAU31qwSqNljg.b['15'][1]++,options={});__cov_tUpnrk9X1lAU31qwSqNljg.s['54']++;if((__cov_tUpnrk9X1lAU31qwSqNljg.b['17'][0]++,_isSimpleObject(newState))&&(__cov_tUpnrk9X1lAU31qwSqNljg.b['17'][1]++,_isSimpleObject(prevState))){__cov_tUpnrk9X1lAU31qwSqNljg.b['16'][0]++;__cov_tUpnrk9X1lAU31qwSqNljg.s['55']++;Obj.each(newState,function(newVal,key){__cov_tUpnrk9X1lAU31qwSqNljg.f['17']++;__cov_tUpnrk9X1lAU31qwSqNljg.s['56']++;var prevVal=prevState[key];__cov_tUpnrk9X1lAU31qwSqNljg.s['57']++;if(newVal!==prevVal){__cov_tUpnrk9X1lAU31qwSqNljg.b['18'][0]++;__cov_tUpnrk9X1lAU31qwSqNljg.s['58']++;changed[key]={newVal:newVal,prevVal:prevVal};__cov_tUpnrk9X1lAU31qwSqNljg.s['59']++;isChanged=true;}else{__cov_tUpnrk9X1lAU31qwSqNljg.b['18'][1]++;}},this);__cov_tUpnrk9X1lAU31qwSqNljg.s['60']++;Obj.each(prevState,function(prevVal,key){__cov_tUpnrk9X1lAU31qwSqNljg.f['18']++;__cov_tUpnrk9X1lAU31qwSqNljg.s['61']++;if((__cov_tUpnrk9X1lAU31qwSqNljg.b['20'][0]++,!Obj.owns(newState,key))||(__cov_tUpnrk9X1lAU31qwSqNljg.b['20'][1]++,newState[key]===null)){__cov_tUpnrk9X1lAU31qwSqNljg.b['19'][0]++;__cov_tUpnrk9X1lAU31qwSqNljg.s['62']++;delete newState[key];__cov_tUpnrk9X1lAU31qwSqNljg.s['63']++;removed[key]=prevVal;__cov_tUpnrk9X1lAU31qwSqNljg.s['64']++;isChanged=true;}else{__cov_tUpnrk9X1lAU31qwSqNljg.b['19'][1]++;}},this);}else{__cov_tUpnrk9X1lAU31qwSqNljg.b['16'][1]++;__cov_tUpnrk9X1lAU31qwSqNljg.s['65']++;isChanged=newState!==prevState;}__cov_tUpnrk9X1lAU31qwSqNljg.s['66']++;if((__cov_tUpnrk9X1lAU31qwSqNljg.b['22'][0]++,isChanged)||(__cov_tUpnrk9X1lAU31qwSqNljg.b['22'][1]++,this.force)){__cov_tUpnrk9X1lAU31qwSqNljg.b['21'][0]++;__cov_tUpnrk9X1lAU31qwSqNljg.s['67']++;this._fireEvents(src,{changed:changed,newState:newState,prevState:prevState,removed:removed},options);}else{__cov_tUpnrk9X1lAU31qwSqNljg.b['21'][1]++;}},_storeState:function(src,newState){__cov_tUpnrk9X1lAU31qwSqNljg.f['19']++;__cov_tUpnrk9X1lAU31qwSqNljg.s['68']++;GlobalEnv._state=(__cov_tUpnrk9X1lAU31qwSqNljg.b['23'][0]++,newState)||(__cov_tUpnrk9X1lAU31qwSqNljg.b['23'][1]++,{});},_defChangeFn:function(e){__cov_tUpnrk9X1lAU31qwSqNljg.f['20']++;__cov_tUpnrk9X1lAU31qwSqNljg.s['69']++;this._storeState(e.src,e.newVal,e._options);}},true);__cov_tUpnrk9X1lAU31qwSqNljg.s['70']++;Y.HistoryBase=HistoryBase;},'@VERSION@',{'requires':['event-custom-complex']});
