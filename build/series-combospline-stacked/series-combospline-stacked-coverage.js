if (typeof __coverage__ === 'undefined') { __coverage__ = {}; }
if (!__coverage__['build/series-combospline-stacked/series-combospline-stacked.js']) {
   __coverage__['build/series-combospline-stacked/series-combospline-stacked.js'] = {"path":"build/series-combospline-stacked/series-combospline-stacked.js","s":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":38},"end":{"line":1,"column":57}}},"2":{"name":"(anonymous_2)","line":30,"loc":{"start":{"line":30,"column":13},"end":{"line":31,"column":4}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":72,"column":77}},"2":{"start":{"line":22,"column":0},"end":{"line":69,"column":3}},"3":{"start":{"line":32,"column":8},"end":{"line":35,"column":9}},"4":{"start":{"line":34,"column":12},"end":{"line":34,"column":41}},"5":{"start":{"line":36,"column":8},"end":{"line":39,"column":9}},"6":{"start":{"line":38,"column":12},"end":{"line":38,"column":30}},"7":{"start":{"line":40,"column":8},"end":{"line":43,"column":9}},"8":{"start":{"line":42,"column":12},"end":{"line":42,"column":29}}},"branchMap":{"1":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":8},"end":{"line":32,"column":8}},{"start":{"line":32,"column":8},"end":{"line":32,"column":8}}]},"2":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":8},"end":{"line":36,"column":8}},{"start":{"line":36,"column":8},"end":{"line":36,"column":8}}]},"3":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":8},"end":{"line":40,"column":8}},{"start":{"line":40,"column":8},"end":{"line":40,"column":8}}]}},"code":["(function () { YUI.add('series-combospline-stacked', function (Y, NAME) {","","/**\r"," * Provides functionality for creating a stacked combospline series.\r"," *\r"," * @module charts\r"," * @submodule series-combospline-stacked\r"," */\r","/**\r"," * The StackedComboSplineSeries class renders a combination of splines, plots and areaspline fills in a single series. Series\r"," * are stacked along the value axis to indicate each series contribution to a cumulative total. Each\r"," * series type has a corresponding boolean attribute indicating if it is rendered. By default, all three types are\r"," * rendered.\r"," *\r"," * @class StackedComboSplineSeries\r"," * @extends StackedComboSeries\r"," * @uses CurveUtil\r"," * @constructor\r"," * @param {Object} config (optional) Configuration parameters.\r"," * @submodule series-combospline-stacked\r"," */\r","Y.StackedComboSplineSeries = Y.Base.create(\"stackedComboSplineSeries\", Y.StackedComboSeries, [Y.CurveUtil], {\r","    /**\r","\t * @protected\r","     *\r","     * Draws the series.\r","     *\r","     * @method drawSeries\r","\t */\r","\tdrawSeries: function()\r","    {\r","        if(this.get(\"showAreaFill\"))\r","        {\r","            this.drawStackedAreaSpline();\r","        }\r","        if(this.get(\"showLines\"))\r","        {\r","            this.drawSpline();\r","        }\r","        if(this.get(\"showMarkers\"))\r","        {\r","            this.drawPlots();\r","        }\r","    }\r","}, {\r","    ATTRS: {\r","        /**\r","         * Read-only attribute indicating the type of series.\r","         *\r","         * @attribute type\r","         * @type String\r","         * @default stackedComboSpline\r","         */\r","        type : {\r","            value : \"stackedComboSpline\"\r","        },\r","\r","        /**\r","         * Indicates whether a fill is displayed.\r","         *\r","         * @attribute showAreaFill\r","         * @type Boolean\r","         * @default true\r","         */\r","        showAreaFill: {\r","            value: true\r","        }\r","    }\r","});\r","","","}, '@VERSION@', {\"requires\": [\"series-combo-stacked\", \"series-curve-util\"]});","","}());"]};
}
var __cov_K_9pqCnGyFTnTVOp6cAc6g = __coverage__['build/series-combospline-stacked/series-combospline-stacked.js'];
__cov_K_9pqCnGyFTnTVOp6cAc6g.s['1']++;YUI.add('series-combospline-stacked',function(Y,NAME){__cov_K_9pqCnGyFTnTVOp6cAc6g.f['1']++;__cov_K_9pqCnGyFTnTVOp6cAc6g.s['2']++;Y.StackedComboSplineSeries=Y.Base.create('stackedComboSplineSeries',Y.StackedComboSeries,[Y.CurveUtil],{drawSeries:function(){__cov_K_9pqCnGyFTnTVOp6cAc6g.f['2']++;__cov_K_9pqCnGyFTnTVOp6cAc6g.s['3']++;if(this.get('showAreaFill')){__cov_K_9pqCnGyFTnTVOp6cAc6g.b['1'][0]++;__cov_K_9pqCnGyFTnTVOp6cAc6g.s['4']++;this.drawStackedAreaSpline();}else{__cov_K_9pqCnGyFTnTVOp6cAc6g.b['1'][1]++;}__cov_K_9pqCnGyFTnTVOp6cAc6g.s['5']++;if(this.get('showLines')){__cov_K_9pqCnGyFTnTVOp6cAc6g.b['2'][0]++;__cov_K_9pqCnGyFTnTVOp6cAc6g.s['6']++;this.drawSpline();}else{__cov_K_9pqCnGyFTnTVOp6cAc6g.b['2'][1]++;}__cov_K_9pqCnGyFTnTVOp6cAc6g.s['7']++;if(this.get('showMarkers')){__cov_K_9pqCnGyFTnTVOp6cAc6g.b['3'][0]++;__cov_K_9pqCnGyFTnTVOp6cAc6g.s['8']++;this.drawPlots();}else{__cov_K_9pqCnGyFTnTVOp6cAc6g.b['3'][1]++;}}},{ATTRS:{type:{value:'stackedComboSpline'},showAreaFill:{value:true}}});},'@VERSION@',{'requires':['series-combo-stacked','series-curve-util']});
